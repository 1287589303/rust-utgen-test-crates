{
  "name": "regex_automata::dfa::search::find_fwd_imp",
  "mod_info": {
    "name": "dfa::search",
    "loc": "regex-automata/src/dfa/mod.rs:356:1:356:12"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/search.rs:45:1:186:2",
  "doc": "",
  "code": [
    "fn find_fwd_imp<A: Automaton + ?Sized>(",
    "    dfa: &A,",
    "    input: &Input<'_>,",
    "    pre: Option<&'_ Prefilter>,",
    "    earliest: bool,",
    ") -> Result<Option<HalfMatch>, MatchError> {",
    "    // See 'prefilter_restart' docs for explanation.",
    "    let universal_start = dfa.universal_start_state(Anchored::No).is_some();",
    "    let mut mat = None;",
    "    let mut sid = init_fwd(dfa, input)?;",
    "    let mut at = input.start();",
    "    // This could just be a closure, but then I think it would be unsound",
    "    // because it would need to be safe to invoke. This way, the lack of safety",
    "    // is clearer in the code below.",
    "    macro_rules! next_unchecked {",
    "        ($sid:expr, $at:expr) => {{",
    "            let byte = *input.haystack().get_unchecked($at);",
    "            dfa.next_state_unchecked($sid, byte)",
    "        }};",
    "    }",
    "",
    "    if let Some(ref pre) = pre {",
    "        let span = Span::from(at..input.end());",
    "        // If a prefilter doesn't report false positives, then we don't need to",
    "        // touch the DFA at all. However, since all matches include the pattern",
    "        // ID, and the prefilter infrastructure doesn't report pattern IDs, we",
    "        // limit this optimization to cases where there is exactly one pattern.",
    "        // In that case, any match must be the 0th pattern.",
    "        match pre.find(input.haystack(), span) {",
    "            None => return Ok(mat),",
    "            Some(ref span) => {",
    "                at = span.start;",
    "                if !universal_start {",
    "                    sid = prefilter_restart(dfa, &input, at)?;",
    "                }",
    "            }",
    "        }",
    "    }",
    "    while at < input.end() {",
    "        // SAFETY: There are two safety invariants we need to uphold here in",
    "        // the loops below: that 'sid' and 'prev_sid' are valid state IDs",
    "        // for this DFA, and that 'at' is a valid index into 'haystack'.",
    "        // For the former, we rely on the invariant that next_state* and",
    "        // start_state_forward always returns a valid state ID (given a valid",
    "        // state ID in the former case). For the latter safety invariant, we",
    "        // always guard unchecked access with a check that 'at' is less than",
    "        // 'end', where 'end <= haystack.len()'. In the unrolled loop below, we",
    "        // ensure that 'at' is always in bounds.",
    "        //",
    "        // PERF: See a similar comment in src/hybrid/search.rs that justifies",
    "        // this extra work to make the search loop fast. The same reasoning and",
    "        // benchmarks apply here.",
    "        let mut prev_sid;",
    "        while at < input.end() {",
    "            prev_sid = unsafe { next_unchecked!(sid, at) };",
    "            if dfa.is_special_state(prev_sid) || at + 3 >= input.end() {",
    "                core::mem::swap(&mut prev_sid, &mut sid);",
    "                break;",
    "            }",
    "            at += 1;",
    "",
    "            sid = unsafe { next_unchecked!(prev_sid, at) };",
    "            if dfa.is_special_state(sid) {",
    "                break;",
    "            }",
    "            at += 1;",
    "",
    "            prev_sid = unsafe { next_unchecked!(sid, at) };",
    "            if dfa.is_special_state(prev_sid) {",
    "                core::mem::swap(&mut prev_sid, &mut sid);",
    "                break;",
    "            }",
    "            at += 1;",
    "",
    "            sid = unsafe { next_unchecked!(prev_sid, at) };",
    "            if dfa.is_special_state(sid) {",
    "                break;",
    "            }",
    "            at += 1;",
    "        }",
    "        if dfa.is_special_state(sid) {",
    "            if dfa.is_start_state(sid) {",
    "                if let Some(ref pre) = pre {",
    "                    let span = Span::from(at..input.end());",
    "                    match pre.find(input.haystack(), span) {",
    "                        None => return Ok(mat),",
    "                        Some(ref span) => {",
    "                            // We want to skip any update to 'at' below",
    "                            // at the end of this iteration and just",
    "                            // jump immediately back to the next state",
    "                            // transition at the leading position of the",
    "                            // candidate match.",
    "                            //",
    "                            // ... but only if we actually made progress",
    "                            // with our prefilter, otherwise if the start",
    "                            // state has a self-loop, we can get stuck.",
    "                            if span.start > at {",
    "                                at = span.start;",
    "                                if !universal_start {",
    "                                    sid = prefilter_restart(dfa, &input, at)?;",
    "                                }",
    "                                continue;",
    "                            }",
    "                        }",
    "                    }",
    "                } else if dfa.is_accel_state(sid) {",
    "                    let needles = dfa.accelerator(sid);",
    "                    at = accel::find_fwd(needles, input.haystack(), at + 1)",
    "                        .unwrap_or(input.end());",
    "                    continue;",
    "                }",
    "            } else if dfa.is_match_state(sid) {",
    "                let pattern = dfa.match_pattern(sid, 0);",
    "                mat = Some(HalfMatch::new(pattern, at));",
    "                if earliest {",
    "                    return Ok(mat);",
    "                }",
    "                if dfa.is_accel_state(sid) {",
    "                    let needles = dfa.accelerator(sid);",
    "                    at = accel::find_fwd(needles, input.haystack(), at + 1)",
    "                        .unwrap_or(input.end());",
    "                    continue;",
    "                }",
    "            } else if dfa.is_accel_state(sid) {",
    "                let needs = dfa.accelerator(sid);",
    "                at = accel::find_fwd(needs, input.haystack(), at + 1)",
    "                    .unwrap_or(input.end());",
    "                continue;",
    "            } else if dfa.is_dead_state(sid) {",
    "                return Ok(mat);",
    "            } else {",
    "                // It's important that this is a debug_assert, since this can",
    "                // actually be tripped even if DFA::from_bytes succeeds and",
    "                // returns a supposedly valid DFA.",
    "                return Err(MatchError::quit(input.haystack()[at], at));",
    "            }",
    "        }",
    "        at += 1;",
    "    }",
    "    eoi_fwd(dfa, input, &mut sid, &mut mat)?;",
    "    Ok(mat)",
    "}"
  ],
  "size": {
    "chain": 492,
    "contra": 393,
    "min_set": 20
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Err/None",
          "line": 54,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        177,
        178,
        179,
        180
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 78,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 79,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 80,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 81,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 82,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 83,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 84,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 85,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 86,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 87,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 88,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 89,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 90,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 91,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 92,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 93,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 94,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 95,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 96,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 97,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 98,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 99,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 100,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 101,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 102,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 103,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 104,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 105,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 106,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 107,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 108,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 109,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 110,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 111,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 112,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 113,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 114,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 115,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 116,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 117,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 118,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 119,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 120,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 121,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 122,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 123,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 124,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 125,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 126,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 127,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 128,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 129,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 130,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 131,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 132,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 133,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 134,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 135,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 136,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 137,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 138,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 139,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 140,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 141,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 142,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 143,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 144,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 145,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 146,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 147,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 148,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 149,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 150,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 151,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 152,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 153,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 154,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 155,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 156,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 157,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 158,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 159,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 160,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 161,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 162,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 163,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 164,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        33,
        34,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 165,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 166,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 167,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 168,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 169,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 170,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 171,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 172,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 173,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 174,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 175,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 176,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 177,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 178,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 179,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 180,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 181,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 182,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 183,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 184,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 185,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 186,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 187,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 188,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 189,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 190,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 191,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 192,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 193,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 194,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 195,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 196,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 197,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 198,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 199,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 200,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 201,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 202,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 203,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 204,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 205,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 206,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 207,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 208,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 209,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 210,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 211,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 212,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 213,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 214,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 215,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 216,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 217,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 218,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 219,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 220,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 221,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 222,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 223,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 224,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 225,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 226,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 227,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 228,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 229,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 230,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 231,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 232,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 233,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 234,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 235,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 236,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 237,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 238,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 239,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 240,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 241,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 242,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 243,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 244,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 245,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 246,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 247,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 248,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 249,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 250,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 251,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 252,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 253,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 254,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 255,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 256,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 257,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 258,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 259,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 260,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 261,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 262,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 263,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 264,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 265,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 266,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 267,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 268,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 269,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 270,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 271,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 272,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 273,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 274,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 275,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 276,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 277,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 278,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 279,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 280,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 281,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 282,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 283,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 284,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 285,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 286,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 287,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 288,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 289,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 290,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 291,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 292,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 293,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 294,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 295,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 296,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 297,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 298,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 299,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 300,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 301,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 302,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 303,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 304,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 305,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 306,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 307,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 308,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 309,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 310,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 311,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 312,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 313,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 314,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 315,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 316,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 317,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 318,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 319,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 320,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 321,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 322,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 323,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 324,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 325,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 326,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 327,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        31,
        32,
        34,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 328,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        26,
        28,
        29,
        173,
        174,
        175,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 329,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 330,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 331,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 332,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 333,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 334,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 335,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 336,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 337,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 338,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 339,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 340,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 341,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 342,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 343,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 344,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 345,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 346,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 347,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 348,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 349,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 350,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 351,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        52,
        53,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 352,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 353,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 354,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 355,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 356,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 357,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 358,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 359,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 360,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 361,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 362,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 363,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 364,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 365,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 366,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 367,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 368,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 369,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 370,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 371,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 372,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 373,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 374,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        53,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 375,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 376,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 377,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 378,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 379,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 380,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 381,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 382,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 383,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 384,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 385,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 386,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 387,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 388,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 389,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 390,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 391,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 392,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 393,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 394,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 395,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 396,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 397,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 398,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 399,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 400,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 401,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 402,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 403,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 404,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 405,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 406,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 407,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 408,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 409,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 410,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 411,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 412,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 413,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 414,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 415,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 416,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 417,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 418,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 419,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 420,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 421,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 422,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 423,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 424,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 425,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 426,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 427,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 428,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 429,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 430,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 431,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 432,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 433,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 434,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 435,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 436,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 437,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 438,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 439,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 440,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 441,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 442,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 443,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 444,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 445,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 446,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 447,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 448,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 449,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 450,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 451,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 452,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 453,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 454,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 455,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 456,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 457,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 458,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 459,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 460,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 461,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 462,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 463,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 464,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 465,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 466,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(prev_sid)",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        39,
        40,
        41,
        78,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 467,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 468,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 469,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 470,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 150,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        107,
        108,
        116,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 471,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 472,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        104,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 473,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 144,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        99,
        101,
        102,
        169,
        170,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 474,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 475,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 141,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        94,
        95,
        96,
        97,
        100,
        103,
        105,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 476,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 477,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 141,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        106,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 478,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 126,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 129,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        171,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 479,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        122,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 480,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 481,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 482,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 483,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        119,
        120,
        121,
        123,
        124,
        132,
        150,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 484,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 485,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        155,
        156,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 486,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        144,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 487,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 126,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 156,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        117,
        118,
        133,
        134,
        142,
        143,
        145,
        146,
        147,
        148,
        149,
        167,
        168,
        172,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 488,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 489,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        151,
        152,
        153,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 490,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 184,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        154,
        157,
        158,
        160,
        162,
        163,
        165,
        166,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 491,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 77,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        27,
        30,
        32,
        34,
        35,
        36,
        37,
        154,
        157,
        158,
        161,
        164,
        180
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 492,
      "conds": [
        {
          "cond": "init_fwd(dfa, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 54,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 66,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        175,
        176,
        179,
        180
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}