{
  "name": "regex_automata::meta::regex::{impl#21}::build",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:3359:5:3361:6",
  "doc": "/// Builds a `Regex` from a single pattern string.\n///\n/// If there was a problem parsing the pattern or a problem turning it into\n/// a regex matcher, then an error is returned.\n///\n/// # Example\n///\n/// This example shows how to configure syntax options.\n///\n/// ```\n/// use regex_automata::{meta::Regex, util::syntax, Match};\n///\n/// let re = Regex::builder()\n///     .syntax(syntax::Config::new().crlf(true).multi_line(true))\n///     .build(r\"^foo$\")?;\n/// let hay = \"\\r\\nfoo\\r\\n\";\n/// assert_eq!(Some(Match::must(0, 2..5)), re.find(hay));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn build(&self, pattern: &str) -> Result<Regex, BuildError> {",
    "    self.build_many(&[pattern])",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}