{
  "name": "regex_automata::dfa::onepass::{impl#9}::new",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:2513:5:2517:6",
  "doc": "/// Create a new [`onepass::DFA`](DFA) cache.\n///\n/// A potentially more convenient routine to create a cache is\n/// [`DFA::create_cache`], as it does not require also importing the\n/// `Cache` type.\n///\n/// If you want to reuse the returned `Cache` with some other one-pass DFA,\n/// then you must call [`Cache::reset`] with the desired one-pass DFA.\n",
  "code": [
    "pub fn new(re: &DFA) -> Cache {",
    "    let mut cache = Cache { explicit_slots: vec![], explicit_slot_len: 0 };",
    "    cache.reset(re);",
    "    cache",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "cache",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}