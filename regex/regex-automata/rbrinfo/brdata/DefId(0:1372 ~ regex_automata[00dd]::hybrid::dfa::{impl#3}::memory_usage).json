{
  "name": "regex_automata::hybrid::dfa::{impl#3}::memory_usage",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:2021:5:2038:6",
  "doc": "/// Returns the heap memory usage, in bytes, of this cache.\n///\n/// This does **not** include the stack size used up by this cache. To\n/// compute that, use `std::mem::size_of::<Cache>()`.\n",
  "code": [
    "pub fn memory_usage(&self) -> usize {",
    "    const ID_SIZE: usize = size_of::<LazyStateID>();",
    "    const STATE_SIZE: usize = size_of::<State>();",
    "",
    "    // NOTE: If you make changes to the below, then",
    "    // 'minimum_cache_capacity' should be updated correspondingly.",
    "",
    "    self.trans.len() * ID_SIZE",
    "    + self.starts.len() * ID_SIZE",
    "    + self.states.len() * STATE_SIZE",
    "    // Maps likely use more memory than this, but it's probably close.",
    "    + self.states_to_id.len() * (STATE_SIZE + ID_SIZE)",
    "    + self.sparses.memory_usage()",
    "    + self.stack.capacity() * ID_SIZE",
    "    + self.scratch_state_builder.capacity()",
    "    // Heap memory used by 'State' in both 'states' and 'states_to_id'.",
    "    + self.memory_usage_state",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE\n        + self.states.len() * STATE_SIZE\n        // Maps likely use more memory than this, but it's probably close.\n        + self.states_to_id.len() * (STATE_SIZE + ID_SIZE)\n        + self.sparses.memory_usage()\n        + self.stack.capacity() * ID_SIZE\n        + self.scratch_state_builder.capacity()\n        // Heap memory used by 'State' in both 'states' and 'states_to_id'.\n        + self.memory_usage_state",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}