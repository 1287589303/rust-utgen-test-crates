{
  "name": "regex_automata::dfa::search::find_overlapping_fwd",
  "mod_info": {
    "name": "dfa::search",
    "loc": "regex-automata/src/dfa/mod.rs:356:1:356:12"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/search.rs:312:1:331:2",
  "doc": "",
  "code": [
    "pub fn find_overlapping_fwd<A: Automaton + ?Sized>(",
    "    dfa: &A,",
    "    input: &Input<'_>,",
    "    state: &mut OverlappingState,",
    ") -> Result<(), MatchError> {",
    "    state.mat = None;",
    "    if input.is_done() {",
    "        return Ok(());",
    "    }",
    "    let pre = if input.get_anchored().is_anchored() {",
    "        None",
    "    } else {",
    "        dfa.get_prefilter()",
    "    };",
    "    if pre.is_some() {",
    "        find_overlapping_fwd_imp(dfa, input, pre, state)",
    "    } else {",
    "        find_overlapping_fwd_imp(dfa, input, None, state)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "true",
          "line": 318,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "true",
          "line": 321,
          "bound": null
        },
        {
          "cond": "pre.is_some()",
          "norm": null,
          "value": "true",
          "line": 326,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        12,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "true",
          "line": 321,
          "bound": null
        },
        {
          "cond": "pre.is_some()",
          "norm": null,
          "value": "false",
          "line": 326,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        9,
        10,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 321,
          "bound": null
        },
        {
          "cond": "pre.is_some()",
          "norm": null,
          "value": "true",
          "line": 326,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        16
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 321,
          "bound": null
        },
        {
          "cond": "pre.is_some()",
          "norm": null,
          "value": "false",
          "line": 326,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}