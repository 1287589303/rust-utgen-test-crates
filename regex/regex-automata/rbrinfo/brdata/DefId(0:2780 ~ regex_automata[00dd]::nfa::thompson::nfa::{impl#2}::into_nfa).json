{
  "name": "regex_automata::nfa::thompson::nfa::{impl#2}::into_nfa",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1272:5:1342:6",
  "doc": "/// Runs any last finalization bits and turns this into a full NFA.\n",
  "code": [
    "pub(super) fn into_nfa(mut self) -> NFA {",
    "    self.byte_classes = self.byte_class_set.byte_classes();",
    "    // Do epsilon closure from the start state of every pattern in order",
    "    // to compute various properties such as look-around assertions and",
    "    // whether the empty string can be matched.",
    "    let mut stack = vec![];",
    "    let mut seen = SparseSet::new(self.states.len());",
    "    for &start_id in self.start_pattern.iter() {",
    "        stack.push(start_id);",
    "        seen.clear();",
    "        // let mut prefix_all = LookSet::full();",
    "        let mut prefix_any = LookSet::empty();",
    "        while let Some(sid) = stack.pop() {",
    "            if !seen.insert(sid) {",
    "                continue;",
    "            }",
    "            match self.states[sid] {",
    "                State::ByteRange { .. }",
    "                | State::Dense { .. }",
    "                | State::Fail => continue,",
    "                State::Sparse(_) => {",
    "                    // This snippet below will rewrite this sparse state",
    "                    // as a dense state. By doing it here, we apply this",
    "                    // optimization to all hot \"sparse\" states since these",
    "                    // are the states that are reachable from the start",
    "                    // state via an epsilon closure.",
    "                    //",
    "                    // Unfortunately, this optimization did not seem to",
    "                    // help much in some very limited ad hoc benchmarking.",
    "                    //",
    "                    // I left the 'Dense' state type in place in case we",
    "                    // want to revisit this, but I suspect the real way",
    "                    // to make forward progress is a more fundamental",
    "                    // rearchitecting of how data in the NFA is laid out.",
    "                    // I think we should consider a single contiguous",
    "                    // allocation instead of all this indirection and",
    "                    // potential heap allocations for every state. But this",
    "                    // is a large re-design and will require API breaking",
    "                    // changes.",
    "                    // self.memory_extra -= self.states[sid].memory_usage();",
    "                    // let trans = DenseTransitions::from_sparse(sparse);",
    "                    // self.states[sid] = State::Dense(trans);",
    "                    // self.memory_extra += self.states[sid].memory_usage();",
    "                    continue;",
    "                }",
    "                State::Match { .. } => self.has_empty = true,",
    "                State::Look { look, next } => {",
    "                    prefix_any = prefix_any.insert(look);",
    "                    stack.push(next);",
    "                }",
    "                State::Union { ref alternates } => {",
    "                    // Order doesn't matter here, since we're just dealing",
    "                    // with look-around sets. But if we do richer analysis",
    "                    // here that needs to care about preference order, then",
    "                    // this should be done in reverse.",
    "                    stack.extend(alternates.iter());",
    "                }",
    "                State::BinaryUnion { alt1, alt2 } => {",
    "                    stack.push(alt2);",
    "                    stack.push(alt1);",
    "                }",
    "                State::Capture { next, .. } => {",
    "                    stack.push(next);",
    "                }",
    "            }",
    "        }",
    "        self.look_set_prefix_any =",
    "            self.look_set_prefix_any.union(prefix_any);",
    "    }",
    "    NFA(Arc::new(self))",
    "}"
  ],
  "size": {
    "chain": 12,
    "contra": 11,
    "min_set": 11
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "true",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "false",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": "NFA(Arc::new(self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        47,
        50,
        8,
        9,
        10,
        12,
        14,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "true",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "seen.insert(sid)",
          "norm": null,
          "value": "true",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::Match { .. }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::Match { .. }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "false",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": "NFA(Arc::new(self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        29,
        35,
        46,
        18,
        19,
        20,
        47,
        50,
        8,
        9,
        10,
        12,
        14,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "true",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "seen.insert(sid)",
          "norm": null,
          "value": "true",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::ByteRange { .. } or State::Fail or State::Dense { .. }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "false",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": "NFA(Arc::new(self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        34,
        48,
        49,
        18,
        19,
        20,
        47,
        50,
        8,
        9,
        10,
        12,
        14,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "true",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "seen.insert(sid)",
          "norm": null,
          "value": "true",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::Capture { next, .. }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "false",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": "NFA(Arc::new(self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        33,
        45,
        46,
        18,
        19,
        20,
        47,
        50,
        8,
        9,
        10,
        12,
        14,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "true",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "seen.insert(sid)",
          "norm": null,
          "value": "true",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "false",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": "NFA(Arc::new(self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        32,
        42,
        43,
        44,
        46,
        18,
        19,
        20,
        47,
        50,
        8,
        9,
        10,
        12,
        14,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "true",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "seen.insert(sid)",
          "norm": null,
          "value": "true",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "false",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": "NFA(Arc::new(self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        31,
        39,
        40,
        41,
        46,
        18,
        19,
        20,
        47,
        50,
        8,
        9,
        10,
        12,
        14,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "true",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "seen.insert(sid)",
          "norm": null,
          "value": "true",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "false",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": "NFA(Arc::new(self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        30,
        36,
        37,
        38,
        46,
        18,
        19,
        20,
        47,
        50,
        8,
        9,
        10,
        12,
        14,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "true",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "seen.insert(sid)",
          "norm": null,
          "value": "true",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::Dense { .. }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::ByteRange { .. } or State::Fail or State::Dense { .. }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "false",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": "NFA(Arc::new(self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        34,
        48,
        49,
        18,
        19,
        20,
        47,
        50,
        8,
        9,
        10,
        12,
        14,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "true",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "seen.insert(sid)",
          "norm": null,
          "value": "true",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::Sparse(_)",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::Sparse(_)",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "false",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": "NFA(Arc::new(self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        28,
        48,
        49,
        18,
        19,
        20,
        47,
        50,
        8,
        9,
        10,
        12,
        14,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "true",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "seen.insert(sid)",
          "norm": null,
          "value": "true",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::ByteRange { .. }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "self.states[sid] matches State::ByteRange { .. } or State::Fail or State::Dense { .. }",
          "norm": null,
          "value": "true",
          "line": 1288,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "false",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": "NFA(Arc::new(self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        34,
        48,
        49,
        18,
        19,
        20,
        47,
        50,
        8,
        9,
        10,
        12,
        14,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "true",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "seen.insert(sid)",
          "norm": null,
          "value": "false",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "let Some(sid) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1284,
          "bound": null
        },
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "false",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": "NFA(Arc::new(self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        25,
        49,
        18,
        19,
        20,
        47,
        50,
        8,
        9,
        10,
        12,
        14,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "&start_id in self.start_pattern.iter()",
          "norm": null,
          "value": "false",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": "NFA(Arc::new(self))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        51,
        52,
        53,
        54,
        55
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}