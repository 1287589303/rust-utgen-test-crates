{
  "name": "regex_automata::dfa::onepass::{impl#12}::pattern_id",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:2705:5:2712:6",
  "doc": "/// Return the pattern ID in this pattern epsilons if one exists.\n",
  "code": [
    "fn pattern_id(self) -> Option<PatternID> {",
    "    let pid = self.0 >> PatternEpsilons::PATTERN_ID_SHIFT;",
    "    if pid == PatternEpsilons::PATTERN_ID_LIMIT {",
    "        None",
    "    } else {",
    "        Some(PatternID::new_unchecked(pid.as_usize()))",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "pid == PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT == pid",
          "value": "true",
          "line": 2707,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "pid == PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT == pid",
          "value": "false",
          "line": 2707,
          "bound": null
        }
      ],
      "ret": "Some(PatternID::new_unchecked(pid.as_usize()))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}