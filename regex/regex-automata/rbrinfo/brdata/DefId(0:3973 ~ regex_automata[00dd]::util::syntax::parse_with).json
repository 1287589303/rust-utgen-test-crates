{
  "name": "regex_automata::util::syntax::parse_with",
  "mod_info": {
    "name": "util::syntax",
    "loc": "regex-automata/src/util/mod.rs:45:1:45:16"
  },
  "visible": true,
  "loc": "regex-automata/src/util/syntax.rs:86:1:90:2",
  "doc": "/// A convenience routine for parsing a pattern into an HIR value using a\n/// `Config`.\n///\n/// # Example\n///\n/// This shows how to parse a pattern into an HIR value with a non-default\n/// configuration:\n///\n/// ```\n/// use regex_automata::util::syntax;\n///\n/// let hir = syntax::parse_with(\n///     r\"^[a-z]+$\",\n///     &syntax::Config::new().multi_line(true).crlf(true),\n/// )?;\n/// assert!(hir.properties().look_set().contains_anchor_crlf());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn parse_with(pattern: &str, config: &Config) -> Result<Hir, Error> {",
    "    let mut builder = ParserBuilder::new();",
    "    config.apply(&mut builder);",
    "    builder.build().parse(pattern)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}