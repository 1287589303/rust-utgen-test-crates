{
  "name": "regex_automata::dfa::onepass::{impl#2}::add_start_state",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:809:5:824:6",
  "doc": "/// Add a start state to the DFA corresponding to the given NFA starting\n/// state ID.\n///\n/// If adding a state would blow any limits (configured or hard-coded),\n/// then an error is returned.\n///\n/// If the starting state is an anchored state for a particular pattern,\n/// then callers must provide the pattern ID for that starting state.\n/// Callers must also ensure that the first starting state added is the\n/// start state for all patterns, and then each anchored starting state for\n/// each pattern (if necessary) added in order. Otherwise, this panics.\n",
  "code": [
    "fn add_start_state(",
    "    &mut self,",
    "    pid: Option<PatternID>,",
    "    nfa_id: StateID,",
    ") -> Result<StateID, BuildError> {",
    "    match pid {",
    "        // With no pid, this should be the start state for all patterns",
    "        // and thus be the first one.",
    "        None => assert!(self.dfa.starts.is_empty()),",
    "        // With a pid, we want it to be at self.dfa.starts[pid+1].",
    "        Some(pid) => assert!(self.dfa.starts.len() == pid.one_more()),",
    "    }",
    "    let dfa_id = self.add_dfa_state_for_nfa_state(nfa_id)?;",
    "    self.dfa.starts.push(dfa_id);",
    "    Ok(dfa_id)",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "pid matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 814,
          "bound": null
        },
        {
          "cond": "self.dfa.starts.len() == pid.one_more()",
          "norm": "pid.one_more() == self.dfa.starts.len()",
          "value": "true",
          "line": 819,
          "bound": null
        },
        {
          "cond": "self.add_dfa_state_for_nfa_state(nfa_id)?",
          "norm": null,
          "value": "Err/None",
          "line": 821,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        8,
        9,
        10,
        12,
        13,
        14,
        16,
        18,
        19,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "pid matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 814,
          "bound": null
        },
        {
          "cond": "self.dfa.starts.len() == pid.one_more()",
          "norm": "pid.one_more() == self.dfa.starts.len()",
          "value": "true",
          "line": 819,
          "bound": null
        },
        {
          "cond": "self.add_dfa_state_for_nfa_state(nfa_id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 821,
          "bound": null
        }
      ],
      "ret": "Ok(dfa_id)",
      "path": [
        0,
        3,
        8,
        9,
        10,
        12,
        13,
        14,
        17,
        20,
        21,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "pid matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 814,
          "bound": null
        },
        {
          "cond": "self.dfa.starts.len() == pid.one_more()",
          "norm": "pid.one_more() == self.dfa.starts.len()",
          "value": "false",
          "line": 819,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        8,
        9,
        11,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "pid matches None",
          "norm": null,
          "value": "true",
          "line": 814,
          "bound": null
        },
        {
          "cond": "pid matches None",
          "norm": null,
          "value": "true",
          "line": 814,
          "bound": null
        },
        {
          "cond": "self.dfa.starts.is_empty()",
          "norm": null,
          "value": "true",
          "line": 817,
          "bound": null
        },
        {
          "cond": "self.add_dfa_state_for_nfa_state(nfa_id)?",
          "norm": null,
          "value": "Err/None",
          "line": 821,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        16,
        18,
        19,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "pid matches None",
          "norm": null,
          "value": "true",
          "line": 814,
          "bound": null
        },
        {
          "cond": "pid matches None",
          "norm": null,
          "value": "true",
          "line": 814,
          "bound": null
        },
        {
          "cond": "self.dfa.starts.is_empty()",
          "norm": null,
          "value": "true",
          "line": 817,
          "bound": null
        },
        {
          "cond": "self.add_dfa_state_for_nfa_state(nfa_id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 821,
          "bound": null
        }
      ],
      "ret": "Ok(dfa_id)",
      "path": [
        0,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        17,
        20,
        21,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "pid matches None",
          "norm": null,
          "value": "true",
          "line": 814,
          "bound": null
        },
        {
          "cond": "pid matches None",
          "norm": null,
          "value": "true",
          "line": 814,
          "bound": null
        },
        {
          "cond": "self.dfa.starts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 817,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        7,
        29
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}