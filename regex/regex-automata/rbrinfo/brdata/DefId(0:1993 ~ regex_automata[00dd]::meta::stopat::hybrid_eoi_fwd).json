{
  "name": "regex_automata::meta::stopat::hybrid_eoi_fwd",
  "mod_info": {
    "name": "meta::stopat",
    "loc": "regex-automata/src/meta/mod.rs:60:1:60:12"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/stopat.rs:178:1:212:2",
  "doc": "",
  "code": [
    "fn hybrid_eoi_fwd(",
    "    dfa: &crate::hybrid::dfa::DFA,",
    "    cache: &mut crate::hybrid::dfa::Cache,",
    "    input: &Input<'_>,",
    "    sid: &mut crate::hybrid::LazyStateID,",
    "    mat: &mut Option<HalfMatch>,",
    ") -> Result<(), MatchError> {",
    "    let sp = input.get_span();",
    "    match input.haystack().get(sp.end) {",
    "        Some(&b) => {",
    "            *sid = dfa",
    "                .next_state(cache, *sid, b)",
    "                .map_err(|_| MatchError::gave_up(sp.end))?;",
    "            if sid.is_match() {",
    "                let pattern = dfa.match_pattern(cache, *sid, 0);",
    "                *mat = Some(HalfMatch::new(pattern, sp.end));",
    "            } else if sid.is_quit() {",
    "                return Err(MatchError::quit(b, sp.end));",
    "            }",
    "        }",
    "        None => {",
    "            *sid = dfa",
    "                .next_eoi_state(cache, *sid)",
    "                .map_err(|_| MatchError::gave_up(input.haystack().len()))?;",
    "            if sid.is_match() {",
    "                let pattern = dfa.match_pattern(cache, *sid, 0);",
    "                *mat = Some(HalfMatch::new(pattern, input.haystack().len()));",
    "            }",
    "            // N.B. We don't have to check 'is_quit' here because the EOI",
    "            // transition can never lead to a quit state.",
    "            debug_assert!(!sid.is_quit());",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "input.haystack().get(sp.end) matches Some(&b)",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "input.haystack().get(sp.end) matches Some(&b)",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, *sid, b)\n                .map_err(|_| MatchError::gave_up(sp.end))?",
          "norm": null,
          "value": "Err/None",
          "line": 188,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        12,
        14,
        15,
        54,
        55,
        56,
        57,
        58
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "input.haystack().get(sp.end) matches Some(&b)",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "input.haystack().get(sp.end) matches Some(&b)",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, *sid, b)\n                .map_err(|_| MatchError::gave_up(sp.end))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 188,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 191,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        13,
        16,
        17,
        18,
        19,
        20,
        27,
        51,
        58
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "input.haystack().get(sp.end) matches Some(&b)",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "input.haystack().get(sp.end) matches Some(&b)",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, *sid, b)\n                .map_err(|_| MatchError::gave_up(sp.end))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 188,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 191,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 194,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(b, sp.end))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        13,
        16,
        17,
        21,
        22,
        23,
        24,
        25,
        56,
        57,
        58
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "input.haystack().get(sp.end) matches Some(&b)",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "input.haystack().get(sp.end) matches Some(&b)",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, *sid, b)\n                .map_err(|_| MatchError::gave_up(sp.end))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 188,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 191,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 194,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        13,
        16,
        17,
        21,
        22,
        26,
        27,
        51,
        58
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "input.haystack().get(sp.end) matches None",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_eoi_state(cache, *sid)\n                .map_err(|_| MatchError::gave_up(input.haystack().len()))?",
          "norm": null,
          "value": "Err/None",
          "line": 199,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        28,
        29,
        30,
        32,
        34,
        35,
        52,
        53,
        57,
        58
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "input.haystack().get(sp.end) matches None",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_eoi_state(cache, *sid)\n                .map_err(|_| MatchError::gave_up(input.haystack().len()))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 199,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 202,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        45,
        46,
        47,
        67
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "input.haystack().get(sp.end) matches None",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_eoi_state(cache, *sid)\n                .map_err(|_| MatchError::gave_up(input.haystack().len()))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 199,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 202,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        6,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        45,
        46,
        48,
        50,
        51,
        58
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "input.haystack().get(sp.end) matches None",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_eoi_state(cache, *sid)\n                .map_err(|_| MatchError::gave_up(input.haystack().len()))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 199,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 202,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        28,
        29,
        30,
        33,
        36,
        37,
        43,
        44,
        45,
        46,
        47,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "input.haystack().get(sp.end) matches None",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_eoi_state(cache, *sid)\n                .map_err(|_| MatchError::gave_up(input.haystack().len()))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 199,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 202,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        6,
        28,
        29,
        30,
        33,
        36,
        37,
        43,
        44,
        45,
        46,
        48,
        50,
        51,
        58
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}