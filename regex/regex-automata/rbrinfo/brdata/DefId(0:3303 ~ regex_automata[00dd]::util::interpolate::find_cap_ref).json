{
  "name": "regex_automata::util::interpolate::find_cap_ref",
  "mod_info": {
    "name": "util::interpolate",
    "loc": "regex-automata/src/util/mod.rs:35:1:35:21"
  },
  "visible": false,
  "loc": "regex-automata/src/util/interpolate.rs:260:1:290:2",
  "doc": "/// Parses a possible reference to a capture group name in the given text,\n/// starting at the beginning of `replacement`.\n///\n/// If no such valid reference could be found, None is returned.\n///\n/// Note that this returns a \"possible\" reference because this routine doesn't\n/// know whether the reference is to a valid group or not. If it winds up not\n/// being a valid reference, then it should be replaced with the empty string.\n",
  "code": [
    "fn find_cap_ref(replacement: &[u8]) -> Option<CaptureRef<'_>> {",
    "    let mut i = 0;",
    "    let rep: &[u8] = replacement;",
    "    if rep.len() <= 1 || rep[0] != b'$' {",
    "        return None;",
    "    }",
    "    i += 1;",
    "    if rep[i] == b'{' {",
    "        return find_cap_ref_braced(rep, i + 1);",
    "    }",
    "    let mut cap_end = i;",
    "    while rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) {",
    "        cap_end += 1;",
    "    }",
    "    if cap_end == i {",
    "        return None;",
    "    }",
    "    // We just verified that the range 0..cap_end is valid ASCII, so it must",
    "    // therefore be valid UTF-8. If we really cared, we could avoid this UTF-8",
    "    // check via an unchecked conversion or by parsing the number straight from",
    "    // &[u8].",
    "    let cap = core::str::from_utf8(&rep[i..cap_end])",
    "        .expect(\"valid UTF-8 capture name\");",
    "    Some(CaptureRef {",
    "        cap: match cap.parse::<usize>() {",
    "            Ok(i) => Ref::Number(i),",
    "            Err(_) => Ref::Named(cap),",
    "        },",
    "        end: cap_end,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 3,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "rep.len() <= 1",
          "norm": "1 >= rep.len()",
          "value": "true",
          "line": 263,
          "bound": "rep.len() == 1"
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        6,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "rep.len() <= 1",
          "norm": "1 >= rep.len()",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[0] != b'$'",
          "norm": "b'$' != rep[0]",
          "value": "true",
          "line": 263,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "rep.len() <= 1",
          "norm": "1 >= rep.len()",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[0] != b'$'",
          "norm": "b'$' != rep[0]",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[i] == b'{'",
          "norm": "b'{' == rep[i]",
          "value": "false",
          "line": 267,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "rep.len() <= 1",
          "norm": "1 >= rep.len()",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[0] != b'$'",
          "norm": "b'$' != rep[0]",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[i] == b'{'",
          "norm": "b'{' == rep[i]",
          "value": "true",
          "line": 267,
          "bound": null
        },
        {
          "cond": "rep.get(cap_end).copied().map_or(false, is_valid_cap_letter)",
          "norm": null,
          "value": "true",
          "line": 271,
          "bound": null
        },
        {
          "cond": "rep.get(cap_end).copied().map_or(false, is_valid_cap_letter)",
          "norm": null,
          "value": "false",
          "line": 271,
          "bound": null
        },
        {
          "cond": "cap_end == i",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        33,
        34
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "rep.len() <= 1",
          "norm": "1 >= rep.len()",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[0] != b'$'",
          "norm": "b'$' != rep[0]",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[i] == b'{'",
          "norm": "b'{' == rep[i]",
          "value": "true",
          "line": 267,
          "bound": null
        },
        {
          "cond": "rep.get(cap_end).copied().map_or(false, is_valid_cap_letter)",
          "norm": null,
          "value": "true",
          "line": 271,
          "bound": null
        },
        {
          "cond": "rep.get(cap_end).copied().map_or(false, is_valid_cap_letter)",
          "norm": null,
          "value": "false",
          "line": 271,
          "bound": null
        },
        {
          "cond": "cap_end == i",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        },
        {
          "cond": "cap.parse::<usize>() matches Err(_)",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": "Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: cap_end,\n    })",
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        26,
        27,
        30,
        32,
        34
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "rep.len() <= 1",
          "norm": "1 >= rep.len()",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[0] != b'$'",
          "norm": "b'$' != rep[0]",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[i] == b'{'",
          "norm": "b'{' == rep[i]",
          "value": "true",
          "line": 267,
          "bound": null
        },
        {
          "cond": "rep.get(cap_end).copied().map_or(false, is_valid_cap_letter)",
          "norm": null,
          "value": "true",
          "line": 271,
          "bound": null
        },
        {
          "cond": "rep.get(cap_end).copied().map_or(false, is_valid_cap_letter)",
          "norm": null,
          "value": "false",
          "line": 271,
          "bound": null
        },
        {
          "cond": "cap_end == i",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        },
        {
          "cond": "cap.parse::<usize>() matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        },
        {
          "cond": "cap.parse::<usize>() matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": "Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: cap_end,\n    })",
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        26,
        27,
        29,
        31,
        32,
        34
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "rep.len() <= 1",
          "norm": "1 >= rep.len()",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[0] != b'$'",
          "norm": "b'$' != rep[0]",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[i] == b'{'",
          "norm": "b'{' == rep[i]",
          "value": "true",
          "line": 267,
          "bound": null
        },
        {
          "cond": "rep.get(cap_end).copied().map_or(false, is_valid_cap_letter)",
          "norm": null,
          "value": "false",
          "line": 271,
          "bound": null
        },
        {
          "cond": "cap_end == i",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "rep.len() <= 1",
          "norm": "1 >= rep.len()",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[0] != b'$'",
          "norm": "b'$' != rep[0]",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[i] == b'{'",
          "norm": "b'{' == rep[i]",
          "value": "true",
          "line": 267,
          "bound": null
        },
        {
          "cond": "rep.get(cap_end).copied().map_or(false, is_valid_cap_letter)",
          "norm": null,
          "value": "false",
          "line": 271,
          "bound": null
        },
        {
          "cond": "cap_end == i",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        },
        {
          "cond": "cap.parse::<usize>() matches Err(_)",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": "Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: cap_end,\n    })",
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        26,
        27,
        30,
        32,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "rep.len() <= 1",
          "norm": "1 >= rep.len()",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[0] != b'$'",
          "norm": "b'$' != rep[0]",
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "rep[i] == b'{'",
          "norm": "b'{' == rep[i]",
          "value": "true",
          "line": 267,
          "bound": null
        },
        {
          "cond": "rep.get(cap_end).copied().map_or(false, is_valid_cap_letter)",
          "norm": null,
          "value": "false",
          "line": 271,
          "bound": null
        },
        {
          "cond": "cap_end == i",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        },
        {
          "cond": "cap.parse::<usize>() matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        },
        {
          "cond": "cap.parse::<usize>() matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": "Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: cap_end,\n    })",
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        26,
        27,
        29,
        31,
        32,
        34
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}