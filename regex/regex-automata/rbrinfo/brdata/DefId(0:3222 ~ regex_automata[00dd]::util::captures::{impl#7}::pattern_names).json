{
  "name": "regex_automata::util::captures::{impl#7}::pattern_names",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1768:5:1777:6",
  "doc": "/// Return an iterator of all capture groups and their names (if present)\n/// for a particular pattern.\n///\n/// If the given pattern ID is invalid or if this `GroupInfo` is empty,\n/// then the iterator yields no elements.\n///\n/// The number of elements yielded by this iterator is always equal to\n/// the result of calling [`GroupInfo::group_len`] with the same\n/// `PatternID`.\n///\n/// # Example\n///\n/// This example shows how to get a list of all capture group names for\n/// a particular pattern.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, PatternID};\n///\n/// let nfa = NFA::new(r\"(a)(?P<foo>b)(c)(d)(?P<bar>e)\")?;\n/// // The first is the implicit group that is always unnammed. The next\n/// // 5 groups are the explicit groups found in the concrete syntax above.\n/// let expected = vec![None, None, Some(\"foo\"), None, None, Some(\"bar\")];\n/// let got: Vec<Option<&str>> =\n///     nfa.group_info().pattern_names(PatternID::ZERO).collect();\n/// assert_eq!(expected, got);\n///\n/// // Using an invalid pattern ID will result in nothing yielded.\n/// let got = nfa.group_info().pattern_names(PatternID::must(999)).count();\n/// assert_eq!(0, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn pattern_names(&self, pid: PatternID) -> GroupInfoPatternNames<'_> {",
    "    GroupInfoPatternNames {",
    "        it: self",
    "            .0",
    "            .index_to_name",
    "            .get(pid.as_usize())",
    "            .map(|indices| indices.iter())",
    "            .unwrap_or([].iter()),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "GroupInfoPatternNames {\n            it: self\n                .0\n                .index_to_name\n                .get(pid.as_usize())\n                .map(|indices| indices.iter())\n                .unwrap_or([].iter()),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}