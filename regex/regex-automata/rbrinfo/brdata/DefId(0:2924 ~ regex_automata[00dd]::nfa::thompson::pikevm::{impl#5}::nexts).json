{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#5}::nexts",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:1467:5:1490:6",
  "doc": "/// Process the active states in 'curr' to find the states (written to\n/// 'next') we should process for the next byte in the haystack.\n///\n/// 'stack' is used to perform a depth first traversal of the NFA when\n/// computing an epsilon closure.\n///\n/// When a match is found, the slots for that match state (in 'curr') are\n/// copied to 'caps'. Moreover, once a match is seen, processing for 'curr'\n/// stops (unless the PikeVM was configured with MatchKind::All semantics).\n",
  "code": [
    "fn nexts(",
    "    &self,",
    "    stack: &mut Vec<FollowEpsilon>,",
    "    curr: &mut ActiveStates,",
    "    next: &mut ActiveStates,",
    "    input: &Input<'_>,",
    "    at: usize,",
    "    slots: &mut [Option<NonMaxUsize>],",
    ") -> Option<PatternID> {",
    "    instrument!(|c| c.record_state_set(&curr.set));",
    "    let mut pid = None;",
    "    let ActiveStates { ref set, ref mut slot_table } = *curr;",
    "    for sid in set.iter() {",
    "        pid = match self.next(stack, slot_table, next, input, at, sid) {",
    "            None => continue,",
    "            Some(pid) => Some(pid),",
    "        };",
    "        slots.copy_from_slice(slot_table.for_state(sid));",
    "        if !self.config.get_match_kind().continue_past_first_match() {",
    "            break;",
    "        }",
    "    }",
    "    pid",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 2,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1479,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 1480,
          "bound": null
        },
        {
          "cond": "self.config.get_match_kind().continue_past_first_match()",
          "norm": null,
          "value": "true",
          "line": 1485,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1479,
          "bound": null
        }
      ],
      "ret": "pid",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        13,
        14,
        15,
        16,
        17,
        18,
        3,
        4,
        5,
        7,
        9,
        20
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1479,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 1480,
          "bound": null
        },
        {
          "cond": "self.config.get_match_kind().continue_past_first_match()",
          "norm": null,
          "value": "false",
          "line": 1485,
          "bound": null
        }
      ],
      "ret": "pid",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        13,
        14,
        15,
        16,
        17,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1479,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches None",
          "norm": null,
          "value": "true",
          "line": 1480,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches None",
          "norm": null,
          "value": "true",
          "line": 1480,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1479,
          "bound": null
        }
      ],
      "ret": "pid",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        12,
        21,
        3,
        4,
        5,
        7,
        9,
        20
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1479,
          "bound": null
        }
      ],
      "ret": "pid",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}