{
  "name": "regex_automata::util::captures::{impl#3}::fmt",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1223:5:1246:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
    "    struct Key<'a>(usize, Option<&'a str>);",
    "",
    "    impl<'a> core::fmt::Debug for Key<'a> {",
    "        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
    "            write!(f, \"{}\", self.0)?;",
    "            if let Some(name) = self.1 {",
    "                write!(f, \"/{:?}\", name)?;",
    "            }",
    "            Ok(())",
    "        }",
    "    }",
    "",
    "    let mut map = f.debug_map();",
    "    let names = self.caps.group_info().pattern_names(self.pid);",
    "    for (group_index, maybe_name) in names.enumerate() {",
    "        let key = Key(group_index, maybe_name);",
    "        match self.caps.get_group(group_index) {",
    "            None => map.entry(&key, &None::<()>),",
    "            Some(span) => map.entry(&key, &span),",
    "        };",
    "    }",
    "    map.finish()",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(group_index, maybe_name) in names.enumerate()",
          "norm": null,
          "value": "true",
          "line": 1238,
          "bound": null
        },
        {
          "cond": "self.caps.get_group(group_index) matches Some(span)",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "(group_index, maybe_name) in names.enumerate()",
          "norm": null,
          "value": "false",
          "line": 1238,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        13,
        16,
        19,
        20,
        6,
        7,
        8,
        10,
        12,
        21
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(group_index, maybe_name) in names.enumerate()",
          "norm": null,
          "value": "true",
          "line": 1238,
          "bound": null
        },
        {
          "cond": "self.caps.get_group(group_index) matches None",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.caps.get_group(group_index) matches None",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "(group_index, maybe_name) in names.enumerate()",
          "norm": null,
          "value": "false",
          "line": 1238,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        13,
        15,
        17,
        18,
        20,
        6,
        7,
        8,
        10,
        12,
        21
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(group_index, maybe_name) in names.enumerate()",
          "norm": null,
          "value": "false",
          "line": 1238,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        21
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}