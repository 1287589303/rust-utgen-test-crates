{
  "name": "regex_automata::util::pool::{impl#1}::get",
  "mod_info": {
    "name": "util::pool",
    "loc": "regex-automata/src/util/mod.rs:40:1:40:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/pool.rs:181:5:183:6",
  "doc": "/// Get a value from the pool. The caller is guaranteed to have\n/// exclusive access to the given value. Namely, it is guaranteed that\n/// this will never return a value that was returned by another call to\n/// `get` but was not put back into the pool.\n///\n/// When the guard goes out of scope and its destructor is called, then\n/// it will automatically be put back into the pool. Alternatively,\n/// [`PoolGuard::put`] may be used to explicitly put it back in the pool\n/// without relying on its destructor.\n///\n/// Note that there is no guarantee provided about which value in the\n/// pool is returned. That is, calling get, dropping the guard (causing\n/// the value to go back into the pool) and then calling get again is\n/// *not* guaranteed to return the same value received in the first `get`\n/// call.\n",
  "code": [
    "pub fn get(&self) -> PoolGuard<'_, T, F> {",
    "    PoolGuard(self.0.get())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "PoolGuard(self.0.get())",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}