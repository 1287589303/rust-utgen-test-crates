{
  "name": "regex_automata::util::captures::{impl#7}::pattern_len",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1948:5:1950:6",
  "doc": "/// Returns the total number of patterns in this `GroupInfo`.\n///\n/// This may return zero if the `GroupInfo` was constructed with no\n/// patterns.\n///\n/// This is guaranteed to be no bigger than [`PatternID::LIMIT`] because\n/// `GroupInfo` construction will fail if too many patterns are added.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::nfa::thompson::NFA;\n///\n/// let nfa = NFA::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"])?;\n/// assert_eq!(3, nfa.group_info().pattern_len());\n///\n/// let nfa = NFA::never_match();\n/// assert_eq!(0, nfa.group_info().pattern_len());\n///\n/// let nfa = NFA::always_match();\n/// assert_eq!(1, nfa.group_info().pattern_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn pattern_len(&self) -> usize {",
    "    self.0.pattern_len()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}