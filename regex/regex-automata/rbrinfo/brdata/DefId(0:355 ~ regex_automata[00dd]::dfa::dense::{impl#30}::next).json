{
  "name": "regex_automata::dfa::dense::{impl#30}::next",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:4915:5:4939:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<(alphabet::Unit, alphabet::Unit, StateID)> {",
    "    while let Some((unit, next)) = self.dense.next() {",
    "        let (prev_start, prev_end, prev_next) = match self.cur {",
    "            Some(t) => t,",
    "            None => {",
    "                self.cur = Some((unit, unit, next));",
    "                continue;",
    "            }",
    "        };",
    "        if prev_next == next && !unit.is_eoi() {",
    "            self.cur = Some((prev_start, unit, prev_next));",
    "        } else {",
    "            self.cur = Some((unit, unit, next));",
    "            if prev_next != DEAD {",
    "                return Some((prev_start, prev_end, prev_next));",
    "            }",
    "        }",
    "    }",
    "    if let Some((start, end, next)) = self.cur.take() {",
    "        if next != DEAD {",
    "            return Some((start, end, next));",
    "        }",
    "    }",
    "    None",
    "}"
  ],
  "size": {
    "chain": 17,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        21,
        22,
        28,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        },
        {
          "cond": "next != DEAD",
          "norm": "DEAD != next",
          "value": "true",
          "line": 4934,
          "bound": null
        }
      ],
      "ret": "Some((start, end, next))",
      "path": [
        0,
        1,
        2,
        3,
        21,
        22,
        23,
        24,
        25,
        26,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        },
        {
          "cond": "next != DEAD",
          "norm": "DEAD != next",
          "value": "false",
          "line": 4934,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "prev_next == next",
          "norm": "next == prev_next",
          "value": "true",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "unit.is_eoi()",
          "norm": null,
          "value": "true",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "prev_next != DEAD",
          "norm": "DEAD != prev_next",
          "value": "true",
          "line": 4928,
          "bound": null
        }
      ],
      "ret": "Some((prev_start, prev_end, prev_next))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        11,
        12,
        13,
        16,
        17,
        18,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "prev_next == next",
          "norm": "next == prev_next",
          "value": "true",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "unit.is_eoi()",
          "norm": null,
          "value": "true",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "prev_next != DEAD",
          "norm": "DEAD != prev_next",
          "value": "false",
          "line": 4928,
          "bound": null
        },
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        11,
        12,
        13,
        16,
        17,
        19,
        20,
        1,
        2,
        3,
        21,
        22,
        28,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "prev_next == next",
          "norm": "next == prev_next",
          "value": "true",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "unit.is_eoi()",
          "norm": null,
          "value": "true",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "prev_next != DEAD",
          "norm": "DEAD != prev_next",
          "value": "false",
          "line": 4928,
          "bound": null
        },
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        },
        {
          "cond": "next != DEAD",
          "norm": "DEAD != next",
          "value": "true",
          "line": 4934,
          "bound": null
        }
      ],
      "ret": "Some((start, end, next))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        11,
        12,
        13,
        16,
        17,
        19,
        20,
        1,
        2,
        3,
        21,
        22,
        23,
        24,
        25,
        26,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "prev_next == next",
          "norm": "next == prev_next",
          "value": "true",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "unit.is_eoi()",
          "norm": null,
          "value": "true",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "prev_next != DEAD",
          "norm": "DEAD != prev_next",
          "value": "false",
          "line": 4928,
          "bound": null
        },
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        },
        {
          "cond": "next != DEAD",
          "norm": "DEAD != next",
          "value": "false",
          "line": 4934,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        11,
        12,
        13,
        16,
        17,
        19,
        20,
        1,
        2,
        3,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "prev_next == next",
          "norm": "next == prev_next",
          "value": "true",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "unit.is_eoi()",
          "norm": null,
          "value": "false",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        11,
        12,
        14,
        20,
        1,
        2,
        3,
        21,
        22,
        28,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "prev_next == next",
          "norm": "next == prev_next",
          "value": "true",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "unit.is_eoi()",
          "norm": null,
          "value": "false",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        },
        {
          "cond": "next != DEAD",
          "norm": "DEAD != next",
          "value": "true",
          "line": 4934,
          "bound": null
        }
      ],
      "ret": "Some((start, end, next))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        11,
        12,
        14,
        20,
        1,
        2,
        3,
        21,
        22,
        23,
        24,
        25,
        26,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "prev_next == next",
          "norm": "next == prev_next",
          "value": "true",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "unit.is_eoi()",
          "norm": null,
          "value": "false",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        },
        {
          "cond": "next != DEAD",
          "norm": "DEAD != next",
          "value": "false",
          "line": 4934,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        11,
        12,
        14,
        20,
        1,
        2,
        3,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "prev_next == next",
          "norm": "next == prev_next",
          "value": "false",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "prev_next != DEAD",
          "norm": "DEAD != prev_next",
          "value": "true",
          "line": 4928,
          "bound": null
        }
      ],
      "ret": "Some((prev_start, prev_end, prev_next))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        15,
        16,
        17,
        18,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "prev_next == next",
          "norm": "next == prev_next",
          "value": "false",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "prev_next != DEAD",
          "norm": "DEAD != prev_next",
          "value": "false",
          "line": 4928,
          "bound": null
        },
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        15,
        16,
        17,
        19,
        20,
        1,
        2,
        3,
        21,
        22,
        28,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "prev_next == next",
          "norm": "next == prev_next",
          "value": "false",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "prev_next != DEAD",
          "norm": "DEAD != prev_next",
          "value": "false",
          "line": 4928,
          "bound": null
        },
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        },
        {
          "cond": "next != DEAD",
          "norm": "DEAD != next",
          "value": "true",
          "line": 4934,
          "bound": null
        }
      ],
      "ret": "Some((start, end, next))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        15,
        16,
        17,
        19,
        20,
        1,
        2,
        3,
        21,
        22,
        23,
        24,
        25,
        26,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "self.cur matches Some(t)",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "prev_next == next",
          "norm": "next == prev_next",
          "value": "false",
          "line": 4924,
          "bound": null
        },
        {
          "cond": "prev_next != DEAD",
          "norm": "DEAD != prev_next",
          "value": "false",
          "line": 4928,
          "bound": null
        },
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        },
        {
          "cond": "next != DEAD",
          "norm": "DEAD != next",
          "value": "false",
          "line": 4934,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        15,
        16,
        17,
        19,
        20,
        1,
        2,
        3,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches None",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        1,
        2,
        3,
        21,
        22,
        28,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches None",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        },
        {
          "cond": "next != DEAD",
          "norm": "DEAD != next",
          "value": "true",
          "line": 4934,
          "bound": null
        }
      ],
      "ret": "Some((start, end, next))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        1,
        2,
        3,
        21,
        22,
        23,
        24,
        25,
        26,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "self.cur matches None",
          "norm": null,
          "value": "true",
          "line": 4917,
          "bound": null
        },
        {
          "cond": "let Some((unit, next)) = self.dense.next()",
          "norm": null,
          "value": "true",
          "line": 4916,
          "bound": null
        },
        {
          "cond": "let Some((start, end, next)) = self.cur.take()",
          "norm": null,
          "value": "true",
          "line": 4933,
          "bound": null
        },
        {
          "cond": "next != DEAD",
          "norm": "DEAD != next",
          "value": "false",
          "line": 4934,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        1,
        2,
        3,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}