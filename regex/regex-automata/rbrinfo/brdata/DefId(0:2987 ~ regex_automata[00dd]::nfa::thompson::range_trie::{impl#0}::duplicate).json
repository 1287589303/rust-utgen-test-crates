{
  "name": "regex_automata::nfa::thompson::range_trie::{impl#0}::duplicate",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:466:5:498:6",
  "doc": "/// Performs a deep clone of the given state and returns the duplicate's\n/// state ID.\n///\n/// A \"deep clone\" in this context means that the state given along with\n/// recursively all states that it points to are copied. Once complete,\n/// the given state ID and the returned state ID share nothing.\n///\n/// This is useful during range trie insertion when a new range overlaps\n/// with an existing range that is bigger than the new one. The part\n/// of the existing range that does *not* overlap with the new one is\n/// duplicated so that adding the new range to the overlap doesn't disturb\n/// the non-overlapping portion.\n///\n/// There's one exception: if old_id is the final state, then it is not\n/// duplicated and the same final state is returned. This is because all\n/// final states in this trie are equivalent.\n",
  "code": [
    "fn duplicate(&mut self, old_id: StateID) -> StateID {",
    "    if old_id == FINAL {",
    "        return FINAL;",
    "    }",
    "",
    "    let mut stack = mem::replace(&mut self.dupe_stack, vec![]);",
    "    stack.clear();",
    "",
    "    let new_id = self.add_empty();",
    "    // old_id is the state we're cloning and new_id is the ID of the",
    "    // duplicated state for old_id.",
    "    stack.push(NextDupe { old_id, new_id });",
    "    while let Some(NextDupe { old_id, new_id }) = stack.pop() {",
    "        for i in 0..self.state(old_id).transitions.len() {",
    "            let t = self.state(old_id).transitions[i].clone();",
    "            if t.next_id == FINAL {",
    "                // All final states are the same, so there's no need to",
    "                // duplicate it.",
    "                self.add_transition(new_id, t.range, FINAL);",
    "                continue;",
    "            }",
    "",
    "            let new_child_id = self.add_empty();",
    "            self.add_transition(new_id, t.range, new_child_id);",
    "            stack.push(NextDupe {",
    "                old_id: t.next_id,",
    "                new_id: new_child_id,",
    "            });",
    "        }",
    "    }",
    "    self.dupe_stack = stack;",
    "    new_id",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 2,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "old_id == FINAL",
          "norm": "FINAL == old_id",
          "value": "true",
          "line": 467,
          "bound": null
        }
      ],
      "ret": "FINAL",
      "path": [
        0,
        1,
        2,
        39
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "old_id == FINAL",
          "norm": "FINAL == old_id",
          "value": "false",
          "line": 467,
          "bound": null
        },
        {
          "cond": "let Some(NextDupe { old_id, new_id }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 478,
          "bound": null
        }
      ],
      "ret": "new_id",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        34,
        35,
        37,
        38,
        39
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "old_id == FINAL",
          "norm": "FINAL == old_id",
          "value": "false",
          "line": 467,
          "bound": null
        },
        {
          "cond": "let Some(NextDupe { old_id, new_id }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 478,
          "bound": null
        },
        {
          "cond": "i in 0..self.state(old_id).transitions.len()",
          "norm": null,
          "value": "true",
          "line": 479,
          "bound": null
        },
        {
          "cond": "t.next_id == FINAL",
          "norm": "FINAL == t.next_id",
          "value": "true",
          "line": 481,
          "bound": null
        },
        {
          "cond": "i in 0..self.state(old_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 479,
          "bound": null
        },
        {
          "cond": "let Some(NextDupe { old_id, new_id }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 478,
          "bound": null
        }
      ],
      "ret": "new_id",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        17,
        18,
        19,
        21,
        23,
        9,
        10,
        11,
        34,
        35,
        37,
        38,
        39
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "old_id == FINAL",
          "norm": "FINAL == old_id",
          "value": "false",
          "line": 467,
          "bound": null
        },
        {
          "cond": "let Some(NextDupe { old_id, new_id }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 478,
          "bound": null
        },
        {
          "cond": "i in 0..self.state(old_id).transitions.len()",
          "norm": null,
          "value": "true",
          "line": 479,
          "bound": null
        },
        {
          "cond": "t.next_id == FINAL",
          "norm": "FINAL == t.next_id",
          "value": "false",
          "line": 481,
          "bound": null
        },
        {
          "cond": "i in 0..self.state(old_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 479,
          "bound": null
        },
        {
          "cond": "let Some(NextDupe { old_id, new_id }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 478,
          "bound": null
        }
      ],
      "ret": "new_id",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        17,
        18,
        19,
        21,
        23,
        9,
        10,
        11,
        34,
        35,
        37,
        38,
        39
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "old_id == FINAL",
          "norm": "FINAL == old_id",
          "value": "false",
          "line": 467,
          "bound": null
        },
        {
          "cond": "let Some(NextDupe { old_id, new_id }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 478,
          "bound": null
        },
        {
          "cond": "i in 0..self.state(old_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 479,
          "bound": null
        },
        {
          "cond": "let Some(NextDupe { old_id, new_id }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 478,
          "bound": null
        }
      ],
      "ret": "new_id",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        23,
        9,
        10,
        11,
        34,
        35,
        37,
        38,
        39
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}