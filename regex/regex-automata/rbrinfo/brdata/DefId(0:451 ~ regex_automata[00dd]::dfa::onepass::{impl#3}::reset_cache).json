{
  "name": "regex_automata::dfa::onepass::{impl#3}::reset_cache",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:1415:5:1417:6",
  "doc": "/// Reset the given cache such that it can be used for searching with the\n/// this DFA (and only this DFA).\n///\n/// A cache reset permits reusing memory already allocated in this cache\n/// with a different DFA.\n///\n/// # Example\n///\n/// This shows how to re-purpose a cache for use with a different DFA.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{dfa::onepass::DFA, Match};\n///\n/// let re1 = DFA::new(r\"\\w\")?;\n/// let re2 = DFA::new(r\"\\W\")?;\n/// let mut caps1 = re1.create_captures();\n/// let mut caps2 = re2.create_captures();\n///\n/// let mut cache = re1.create_cache();\n/// assert_eq!(\n///     Some(Match::must(0, 0..2)),\n///     { re1.captures(&mut cache, \"Δ\", &mut caps1); caps1.get_match() },\n/// );\n///\n/// // Using 'cache' with re2 is not allowed. It may result in panics or\n/// // incorrect results. In order to re-purpose the cache, we must reset\n/// // it with the one-pass DFA we'd like to use it with.\n/// //\n/// // Similarly, after this reset, using the cache with 're1' is also not\n/// // allowed.\n/// re2.reset_cache(&mut cache);\n/// assert_eq!(\n///     Some(Match::must(0, 0..3)),\n///     { re2.captures(&mut cache, \"☃\", &mut caps2); caps2.get_match() },\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn reset_cache(&self, cache: &mut Cache) {",
    "    cache.reset(self);",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}