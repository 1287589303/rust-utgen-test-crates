{
  "name": "regex_automata::util::search::{impl#0}::end",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:640:5:642:6",
  "doc": "/// Return the end position of this search.\n///\n/// This is a convenience routine for `search.get_span().end()`.\n///\n/// This is guaranteed to return an offset that is a valid exclusive end\n/// bound for this input's haystack.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::Input;\n///\n/// let input = Input::new(\"foobar\");\n/// assert_eq!(6, input.end());\n///\n/// let input = Input::new(\"foobar\").span(2..4);\n/// assert_eq!(4, input.end());\n/// ```\n",
  "code": [
    "pub fn end(&self) -> usize {",
    "    self.get_span().end",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.get_span().end",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}