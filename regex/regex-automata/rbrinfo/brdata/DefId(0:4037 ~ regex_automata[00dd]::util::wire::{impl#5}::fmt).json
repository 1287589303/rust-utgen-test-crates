{
  "name": "regex_automata::util::wire::{impl#5}::fmt",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:218:5:265:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
    "    use self::DeserializeErrorKind::*;",
    "",
    "    match self.0 {",
    "        Generic { msg } => write!(f, \"{}\", msg),",
    "        BufferTooSmall { what } => {",
    "            write!(f, \"buffer is too small to read {}\", what)",
    "        }",
    "        InvalidUsize { what } => {",
    "            write!(f, \"{} is too big to fit in a usize\", what)",
    "        }",
    "        VersionMismatch { expected, found } => write!(",
    "            f,",
    "            \"unsupported version: \\",
    "             expected version {} but found version {}\",",
    "            expected, found,",
    "        ),",
    "        EndianMismatch { expected, found } => write!(",
    "            f,",
    "            \"endianness mismatch: expected 0x{:X} but got 0x{:X}. \\",
    "             (Are you trying to load an object serialized with a \\",
    "             different endianness?)\",",
    "            expected, found,",
    "        ),",
    "        AlignmentMismatch { alignment, address } => write!(",
    "            f,",
    "            \"alignment mismatch: slice starts at address \\",
    "             0x{:X}, which is not aligned to a {} byte boundary\",",
    "            address, alignment,",
    "        ),",
    "        LabelMismatch { expected } => write!(",
    "            f,",
    "            \"label mismatch: start of serialized object should \\",
    "             contain a NUL terminated {:?} label, but a different \\",
    "             label was found\",",
    "            expected,",
    "        ),",
    "        ArithmeticOverflow { what } => {",
    "            write!(f, \"arithmetic overflow for {}\", what)",
    "        }",
    "        PatternID { ref err, what } => {",
    "            write!(f, \"failed to read pattern ID for {}: {}\", what, err)",
    "        }",
    "        StateID { ref err, what } => {",
    "            write!(f, \"failed to read state ID for {}: {}\", what, err)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 0,
    "min_set": 10
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.0 matches StateID { ref err, what }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        11,
        52,
        53,
        54,
        55,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.0 matches PatternID { ref err, what }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "self.0 matches PatternID { ref err, what }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        10,
        47,
        48,
        49,
        50,
        51,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.0 matches ArithmeticOverflow { what }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "self.0 matches ArithmeticOverflow { what }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        9,
        43,
        44,
        45,
        46,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.0 matches LabelMismatch { expected }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "self.0 matches LabelMismatch { expected }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        39,
        40,
        41,
        42,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.0 matches AlignmentMismatch { alignment, address }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "self.0 matches AlignmentMismatch { alignment, address }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        34,
        35,
        36,
        37,
        38,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.0 matches EndianMismatch { expected, found }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "self.0 matches EndianMismatch { expected, found }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        29,
        30,
        31,
        32,
        33,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.0 matches VersionMismatch { expected, found }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "self.0 matches VersionMismatch { expected, found }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        24,
        25,
        26,
        27,
        28,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.0 matches InvalidUsize { what }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "self.0 matches InvalidUsize { what }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        20,
        21,
        22,
        23,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.0 matches BufferTooSmall { what }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "self.0 matches BufferTooSmall { what }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        16,
        17,
        18,
        19,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.0 matches Generic { msg }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "self.0 matches Generic { msg }",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        12,
        13,
        14,
        15,
        56
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}