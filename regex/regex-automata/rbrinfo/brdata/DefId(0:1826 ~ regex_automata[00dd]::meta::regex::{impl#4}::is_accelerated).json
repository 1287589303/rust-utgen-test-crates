{
  "name": "regex_automata::meta::regex::{impl#4}::is_accelerated",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:1872:5:1874:6",
  "doc": "/// Returns true if this regex has a high chance of being \"accelerated.\"\n///\n/// The precise meaning of \"accelerated\" is specifically left unspecified,\n/// but the general meaning is that the search is a high likelihood of\n/// running faster than a character-at-a-time loop inside a standard\n/// regex engine.\n///\n/// When a regex is accelerated, it is only a *probabilistic* claim. That\n/// is, just because the regex is believed to be accelerated, that doesn't\n/// mean it will definitely execute searches very fast. Similarly, if a\n/// regex is *not* accelerated, that is also a probabilistic claim. That\n/// is, a regex for which `is_accelerated` returns `false` could still run\n/// searches more quickly than a regex for which `is_accelerated` returns\n/// `true`.\n///\n/// Whether a regex is marked as accelerated or not is dependent on\n/// implementations details that may change in a semver compatible release.\n/// That is, a regex that is accelerated in a `x.y.1` release might not be\n/// accelerated in a `x.y.2` release.\n///\n/// Basically, the value of acceleration boils down to a hedge: a hodge\n/// podge of internal heuristics combine to make a probabilistic guess\n/// that this regex search may run \"fast.\" The value in knowing this from\n/// a caller's perspective is that it may act as a signal that no further\n/// work should be done to accelerate a search. For example, a grep-like\n/// tool might try to do some extra work extracting literals from a regex\n/// to create its own heuristic acceleration strategies. But it might\n/// choose to defer to this crate's acceleration strategy if one exists.\n/// This routine permits querying whether such a strategy is active for a\n/// particular regex.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// // A simple literal is very likely to be accelerated.\n/// let re = Regex::new(r\"foo\")?;\n/// assert!(re.is_accelerated());\n///\n/// // A regex with no literals is likely to not be accelerated.\n/// let re = Regex::new(r\"\\w\")?;\n/// assert!(!re.is_accelerated());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn is_accelerated(&self) -> bool {",
    "    self.imp.strat.is_accelerated()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}