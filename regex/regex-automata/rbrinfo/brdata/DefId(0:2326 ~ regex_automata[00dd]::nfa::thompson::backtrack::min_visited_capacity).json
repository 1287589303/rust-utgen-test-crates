{
  "name": "regex_automata::nfa::thompson::backtrack::min_visited_capacity",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:41:1:43:2",
  "doc": "/// Returns the minimum visited capacity for the given haystack.\n///\n/// This function can be used as the argument to [`Config::visited_capacity`]\n/// in order to guarantee that a backtracking search for the given `input`\n/// won't return an error when using a [`BoundedBacktracker`] built from the\n/// given `NFA`.\n///\n/// This routine exists primarily as a way to test that the bounded backtracker\n/// works correctly when its capacity is set to the smallest possible amount.\n/// Still, it may be useful in cases where you know you want to use the bounded\n/// backtracker for a specific input, and just need to know what visited\n/// capacity to provide to make it work.\n///\n/// Be warned that this number could be quite large as it is multiplicative in\n/// the size the given NFA and haystack.\n",
  "code": [
    "pub fn min_visited_capacity(nfa: &NFA, input: &Input<'_>) -> usize {",
    "    div_ceil(nfa.states().len() * (input.get_span().len() + 1), 8)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}