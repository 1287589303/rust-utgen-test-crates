{
  "name": "regex_automata::meta::regex::{impl#20}::auto_prefilter",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2558:5:2560:6",
  "doc": "/// Toggles whether automatic prefilter support is enabled.\n///\n/// If this is disabled and [`Config::prefilter`] is not set, then the\n/// meta regex engine will not use any prefilters. This can sometimes\n/// be beneficial in cases where you know (or have measured) that the\n/// prefilter leads to overall worse search performance.\n///\n/// By default, this is enabled.\n///\n/// # Example\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{meta::Regex, Match};\n///\n/// let re = Regex::builder()\n///     .configure(Regex::config().auto_prefilter(false))\n///     .build(r\"Bruce \\w+\")?;\n/// let hay = \"Hello Bruce Springsteen!\";\n/// assert_eq!(Some(Match::must(0, 6..23)), re.find(hay));\n///\n/// Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn auto_prefilter(self, yes: bool) -> Config {",
    "    Config { autopre: Some(yes), ..self }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Config { autopre: Some(yes), ..self }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}