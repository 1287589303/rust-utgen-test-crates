{
  "name": "regex_automata::dfa::onepass::{impl#2}::add_empty_state",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:862:5:892:6",
  "doc": "/// Unconditionally add a new empty DFA state. If adding it would exceed\n/// any limits (configured or hard-coded), then an error is returned. The\n/// ID of the new state is returned on success.\n///\n/// The added state is *not* a match state.\n",
  "code": [
    "fn add_empty_state(&mut self) -> Result<StateID, BuildError> {",
    "    let state_limit = Transition::STATE_ID_LIMIT;",
    "    // Note that unlike dense and lazy DFAs, we specifically do NOT",
    "    // premultiply our state IDs here. The reason is that we want to pack",
    "    // our state IDs into 64-bit transitions with other info, so the fewer",
    "    // the bits we use for state IDs the better. If we premultiply, then",
    "    // our state ID space shrinks. We justify this by the assumption that",
    "    // a one-pass DFA is just already doing a fair bit more work than a",
    "    // normal DFA anyway, so an extra multiplication to compute a state",
    "    // transition doesn't seem like a huge deal.",
    "    let next_id = self.dfa.table.len() >> self.dfa.stride2();",
    "    let id = StateID::new(next_id)",
    "        .map_err(|_| BuildError::too_many_states(state_limit))?;",
    "    if id.as_u64() > Transition::STATE_ID_LIMIT {",
    "        return Err(BuildError::too_many_states(state_limit));",
    "    }",
    "    self.dfa",
    "        .table",
    "        .extend(core::iter::repeat(Transition(0)).take(self.dfa.stride()));",
    "    // The default empty value for 'PatternEpsilons' is sadly not all",
    "    // zeroes. Instead, a special sentinel is used to indicate that there",
    "    // is no pattern. So we need to explicitly set the pattern epsilons to",
    "    // the correct \"empty\" PatternEpsilons.",
    "    self.dfa.set_pattern_epsilons(id, PatternEpsilons::empty());",
    "    if let Some(size_limit) = self.config.get_size_limit() {",
    "        if self.dfa.memory_usage() > size_limit {",
    "            return Err(BuildError::exceeded_size_limit(size_limit));",
    "        }",
    "    }",
    "    Ok(id)",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "StateID::new(next_id)\n            .map_err(|_| BuildError::too_many_states(state_limit))?",
          "norm": null,
          "value": "Err/None",
          "line": 873,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        11,
        34,
        35,
        36,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "StateID::new(next_id)\n            .map_err(|_| BuildError::too_many_states(state_limit))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 873,
          "bound": null
        },
        {
          "cond": "id.as_u64() > Transition::STATE_ID_LIMIT",
          "norm": "Transition::STATE_ID_LIMIT < id.as_u64()",
          "value": "true",
          "line": 875,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::too_many_states(state_limit))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        14,
        15,
        16,
        36,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "StateID::new(next_id)\n            .map_err(|_| BuildError::too_many_states(state_limit))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 873,
          "bound": null
        },
        {
          "cond": "id.as_u64() > Transition::STATE_ID_LIMIT",
          "norm": "Transition::STATE_ID_LIMIT < id.as_u64()",
          "value": "false",
          "line": 875,
          "bound": "id.as_u64() == Transition::STATE_ID_LIMIT"
        },
        {
          "cond": "let Some(size_limit) = self.config.get_size_limit()",
          "norm": null,
          "value": "true",
          "line": 886,
          "bound": null
        }
      ],
      "ret": "Ok(id)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        37
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "StateID::new(next_id)\n            .map_err(|_| BuildError::too_many_states(state_limit))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 873,
          "bound": null
        },
        {
          "cond": "id.as_u64() > Transition::STATE_ID_LIMIT",
          "norm": "Transition::STATE_ID_LIMIT < id.as_u64()",
          "value": "false",
          "line": 875,
          "bound": "id.as_u64() == Transition::STATE_ID_LIMIT"
        },
        {
          "cond": "let Some(size_limit) = self.config.get_size_limit()",
          "norm": null,
          "value": "true",
          "line": 886,
          "bound": null
        },
        {
          "cond": "self.dfa.memory_usage() > size_limit",
          "norm": null,
          "value": "true",
          "line": 887,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::exceeded_size_limit(size_limit))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        36,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "StateID::new(next_id)\n            .map_err(|_| BuildError::too_many_states(state_limit))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 873,
          "bound": null
        },
        {
          "cond": "id.as_u64() > Transition::STATE_ID_LIMIT",
          "norm": "Transition::STATE_ID_LIMIT < id.as_u64()",
          "value": "false",
          "line": 875,
          "bound": "id.as_u64() == Transition::STATE_ID_LIMIT"
        },
        {
          "cond": "let Some(size_limit) = self.config.get_size_limit()",
          "norm": null,
          "value": "true",
          "line": 886,
          "bound": null
        },
        {
          "cond": "self.dfa.memory_usage() > size_limit",
          "norm": null,
          "value": "false",
          "line": 887,
          "bound": "self.dfa.memory_usage() == size_limit"
        }
      ],
      "ret": "Ok(id)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        33,
        37
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}