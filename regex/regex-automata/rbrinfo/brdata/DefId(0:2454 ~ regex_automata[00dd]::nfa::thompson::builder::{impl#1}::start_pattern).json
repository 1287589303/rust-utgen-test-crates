{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::start_pattern",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:622:5:632:6",
  "doc": "/// Start the assembly of a pattern in this NFA.\n///\n/// Upon success, this returns the identifier for the new pattern.\n/// Identifiers start at `0` and are incremented by 1 for each new pattern.\n///\n/// It is necessary to call this routine before adding capturing states.\n/// Otherwise, any other NFA state may be added before starting a pattern.\n///\n/// # Errors\n///\n/// If the pattern identifier space is exhausted, then this returns an\n/// error.\n///\n/// # Panics\n///\n/// If this is called while assembling another pattern (i.e., before\n/// `finish_pattern` is called), then this panics.\n",
  "code": [
    "pub fn start_pattern(&mut self) -> Result<PatternID, BuildError> {",
    "    assert!(self.pattern_id.is_none(), \"must call 'finish_pattern' first\");",
    "",
    "    let proposed = self.start_pattern.len();",
    "    let pid = PatternID::new(proposed)",
    "        .map_err(|_| BuildError::too_many_patterns(proposed))?;",
    "    self.pattern_id = Some(pid);",
    "    // This gets filled in when 'finish_pattern' is called.",
    "    self.start_pattern.push(StateID::ZERO);",
    "    Ok(pid)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.pattern_id.is_none()",
          "norm": null,
          "value": "true",
          "line": 623,
          "bound": null
        },
        {
          "cond": "PatternID::new(proposed)\n            .map_err(|_| BuildError::too_many_patterns(proposed))?",
          "norm": null,
          "value": "Err/None",
          "line": 626,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        10,
        12,
        13,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.pattern_id.is_none()",
          "norm": null,
          "value": "true",
          "line": 623,
          "bound": null
        },
        {
          "cond": "PatternID::new(proposed)\n            .map_err(|_| BuildError::too_many_patterns(proposed))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 626,
          "bound": null
        }
      ],
      "ret": "Ok(pid)",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        11,
        14,
        15,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.pattern_id.is_none()",
          "norm": null,
          "value": "false",
          "line": 623,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        23
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}