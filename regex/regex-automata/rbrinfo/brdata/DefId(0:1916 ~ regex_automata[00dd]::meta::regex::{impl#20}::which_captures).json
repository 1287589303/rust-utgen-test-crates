{
  "name": "regex_automata::meta::regex::{impl#20}::which_captures",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2697:5:2700:6",
  "doc": "/// Configures what kinds of groups are compiled as \"capturing\" in the\n/// underlying regex engine.\n///\n/// This is set to [`WhichCaptures::All`] by default. Callers may wish to\n/// use [`WhichCaptures::Implicit`] in cases where one wants avoid the\n/// overhead of capture states for explicit groups.\n///\n/// Note that another approach to avoiding the overhead of capture groups\n/// is by using non-capturing groups in the regex pattern. That is,\n/// `(?:a)` instead of `(a)`. This option is useful when you can't control\n/// the concrete syntax but know that you don't need the underlying capture\n/// states. For example, using `WhichCaptures::Implicit` will behave as if\n/// all explicit capturing groups in the pattern were non-capturing.\n///\n/// Setting this to `WhichCaptures::None` is usually not the right thing to\n/// do. When no capture states are compiled, some regex engines (such as\n/// the `PikeVM`) won't be able to report match offsets. This will manifest\n/// as no match being found.\n///\n/// # Example\n///\n/// This example demonstrates how the results of capture groups can change\n/// based on this option. First we show the default (all capture groups in\n/// the pattern are capturing):\n///\n/// ```\n/// use regex_automata::{meta::Regex, Match, Span};\n///\n/// let re = Regex::new(r\"foo([0-9]+)bar\")?;\n/// let hay = \"foo123bar\";\n///\n/// let mut caps = re.create_captures();\n/// re.captures(hay, &mut caps);\n/// assert_eq!(Some(Span::from(0..9)), caps.get_group(0));\n/// assert_eq!(Some(Span::from(3..6)), caps.get_group(1));\n///\n/// Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// And now we show the behavior when we only include implicit capture\n/// groups. In this case, we can only find the overall match span, but the\n/// spans of any other explicit group don't exist because they are treated\n/// as non-capturing. (In effect, when `WhichCaptures::Implicit` is used,\n/// there is no real point in using [`Regex::captures`] since it will never\n/// be able to report more information than [`Regex::find`].)\n///\n/// ```\n/// use regex_automata::{\n///     meta::Regex,\n///     nfa::thompson::WhichCaptures,\n///     Match,\n///     Span,\n/// };\n///\n/// let re = Regex::builder()\n///     .configure(Regex::config().which_captures(WhichCaptures::Implicit))\n///     .build(r\"foo([0-9]+)bar\")?;\n/// let hay = \"foo123bar\";\n///\n/// let mut caps = re.create_captures();\n/// re.captures(hay, &mut caps);\n/// assert_eq!(Some(Span::from(0..9)), caps.get_group(0));\n/// assert_eq!(None, caps.get_group(1));\n///\n/// Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn which_captures(mut self, which_captures: WhichCaptures) -> Config {",
    "    self.which_captures = Some(which_captures);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}