{
  "name": "regex_automata::util::determinize::state::{impl#8}::encoded_pattern_len",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/util/determinize/state.rs:555:5:562:6",
  "doc": "/// Returns the total number of *encoded* pattern IDs in this state.\n///\n/// This may return 0 even when this is a match state, since the pattern\n/// ID `PatternID::ZERO` is not encoded when it's the only pattern ID in\n/// the match state (the overwhelming common case).\n",
  "code": [
    "fn encoded_pattern_len(&self) -> usize {",
    "    if !self.has_pattern_ids() {",
    "        return 0;",
    "    }",
    "    // This unwrap is OK since the total number of patterns is always",
    "    // guaranteed to fit into a usize.",
    "    usize::try_from(wire::read_u32(&self.0[9..13])).unwrap()",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.has_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 556,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.has_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 556,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        1,
        3,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}