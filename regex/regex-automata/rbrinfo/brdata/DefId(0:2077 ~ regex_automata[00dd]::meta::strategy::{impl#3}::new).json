{
  "name": "regex_automata::meta::strategy::{impl#3}::new",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:456:5:547:6",
  "doc": "",
  "code": [
    "fn new(",
    "    info: RegexInfo,",
    "    pre: Option<Prefilter>,",
    "    hirs: &[&Hir],",
    ") -> Result<Core, BuildError> {",
    "    let mut lookm = LookMatcher::new();",
    "    lookm.set_line_terminator(info.config().get_line_terminator());",
    "    let thompson_config = thompson::Config::new()",
    "        .utf8(info.config().get_utf8_empty())",
    "        .nfa_size_limit(info.config().get_nfa_size_limit())",
    "        .shrink(false)",
    "        .which_captures(info.config().get_which_captures())",
    "        .look_matcher(lookm);",
    "    let nfa = thompson::Compiler::new()",
    "        .configure(thompson_config.clone())",
    "        .build_many_from_hir(hirs)",
    "        .map_err(BuildError::nfa)?;",
    "    // It's possible for the PikeVM or the BB to fail to build, even though",
    "    // at this point, we already have a full NFA in hand. They can fail",
    "    // when a Unicode word boundary is used but where Unicode word boundary",
    "    // support is disabled at compile time, thus making it impossible to",
    "    // match. (Construction can also fail if the NFA was compiled without",
    "    // captures, but we always enable that above.)",
    "    let pikevm = wrappers::PikeVM::new(&info, pre.clone(), &nfa)?;",
    "    let backtrack =",
    "        wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?;",
    "    // The onepass engine can of course fail to build, but we expect it to",
    "    // fail in many cases because it is an optimization that doesn't apply",
    "    // to all regexes. The 'OnePass' wrapper encapsulates this failure (and",
    "    // logs a message if it occurs).",
    "    let onepass = wrappers::OnePass::new(&info, &nfa);",
    "    // We try to encapsulate whether a particular regex engine should be",
    "    // used within each respective wrapper, but the DFAs need a reverse NFA",
    "    // to build itself, and we really do not want to build a reverse NFA if",
    "    // we know we aren't going to use the lazy DFA. So we do a config check",
    "    // up front, which is in practice the only way we won't try to use the",
    "    // DFA.",
    "    let (nfarev, hybrid, dfa) =",
    "        if !info.config().get_hybrid() && !info.config().get_dfa() {",
    "            (None, wrappers::Hybrid::none(), wrappers::DFA::none())",
    "        } else {",
    "            // FIXME: Technically, we don't quite yet KNOW that we need",
    "            // a reverse NFA. It's possible for the DFAs below to both",
    "            // fail to build just based on the forward NFA. In which case,",
    "            // building the reverse NFA was totally wasted work. But...",
    "            // fixing this requires breaking DFA construction apart into",
    "            // two pieces: one for the forward part and another for the",
    "            // reverse part. Quite annoying. Making it worse, when building",
    "            // both DFAs fails, it's quite likely that the NFA is large and",
    "            // that it will take quite some time to build the reverse NFA",
    "            // too. So... it's really probably worth it to do this!",
    "            let nfarev = thompson::Compiler::new()",
    "                // Currently, reverse NFAs don't support capturing groups,",
    "                // so we MUST disable them. But even if we didn't have to,",
    "                // we would, because nothing in this crate does anything",
    "                // useful with capturing groups in reverse. And of course,",
    "                // the lazy DFA ignores capturing groups in all cases.",
    "                .configure(",
    "                    thompson_config",
    "                        .clone()",
    "                        .which_captures(WhichCaptures::None)",
    "                        .reverse(true),",
    "                )",
    "                .build_many_from_hir(hirs)",
    "                .map_err(BuildError::nfa)?;",
    "            let dfa = if !info.config().get_dfa() {",
    "                wrappers::DFA::none()",
    "            } else {",
    "                wrappers::DFA::new(&info, pre.clone(), &nfa, &nfarev)",
    "            };",
    "            let hybrid = if !info.config().get_hybrid() {",
    "                wrappers::Hybrid::none()",
    "            } else if dfa.is_some() {",
    "                debug!(\"skipping lazy DFA because we have a full DFA\");",
    "                wrappers::Hybrid::none()",
    "            } else {",
    "                wrappers::Hybrid::new(&info, pre.clone(), &nfa, &nfarev)",
    "            };",
    "            (Some(nfarev), hybrid, dfa)",
    "        };",
    "    Ok(Core {",
    "        info,",
    "        pre,",
    "        nfa,",
    "        nfarev,",
    "        pikevm,",
    "        backtrack,",
    "        onepass,",
    "        hybrid,",
    "        dfa,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 18,
    "contra": 0,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 469,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        24,
        26,
        27,
        137,
        138,
        139,
        140,
        141,
        142
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 479,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        134,
        135,
        136,
        140,
        141,
        142
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 481,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        45,
        47,
        48,
        131,
        132,
        133,
        136,
        140,
        141,
        142
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        54,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        77,
        78,
        127,
        128,
        129,
        130,
        133,
        136,
        140,
        141,
        142
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 507,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 521,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        },
        {
          "cond": "dfa.is_some()",
          "norm": null,
          "value": "true",
          "line": 528,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        54,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        76,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 507,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 521,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        },
        {
          "cond": "dfa.is_some()",
          "norm": null,
          "value": "false",
          "line": 528,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        54,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        76,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 507,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 521,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 526,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        54,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        76,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        87,
        88,
        89,
        90,
        92,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 507,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "false",
          "line": 521,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        },
        {
          "cond": "dfa.is_some()",
          "norm": null,
          "value": "true",
          "line": 528,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        54,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        76,
        79,
        80,
        81,
        82,
        83,
        85,
        88,
        89,
        90,
        91,
        93,
        94,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 507,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "false",
          "line": 521,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        },
        {
          "cond": "dfa.is_some()",
          "norm": null,
          "value": "false",
          "line": 528,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        54,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        76,
        79,
        80,
        81,
        82,
        83,
        85,
        88,
        89,
        90,
        91,
        93,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 507,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "false",
          "line": 521,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 526,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        54,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        76,
        79,
        80,
        81,
        82,
        83,
        85,
        88,
        89,
        90,
        92,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        75,
        77,
        78,
        127,
        128,
        129,
        130,
        133,
        136,
        140,
        141,
        142
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 507,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 521,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        },
        {
          "cond": "dfa.is_some()",
          "norm": null,
          "value": "true",
          "line": 528,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        76,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 507,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 521,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        },
        {
          "cond": "dfa.is_some()",
          "norm": null,
          "value": "false",
          "line": 528,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        76,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 507,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 521,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 526,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        76,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        87,
        88,
        89,
        90,
        92,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 507,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "false",
          "line": 521,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        },
        {
          "cond": "dfa.is_some()",
          "norm": null,
          "value": "true",
          "line": 528,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        76,
        79,
        80,
        81,
        82,
        83,
        85,
        88,
        89,
        90,
        91,
        93,
        94,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 507,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "false",
          "line": 521,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        },
        {
          "cond": "dfa.is_some()",
          "norm": null,
          "value": "false",
          "line": 528,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        76,
        79,
        80,
        81,
        82,
        83,
        85,
        88,
        89,
        90,
        91,
        93,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 507,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "false",
          "line": 521,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 526,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        76,
        79,
        80,
        81,
        82,
        83,
        85,
        88,
        89,
        90,
        92,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        },
        {
          "cond": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 479,
          "bound": null
        },
        {
          "cond": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 481,
          "bound": null
        },
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        },
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        }
      ],
      "ret": "Ok(Core {\n            info,\n            pre,\n            nfa,\n            nfarev,\n            pikevm,\n            backtrack,\n            onepass,\n            hybrid,\n            dfa,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        59,
        60,
        61,
        62,
        63,
        64,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        142
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}