{
  "name": "regex_automata::dfa::accel::{impl#4}::next",
  "mod_info": {
    "name": "dfa::accel",
    "loc": "regex-automata/src/dfa/mod.rs:346:1:346:22"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/accel.rs:368:5:372:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<Accel> {",
    "    let accel = self.accels.get(self.i)?;",
    "    self.i += 1;",
    "    Some(accel)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.accels.get(self.i)?",
          "norm": null,
          "value": "Err/None",
          "line": 369,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.accels.get(self.i)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 369,
          "bound": null
        }
      ],
      "ret": "Some(accel)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}