{
  "name": "regex_automata::meta::regex::{impl#21}::syntax",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:3626:5:3633:6",
  "doc": "/// Configure the syntax options when parsing a pattern string while\n/// building a `Regex`.\n///\n/// These options _only_ apply when [`Builder::build`] or [`Builder::build_many`]\n/// are used. The other build methods accept `Hir` values, which have\n/// already been parsed.\n///\n/// # Example\n///\n/// This example shows how to enable case insensitive mode.\n///\n/// ```\n/// use regex_automata::{meta::Regex, util::syntax, Match};\n///\n/// let re = Regex::builder()\n///     .syntax(syntax::Config::new().case_insensitive(true))\n///     .build(r\"δ\")?;\n/// assert_eq!(Some(Match::must(0, 0..2)), re.find(r\"Δ\"));\n///\n/// Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn syntax(",
    "    &mut self,",
    "    config: crate::util::syntax::Config,",
    ") -> &mut Builder {",
    "    config.apply_ast(&mut self.ast);",
    "    config.apply_hir(&mut self.hir);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}