{
  "name": "regex_automata::dfa::remapper::{impl#0}::swap",
  "mod_info": {
    "name": "dfa::remapper",
    "loc": "regex-automata/src/dfa/mod.rs:354:1:354:14"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/remapper.rs:100:5:111:6",
  "doc": "/// Swap two states. Once this is called, callers must follow through to\n/// call `remap`, or else it's possible for the underlying remappable\n/// value to be in a corrupt state.\n",
  "code": [
    "pub(super) fn swap(",
    "    &mut self,",
    "    r: &mut impl Remappable,",
    "    id1: StateID,",
    "    id2: StateID,",
    ") {",
    "    if id1 == id2 {",
    "        return;",
    "    }",
    "    r.swap_states(id1, id2);",
    "    self.map.swap(self.idxmap.to_index(id1), self.idxmap.to_index(id2));",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "id1 == id2",
          "norm": null,
          "value": "true",
          "line": 106,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "id1 == id2",
          "norm": null,
          "value": "false",
          "line": 106,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}