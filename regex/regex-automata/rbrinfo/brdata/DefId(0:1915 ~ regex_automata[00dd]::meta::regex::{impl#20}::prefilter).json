{
  "name": "regex_automata::meta::regex::{impl#20}::prefilter",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2627:5:2629:6",
  "doc": "/// Overrides and sets the prefilter to use inside a `Regex`.\n///\n/// This permits one to forcefully set a prefilter in cases where the\n/// caller knows better than whatever the automatic prefilter logic is\n/// capable of.\n///\n/// By default, this is set to `None` and an automatic prefilter will be\n/// used if one could be built. (Assuming [`Config::auto_prefilter`] is\n/// enabled, which it is by default.)\n///\n/// # Example\n///\n/// This example shows how to set your own prefilter. In the case of a\n/// pattern like `Bruce \\w+`, the automatic prefilter is likely to be\n/// constructed in a way that it will look for occurrences of `Bruce `.\n/// In most cases, this is the best choice. But in some cases, it may be\n/// the case that running `memchr` on `B` is the best choice. One can\n/// achieve that behavior by overriding the automatic prefilter logic\n/// and providing a prefilter that just matches `B`.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{\n///     meta::Regex,\n///     util::prefilter::Prefilter,\n///     Match, MatchKind,\n/// };\n///\n/// let pre = Prefilter::new(MatchKind::LeftmostFirst, &[\"B\"])\n///     .expect(\"a prefilter\");\n/// let re = Regex::builder()\n///     .configure(Regex::config().prefilter(Some(pre)))\n///     .build(r\"Bruce \\w+\")?;\n/// let hay = \"Hello Bruce Springsteen!\";\n/// assert_eq!(Some(Match::must(0, 6..23)), re.find(hay));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// # Example: incorrect prefilters can lead to incorrect results!\n///\n/// Be warned that setting an incorrect prefilter can lead to missed\n/// matches. So if you use this option, ensure your prefilter can _never_\n/// report false negatives. (A false positive is, on the other hand, quite\n/// okay and generally unavoidable.)\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{\n///     meta::Regex,\n///     util::prefilter::Prefilter,\n///     Match, MatchKind,\n/// };\n///\n/// let pre = Prefilter::new(MatchKind::LeftmostFirst, &[\"Z\"])\n///     .expect(\"a prefilter\");\n/// let re = Regex::builder()\n///     .configure(Regex::config().prefilter(Some(pre)))\n///     .build(r\"Bruce \\w+\")?;\n/// let hay = \"Hello Bruce Springsteen!\";\n/// // Oops! No match found, but there should be one!\n/// assert_eq!(None, re.find(hay));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn prefilter(self, pre: Option<Prefilter>) -> Config {",
    "    Config { pre: Some(pre), ..self }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Config { pre: Some(pre), ..self }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}