{
  "name": "regex_automata::meta::regex::{impl#4}::group_info",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:1812:5:1814:6",
  "doc": "/// Return information about the capture groups in this `Regex`.\n///\n/// A `GroupInfo` is an immutable object that can be cheaply cloned. It\n/// is responsible for maintaining a mapping between the capture groups\n/// in the concrete syntax of zero or more regex patterns and their\n/// internal representation used by some of the regex matchers. It is also\n/// responsible for maintaining a mapping between the name of each group\n/// (if one exists) and its corresponding group index.\n///\n/// A `GroupInfo` is ultimately what is used to build a [`Captures`] value,\n/// which is some mutable space where group offsets are stored as a result\n/// of a search.\n///\n/// # Example\n///\n/// This shows some alternatives to [`Regex::create_captures`]:\n///\n/// ```\n/// use regex_automata::{\n///     meta::Regex,\n///     util::captures::Captures,\n///     Match, PatternID, Span,\n/// };\n///\n/// let re = Regex::new(r\"(?<first>[A-Z][a-z]+) (?<last>[A-Z][a-z]+)\")?;\n///\n/// // This is equivalent to Regex::create_captures. It stores matching\n/// // offsets for all groups in the regex.\n/// let mut all = Captures::all(re.group_info().clone());\n/// re.captures(\"Bruce Springsteen\", &mut all);\n/// assert_eq!(Some(Match::must(0, 0..17)), all.get_match());\n/// assert_eq!(Some(Span::from(0..5)), all.get_group_by_name(\"first\"));\n/// assert_eq!(Some(Span::from(6..17)), all.get_group_by_name(\"last\"));\n///\n/// // In this version, we only care about the implicit groups, which\n/// // means offsets for the explicit groups will be unavailable. It can\n/// // sometimes be faster to ask for fewer groups, since the underlying\n/// // regex engine needs to do less work to keep track of them.\n/// let mut matches = Captures::matches(re.group_info().clone());\n/// re.captures(\"Bruce Springsteen\", &mut matches);\n/// // We still get the overall match info.\n/// assert_eq!(Some(Match::must(0, 0..17)), matches.get_match());\n/// // But now the explicit groups are unavailable.\n/// assert_eq!(None, matches.get_group_by_name(\"first\"));\n/// assert_eq!(None, matches.get_group_by_name(\"last\"));\n///\n/// // Finally, in this version, we don't ask to keep track of offsets for\n/// // *any* groups. All we get back is whether a match occurred, and if\n/// // so, the ID of the pattern that matched.\n/// let mut empty = Captures::empty(re.group_info().clone());\n/// re.captures(\"Bruce Springsteen\", &mut empty);\n/// // it's a match!\n/// assert!(empty.is_match());\n/// // for pattern ID 0\n/// assert_eq!(Some(PatternID::ZERO), empty.pattern());\n/// // Match offsets are unavailable.\n/// assert_eq!(None, empty.get_match());\n/// // And of course, explicit groups are unavailable too.\n/// assert_eq!(None, empty.get_group_by_name(\"first\"));\n/// assert_eq!(None, empty.get_group_by_name(\"last\"));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn group_info(&self) -> &GroupInfo {",
    "    self.imp.strat.group_info()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.imp.strat.group_info()",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}