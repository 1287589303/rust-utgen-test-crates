{
  "name": "regex_automata::hybrid::dfa::{impl#3}::search_start",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:1954:5:1961:6",
  "doc": "/// Initializes a new search starting at the given position.\n///\n/// If a previous search was unfinished, then it is finished automatically\n/// and a new search is begun.\n///\n/// Note that keeping track of search progress is _not necessary_\n/// for correct implementations of search using a lazy DFA. Keeping\n/// track of search progress is only necessary if you want the\n/// [`Config::minimum_bytes_per_state`] configuration knob to work.\n",
  "code": [
    "pub fn search_start(&mut self, at: usize) {",
    "    // If a previous search wasn't marked as finished, then finish it",
    "    // now automatically.",
    "    if let Some(p) = self.progress.take() {",
    "        self.bytes_searched += p.len();",
    "    }",
    "    self.progress = Some(SearchProgress { start: at, at });",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(p) = self.progress.take()",
          "norm": null,
          "value": "true",
          "line": 1957,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(p) = self.progress.take()",
          "norm": null,
          "value": "true",
          "line": 1957,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}