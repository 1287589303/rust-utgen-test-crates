{
  "name": "regex_automata::dfa::onepass::{impl#3}::always_match",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:1253:5:1256:6",
  "doc": "/// Create a new one-pass DFA that matches every input.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{dfa::onepass::DFA, Match};\n///\n/// let dfa = DFA::always_match()?;\n/// let mut cache = dfa.create_cache();\n/// let mut caps = dfa.create_captures();\n///\n/// let expected = Match::must(0, 0..0);\n/// dfa.captures(&mut cache, \"\", &mut caps);\n/// assert_eq!(Some(expected), caps.get_match());\n/// dfa.captures(&mut cache, \"foo\", &mut caps);\n/// assert_eq!(Some(expected), caps.get_match());\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn always_match() -> Result<DFA, BuildError> {",
    "    let nfa = thompson::NFA::always_match();",
    "    Builder::new().build_from_nfa(nfa)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}