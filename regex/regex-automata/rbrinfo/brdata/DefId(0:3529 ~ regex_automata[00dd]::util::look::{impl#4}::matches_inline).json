{
  "name": "regex_automata::util::look::{impl#4}::matches_inline",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:658:5:698:6",
  "doc": "/// Like `matches`, but forcefully inlined.\n///\n/// # Panics\n///\n/// This panics when testing any Unicode word boundary assertion in this\n/// set and when the Unicode word data is not available. Specifically, this\n/// only occurs when the `unicode-word-boundary` feature is not enabled.\n///\n/// Since it's generally expected that this routine is called inside of\n/// a matching engine, callers should check the error condition when\n/// building the matching engine. If there is a Unicode word boundary\n/// in the matcher and the data isn't available, then the matcher should\n/// fail to build.\n///\n/// Callers can check the error condition with [`LookSet::available`].\n///\n/// This also may panic when `at > haystack.len()`. Note that `at ==\n/// haystack.len()` is legal and guaranteed not to panic.\n",
  "code": [
    "pub(crate) fn matches_inline(",
    "    &self,",
    "    look: Look,",
    "    haystack: &[u8],",
    "    at: usize,",
    ") -> bool {",
    "    match look {",
    "        Look::Start => self.is_start(haystack, at),",
    "        Look::End => self.is_end(haystack, at),",
    "        Look::StartLF => self.is_start_lf(haystack, at),",
    "        Look::EndLF => self.is_end_lf(haystack, at),",
    "        Look::StartCRLF => self.is_start_crlf(haystack, at),",
    "        Look::EndCRLF => self.is_end_crlf(haystack, at),",
    "        Look::WordAscii => self.is_word_ascii(haystack, at),",
    "        Look::WordAsciiNegate => self.is_word_ascii_negate(haystack, at),",
    "        Look::WordUnicode => self.is_word_unicode(haystack, at).unwrap(),",
    "        Look::WordUnicodeNegate => {",
    "            self.is_word_unicode_negate(haystack, at).unwrap()",
    "        }",
    "        Look::WordStartAscii => self.is_word_start_ascii(haystack, at),",
    "        Look::WordEndAscii => self.is_word_end_ascii(haystack, at),",
    "        Look::WordStartUnicode => {",
    "            self.is_word_start_unicode(haystack, at).unwrap()",
    "        }",
    "        Look::WordEndUnicode => {",
    "            self.is_word_end_unicode(haystack, at).unwrap()",
    "        }",
    "        Look::WordStartHalfAscii => {",
    "            self.is_word_start_half_ascii(haystack, at)",
    "        }",
    "        Look::WordEndHalfAscii => {",
    "            self.is_word_end_half_ascii(haystack, at)",
    "        }",
    "        Look::WordStartHalfUnicode => {",
    "            self.is_word_start_half_unicode(haystack, at).unwrap()",
    "        }",
    "        Look::WordEndHalfUnicode => {",
    "            self.is_word_end_half_unicode(haystack, at).unwrap()",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 18,
    "contra": 0,
    "min_set": 18
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "look matches Look::WordEndHalfUnicode",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        19,
        59,
        60,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "look matches Look::WordStartHalfUnicode",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::WordStartHalfUnicode",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        18,
        56,
        57,
        58,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "look matches Look::WordEndHalfAscii",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::WordEndHalfAscii",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        17,
        54,
        55,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "look matches Look::WordStartHalfAscii",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::WordStartHalfAscii",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        16,
        52,
        53,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "look matches Look::WordEndUnicode",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::WordEndUnicode",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        15,
        49,
        50,
        51,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "look matches Look::WordStartUnicode",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::WordStartUnicode",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        14,
        46,
        47,
        48,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "look matches Look::WordEndAscii",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::WordEndAscii",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        13,
        44,
        45,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "look matches Look::WordStartAscii",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::WordStartAscii",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        12,
        42,
        43,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "look matches Look::WordUnicodeNegate",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::WordUnicodeNegate",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        11,
        39,
        40,
        41,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "look matches Look::WordUnicode",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::WordUnicode",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        10,
        36,
        37,
        38,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "look matches Look::WordAsciiNegate",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::WordAsciiNegate",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        9,
        34,
        35,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "look matches Look::WordAscii",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::WordAscii",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        32,
        33,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "look matches Look::EndCRLF",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::EndCRLF",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        30,
        31,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "look matches Look::StartCRLF",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::StartCRLF",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        28,
        29,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "look matches Look::EndLF",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::EndLF",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        26,
        27,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "look matches Look::StartLF",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::StartLF",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        24,
        25,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "look matches Look::End",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::End",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        22,
        23,
        61
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "look matches Look::Start",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        },
        {
          "cond": "look matches Look::Start",
          "norm": null,
          "value": "true",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        20,
        21,
        61
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}