{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#8}::insert",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:1820:5:1830:6",
  "doc": "/// Insert the given (StateID, offset) pair into this set. If it already\n/// exists, then this is a no-op and it returns false. Otherwise this\n/// returns true.\n",
  "code": [
    "fn insert(&mut self, sid: StateID, at: usize) -> bool {",
    "    let table_index = sid.as_usize() * self.stride + at;",
    "    let block_index = table_index / Visited::BLOCK_SIZE;",
    "    let bit = table_index % Visited::BLOCK_SIZE;",
    "    let block_with_bit = 1 << bit;",
    "    if self.bitset[block_index] & block_with_bit != 0 {",
    "        return false;",
    "    }",
    "    self.bitset[block_index] |= block_with_bit;",
    "    true",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.bitset[block_index] & block_with_bit != 0",
          "norm": "0 != self.bitset[block_index] & block_with_bit",
          "value": "true",
          "line": 1825,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.bitset[block_index] & block_with_bit != 0",
          "norm": "0 != self.bitset[block_index] & block_with_bit",
          "value": "false",
          "line": 1825,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}