{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#8}::setup_search",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:1841:5:1872:6",
  "doc": "/// Setup this visited set to work for a search using the given NFA\n/// and input configuration. The NFA must be the same NFA used by the\n/// BoundedBacktracker given to Visited::reset. Failing to call this might\n/// result in panics or silently incorrect search behavior.\n",
  "code": [
    "fn setup_search(",
    "    &mut self,",
    "    re: &BoundedBacktracker,",
    "    input: &Input<'_>,",
    ") -> Result<(), MatchError> {",
    "    // Our haystack length is only the length of the span of the entire",
    "    // haystack that we'll be searching.",
    "    let haylen = input.get_span().len();",
    "    let err = || MatchError::haystack_too_long(haylen);",
    "    // Our stride is one more than the length of the input because our main",
    "    // search loop includes the position at input.end(). (And it does this",
    "    // because matches are delayed by one byte to account for look-around.)",
    "    self.stride = haylen + 1;",
    "    let needed_capacity =",
    "        match re.get_nfa().states().len().checked_mul(self.stride) {",
    "            None => return Err(err()),",
    "            Some(capacity) => capacity,",
    "        };",
    "    let max_capacity = 8 * re.get_config().get_visited_capacity();",
    "    if needed_capacity > max_capacity {",
    "        return Err(err());",
    "    }",
    "    let needed_blocks = div_ceil(needed_capacity, Visited::BLOCK_SIZE);",
    "    self.bitset.truncate(needed_blocks);",
    "    for block in self.bitset.iter_mut() {",
    "        *block = 0;",
    "    }",
    "    if needed_blocks > self.bitset.len() {",
    "        self.bitset.resize(needed_blocks, 0);",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 2,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "re.get_nfa().states().len().checked_mul(self.stride) matches Some(capacity)",
          "norm": null,
          "value": "true",
          "line": 1855,
          "bound": null
        },
        {
          "cond": "needed_capacity > max_capacity",
          "norm": "max_capacity < needed_capacity",
          "value": "true",
          "line": 1860,
          "bound": null
        }
      ],
      "ret": "Err(err())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        14,
        15,
        16,
        17,
        18,
        19,
        38,
        39
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "re.get_nfa().states().len().checked_mul(self.stride) matches Some(capacity)",
          "norm": null,
          "value": "true",
          "line": 1855,
          "bound": null
        },
        {
          "cond": "needed_capacity > max_capacity",
          "norm": "max_capacity < needed_capacity",
          "value": "false",
          "line": 1860,
          "bound": "needed_capacity == max_capacity"
        },
        {
          "cond": "block in self.bitset.iter_mut()",
          "norm": null,
          "value": "true",
          "line": 1865,
          "bound": null
        },
        {
          "cond": "block in self.bitset.iter_mut()",
          "norm": null,
          "value": "false",
          "line": 1865,
          "bound": null
        },
        {
          "cond": "needed_blocks > self.bitset.len()",
          "norm": null,
          "value": "true",
          "line": 1868,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        14,
        15,
        16,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        31,
        26,
        27,
        28,
        30,
        32,
        33,
        34,
        35,
        37,
        39
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "re.get_nfa().states().len().checked_mul(self.stride) matches Some(capacity)",
          "norm": null,
          "value": "true",
          "line": 1855,
          "bound": null
        },
        {
          "cond": "needed_capacity > max_capacity",
          "norm": "max_capacity < needed_capacity",
          "value": "false",
          "line": 1860,
          "bound": "needed_capacity == max_capacity"
        },
        {
          "cond": "block in self.bitset.iter_mut()",
          "norm": null,
          "value": "true",
          "line": 1865,
          "bound": null
        },
        {
          "cond": "block in self.bitset.iter_mut()",
          "norm": null,
          "value": "false",
          "line": 1865,
          "bound": null
        },
        {
          "cond": "needed_blocks > self.bitset.len()",
          "norm": null,
          "value": "false",
          "line": 1868,
          "bound": "needed_blocks == self.bitset.len()"
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        14,
        15,
        16,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        31,
        26,
        27,
        28,
        30,
        32,
        33,
        36,
        37,
        39
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "re.get_nfa().states().len().checked_mul(self.stride) matches Some(capacity)",
          "norm": null,
          "value": "true",
          "line": 1855,
          "bound": null
        },
        {
          "cond": "needed_capacity > max_capacity",
          "norm": "max_capacity < needed_capacity",
          "value": "false",
          "line": 1860,
          "bound": "needed_capacity == max_capacity"
        },
        {
          "cond": "block in self.bitset.iter_mut()",
          "norm": null,
          "value": "false",
          "line": 1865,
          "bound": null
        },
        {
          "cond": "needed_blocks > self.bitset.len()",
          "norm": null,
          "value": "true",
          "line": 1868,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        14,
        15,
        16,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        32,
        33,
        34,
        35,
        37,
        39
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "re.get_nfa().states().len().checked_mul(self.stride) matches Some(capacity)",
          "norm": null,
          "value": "true",
          "line": 1855,
          "bound": null
        },
        {
          "cond": "needed_capacity > max_capacity",
          "norm": "max_capacity < needed_capacity",
          "value": "false",
          "line": 1860,
          "bound": "needed_capacity == max_capacity"
        },
        {
          "cond": "block in self.bitset.iter_mut()",
          "norm": null,
          "value": "false",
          "line": 1865,
          "bound": null
        },
        {
          "cond": "needed_blocks > self.bitset.len()",
          "norm": null,
          "value": "false",
          "line": 1868,
          "bound": "needed_blocks == self.bitset.len()"
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        14,
        15,
        16,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        32,
        33,
        36,
        37,
        39
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "re.get_nfa().states().len().checked_mul(self.stride) matches None",
          "norm": null,
          "value": "true",
          "line": 1855,
          "bound": null
        },
        {
          "cond": "re.get_nfa().states().len().checked_mul(self.stride) matches None",
          "norm": null,
          "value": "true",
          "line": 1855,
          "bound": null
        }
      ],
      "ret": "Err(err())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        13,
        38,
        39
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}