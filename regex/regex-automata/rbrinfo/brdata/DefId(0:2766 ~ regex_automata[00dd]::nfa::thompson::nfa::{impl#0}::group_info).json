{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::group_info",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:696:5:698:6",
  "doc": "/// Returns the capturing group info for this NFA.\n///\n/// The [`GroupInfo`] provides a way to map to and from capture index\n/// and capture name for each pattern. It also provides a mapping from\n/// each of the capturing groups in every pattern to their corresponding\n/// slot offsets encoded in [`State::Capture`] states.\n///\n/// Note that `GroupInfo` uses reference counting internally, such that\n/// cloning a `GroupInfo` is very cheap.\n///\n/// # Example\n///\n/// This example shows how to get a list of all capture group names for\n/// a particular pattern.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, PatternID};\n///\n/// let nfa = NFA::new(r\"(a)(?P<foo>b)(c)(d)(?P<bar>e)\")?;\n/// // The first is the implicit group that is always unnammed. The next\n/// // 5 groups are the explicit groups found in the concrete syntax above.\n/// let expected = vec![None, None, Some(\"foo\"), None, None, Some(\"bar\")];\n/// let got: Vec<Option<&str>> =\n///     nfa.group_info().pattern_names(PatternID::ZERO).collect();\n/// assert_eq!(expected, got);\n///\n/// // Using an invalid pattern ID will result in nothing yielded.\n/// let got = nfa.group_info().pattern_names(PatternID::must(999)).count();\n/// assert_eq!(0, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn group_info(&self) -> &GroupInfo {",
    "    &self.0.group_info()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&self.0.group_info()",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}