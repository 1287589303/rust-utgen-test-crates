{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::start_anchored",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:473:5:475:6",
  "doc": "/// Return the state identifier of the initial anchored state of this NFA.\n///\n/// The returned identifier is guaranteed to be a valid index into the\n/// slice returned by [`NFA::states`], and is also a valid argument to\n/// [`NFA::state`].\n///\n/// # Example\n///\n/// This example shows a somewhat contrived example where we can easily\n/// predict the anchored starting state.\n///\n/// ```\n/// use regex_automata::nfa::thompson::{NFA, State, WhichCaptures};\n///\n/// let nfa = NFA::compiler()\n///     .configure(NFA::config().which_captures(WhichCaptures::None))\n///     .build(\"a\")?;\n/// let state = nfa.state(nfa.start_anchored());\n/// match *state {\n///     State::ByteRange { trans } => {\n///         assert_eq!(b'a', trans.start);\n///         assert_eq!(b'a', trans.end);\n///     }\n///     _ => unreachable!(\"unexpected state\"),\n/// }\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn start_anchored(&self) -> StateID {",
    "    self.0.start_anchored",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.0.start_anchored",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}