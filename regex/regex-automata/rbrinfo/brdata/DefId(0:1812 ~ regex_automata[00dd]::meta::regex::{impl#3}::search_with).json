{
  "name": "regex_automata::meta::regex::{impl#3}::search_with",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:1240:5:1249:6",
  "doc": "/// This is like [`Regex::search`], but requires the caller to\n/// explicitly pass a [`Cache`].\n///\n/// # Why pass a `Cache` explicitly?\n///\n/// Passing a `Cache` explicitly will bypass the use of an internal memory\n/// pool used by `Regex` to get a `Cache` for a search. The use of this\n/// pool can be slower in some cases when a `Regex` is used from multiple\n/// threads simultaneously. Typically, performance only becomes an issue\n/// when there is heavy contention, which in turn usually only occurs\n/// when each thread's primary unit of work is a regex search on a small\n/// haystack.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{meta::Regex, Input, Match};\n///\n/// let re = Regex::new(r\"Samwise|Sam\")?;\n/// let mut cache = re.create_cache();\n/// let input = Input::new(\n///     \"one of the chief characters, Samwise the Brave\",\n/// );\n/// assert_eq!(\n///     Some(Match::must(0, 29..36)),\n///     re.search_with(&mut cache, &input),\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn search_with(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    ") -> Option<Match> {",
    "    if self.imp.info.is_impossible(input) {",
    "        return None;",
    "    }",
    "    self.imp.strat.search(cache, input)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.imp.info.is_impossible(input)",
          "norm": null,
          "value": "true",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.imp.info.is_impossible(input)",
          "norm": null,
          "value": "false",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}