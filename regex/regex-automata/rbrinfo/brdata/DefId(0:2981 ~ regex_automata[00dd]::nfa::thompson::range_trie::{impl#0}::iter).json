{
  "name": "regex_automata::nfa::thompson::range_trie::{impl#0}::iter",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:246:5:289:6",
  "doc": "/// Iterate over all of the sequences of byte ranges in this trie, and\n/// call the provided function for each sequence. Iteration occurs in\n/// lexicographic order.\n",
  "code": [
    "pub fn iter<E, F: FnMut(&[Utf8Range]) -> Result<(), E>>(",
    "    &self,",
    "    mut f: F,",
    ") -> Result<(), E> {",
    "    let mut stack = self.iter_stack.borrow_mut();",
    "    stack.clear();",
    "    let mut ranges = self.iter_ranges.borrow_mut();",
    "    ranges.clear();",
    "",
    "    // We do iteration in a way that permits us to use a single buffer",
    "    // for our keys. We iterate in a depth first fashion, while being",
    "    // careful to expand our frontier as we move deeper in the trie.",
    "    stack.push(NextIter { state_id: ROOT, tidx: 0 });",
    "    while let Some(NextIter { mut state_id, mut tidx }) = stack.pop() {",
    "        // This could be implemented more simply without an inner loop",
    "        // here, but at the cost of more stack pushes.",
    "        loop {",
    "            let state = self.state(state_id);",
    "            // If we've visited all transitions in this state, then pop",
    "            // back to the parent state.",
    "            if tidx >= state.transitions.len() {",
    "                ranges.pop();",
    "                break;",
    "            }",
    "",
    "            let t = &state.transitions[tidx];",
    "            ranges.push(t.range);",
    "            if t.next_id == FINAL {",
    "                f(&ranges)?;",
    "                ranges.pop();",
    "                tidx += 1;",
    "            } else {",
    "                // Expand our frontier. Once we come back to this state",
    "                // via the stack, start in on the next transition.",
    "                stack.push(NextIter { state_id, tidx: tidx + 1 });",
    "                // Otherwise, move to the first transition of the next",
    "                // state.",
    "                state_id = t.next_id;",
    "                tidx = 0;",
    "            }",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 2,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(NextIter { mut state_id, mut tidx }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 259,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        46,
        47,
        48,
        53
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(NextIter { mut state_id, mut tidx }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 259,
          "bound": null
        },
        {
          "cond": "tidx >= state.transitions.len()",
          "norm": "state.transitions.len() <= tidx",
          "value": "true",
          "line": 266,
          "bound": "tidx == state.transitions.len()"
        },
        {
          "cond": "let Some(NextIter { mut state_id, mut tidx }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 259,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        9,
        10,
        11,
        12,
        46,
        47,
        48,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(NextIter { mut state_id, mut tidx }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 259,
          "bound": null
        },
        {
          "cond": "tidx >= state.transitions.len()",
          "norm": "state.transitions.len() <= tidx",
          "value": "false",
          "line": 266,
          "bound": null
        },
        {
          "cond": "t.next_id == FINAL",
          "norm": "FINAL == t.next_id",
          "value": "true",
          "line": 273,
          "bound": null
        },
        {
          "cond": "f(&ranges)?",
          "norm": null,
          "value": "Err/None",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        33,
        35,
        36,
        49,
        50,
        51,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(NextIter { mut state_id, mut tidx }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 259,
          "bound": null
        },
        {
          "cond": "tidx >= state.transitions.len()",
          "norm": "state.transitions.len() <= tidx",
          "value": "false",
          "line": 266,
          "bound": null
        },
        {
          "cond": "t.next_id == FINAL",
          "norm": "FINAL == t.next_id",
          "value": "true",
          "line": 273,
          "bound": null
        },
        {
          "cond": "f(&ranges)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 274,
          "bound": null
        },
        {
          "cond": "tidx >= state.transitions.len()",
          "norm": "state.transitions.len() <= tidx",
          "value": "true",
          "line": 266,
          "bound": "tidx == state.transitions.len()"
        },
        {
          "cond": "let Some(NextIter { mut state_id, mut tidx }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 259,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        45,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        9,
        10,
        11,
        12,
        46,
        47,
        48,
        53
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(NextIter { mut state_id, mut tidx }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 259,
          "bound": null
        },
        {
          "cond": "tidx >= state.transitions.len()",
          "norm": "state.transitions.len() <= tidx",
          "value": "false",
          "line": 266,
          "bound": null
        },
        {
          "cond": "t.next_id == FINAL",
          "norm": "FINAL == t.next_id",
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "tidx >= state.transitions.len()",
          "norm": "state.transitions.len() <= tidx",
          "value": "true",
          "line": 266,
          "bound": "tidx == state.transitions.len()"
        },
        {
          "cond": "let Some(NextIter { mut state_id, mut tidx }) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 259,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        41,
        42,
        43,
        44,
        45,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        9,
        10,
        11,
        12,
        46,
        47,
        48,
        53
      ],
      "may_contra": true,
      "min_set": true
    }
  ]
}