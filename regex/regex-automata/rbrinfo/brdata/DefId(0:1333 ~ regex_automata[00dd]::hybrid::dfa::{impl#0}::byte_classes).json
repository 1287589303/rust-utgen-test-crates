{
  "name": "regex_automata::hybrid::dfa::{impl#0}::byte_classes",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:402:5:404:6",
  "doc": "/// Returns the equivalence classes that make up the alphabet for this DFA.\n///\n/// Unless [`Config::byte_classes`] was disabled, it is possible that\n/// multiple distinct bytes are grouped into the same equivalence class\n/// if it is impossible for them to discriminate between a match and a\n/// non-match. This has the effect of reducing the overall alphabet size\n/// and in turn potentially substantially reducing the size of the DFA's\n/// transition table.\n///\n/// The downside of using equivalence classes like this is that every state\n/// transition will automatically use this map to convert an arbitrary\n/// byte to its corresponding equivalence class. In practice this has a\n/// negligible impact on performance.\n",
  "code": [
    "pub fn byte_classes(&self) -> &ByteClasses {",
    "    &self.classes",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&self.classes",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}