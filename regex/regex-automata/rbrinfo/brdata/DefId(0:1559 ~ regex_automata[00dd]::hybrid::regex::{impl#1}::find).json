{
  "name": "regex_automata::hybrid::regex::{impl#1}::find",
  "mod_info": {
    "name": "hybrid::regex",
    "loc": "regex-automata/src/hybrid/mod.rs:143:1:143:15"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/regex.rs:344:5:350:6",
  "doc": "/// Returns the start and end offset of the leftmost match. If no match\n/// exists, then `None` is returned.\n///\n/// # Panics\n///\n/// This routine panics if the search could not complete. This can occur\n/// in a number of circumstances:\n///\n/// * The configuration of the lazy DFA may permit it to \"quit\" the search.\n/// For example, setting quit bytes or enabling heuristic support for\n/// Unicode word boundaries. The default configuration does not enable any\n/// option that could result in the lazy DFA quitting.\n/// * The configuration of the lazy DFA may also permit it to \"give up\"\n/// on a search if it makes ineffective use of its transition table\n/// cache. The default configuration does not enable this by default,\n/// although it is typically a good idea to.\n/// * When the provided `Input` configuration is not supported. For\n/// example, by providing an unsupported anchor mode.\n///\n/// When a search panics, callers cannot know whether a match exists or\n/// not.\n///\n/// Use [`Regex::try_search`] if you want to handle these error conditions.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{Match, hybrid::regex::Regex};\n///\n/// let re = Regex::new(\"foo[0-9]+\")?;\n/// let mut cache = re.create_cache();\n/// assert_eq!(\n///     Some(Match::must(0, 3..11)),\n///     re.find(&mut cache, \"zzzfoo12345zzz\"),\n/// );\n///\n/// // Even though a match is found after reading the first byte (`a`),\n/// // the default leftmost-first match semantics demand that we find the\n/// // earliest match that prefers earlier parts of the pattern over latter\n/// // parts.\n/// let re = Regex::new(\"abc|a\")?;\n/// let mut cache = re.create_cache();\n/// assert_eq!(Some(Match::must(0, 0..3)), re.find(&mut cache, \"abc\"));\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn find<'h, I: Into<Input<'h>>>(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: I,",
    ") -> Option<Match> {",
    "    self.try_search(cache, &input.into()).unwrap()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}