{
  "name": "regex_automata::util::captures::{impl#8}::add_first_group",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": false,
  "loc": "regex-automata/src/util/captures.rs:2192:5:2206:6",
  "doc": "/// This adds the first unnamed group for the given pattern ID. The given\n/// pattern ID must be zero if this is the first time this method is\n/// called, or must be exactly one more than the pattern ID supplied to the\n/// previous call to this method. (This method panics if this rule is\n/// violated.)\n///\n/// This can be thought of as initializing the GroupInfo state for the\n/// given pattern and closing off the state for any previous pattern.\n",
  "code": [
    "fn add_first_group(&mut self, pid: PatternID) {",
    "    assert_eq!(pid.as_usize(), self.slot_ranges.len());",
    "    assert_eq!(pid.as_usize(), self.name_to_index.len());",
    "    assert_eq!(pid.as_usize(), self.index_to_name.len());",
    "    // This is the start of our slots for the explicit capturing groups.",
    "    // Note that since the slots for the 0th group for every pattern appear",
    "    // before any slots for the nth group (where n > 0) in any pattern, we",
    "    // will have to fix up the slot ranges once we know how many patterns",
    "    // we've added capture groups for.",
    "    let slot_start = self.small_slot_len();",
    "    self.slot_ranges.push((slot_start, slot_start));",
    "    self.name_to_index.push(CaptureNameMap::new());",
    "    self.index_to_name.push(vec![None]);",
    "    self.memory_extra += core::mem::size_of::<Option<Arc<str>>>();",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 2,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        9,
        10,
        11,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        9,
        10,
        12,
        30
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        8,
        30
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        30
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}