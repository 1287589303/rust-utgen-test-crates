{
  "name": "regex_automata::meta::regex::{impl#20}::onepass_size_limit",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2784:5:2786:6",
  "doc": "/// Sets the size limit, in bytes, for the one-pass DFA.\n///\n/// Setting it to `None` disables the limit. Disabling the limit is\n/// strongly discouraged when compiling untrusted patterns. Even if the\n/// patterns are trusted, it still may not be a good idea, since a one-pass\n/// DFA can use a lot of memory. With that said, as the size of a regex\n/// increases, the likelihood of it being one-pass likely decreases.\n///\n/// This defaults to some reasonable number that permits most reasonable\n/// one-pass patterns.\n///\n/// # Example\n///\n/// This shows how to set the one-pass DFA size limit. Note that since\n/// a one-pass DFA is an optional component of the meta regex engine,\n/// this size limit only impacts what is built internally and will never\n/// determine whether a `Regex` itself fails to build.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::meta::Regex;\n///\n/// let result = Regex::builder()\n///     .configure(Regex::config().onepass_size_limit(Some(2 * (1<<20))))\n///     .build(r\"\\pL{5}\");\n/// assert!(result.is_ok());\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn onepass_size_limit(self, limit: Option<usize>) -> Config {",
    "    Config { onepass_size_limit: Some(limit), ..self }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Config { onepass_size_limit: Some(limit), ..self }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}