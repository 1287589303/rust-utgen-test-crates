{
  "name": "regex_automata::util::search::{impl#0}::start",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:617:5:619:6",
  "doc": "/// Return the start position of this search.\n///\n/// This is a convenience routine for `search.get_span().start()`.\n///\n/// When [`Input::is_done`] is `false`, this is guaranteed to return\n/// an offset that is less than or equal to [`Input::end`]. Otherwise,\n/// the offset is one greater than [`Input::end`].\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::Input;\n///\n/// let input = Input::new(\"foobar\");\n/// assert_eq!(0, input.start());\n///\n/// let input = Input::new(\"foobar\").span(2..4);\n/// assert_eq!(2, input.start());\n/// ```\n",
  "code": [
    "pub fn start(&self) -> usize {",
    "    self.get_span().start",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.get_span().start",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}