{
  "name": "regex_automata::dfa::dense::{impl#3}::new",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:1462:5:1464:6",
  "doc": "/// Parse the given regular expression using a default configuration and\n/// return the corresponding DFA.\n///\n/// If you want a non-default configuration, then use the\n/// [`dense::Builder`](Builder) to set your own configuration.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{dfa::{Automaton, dense}, HalfMatch, Input};\n///\n/// let dfa = dense::DFA::new(\"foo[0-9]+bar\")?;\n/// let expected = Some(HalfMatch::must(0, 11));\n/// assert_eq!(expected, dfa.try_search_fwd(&Input::new(\"foo12345bar\"))?);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn new(pattern: &str) -> Result<OwnedDFA, BuildError> {",
    "    Builder::new().build(pattern)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}