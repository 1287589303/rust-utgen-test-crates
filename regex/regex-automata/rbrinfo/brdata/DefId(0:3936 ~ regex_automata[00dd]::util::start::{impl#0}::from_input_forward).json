{
  "name": "regex_automata::util::start::{impl#0}::from_input_forward",
  "mod_info": {
    "name": "util::start",
    "loc": "regex-automata/src/util/mod.rs:43:1:43:15"
  },
  "visible": true,
  "loc": "regex-automata/src/util/start.rs:141:5:147:6",
  "doc": "/// A convenience routine for building a start configuration from an\n/// [`Input`] for a forward search.\n///\n/// This automatically sets the look-behind byte to the byte immediately\n/// preceding the start of the search. If the start of the search is at\n/// offset `0`, then no look-behind byte is set.\n",
  "code": [
    "pub fn from_input_forward(input: &Input<'_>) -> Config {",
    "    let look_behind = input",
    "        .start()",
    "        .checked_sub(1)",
    "        .and_then(|i| input.haystack().get(i).copied());",
    "    Config { look_behind, anchored: input.get_anchored() }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Config { look_behind, anchored: input.get_anchored() }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}