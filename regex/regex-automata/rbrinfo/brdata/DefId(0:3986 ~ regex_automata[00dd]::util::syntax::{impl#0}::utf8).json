{
  "name": "regex_automata::util::syntax::{impl#0}::utf8",
  "mod_info": {
    "name": "util::syntax",
    "loc": "regex-automata/src/util/mod.rs:45:1:45:16"
  },
  "visible": true,
  "loc": "regex-automata/src/util/syntax.rs:327:5:330:6",
  "doc": "/// When disabled, the builder will permit the construction of a regular\n/// expression that may match invalid UTF-8.\n///\n/// For example, when [`Config::unicode`] is disabled, then\n/// expressions like `[^a]` may match invalid UTF-8 since they can match\n/// any single byte that is not `a`. By default, these sub-expressions\n/// are disallowed to avoid returning offsets that split a UTF-8\n/// encoded codepoint. However, in cases where matching at arbitrary\n/// locations is desired, this option can be disabled to permit all such\n/// sub-expressions.\n///\n/// When enabled (the default), the builder is guaranteed to produce a\n/// regex that will only ever match valid UTF-8 (otherwise, the builder\n/// will return an error).\n",
  "code": [
    "pub fn utf8(mut self, yes: bool) -> Config {",
    "    self.utf8 = yes;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}