{
  "name": "regex_automata::util::captures::{impl#7}::to_name",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1730:5:1733:6",
  "doc": "/// Return the capture name for the given index and given pattern. If the\n/// corresponding group does not have a name, then this returns `None`.\n///\n/// If the pattern ID is invalid, then this returns `None`.\n///\n/// If the group index is invalid for the given pattern, then this returns\n/// `None`. A group `index` is valid for a pattern `pid` in an `nfa` if and\n/// only if `index < nfa.pattern_capture_len(pid)`.\n///\n/// This also returns `None` for all inputs if these captures are empty\n/// (e.g., built from an empty [`GroupInfo`]). To check whether captures\n/// are present for a specific pattern, use [`GroupInfo::group_len`].\n///\n/// # Example\n///\n/// This example shows how to find the capture group name for the given\n/// pattern and group index.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{nfa::thompson::NFA, PatternID};\n///\n/// let (pid0, pid1) = (PatternID::must(0), PatternID::must(1));\n///\n/// let nfa = NFA::new_many(&[\n///     r\"a(?P<foo>\\w+)z(\\s+)x(\\d+)\",\n///     r\"a(\\d+)z(?P<foo>\\s+)\",\n/// ])?;\n/// let groups = nfa.group_info();\n/// assert_eq!(None, groups.to_name(pid0, 0));\n/// assert_eq!(Some(\"foo\"), groups.to_name(pid0, 1));\n/// assert_eq!(None, groups.to_name(pid0, 2));\n/// assert_eq!(None, groups.to_name(pid0, 3));\n///\n/// assert_eq!(None, groups.to_name(pid1, 0));\n/// assert_eq!(None, groups.to_name(pid1, 1));\n/// assert_eq!(Some(\"foo\"), groups.to_name(pid1, 2));\n/// // '3' is not a valid capture index for the second pattern.\n/// assert_eq!(None, groups.to_name(pid1, 3));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn to_name(&self, pid: PatternID, group_index: usize) -> Option<&str> {",
    "    let pattern_names = self.0.index_to_name.get(pid.as_usize())?;",
    "    pattern_names.get(group_index)?.as_deref()",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.0.index_to_name.get(pid.as_usize())?",
          "norm": null,
          "value": "Err/None",
          "line": 1731,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.0.index_to_name.get(pid.as_usize())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1731,
          "bound": null
        },
        {
          "cond": "pattern_names.get(group_index)?",
          "norm": null,
          "value": "Err/None",
          "line": 1732,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        15,
        17,
        18,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.0.index_to_name.get(pid.as_usize())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1731,
          "bound": null
        },
        {
          "cond": "pattern_names.get(group_index)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1732,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}