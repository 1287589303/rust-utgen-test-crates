{
  "name": "regex_automata::hybrid::dfa::{impl#5}::next_state_id",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:2319:5:2330:6",
  "doc": "/// Allocate a new state ID.\n///\n/// This will never return an unknown lazy state ID.\n///\n/// If caching this state would otherwise result in a cache that has been\n/// cleared too many times, then an error is returned.\n",
  "code": [
    "fn next_state_id(&mut self) -> Result<LazyStateID, CacheError> {",
    "    let sid = match LazyStateID::new(self.cache.trans.len()) {",
    "        Ok(sid) => sid,",
    "        Err(_) => {",
    "            self.try_clear_cache()?;",
    "            // This has to pass since we check that ID capacity at",
    "            // construction time can fit at least MIN_STATES states.",
    "            LazyStateID::new(self.cache.trans.len()).unwrap()",
    "        }",
    "    };",
    "    Ok(sid)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "LazyStateID::new(self.cache.trans.len()) matches Err(_)",
          "norm": null,
          "value": "true",
          "line": 2320,
          "bound": null
        },
        {
          "cond": "self.try_clear_cache()?",
          "norm": null,
          "value": "Err/None",
          "line": 2323,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        7,
        8,
        10,
        12,
        13,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "LazyStateID::new(self.cache.trans.len()) matches Err(_)",
          "norm": null,
          "value": "true",
          "line": 2320,
          "bound": null
        },
        {
          "cond": "self.try_clear_cache()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2323,
          "bound": null
        }
      ],
      "ret": "Ok(sid)",
      "path": [
        0,
        1,
        2,
        5,
        7,
        8,
        11,
        14,
        15,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "LazyStateID::new(self.cache.trans.len()) matches Ok(sid)",
          "norm": null,
          "value": "true",
          "line": 2320,
          "bound": null
        },
        {
          "cond": "LazyStateID::new(self.cache.trans.len()) matches Ok(sid)",
          "norm": null,
          "value": "true",
          "line": 2320,
          "bound": null
        }
      ],
      "ret": "Ok(sid)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}