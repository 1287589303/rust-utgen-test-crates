{
  "name": "regex_automata::util::look::{impl#1}::contains_anchor_line",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:320:5:325:6",
  "doc": "/// Returns true if and only if this set contains any \"start/end of line\"\n/// anchors. This doesn't include \"start/end of haystack\" anchors. This\n/// includes both `\\n` line anchors and CRLF (`\\r\\n`) aware line anchors.\n",
  "code": [
    "pub fn contains_anchor_line(&self) -> bool {",
    "    self.contains(Look::StartLF)",
    "        || self.contains(Look::EndLF)",
    "        || self.contains(Look::StartCRLF)",
    "        || self.contains(Look::EndCRLF)",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.contains(Look::StartLF)",
          "norm": null,
          "value": "true",
          "line": 321,
          "bound": null
        }
      ],
      "ret": "self.contains(Look::StartLF)\n            || self.contains(Look::EndLF)\n            || self.contains(Look::StartCRLF)\n            || self.contains(Look::EndCRLF)",
      "path": [
        0,
        1,
        2,
        9,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.contains(Look::StartLF)",
          "norm": null,
          "value": "false",
          "line": 321,
          "bound": null
        },
        {
          "cond": "self.contains(Look::EndLF)",
          "norm": null,
          "value": "true",
          "line": 322,
          "bound": null
        }
      ],
      "ret": "self.contains(Look::StartLF)\n            || self.contains(Look::EndLF)\n            || self.contains(Look::StartCRLF)\n            || self.contains(Look::EndCRLF)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        9,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.contains(Look::StartLF)",
          "norm": null,
          "value": "false",
          "line": 321,
          "bound": null
        },
        {
          "cond": "self.contains(Look::EndLF)",
          "norm": null,
          "value": "false",
          "line": 322,
          "bound": null
        },
        {
          "cond": "self.contains(Look::StartCRLF)",
          "norm": null,
          "value": "true",
          "line": 323,
          "bound": null
        }
      ],
      "ret": "self.contains(Look::StartLF)\n            || self.contains(Look::EndLF)\n            || self.contains(Look::StartCRLF)\n            || self.contains(Look::EndCRLF)",
      "path": [
        0,
        1,
        3,
        4,
        6,
        7,
        8,
        9,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.contains(Look::StartLF)",
          "norm": null,
          "value": "false",
          "line": 321,
          "bound": null
        },
        {
          "cond": "self.contains(Look::EndLF)",
          "norm": null,
          "value": "false",
          "line": 322,
          "bound": null
        },
        {
          "cond": "self.contains(Look::StartCRLF)",
          "norm": null,
          "value": "false",
          "line": 323,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        6,
        7,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}