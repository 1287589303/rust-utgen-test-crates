{
  "name": "regex_automata::util::search::{impl#0}::get_range",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:682:5:684:6",
  "doc": "/// Return the span as a range for this search configuration.\n///\n/// If one was not explicitly set, then the span corresponds to the entire\n/// range of the haystack.\n///\n/// When [`Input::is_done`] is `false`, the range returned is guaranteed\n/// to correspond to valid bounds for this input's haystack.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::Input;\n///\n/// let input = Input::new(\"foobar\");\n/// assert_eq!(0..6, input.get_range());\n/// ```\n",
  "code": [
    "pub fn get_range(&self) -> Range<usize> {",
    "    self.get_span().range()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}