{
  "name": "regex_automata::meta::regex::{impl#4}::create_cache",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:1586:5:1588:6",
  "doc": "/// Creates a new cache for use with lower level search APIs like\n/// [`Regex::search_with`].\n///\n/// The cache returned should only be used for searches for this `Regex`.\n/// If you want to reuse the cache for another `Regex`, then you must call\n/// [`Cache::reset`] with that `Regex`.\n///\n/// This is a convenience routine for [`Cache::new`].\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{meta::Regex, Input, Match};\n///\n/// let re = Regex::new(r\"(?-u)m\\w+\\s+m\\w+\")?;\n/// let mut cache = re.create_cache();\n/// let input = Input::new(\"crazy janey and her mission man\");\n/// assert_eq!(\n///     Some(Match::must(0, 20..31)),\n///     re.search_with(&mut cache, &input),\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn create_cache(&self) -> Cache {",
    "    self.imp.strat.create_cache()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}