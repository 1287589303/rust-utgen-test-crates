{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::set_utf8",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:1219:5:1221:6",
  "doc": "/// Set whether the NFA produced by this builder should only match UTF-8.\n///\n/// This should be set when both of the following are true:\n///\n/// 1. The caller guarantees that the NFA created by this build will only\n/// report non-empty matches with spans that are valid UTF-8.\n/// 2. The caller desires regex engines using this NFA to avoid reporting\n/// empty matches with a span that splits a valid UTF-8 encoded codepoint.\n///\n/// Property (1) is not checked. Instead, this requires the caller to\n/// promise that it is true. Property (2) corresponds to the behavior of\n/// regex engines using the NFA created by this builder. Namely, there\n/// is no way in the NFA's graph itself to say that empty matches found\n/// by, for example, the regex `a*` will fall on valid UTF-8 boundaries.\n/// Instead, this option is used to communicate the UTF-8 semantic to regex\n/// engines that will typically implement it as a post-processing step by\n/// filtering out empty matches that don't fall on UTF-8 boundaries.\n///\n/// If you're building an NFA from an HIR (and not using a\n/// [`thompson::Compiler`](crate::nfa::thompson::Compiler)), then you can\n/// use the [`syntax::Config::utf8`](crate::util::syntax::Config::utf8)\n/// option to guarantee that if the HIR detects a non-empty match, then it\n/// is guaranteed to be valid UTF-8.\n///\n/// Note that property (2) does *not* specify the behavior of executing\n/// a search on a haystack that is not valid UTF-8. Therefore, if you're\n/// *not* running this NFA on strings that are guaranteed to be valid\n/// UTF-8, you almost certainly do not want to enable this option.\n/// Similarly, if you are running the NFA on strings that *are* guaranteed\n/// to be valid UTF-8, then you almost certainly want to enable this option\n/// unless you can guarantee that your NFA will never produce a zero-width\n/// match.\n///\n/// It is disabled by default.\n",
  "code": [
    "pub fn set_utf8(&mut self, yes: bool) {",
    "    self.utf8 = yes;",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}