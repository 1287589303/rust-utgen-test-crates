{
  "name": "regex_automata::dfa::sparse::{impl#3}::to_bytes",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:626:5:633:6",
  "doc": "/// The implementation of the public `to_bytes` serialization methods,\n/// which is generic over endianness.\n",
  "code": [
    "fn to_bytes<E: Endian>(&self) -> Vec<u8> {",
    "    let mut buf = vec![0; self.write_to_len()];",
    "    // This should always succeed since the only possible serialization",
    "    // error is providing a buffer that's too small, but we've ensured that",
    "    // `buf` is big enough here.",
    "    self.write_to::<E>(&mut buf).unwrap();",
    "    buf",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "buf",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}