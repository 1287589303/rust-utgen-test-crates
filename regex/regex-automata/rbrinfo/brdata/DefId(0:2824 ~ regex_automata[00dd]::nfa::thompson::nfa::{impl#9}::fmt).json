{
  "name": "regex_automata::nfa::thompson::nfa::{impl#9}::fmt",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1999:5:2014:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
    "    use crate::util::escape::DebugByte;",
    "",
    "    let Transition { start, end, next } = *self;",
    "    if self.start == self.end {",
    "        write!(f, \"{:?} => {:?}\", DebugByte(start), next.as_usize())",
    "    } else {",
    "        write!(",
    "            f,",
    "            \"{:?}-{:?} => {:?}\",",
    "            DebugByte(start),",
    "            DebugByte(end),",
    "            next.as_usize(),",
    "        )",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.start == self.end",
          "norm": "self.end == self.start",
          "value": "true",
          "line": 2003,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.start == self.end",
          "norm": "self.end == self.start",
          "value": "false",
          "line": 2003,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}