{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::states",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:659:5:661:6",
  "doc": "/// Returns a slice of all states in this NFA.\n///\n/// The slice returned is indexed by `StateID`. This provides a convenient\n/// way to access states while following transitions among those states.\n///\n/// # Example\n///\n/// This demonstrates that disabling UTF-8 mode can shrink the size of the\n/// NFA considerably in some cases, especially when using Unicode character\n/// classes.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::nfa::thompson::NFA;\n///\n/// let nfa_unicode = NFA::new(r\"\\w\")?;\n/// let nfa_ascii = NFA::new(r\"(?-u)\\w\")?;\n/// // Yes, a factor of 45 difference. No lie.\n/// assert!(40 * nfa_ascii.states().len() < nfa_unicode.states().len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn states(&self) -> &[State] {",
    "    &self.0.states",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&self.0.states",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}