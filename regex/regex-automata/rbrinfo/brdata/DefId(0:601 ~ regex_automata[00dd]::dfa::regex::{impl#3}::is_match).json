{
  "name": "regex_automata::dfa::regex::{impl#3}::is_match",
  "mod_info": {
    "name": "dfa::regex",
    "loc": "regex-automata/src/dfa/mod.rs:341:1:341:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/regex.rs:358:5:363:6",
  "doc": "/// Returns true if and only if this regex matches the given haystack.\n///\n/// This routine may short circuit if it knows that scanning future input\n/// will never lead to a different result. In particular, if the underlying\n/// DFA enters a match state or a dead state, then this routine will return\n/// `true` or `false`, respectively, without inspecting any future input.\n///\n/// # Panics\n///\n/// This routine panics if the search could not complete. This can occur\n/// in a number of circumstances:\n///\n/// * The configuration of the DFA may permit it to \"quit\" the search.\n/// For example, setting quit bytes or enabling heuristic support for\n/// Unicode word boundaries. The default configuration does not enable any\n/// option that could result in the DFA quitting.\n/// * When the provided `Input` configuration is not supported. For\n/// example, by providing an unsupported anchor mode.\n///\n/// When a search panics, callers cannot know whether a match exists or\n/// not.\n///\n/// Use [`Regex::try_search`] if you want to handle these error conditions.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::dfa::regex::Regex;\n///\n/// let re = Regex::new(\"foo[0-9]+bar\")?;\n/// assert_eq!(true, re.is_match(\"foo12345bar\"));\n/// assert_eq!(false, re.is_match(\"foobar\"));\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn is_match<'h, I: Into<Input<'h>>>(&self, input: I) -> bool {",
    "    // Not only can we do an \"earliest\" search, but we can avoid doing a",
    "    // reverse scan too.",
    "    let input = input.into().earliest(true);",
    "    self.forward().try_search_fwd(&input).map(|x| x.is_some()).unwrap()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}