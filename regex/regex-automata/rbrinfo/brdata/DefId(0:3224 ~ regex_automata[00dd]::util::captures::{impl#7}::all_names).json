{
  "name": "regex_automata::util::captures::{impl#7}::all_names",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1829:5:1836:6",
  "doc": "/// Return an iterator of all capture groups for all patterns supported by\n/// this `GroupInfo`. Each item yielded is a triple of the group's pattern\n/// ID, index in the pattern and the group's name, if present.\n///\n/// # Example\n///\n/// This example shows how to get a list of all capture groups found in\n/// one NFA, potentially spanning multiple patterns.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, PatternID};\n///\n/// let nfa = NFA::new_many(&[\n///     r\"(?P<foo>a)\",\n///     r\"a\",\n///     r\"(a)\",\n/// ])?;\n/// let expected = vec![\n///     (PatternID::must(0), 0, None),\n///     (PatternID::must(0), 1, Some(\"foo\")),\n///     (PatternID::must(1), 0, None),\n///     (PatternID::must(2), 0, None),\n///     (PatternID::must(2), 1, None),\n/// ];\n/// let got: Vec<(PatternID, usize, Option<&str>)> =\n///     nfa.group_info().all_names().collect();\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Unlike other capturing group related routines, this routine doesn't\n/// panic even if captures aren't enabled on this NFA:\n///\n/// ```\n/// use regex_automata::nfa::thompson::{NFA, WhichCaptures};\n///\n/// let nfa = NFA::compiler()\n///     .configure(NFA::config().which_captures(WhichCaptures::None))\n///     .build_many(&[\n///         r\"(?P<foo>a)\",\n///         r\"a\",\n///         r\"(a)\",\n///     ])?;\n/// // When captures aren't enabled, there's nothing to return.\n/// assert_eq!(0, nfa.group_info().all_names().count());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn all_names(&self) -> GroupInfoAllNames<'_> {",
    "    GroupInfoAllNames {",
    "        group_info: self,",
    "        pids: PatternID::iter(self.pattern_len()),",
    "        current_pid: None,",
    "        names: None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "GroupInfoAllNames {\n            group_info: self,\n            pids: PatternID::iter(self.pattern_len()),\n            current_pid: None,\n            names: None,\n        }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}