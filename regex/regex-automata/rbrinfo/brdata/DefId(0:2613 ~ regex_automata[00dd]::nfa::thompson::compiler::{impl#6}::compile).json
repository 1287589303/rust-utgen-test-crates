{
  "name": "regex_automata::nfa::thompson::compiler::{impl#6}::compile",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:1806:5:1817:6",
  "doc": "",
  "code": [
    "fn compile(",
    "    &mut self,",
    "    node: Vec<Transition>,",
    ") -> Result<StateID, BuildError> {",
    "    let hash = self.state.compiled.hash(&node);",
    "    if let Some(id) = self.state.compiled.get(&node, hash) {",
    "        return Ok(id);",
    "    }",
    "    let id = self.builder.add_sparse(node.clone())?;",
    "    self.state.compiled.set(node, hash, id);",
    "    Ok(id)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(id) = self.state.compiled.get(&node, hash)",
          "norm": null,
          "value": "true",
          "line": 1811,
          "bound": null
        },
        {
          "cond": "self.builder.add_sparse(node.clone())?",
          "norm": null,
          "value": "Err/None",
          "line": 1814,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        12,
        14,
        15,
        18,
        19,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(id) = self.state.compiled.get(&node, hash)",
          "norm": null,
          "value": "true",
          "line": 1811,
          "bound": null
        },
        {
          "cond": "self.builder.add_sparse(node.clone())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1814,
          "bound": null
        }
      ],
      "ret": "Ok(id)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        13,
        16,
        17,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(id) = self.state.compiled.get(&node, hash)",
          "norm": null,
          "value": "true",
          "line": 1811,
          "bound": null
        }
      ],
      "ret": "Ok(id)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        20,
        21
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}