{
  "name": "regex_automata::util::look::is_word_char::fwd",
  "mod_info": {
    "name": "util::look::is_word_char",
    "loc": "regex-automata/src/util/look.rs:1572:1:1610:2"
  },
  "visible": false,
  "loc": "regex-automata/src/util/look.rs:1582:5:1594:6",
  "doc": "",
  "code": [
    "pub(super) fn fwd(",
    "    haystack: &[u8],",
    "    at: usize,",
    ") -> Result<bool, super::UnicodeWordBoundaryError> {",
    "    Ok(match utf8::decode(&haystack[at..]) {",
    "        None | Some(Err(_)) => false,",
    "        Some(Ok(ch)) => try_is_word_character(ch).expect(",
    "            \"since unicode-word-boundary, syntax and unicode-perl \\",
    "             are all enabled, it is expected that \\",
    "             try_is_word_character succeeds\",",
    "        ),",
    "    })",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "utf8::decode(&haystack[at..]) matches Some(Ok(ch)) or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 1586,
          "bound": null
        },
        {
          "cond": "utf8::decode(&haystack[at..]) matches Some(Ok(ch)) or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 1586,
          "bound": null
        },
        {
          "cond": "utf8::decode(&haystack[at..]) matches None or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 1586,
          "bound": null
        }
      ],
      "ret": "Ok(match utf8::decode(&haystack[at..]) {\n            None | Some(Err(_)) => false,\n            Some(Ok(ch)) => try_is_word_character(ch).expect(\n                \"since unicode-word-boundary, syntax and unicode-perl \\\n                 are all enabled, it is expected that \\\n                 try_is_word_character succeeds\",\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        10
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "utf8::decode(&haystack[at..]) matches Some(Ok(ch)) or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 1586,
          "bound": null
        },
        {
          "cond": "utf8::decode(&haystack[at..]) matches None",
          "norm": null,
          "value": "true",
          "line": 1586,
          "bound": null
        }
      ],
      "ret": "Ok(match utf8::decode(&haystack[at..]) {\n            None | Some(Err(_)) => false,\n            Some(Ok(ch)) => try_is_word_character(ch).expect(\n                \"since unicode-word-boundary, syntax and unicode-perl \\\n                 are all enabled, it is expected that \\\n                 try_is_word_character succeeds\",\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "utf8::decode(&haystack[at..]) matches None",
          "norm": null,
          "value": "true",
          "line": 1586,
          "bound": null
        },
        {
          "cond": "utf8::decode(&haystack[at..]) matches None or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 1586,
          "bound": null
        }
      ],
      "ret": "Ok(match utf8::decode(&haystack[at..]) {\n            None | Some(Err(_)) => false,\n            Some(Ok(ch)) => try_is_word_character(ch).expect(\n                \"since unicode-word-boundary, syntax and unicode-perl \\\n                 are all enabled, it is expected that \\\n                 try_is_word_character succeeds\",\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        6,
        7,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}