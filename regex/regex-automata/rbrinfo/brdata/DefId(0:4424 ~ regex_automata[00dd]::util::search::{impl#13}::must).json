{
  "name": "regex_automata::util::search::{impl#13}::must",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1051:5:1053:6",
  "doc": "/// Create a new match from a pattern ID and a byte offset span.\n///\n/// This constructor is generic over how a span is provided. While\n/// a [`Span`] may be given directly, one may also provide a\n/// `std::ops::Range<usize>`.\n///\n/// This is like [`Match::new`], but accepts a `usize` instead of a\n/// [`PatternID`]. This panics if the given `usize` is not representable\n/// as a `PatternID`.\n///\n/// # Panics\n///\n/// This panics if `end < start` or if `pattern > PatternID::MAX`.\n///\n/// # Example\n///\n/// This shows how to create a match for the third pattern in a regex\n/// object using convenient range syntax.\n///\n/// ```\n/// use regex_automata::Match;\n///\n/// let m = Match::must(3, 5..10);\n/// assert_eq!(3, m.pattern().as_usize());\n/// assert_eq!(5, m.start());\n/// assert_eq!(10, m.end());\n/// ```\n",
  "code": [
    "pub fn must<S: Into<Span>>(pattern: usize, span: S) -> Match {",
    "    Match::new(PatternID::must(pattern), span)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}