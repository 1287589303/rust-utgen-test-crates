{
  "name": "regex_automata::util::prefilter::memmem::{impl#0}::new",
  "mod_info": {
    "name": "util::prefilter::memmem",
    "loc": "regex-automata/src/util/prefilter/mod.rs:39:1:39:12"
  },
  "visible": true,
  "loc": "regex-automata/src/util/prefilter/memmem.rs:15:5:32:6",
  "doc": "",
  "code": [
    "pub(crate) fn new<B: AsRef<[u8]>>(",
    "    _kind: MatchKind,",
    "    needles: &[B],",
    ") -> Option<Memmem> {",
    "    #[cfg(not(all(feature = \"std\", feature = \"perf-literal-substring\")))]",
    "    {",
    "        None",
    "    }",
    "    #[cfg(all(feature = \"std\", feature = \"perf-literal-substring\"))]",
    "    {",
    "        if needles.len() != 1 {",
    "            return None;",
    "        }",
    "        let needle = needles[0].as_ref();",
    "        let finder = memchr::memmem::Finder::new(needle).into_owned();",
    "        Some(Memmem { finder })",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "needles.len() != 1",
          "norm": "1 != needles.len()",
          "value": "true",
          "line": 25,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "needles.len() != 1",
          "norm": "1 != needles.len()",
          "value": "false",
          "line": 25,
          "bound": null
        }
      ],
      "ret": "Some(Memmem { finder })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}