{
  "name": "regex_automata::meta::regex::{impl#1}::captures",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:582:5:588:6",
  "doc": "/// Executes a leftmost forward search and writes the spans of capturing\n/// groups that participated in a match into the provided [`Captures`]\n/// value. If no match was found, then [`Captures::is_match`] is guaranteed\n/// to return `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{meta::Regex, Span};\n///\n/// let re = Regex::new(r\"^([0-9]{4})-([0-9]{2})-([0-9]{2})$\")?;\n/// let mut caps = re.create_captures();\n///\n/// re.captures(\"2010-03-14\", &mut caps);\n/// assert!(caps.is_match());\n/// assert_eq!(Some(Span::from(0..4)), caps.get_group(1));\n/// assert_eq!(Some(Span::from(5..7)), caps.get_group(2));\n/// assert_eq!(Some(Span::from(8..10)), caps.get_group(3));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn captures<'h, I: Into<Input<'h>>>(",
    "    &self,",
    "    input: I,",
    "    caps: &mut Captures,",
    ") {",
    "    self.search_captures(&input.into(), caps)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}