{
  "name": "regex_automata::util::captures::{impl#7}::implicit_slot_len",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:2099:5:2101:6",
  "doc": "/// Returns the total number of slots for implicit capturing groups.\n///\n/// This is like [`GroupInfo::slot_len`], except it doesn't include the\n/// explicit slots for each pattern. Since there are always exactly 2\n/// implicit slots for each pattern, the number of implicit slots is always\n/// equal to twice the number of patterns.\n///\n/// # Example\n///\n/// This example shows the relationship between the number of capturing\n/// groups, implicit slots and explicit slots.\n///\n/// ```\n/// use regex_automata::util::captures::GroupInfo;\n///\n/// // There are 11 total groups here.\n/// let info = GroupInfo::new(vec![vec![None, Some(\"foo\"), Some(\"bar\")]])?;\n/// // 2 slots per group gives us 11*2=22 slots.\n/// assert_eq!(6, info.slot_len());\n/// // 2 implicit slots per pattern gives us 2 implicit slots since there\n/// // is 1 pattern.\n/// assert_eq!(2, info.implicit_slot_len());\n/// // 2 explicit capturing groups gives us 2*2=4 explicit slots.\n/// assert_eq!(4, info.explicit_slot_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn implicit_slot_len(&self) -> usize {",
    "    self.pattern_len() * 2",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.pattern_len() * 2",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}