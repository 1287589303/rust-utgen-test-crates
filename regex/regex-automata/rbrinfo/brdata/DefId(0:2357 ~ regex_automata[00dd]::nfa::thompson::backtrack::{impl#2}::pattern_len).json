{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#2}::pattern_len",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:753:5:755:6",
  "doc": "/// Returns the total number of patterns compiled into this\n/// `BoundedBacktracker`.\n///\n/// In the case of a `BoundedBacktracker` that contains no patterns, this\n/// returns `0`.\n///\n/// # Example\n///\n/// This example shows the pattern length for a `BoundedBacktracker` that\n/// never matches:\n///\n/// ```\n/// use regex_automata::nfa::thompson::backtrack::BoundedBacktracker;\n///\n/// let re = BoundedBacktracker::never_match()?;\n/// assert_eq!(re.pattern_len(), 0);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// And another example for a `BoundedBacktracker` that matches at every\n/// position:\n///\n/// ```\n/// use regex_automata::nfa::thompson::backtrack::BoundedBacktracker;\n///\n/// let re = BoundedBacktracker::always_match()?;\n/// assert_eq!(re.pattern_len(), 1);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// And finally, a `BoundedBacktracker` that was constructed from multiple\n/// patterns:\n///\n/// ```\n/// use regex_automata::nfa::thompson::backtrack::BoundedBacktracker;\n///\n/// let re = BoundedBacktracker::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"])?;\n/// assert_eq!(re.pattern_len(), 3);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn pattern_len(&self) -> usize {",
    "    self.nfa.pattern_len()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}