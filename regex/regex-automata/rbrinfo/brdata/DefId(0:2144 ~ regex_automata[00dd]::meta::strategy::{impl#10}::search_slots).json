{
  "name": "regex_automata::meta::strategy::{impl#10}::search_slots",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:1843:5:1881:6",
  "doc": "",
  "code": [
    "fn search_slots(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    "    slots: &mut [Option<NonMaxUsize>],",
    ") -> Option<PatternID> {",
    "    if input.get_anchored().is_anchored() {",
    "        return self.core.search_slots(cache, input, slots);",
    "    }",
    "    if !self.core.is_capture_search_needed(slots.len()) {",
    "        trace!(\"asked for slots unnecessarily, trying fast path\");",
    "        let m = self.search(cache, input)?;",
    "        copy_match_to_slots(m, slots);",
    "        return Some(m.pattern());",
    "    }",
    "    let m = match self.try_search_full(cache, input) {",
    "        Err(RetryError::Quadratic(_err)) => {",
    "            trace!(\"reverse inner captures optimization failed: {}\", _err);",
    "            return self.core.search_slots(cache, input, slots);",
    "        }",
    "        Err(RetryError::Fail(_err)) => {",
    "            trace!(\"reverse inner fast captures search failed: {}\", _err);",
    "            return self.core.search_slots_nofail(cache, input, slots);",
    "        }",
    "        Ok(None) => return None,",
    "        Ok(Some(m)) => m,",
    "    };",
    "    trace!(",
    "        \"match found at {}..{} in capture search, \\",
    "\t using another engine to find captures\",",
    "        m.start(),",
    "        m.end(),",
    "    );",
    "    let input = input",
    "        .clone()",
    "        .span(m.start()..m.end())",
    "        .anchored(Anchored::Pattern(m.pattern()));",
    "    self.core.search_slots_nofail(cache, &input, slots)",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "true",
          "line": 1849,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 1849,
          "bound": null
        },
        {
          "cond": "self.core.is_capture_search_needed(slots.len())",
          "norm": null,
          "value": "true",
          "line": 1852,
          "bound": null
        },
        {
          "cond": "self.try_search_full(cache, input) matches Err(RetryError::Fail(_err)) or Err(RetryError::Quadratic(_err))",
          "norm": null,
          "value": "true",
          "line": 1858,
          "bound": null
        },
        {
          "cond": "self.try_search_full(cache, input) matches Err(RetryError::Fail(_err)) or Err(RetryError::Quadratic(_err))",
          "norm": null,
          "value": "true",
          "line": 1858,
          "bound": null
        },
        {
          "cond": "self.try_search_full(cache, input) matches Err(RetryError::Fail(_err))",
          "norm": null,
          "value": "true",
          "line": 1858,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        19,
        21,
        23,
        29,
        30,
        39,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 1849,
          "bound": null
        },
        {
          "cond": "self.core.is_capture_search_needed(slots.len())",
          "norm": null,
          "value": "true",
          "line": 1852,
          "bound": null
        },
        {
          "cond": "self.try_search_full(cache, input) matches Err(RetryError::Fail(_err)) or Err(RetryError::Quadratic(_err))",
          "norm": null,
          "value": "true",
          "line": 1858,
          "bound": null
        },
        {
          "cond": "self.try_search_full(cache, input) matches Ok(Some(m)) or Ok(None)",
          "norm": null,
          "value": "true",
          "line": 1858,
          "bound": null
        },
        {
          "cond": "self.try_search_full(cache, input) matches Err(RetryError::Quadratic(_err))",
          "norm": null,
          "value": "true",
          "line": 1858,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        19,
        21,
        22,
        27,
        28,
        39,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 1849,
          "bound": null
        },
        {
          "cond": "self.core.is_capture_search_needed(slots.len())",
          "norm": null,
          "value": "true",
          "line": 1852,
          "bound": null
        },
        {
          "cond": "self.try_search_full(cache, input) matches Ok(Some(m)) or Ok(None)",
          "norm": null,
          "value": "true",
          "line": 1858,
          "bound": null
        },
        {
          "cond": "self.try_search_full(cache, input) matches Err(RetryError::Fail(_err)) or Err(RetryError::Quadratic(_err))",
          "norm": null,
          "value": "true",
          "line": 1858,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        19,
        24,
        26,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 1849,
          "bound": null
        },
        {
          "cond": "self.core.is_capture_search_needed(slots.len())",
          "norm": null,
          "value": "true",
          "line": 1852,
          "bound": null
        },
        {
          "cond": "self.try_search_full(cache, input) matches Ok(Some(m)) or Ok(None)",
          "norm": null,
          "value": "true",
          "line": 1858,
          "bound": null
        },
        {
          "cond": "self.try_search_full(cache, input) matches Ok(Some(m)) or Ok(None)",
          "norm": null,
          "value": "true",
          "line": 1858,
          "bound": null
        },
        {
          "cond": "self.try_search_full(cache, input) matches Ok(None)",
          "norm": null,
          "value": "true",
          "line": 1858,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        19,
        24,
        25,
        31,
        39,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 1849,
          "bound": null
        },
        {
          "cond": "self.core.is_capture_search_needed(slots.len())",
          "norm": null,
          "value": "false",
          "line": 1852,
          "bound": null
        },
        {
          "cond": "self.search(cache, input)?",
          "norm": null,
          "value": "Err/None",
          "line": 1854,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        9,
        10,
        11,
        13,
        15,
        16,
        40,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 1849,
          "bound": null
        },
        {
          "cond": "self.core.is_capture_search_needed(slots.len())",
          "norm": null,
          "value": "false",
          "line": 1852,
          "bound": null
        },
        {
          "cond": "self.search(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1854,
          "bound": null
        }
      ],
      "ret": "Some(m.pattern())",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        9,
        10,
        11,
        14,
        17,
        18,
        40,
        41
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}