{
  "name": "regex_automata::util::pool::inner::{impl#6}::put_imp",
  "mod_info": {
    "name": "util::pool::inner",
    "loc": "regex-automata/src/util/pool.rs:235:1:793:2"
  },
  "visible": false,
  "loc": "regex-automata/src/util/pool.rs:742:9:773:10",
  "doc": "/// Puts this guard back into the pool by only borrowing the guard as\n/// mutable. This should be called at most once.\n",
  "code": [
    "fn put_imp(&mut self) {",
    "    match core::mem::replace(&mut self.value, Err(THREAD_ID_DROPPED)) {",
    "        Ok(value) => {",
    "            // If we were told to discard this value then don't bother",
    "            // trying to put it back into the pool. This occurs when",
    "            // the pop operation failed to acquire a lock and we",
    "            // decided to create a new value in lieu of contending for",
    "            // the lock.",
    "            if self.discard {",
    "                return;",
    "            }",
    "            self.pool.put_value(value);",
    "        }",
    "        // If this guard has a value \"owned\" by the thread, then",
    "        // the Pool guarantees that this is the ONLY such guard.",
    "        // Therefore, in order to place it back into the pool and make",
    "        // it available, we need to change the owner back to the owning",
    "        // thread's ID. But note that we use the ID that was stored in",
    "        // the guard, since a guard can be moved to another thread and",
    "        // dropped. (A previous iteration of this code read from the",
    "        // THREAD_ID thread local, which uses the ID of the current",
    "        // thread which may not be the ID of the owning thread! This",
    "        // also avoids the TLS access, which is likely a hair faster.)",
    "        Err(owner) => {",
    "            // If we hit this point, it implies 'put_imp' has been",
    "            // called multiple times for the same guard which in turn",
    "            // corresponds to a bug in this implementation.",
    "            assert_ne!(THREAD_ID_DROPPED, owner);",
    "            self.pool.owner.store(owner, Ordering::Release);",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "core::mem::replace(&mut self.value, Err(THREAD_ID_DROPPED)) matches Err(owner)",
          "norm": null,
          "value": "true",
          "line": 743,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        10,
        20,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "core::mem::replace(&mut self.value, Err(THREAD_ID_DROPPED)) matches Err(owner)",
          "norm": null,
          "value": "true",
          "line": 743,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        11,
        12,
        13,
        14,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "core::mem::replace(&mut self.value, Err(THREAD_ID_DROPPED)) matches Ok(value)",
          "norm": null,
          "value": "true",
          "line": 743,
          "bound": null
        },
        {
          "cond": "core::mem::replace(&mut self.value, Err(THREAD_ID_DROPPED)) matches Ok(value)",
          "norm": null,
          "value": "true",
          "line": 743,
          "bound": null
        },
        {
          "cond": "self.discard",
          "norm": null,
          "value": "true",
          "line": 750,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "core::mem::replace(&mut self.value, Err(THREAD_ID_DROPPED)) matches Ok(value)",
          "norm": null,
          "value": "true",
          "line": 743,
          "bound": null
        },
        {
          "cond": "core::mem::replace(&mut self.value, Err(THREAD_ID_DROPPED)) matches Ok(value)",
          "norm": null,
          "value": "true",
          "line": 743,
          "bound": null
        },
        {
          "cond": "self.discard",
          "norm": null,
          "value": "false",
          "line": 750,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        7,
        8,
        9,
        13,
        14,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}