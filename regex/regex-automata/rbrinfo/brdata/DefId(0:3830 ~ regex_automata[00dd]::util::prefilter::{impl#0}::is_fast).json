{
  "name": "regex_automata::util::prefilter::{impl#0}::is_fast",
  "mod_info": {
    "name": "util::prefilter",
    "loc": "regex-automata/src/util/mod.rs:41:1:41:19"
  },
  "visible": true,
  "loc": "regex-automata/src/util/prefilter/mod.rs:455:5:464:6",
  "doc": "/// Implementations might return true here if they believe themselves to\n/// be \"fast.\" The concept of \"fast\" is deliberately left vague, but in\n/// practice this usually corresponds to whether it's believed that SIMD\n/// will be used.\n///\n/// Why do we care about this? Well, some prefilter tricks tend to come\n/// with their own bits of overhead, and so might only make sense if we\n/// know that a scan will be *much* faster than the regex engine itself.\n/// Otherwise, the trick may not be worth doing. Whether something is\n/// \"much\" faster than the regex engine generally boils down to whether\n/// SIMD is used. (But not always. Even a SIMD matcher with a high false\n/// positive rate can become quite slow.)\n///\n/// Even if this returns true, it is still possible for the prefilter to\n/// be \"slow.\" Remember, prefilters are just heuristics. We can't really\n/// *know* a prefilter will be fast without actually trying the prefilter.\n/// (Which of course we cannot afford to do.)\n",
  "code": [
    "pub fn is_fast(&self) -> bool {",
    "    #[cfg(not(feature = \"alloc\"))]",
    "    {",
    "        unreachable!()",
    "    }",
    "    #[cfg(feature = \"alloc\")]",
    "    {",
    "        self.is_fast",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.is_fast",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}