{
  "name": "regex_automata::meta::strategy::{impl#5}::new",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:909:5:943:6",
  "doc": "",
  "code": [
    "fn new(core: Core) -> Result<ReverseAnchored, Core> {",
    "    if !core.info.is_always_anchored_end() {",
    "        debug!(",
    "            \"skipping reverse anchored optimization because \\",
    " the regex is not always anchored at the end\"",
    "        );",
    "        return Err(core);",
    "    }",
    "    // Note that the caller can still request an anchored search even when",
    "    // the regex isn't anchored at the start. We detect that case in the",
    "    // search routines below and just fallback to the core engine. This",
    "    // is fine because both searches are anchored. It's just a matter of",
    "    // picking one. Falling back to the core engine is a little simpler,",
    "    // since if we used the reverse anchored approach, we'd have to add an",
    "    // extra check to ensure the match reported starts at the place where",
    "    // the caller requested the search to start.",
    "    if core.info.is_always_anchored_start() {",
    "        debug!(",
    "            \"skipping reverse anchored optimization because \\",
    " the regex is also anchored at the start\"",
    "        );",
    "        return Err(core);",
    "    }",
    "    // Only DFAs can do reverse searches (currently), so we need one of",
    "    // them in order to do this optimization. It's possible (although",
    "    // pretty unlikely) that we have neither and need to give up.",
    "    if !core.hybrid.is_some() && !core.dfa.is_some() {",
    "        debug!(",
    "            \"skipping reverse anchored optimization because \\",
    " we don't have a lazy DFA or a full DFA\"",
    "        );",
    "        return Err(core);",
    "    }",
    "    Ok(ReverseAnchored { core })",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "core.info.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 910,
          "bound": null
        },
        {
          "cond": "core.info.is_always_anchored_start()",
          "norm": null,
          "value": "true",
          "line": 925,
          "bound": null
        }
      ],
      "ret": "Err(core)",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "core.info.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 910,
          "bound": null
        },
        {
          "cond": "core.info.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 925,
          "bound": null
        },
        {
          "cond": "core.hybrid.is_some()",
          "norm": null,
          "value": "true",
          "line": 935,
          "bound": null
        }
      ],
      "ret": "Ok(ReverseAnchored { core })",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        16,
        17,
        18,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "core.info.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 910,
          "bound": null
        },
        {
          "cond": "core.info.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 925,
          "bound": null
        },
        {
          "cond": "core.hybrid.is_some()",
          "norm": null,
          "value": "false",
          "line": 935,
          "bound": null
        },
        {
          "cond": "core.dfa.is_some()",
          "norm": null,
          "value": "true",
          "line": 935,
          "bound": null
        }
      ],
      "ret": "Ok(ReverseAnchored { core })",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        11,
        12,
        13,
        16,
        17,
        18,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "core.info.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 910,
          "bound": null
        },
        {
          "cond": "core.info.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 925,
          "bound": null
        },
        {
          "cond": "core.hybrid.is_some()",
          "norm": null,
          "value": "false",
          "line": 935,
          "bound": null
        },
        {
          "cond": "core.dfa.is_some()",
          "norm": null,
          "value": "false",
          "line": 935,
          "bound": null
        }
      ],
      "ret": "Err(core)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        11,
        12,
        14,
        15,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "core.info.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 910,
          "bound": null
        }
      ],
      "ret": "Err(core)",
      "path": [
        0,
        1,
        3,
        4,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}