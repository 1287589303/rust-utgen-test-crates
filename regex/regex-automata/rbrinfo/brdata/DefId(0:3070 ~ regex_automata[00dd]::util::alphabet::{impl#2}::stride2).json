{
  "name": "regex_automata::util::alphabet::{impl#2}::stride2",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:337:5:340:6",
  "doc": "/// Returns the stride, as a base-2 exponent, required for these\n/// equivalence classes.\n///\n/// The stride is always the smallest power of 2 that is greater than or\n/// equal to the alphabet length, and the `stride2` returned here is the\n/// exponent applied to `2` to get the smallest power. This is done so that\n/// converting between premultiplied state IDs and indices can be done with\n/// shifts alone, which is much faster than integer division.\n",
  "code": [
    "pub fn stride2(&self) -> usize {",
    "    let zeros = self.alphabet_len().next_power_of_two().trailing_zeros();",
    "    usize::try_from(zeros).unwrap()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}