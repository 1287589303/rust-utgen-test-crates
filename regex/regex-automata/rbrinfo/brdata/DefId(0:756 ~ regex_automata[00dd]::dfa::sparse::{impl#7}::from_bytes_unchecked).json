{
  "name": "regex_automata::dfa::sparse::{impl#7}::from_bytes_unchecked",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:1300:5:1326:6",
  "doc": "",
  "code": [
    "unsafe fn from_bytes_unchecked(",
    "    mut slice: &'a [u8],",
    ") -> Result<(Transitions<&'a [u8]>, usize), DeserializeError> {",
    "    let slice_start = slice.as_ptr().as_usize();",
    "",
    "    let (state_len, nr) =",
    "        wire::try_read_u32_as_usize(&slice, \"state length\")?;",
    "    slice = &slice[nr..];",
    "",
    "    let (pattern_len, nr) =",
    "        wire::try_read_u32_as_usize(&slice, \"pattern length\")?;",
    "    slice = &slice[nr..];",
    "",
    "    let (classes, nr) = ByteClasses::from_bytes(&slice)?;",
    "    slice = &slice[nr..];",
    "",
    "    let (len, nr) =",
    "        wire::try_read_u32_as_usize(&slice, \"sparse transitions length\")?;",
    "    slice = &slice[nr..];",
    "",
    "    wire::check_slice_len(slice, len, \"sparse states byte length\")?;",
    "    let sparse = &slice[..len];",
    "    slice = &slice[len..];",
    "",
    "    let trans = Transitions { sparse, classes, state_len, pattern_len };",
    "    Ok((trans, slice.as_ptr().as_usize() - slice_start))",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"state length\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1306,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        50,
        51
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"state length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1306,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"pattern length\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1310,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        14,
        16,
        17,
        49,
        50,
        51
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"state length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1306,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"pattern length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1310,
          "bound": null
        },
        {
          "cond": "ByteClasses::from_bytes(&slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 1313,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        22,
        24,
        25,
        48,
        49,
        50,
        51
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"state length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1306,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"pattern length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1310,
          "bound": null
        },
        {
          "cond": "ByteClasses::from_bytes(&slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1313,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"sparse transitions length\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1317,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        28,
        30,
        32,
        33,
        47,
        48,
        49,
        50,
        51
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"state length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1306,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"pattern length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1310,
          "bound": null
        },
        {
          "cond": "ByteClasses::from_bytes(&slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1313,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"sparse transitions length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, len, \"sparse states byte length\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1320,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        38,
        40,
        41,
        47,
        48,
        49,
        50,
        51
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"state length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1306,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"pattern length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1310,
          "bound": null
        },
        {
          "cond": "ByteClasses::from_bytes(&slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1313,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(&slice, \"sparse transitions length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, len, \"sparse states byte length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1320,
          "bound": null
        }
      ],
      "ret": "Ok((trans, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        39,
        42,
        43,
        44,
        45,
        46,
        51
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}