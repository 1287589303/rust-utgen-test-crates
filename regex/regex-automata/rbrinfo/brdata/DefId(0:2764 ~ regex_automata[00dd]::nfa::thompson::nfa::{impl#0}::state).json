{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::state",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:632:5:634:6",
  "doc": "/// Return a reference to the NFA state corresponding to the given ID.\n///\n/// This is a convenience routine for `nfa.states()[id]`.\n///\n/// # Panics\n///\n/// This panics when the given identifier does not reference a valid state.\n/// That is, when `id.as_usize() >= nfa.states().len()`.\n///\n/// # Example\n///\n/// The anchored state for a pattern will typically correspond to a\n/// capturing state for that pattern. (Although, this is not an API\n/// guarantee!)\n///\n/// ```\n/// use regex_automata::{nfa::thompson::{NFA, State}, PatternID};\n///\n/// let nfa = NFA::new(\"a\")?;\n/// let state = nfa.state(nfa.start_pattern(PatternID::ZERO).unwrap());\n/// match *state {\n///     State::Capture { slot, .. } => {\n///         assert_eq!(0, slot.as_usize());\n///     }\n///     _ => unreachable!(\"unexpected state\"),\n/// }\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn state(&self, id: StateID) -> &State {",
    "    &self.states()[id]",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&self.states()[id]",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}