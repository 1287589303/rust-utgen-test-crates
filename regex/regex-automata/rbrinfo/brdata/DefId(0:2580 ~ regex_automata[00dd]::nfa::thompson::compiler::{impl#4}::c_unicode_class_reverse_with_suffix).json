{
  "name": "regex_automata::nfa::thompson::compiler::{impl#4}::c_unicode_class_reverse_with_suffix",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:1509:5:1546:6",
  "doc": "/// Compile the given Unicode character class in reverse with suffix\n/// caching.\n///\n/// This is a \"quick\" way to compile large Unicode classes into reverse\n/// UTF-8 automata while doing a small amount of compression on that\n/// automata by reusing common suffixes.\n///\n/// A more comprehensive compression scheme can be accomplished by using\n/// a range trie to efficiently sort a reverse sequence of UTF-8 byte\n/// rqanges, and then use Daciuk's algorithm via `Utf8Compiler`.\n///\n/// This is the technique used when \"NFA shrinking\" is disabled.\n///\n/// (This also tries to use \"sparse\" states where possible, just like\n/// `c_byte_class` does.)\n",
  "code": [
    "fn c_unicode_class_reverse_with_suffix(",
    "    &self,",
    "    cls: &hir::ClassUnicode,",
    ") -> Result<ThompsonRef, BuildError> {",
    "    // N.B. It would likely be better to cache common *prefixes* in the",
    "    // reverse direction, but it's not quite clear how to do that. The",
    "    // advantage of caching suffixes is that it does give us a win, and",
    "    // has a very small additional overhead.",
    "    let mut cache = self.utf8_suffix.borrow_mut();",
    "    cache.clear();",
    "",
    "    let union = self.add_union()?;",
    "    let alt_end = self.add_empty()?;",
    "    for urng in cls.iter() {",
    "        for seq in Utf8Sequences::new(urng.start(), urng.end()) {",
    "            let mut end = alt_end;",
    "            for brng in seq.as_slice() {",
    "                let key = Utf8SuffixKey {",
    "                    from: end,",
    "                    start: brng.start,",
    "                    end: brng.end,",
    "                };",
    "                let hash = cache.hash(&key);",
    "                if let Some(id) = cache.get(&key, hash) {",
    "                    end = id;",
    "                    continue;",
    "                }",
    "",
    "                let compiled = self.c_range(brng.start, brng.end)?;",
    "                self.patch(compiled.end, end)?;",
    "                end = compiled.start;",
    "                cache.set(key, hash, end);",
    "            }",
    "            self.patch(union, end)?;",
    "        }",
    "    }",
    "    Ok(ThompsonRef { start: union, end: alt_end })",
    "}"
  ],
  "size": {
    "chain": 12,
    "contra": 6,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.add_union()?",
          "norm": null,
          "value": "Err/None",
          "line": 1520,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        98,
        99,
        100,
        101,
        102
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.add_union()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 1521,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        15,
        17,
        18,
        95,
        96,
        97,
        100,
        101,
        102
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.add_union()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1521,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 1522,
          "bound": null
        },
        {
          "cond": "seq in Utf8Sequences::new(urng.start(), urng.end())",
          "norm": null,
          "value": "true",
          "line": 1523,
          "bound": null
        },
        {
          "cond": "brng in seq.as_slice()",
          "norm": null,
          "value": "true",
          "line": 1525,
          "bound": null
        },
        {
          "cond": "let Some(id) = cache.get(&key, hash)",
          "norm": null,
          "value": "true",
          "line": 1532,
          "bound": null
        },
        {
          "cond": "self.c_range(brng.start, brng.end)?",
          "norm": null,
          "value": "Err/None",
          "line": 1537,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        40,
        41,
        42,
        43,
        44,
        47,
        49,
        50,
        51,
        52,
        55,
        56,
        57,
        59,
        61,
        62,
        89,
        90,
        91,
        92,
        93,
        94,
        97,
        100,
        101,
        102
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.add_union()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1521,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 1522,
          "bound": null
        },
        {
          "cond": "seq in Utf8Sequences::new(urng.start(), urng.end())",
          "norm": null,
          "value": "true",
          "line": 1523,
          "bound": null
        },
        {
          "cond": "brng in seq.as_slice()",
          "norm": null,
          "value": "true",
          "line": 1525,
          "bound": null
        },
        {
          "cond": "let Some(id) = cache.get(&key, hash)",
          "norm": null,
          "value": "true",
          "line": 1532,
          "bound": null
        },
        {
          "cond": "self.c_range(brng.start, brng.end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1537,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, end)?",
          "norm": null,
          "value": "Err/None",
          "line": 1538,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        40,
        41,
        42,
        43,
        44,
        47,
        49,
        50,
        51,
        52,
        55,
        56,
        57,
        60,
        63,
        64,
        65,
        67,
        69,
        70,
        87,
        88,
        91,
        92,
        93,
        94,
        97,
        100,
        101,
        102
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.add_union()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1521,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 1522,
          "bound": null
        },
        {
          "cond": "seq in Utf8Sequences::new(urng.start(), urng.end())",
          "norm": null,
          "value": "true",
          "line": 1523,
          "bound": null
        },
        {
          "cond": "brng in seq.as_slice()",
          "norm": null,
          "value": "true",
          "line": 1525,
          "bound": null
        },
        {
          "cond": "let Some(id) = cache.get(&key, hash)",
          "norm": null,
          "value": "true",
          "line": 1532,
          "bound": null
        },
        {
          "cond": "self.c_range(brng.start, brng.end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1537,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1538,
          "bound": null
        },
        {
          "cond": "brng in seq.as_slice()",
          "norm": null,
          "value": "false",
          "line": 1525,
          "bound": null
        },
        {
          "cond": "self.patch(union, end)?",
          "norm": null,
          "value": "Err/None",
          "line": 1542,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        40,
        41,
        42,
        43,
        44,
        47,
        49,
        50,
        51,
        52,
        55,
        56,
        57,
        60,
        63,
        64,
        65,
        68,
        71,
        72,
        73,
        42,
        43,
        44,
        46,
        48,
        74,
        75,
        77,
        79,
        80,
        85,
        86,
        92,
        93,
        94,
        97,
        100,
        101,
        102
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.add_union()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1521,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 1522,
          "bound": null
        },
        {
          "cond": "seq in Utf8Sequences::new(urng.start(), urng.end())",
          "norm": null,
          "value": "true",
          "line": 1523,
          "bound": null
        },
        {
          "cond": "brng in seq.as_slice()",
          "norm": null,
          "value": "true",
          "line": 1525,
          "bound": null
        },
        {
          "cond": "let Some(id) = cache.get(&key, hash)",
          "norm": null,
          "value": "true",
          "line": 1532,
          "bound": null
        },
        {
          "cond": "self.c_range(brng.start, brng.end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1537,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1538,
          "bound": null
        },
        {
          "cond": "brng in seq.as_slice()",
          "norm": null,
          "value": "false",
          "line": 1525,
          "bound": null
        },
        {
          "cond": "self.patch(union, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1542,
          "bound": null
        },
        {
          "cond": "seq in Utf8Sequences::new(urng.start(), urng.end())",
          "norm": null,
          "value": "false",
          "line": 1523,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "false",
          "line": 1522,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: union, end: alt_end })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        40,
        41,
        42,
        43,
        44,
        47,
        49,
        50,
        51,
        52,
        55,
        56,
        57,
        60,
        63,
        64,
        65,
        68,
        71,
        72,
        73,
        42,
        43,
        44,
        46,
        48,
        74,
        75,
        78,
        81,
        33,
        34,
        35,
        37,
        39,
        82,
        83,
        22,
        23,
        24,
        26,
        28,
        84,
        102
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.add_union()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1521,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 1522,
          "bound": null
        },
        {
          "cond": "seq in Utf8Sequences::new(urng.start(), urng.end())",
          "norm": null,
          "value": "true",
          "line": 1523,
          "bound": null
        },
        {
          "cond": "brng in seq.as_slice()",
          "norm": null,
          "value": "true",
          "line": 1525,
          "bound": null
        },
        {
          "cond": "let Some(id) = cache.get(&key, hash)",
          "norm": null,
          "value": "true",
          "line": 1532,
          "bound": null
        },
        {
          "cond": "brng in seq.as_slice()",
          "norm": null,
          "value": "false",
          "line": 1525,
          "bound": null
        },
        {
          "cond": "self.patch(union, end)?",
          "norm": null,
          "value": "Err/None",
          "line": 1542,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        40,
        41,
        42,
        43,
        44,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        42,
        43,
        44,
        46,
        48,
        74,
        75,
        77,
        79,
        80,
        85,
        86,
        92,
        93,
        94,
        97,
        100,
        101,
        102
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.add_union()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1521,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 1522,
          "bound": null
        },
        {
          "cond": "seq in Utf8Sequences::new(urng.start(), urng.end())",
          "norm": null,
          "value": "true",
          "line": 1523,
          "bound": null
        },
        {
          "cond": "brng in seq.as_slice()",
          "norm": null,
          "value": "true",
          "line": 1525,
          "bound": null
        },
        {
          "cond": "let Some(id) = cache.get(&key, hash)",
          "norm": null,
          "value": "true",
          "line": 1532,
          "bound": null
        },
        {
          "cond": "brng in seq.as_slice()",
          "norm": null,
          "value": "false",
          "line": 1525,
          "bound": null
        },
        {
          "cond": "self.patch(union, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1542,
          "bound": null
        },
        {
          "cond": "seq in Utf8Sequences::new(urng.start(), urng.end())",
          "norm": null,
          "value": "false",
          "line": 1523,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "false",
          "line": 1522,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: union, end: alt_end })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        40,
        41,
        42,
        43,
        44,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        42,
        43,
        44,
        46,
        48,
        74,
        75,
        78,
        81,
        33,
        34,
        35,
        37,
        39,
        82,
        83,
        22,
        23,
        24,
        26,
        28,
        84,
        102
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.add_union()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1521,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 1522,
          "bound": null
        },
        {
          "cond": "seq in Utf8Sequences::new(urng.start(), urng.end())",
          "norm": null,
          "value": "true",
          "line": 1523,
          "bound": null
        },
        {
          "cond": "brng in seq.as_slice()",
          "norm": null,
          "value": "false",
          "line": 1525,
          "bound": null
        },
        {
          "cond": "self.patch(union, end)?",
          "norm": null,
          "value": "Err/None",
          "line": 1542,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        40,
        41,
        42,
        43,
        44,
        46,
        48,
        74,
        75,
        77,
        79,
        80,
        85,
        86,
        92,
        93,
        94,
        97,
        100,
        101,
        102
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.add_union()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1521,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 1522,
          "bound": null
        },
        {
          "cond": "seq in Utf8Sequences::new(urng.start(), urng.end())",
          "norm": null,
          "value": "true",
          "line": 1523,
          "bound": null
        },
        {
          "cond": "brng in seq.as_slice()",
          "norm": null,
          "value": "false",
          "line": 1525,
          "bound": null
        },
        {
          "cond": "self.patch(union, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1542,
          "bound": null
        },
        {
          "cond": "seq in Utf8Sequences::new(urng.start(), urng.end())",
          "norm": null,
          "value": "false",
          "line": 1523,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "false",
          "line": 1522,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: union, end: alt_end })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        40,
        41,
        42,
        43,
        44,
        46,
        48,
        74,
        75,
        78,
        81,
        33,
        34,
        35,
        37,
        39,
        82,
        83,
        22,
        23,
        24,
        26,
        28,
        84,
        102
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.add_union()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1521,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 1522,
          "bound": null
        },
        {
          "cond": "seq in Utf8Sequences::new(urng.start(), urng.end())",
          "norm": null,
          "value": "false",
          "line": 1523,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "false",
          "line": 1522,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: union, end: alt_end })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        39,
        82,
        83,
        22,
        23,
        24,
        26,
        28,
        84,
        102
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.add_union()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1521,
          "bound": null
        },
        {
          "cond": "urng in cls.iter()",
          "norm": null,
          "value": "false",
          "line": 1522,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: union, end: alt_end })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        28,
        84,
        102
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}