{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::patch",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:1143:5:1183:6",
  "doc": "/// Add a transition from one state to another.\n///\n/// This routine is called \"patch\" since it is very common to add the\n/// states you want, typically with \"dummy\" state ID transitions, and then\n/// \"patch\" in the real state IDs later. This is because you don't always\n/// know all of the necessary state IDs to add because they might not\n/// exist yet.\n///\n/// # Errors\n///\n/// This may error if patching leads to an increase in heap usage beyond\n/// the configured size limit. Heap usage only grows when patching adds a\n/// new transition (as in the case of a \"union\" state).\n///\n/// # Panics\n///\n/// This panics if `from` corresponds to a \"sparse\" state. When \"sparse\"\n/// states are added, there is no way to patch them after-the-fact. (If you\n/// have a use case where this would be helpful, please file an issue. It\n/// will likely require a new API.)\n",
  "code": [
    "pub fn patch(",
    "    &mut self,",
    "    from: StateID,",
    "    to: StateID,",
    ") -> Result<(), BuildError> {",
    "    let old_memory_states = self.memory_states;",
    "    match self.states[from] {",
    "        State::Empty { ref mut next } => {",
    "            *next = to;",
    "        }",
    "        State::ByteRange { ref mut trans } => {",
    "            trans.next = to;",
    "        }",
    "        State::Sparse { .. } => {",
    "            panic!(\"cannot patch from a sparse NFA state\")",
    "        }",
    "        State::Look { ref mut next, .. } => {",
    "            *next = to;",
    "        }",
    "        State::Union { ref mut alternates } => {",
    "            alternates.push(to);",
    "            self.memory_states += mem::size_of::<StateID>();",
    "        }",
    "        State::UnionReverse { ref mut alternates } => {",
    "            alternates.push(to);",
    "            self.memory_states += mem::size_of::<StateID>();",
    "        }",
    "        State::CaptureStart { ref mut next, .. } => {",
    "            *next = to;",
    "        }",
    "        State::CaptureEnd { ref mut next, .. } => {",
    "            *next = to;",
    "        }",
    "        State::Fail => {}",
    "        State::Match { .. } => {}",
    "    }",
    "    if old_memory_states != self.memory_states {",
    "        self.check_size_limit()?;",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 28,
    "contra": 0,
    "min_set": 10
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.states[from] matches State::Match { .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        12,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        41,
        42,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.states[from] matches State::Match { .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        12,
        29,
        30,
        31,
        32,
        35,
        38,
        40,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.states[from] matches State::Match { .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "false",
          "line": 1179,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        12,
        29,
        39,
        40,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.states[from] matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        11,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        41,
        42,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.states[from] matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        11,
        28,
        29,
        30,
        31,
        32,
        35,
        38,
        40,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.states[from] matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "false",
          "line": 1179,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        11,
        28,
        29,
        39,
        40,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.states[from] matches State::UnionReverse { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::UnionReverse { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        8,
        22,
        23,
        24,
        25,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        41,
        42,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.states[from] matches State::UnionReverse { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::UnionReverse { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        8,
        22,
        23,
        24,
        25,
        29,
        30,
        31,
        32,
        35,
        38,
        40,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.states[from] matches State::UnionReverse { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::UnionReverse { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "false",
          "line": 1179,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        8,
        22,
        23,
        24,
        25,
        29,
        39,
        40,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.states[from] matches State::Union { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Union { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        18,
        19,
        20,
        21,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        41,
        42,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.states[from] matches State::Union { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Union { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        7,
        18,
        19,
        20,
        21,
        29,
        30,
        31,
        32,
        35,
        38,
        40,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.states[from] matches State::Union { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Union { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "false",
          "line": 1179,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        7,
        18,
        19,
        20,
        21,
        29,
        39,
        40,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.states[from] matches State::CaptureEnd { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::CaptureEnd { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        10,
        27,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        41,
        42,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.states[from] matches State::CaptureEnd { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::CaptureEnd { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        10,
        27,
        29,
        30,
        31,
        32,
        35,
        38,
        40,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.states[from] matches State::CaptureEnd { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::CaptureEnd { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "false",
          "line": 1179,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        10,
        27,
        29,
        39,
        40,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.states[from] matches State::CaptureStart { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::CaptureStart { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        26,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        41,
        42,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.states[from] matches State::CaptureStart { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::CaptureStart { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        9,
        26,
        29,
        30,
        31,
        32,
        35,
        38,
        40,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.states[from] matches State::CaptureStart { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::CaptureStart { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "false",
          "line": 1179,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        9,
        26,
        29,
        39,
        40,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.states[from] matches State::Look { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Look { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        17,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        41,
        42,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.states[from] matches State::Look { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Look { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        6,
        17,
        29,
        30,
        31,
        32,
        35,
        38,
        40,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.states[from] matches State::Look { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Look { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "false",
          "line": 1179,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        6,
        17,
        29,
        39,
        40,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "self.states[from] matches State::Sparse { .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Sparse { .. }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        15,
        16,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "self.states[from] matches State::ByteRange { ref mut trans }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::ByteRange { ref mut trans }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        14,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        41,
        42,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "self.states[from] matches State::ByteRange { ref mut trans }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::ByteRange { ref mut trans }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        4,
        14,
        29,
        30,
        31,
        32,
        35,
        38,
        40,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "self.states[from] matches State::ByteRange { ref mut trans }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::ByteRange { ref mut trans }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "false",
          "line": 1179,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        4,
        14,
        29,
        39,
        40,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "self.states[from] matches State::Empty { ref mut next }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Empty { ref mut next }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        13,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        41,
        42,
        43
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "self.states[from] matches State::Empty { ref mut next }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Empty { ref mut next }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "true",
          "line": 1179,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1180,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        13,
        29,
        30,
        31,
        32,
        35,
        38,
        40,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "self.states[from] matches State::Empty { ref mut next }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "self.states[from] matches State::Empty { ref mut next }",
          "norm": null,
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "old_memory_states != self.memory_states",
          "norm": null,
          "value": "false",
          "line": 1179,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        13,
        29,
        39,
        40,
        43
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}