{
  "name": "regex_automata::nfa::thompson::literal_trie::{impl#0}::get_or_add_state",
  "mod_info": {
    "name": "nfa::thompson::literal_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:63:1:63:18"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/literal_trie.rs:124:5:146:6",
  "doc": "/// If the given transition is defined, then return the next state ID.\n/// Otherwise, add the transition to `from` and point it to a new state.\n///\n/// If a new state ID could not be allocated, then an error is returned.\n",
  "code": [
    "fn get_or_add_state(",
    "    &mut self,",
    "    from: StateID,",
    "    byte: u8,",
    ") -> Result<StateID, BuildError> {",
    "    let active = self.states[from].active_chunk();",
    "    match active.binary_search_by_key(&byte, |t| t.byte) {",
    "        Ok(i) => Ok(active[i].next),",
    "        Err(i) => {",
    "            // Add a new state and get its ID.",
    "            let next = StateID::new(self.states.len()).map_err(|_| {",
    "                BuildError::too_many_states(self.states.len())",
    "            })?;",
    "            self.states.push(State::default());",
    "            // Offset our position to account for all transitions and not",
    "            // just the ones in the active chunk.",
    "            let i = self.states[from].active_chunk_start() + i;",
    "            let t = Transition { byte, next };",
    "            self.states[from].transitions.insert(i, t);",
    "            Ok(next)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "active.binary_search_by_key(&byte, |t| t.byte) matches Err(i)",
          "norm": null,
          "value": "true",
          "line": 130,
          "bound": null
        },
        {
          "cond": "StateID::new(self.states.len()).map_err(|_| {\n                    BuildError::too_many_states(self.states.len())\n                })?",
          "norm": null,
          "value": "Err/None",
          "line": 134,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "active.binary_search_by_key(&byte, |t| t.byte) matches Err(i)",
          "norm": null,
          "value": "true",
          "line": 130,
          "bound": null
        },
        {
          "cond": "StateID::new(self.states.len()).map_err(|_| {\n                    BuildError::too_many_states(self.states.len())\n                })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Ok(next)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "active.binary_search_by_key(&byte, |t| t.byte) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 130,
          "bound": null
        },
        {
          "cond": "active.binary_search_by_key(&byte, |t| t.byte) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 130,
          "bound": null
        }
      ],
      "ret": "Ok(active[i].next)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        26,
        29
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}