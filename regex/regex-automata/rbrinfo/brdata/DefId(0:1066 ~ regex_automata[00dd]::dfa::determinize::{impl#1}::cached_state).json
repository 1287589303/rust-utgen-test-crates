{
  "name": "regex_automata::dfa::determinize::{impl#1}::cached_state",
  "mod_info": {
    "name": "dfa::determinize",
    "loc": "regex-automata/src/dfa/mod.rs:350:1:350:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/determinize.rs:301:5:318:6",
  "doc": "/// Return the identifier for the next DFA state given an existing DFA\n/// state and an input byte. If the next DFA state already exists, then\n/// return its identifier from the cache. Otherwise, build the state, cache\n/// it and return its identifier.\n///\n/// This routine returns a boolean indicating whether a new state was\n/// built. If a new state is built, then the caller needs to add it to its\n/// frontier of uncompiled DFA states to compute transitions for.\n",
  "code": [
    "fn cached_state(",
    "    &mut self,",
    "    dfa_id: StateID,",
    "    unit: alphabet::Unit,",
    ") -> Result<(StateID, bool), BuildError> {",
    "    // Compute the set of all reachable NFA states, including epsilons.",
    "    let empty_builder = self.get_state_builder();",
    "    let builder = util::determinize::next(",
    "        self.nfa,",
    "        self.config.match_kind,",
    "        &mut self.sparses,",
    "        &mut self.stack,",
    "        &self.builder_states[self.dfa.to_index(dfa_id)],",
    "        unit,",
    "        empty_builder,",
    "    );",
    "    self.maybe_add_state(builder)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}