{
  "name": "regex_automata::dfa::sparse::{impl#18}::pattern_id",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:2321:5:2324:6",
  "doc": "/// Returns the pattern ID for the given match index. If the match index\n/// is invalid, then this panics.\n",
  "code": [
    "fn pattern_id(&self, match_index: usize) -> PatternID {",
    "    let start = match_index * PatternID::SIZE;",
    "    wire::read_pattern_id_unchecked(&self.pattern_ids[start..]).0",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "wire::read_pattern_id_unchecked(&self.pattern_ids[start..]).0",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}