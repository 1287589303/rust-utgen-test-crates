{
  "name": "regex_automata::hybrid::regex::{impl#0}::new",
  "mod_info": {
    "name": "hybrid::regex",
    "loc": "regex-automata/src/hybrid/mod.rs:143:1:143:15"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/regex.rs:120:5:122:6",
  "doc": "/// Parse the given regular expression using the default configuration and\n/// return the corresponding regex.\n///\n/// If you want a non-default configuration, then use the [`Builder`] to\n/// set your own configuration.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{hybrid::regex::Regex, Match};\n///\n/// let re = Regex::new(\"foo[0-9]+bar\")?;\n/// let mut cache = re.create_cache();\n/// assert_eq!(\n///     Some(Match::must(0, 3..14)),\n///     re.find(&mut cache, \"zzzfoo12345barzzz\"),\n/// );\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn new(pattern: &str) -> Result<Regex, BuildError> {",
    "    Regex::builder().build(pattern)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}