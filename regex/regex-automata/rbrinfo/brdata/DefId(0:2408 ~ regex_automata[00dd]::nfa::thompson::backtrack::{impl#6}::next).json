{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#6}::next",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:1621:5:1636:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<Result<Captures, MatchError>> {",
    "    // Splitting 'self' apart seems necessary to appease borrowck.",
    "    let TryCapturesMatches { re, ref mut cache, ref mut caps, ref mut it } =",
    "        *self;",
    "    let _ = it",
    "        .try_advance(|input| {",
    "            re.try_search(cache, input, caps)?;",
    "            Ok(caps.get_match())",
    "        })",
    "        .transpose()?;",
    "    if caps.is_match() {",
    "        Some(Ok(caps.clone()))",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "it\n            .try_advance(|input| {\n                re.try_search(cache, input, caps)?;\n                Ok(caps.get_match())\n            })\n            .transpose()?",
          "norm": null,
          "value": "Err/None",
          "line": 1625,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "it\n            .try_advance(|input| {\n                re.try_search(cache, input, caps)?;\n                Ok(caps.get_match())\n            })\n            .transpose()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1625,
          "bound": null
        },
        {
          "cond": "caps.is_match()",
          "norm": null,
          "value": "true",
          "line": 1631,
          "bound": null
        }
      ],
      "ret": "Some(Ok(caps.clone()))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "it\n            .try_advance(|input| {\n                re.try_search(cache, input, caps)?;\n                Ok(caps.get_match())\n            })\n            .transpose()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1625,
          "bound": null
        },
        {
          "cond": "caps.is_match()",
          "norm": null,
          "value": "false",
          "line": 1631,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        17,
        18,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}