{
  "name": "regex_automata::dfa::special::{impl#0}::write_to",
  "mod_info": {
    "name": "dfa::special",
    "loc": "regex-automata/src/dfa/mod.rs:358:1:358:13"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/special.rs:353:5:384:6",
  "doc": "/// Write the IDs and ranges for special states to the given byte buffer.\n/// The buffer given must have enough room to store all data, otherwise\n/// this will return an error. The number of bytes written is returned\n/// on success. The number of bytes written is guaranteed to be a multiple\n/// of 8.\n",
  "code": [
    "pub(crate) fn write_to<E: Endian>(",
    "    &self,",
    "    dst: &mut [u8],",
    ") -> Result<usize, SerializeError> {",
    "    use crate::util::wire::write_state_id as write;",
    "",
    "    if dst.len() < self.write_to_len() {",
    "        return Err(SerializeError::buffer_too_small(\"special state ids\"));",
    "    }",
    "",
    "    let mut nwrite = 0;",
    "    nwrite += write::<E>(self.max, &mut dst[nwrite..]);",
    "    nwrite += write::<E>(self.quit_id, &mut dst[nwrite..]);",
    "    nwrite += write::<E>(self.min_match, &mut dst[nwrite..]);",
    "    nwrite += write::<E>(self.max_match, &mut dst[nwrite..]);",
    "    nwrite += write::<E>(self.min_accel, &mut dst[nwrite..]);",
    "    nwrite += write::<E>(self.max_accel, &mut dst[nwrite..]);",
    "    nwrite += write::<E>(self.min_start, &mut dst[nwrite..]);",
    "    nwrite += write::<E>(self.max_start, &mut dst[nwrite..]);",
    "",
    "    assert_eq!(",
    "        self.write_to_len(),",
    "        nwrite,",
    "        \"expected to write certain number of bytes\",",
    "    );",
    "    assert_eq!(",
    "        nwrite % 8,",
    "        0,",
    "        \"expected to write multiple of 8 bytes for special states\",",
    "    );",
    "    Ok(nwrite)",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "dst.len() < self.write_to_len()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        }
      ],
      "ret": "Err(SerializeError::buffer_too_small(\"special state ids\"))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "dst.len() < self.write_to_len()",
          "norm": null,
          "value": "false",
          "line": 359,
          "bound": "dst.len() == self.write_to_len()"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        }
      ],
      "ret": "Ok(nwrite)",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "dst.len() < self.write_to_len()",
          "norm": null,
          "value": "false",
          "line": 359,
          "bound": "dst.len() == self.write_to_len()"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 53,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        36,
        37,
        39
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "dst.len() < self.write_to_len()",
          "norm": null,
          "value": "false",
          "line": 359,
          "bound": "dst.len() == self.write_to_len()"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 53,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        39
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}