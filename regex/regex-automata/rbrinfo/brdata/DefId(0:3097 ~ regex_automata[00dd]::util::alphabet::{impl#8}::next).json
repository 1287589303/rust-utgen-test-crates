{
  "name": "regex_automata::util::alphabet::{impl#8}::next",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:637:5:658:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<(Unit, Unit)> {",
    "    loop {",
    "        let element = match self.elements.next() {",
    "            None => return self.range.take(),",
    "            Some(element) => element,",
    "        };",
    "        match self.range.take() {",
    "            None => {",
    "                self.range = Some((element, element));",
    "            }",
    "            Some((start, end)) => {",
    "                if end.as_usize() + 1 != element.as_usize()",
    "                    || element.is_eoi()",
    "                {",
    "                    self.range = Some((element, element));",
    "                    return Some((start, end));",
    "                }",
    "                self.range = Some((start, element));",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.elements.next() matches Some(element)",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "self.range.take() matches Some((start, end))",
          "norm": null,
          "value": "true",
          "line": 643,
          "bound": null
        },
        {
          "cond": "end.as_usize() + 1 != element.as_usize()",
          "norm": "element.as_usize() != end.as_usize() + 1",
          "value": "true",
          "line": 648,
          "bound": null
        }
      ],
      "ret": "Some((start, end))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        12,
        14,
        15,
        16,
        17,
        21,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.elements.next() matches Some(element)",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "self.range.take() matches Some((start, end))",
          "norm": null,
          "value": "true",
          "line": 643,
          "bound": null
        },
        {
          "cond": "end.as_usize() + 1 != element.as_usize()",
          "norm": "element.as_usize() != end.as_usize() + 1",
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "element.is_eoi()",
          "norm": null,
          "value": "true",
          "line": 649,
          "bound": null
        }
      ],
      "ret": "Some((start, end))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        12,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.elements.next() matches Some(element)",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "self.range.take() matches Some((start, end))",
          "norm": null,
          "value": "true",
          "line": 643,
          "bound": null
        },
        {
          "cond": "end.as_usize() + 1 != element.as_usize()",
          "norm": "element.as_usize() != end.as_usize() + 1",
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "element.is_eoi()",
          "norm": null,
          "value": "false",
          "line": 649,
          "bound": null
        },
        {
          "cond": "self.elements.next() matches None",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "self.elements.next() matches None",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        12,
        14,
        15,
        16,
        18,
        19,
        22,
        23,
        1,
        2,
        3,
        5,
        7,
        8,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.elements.next() matches Some(element)",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "self.range.take() matches None",
          "norm": null,
          "value": "true",
          "line": 643,
          "bound": null
        },
        {
          "cond": "self.range.take() matches None",
          "norm": null,
          "value": "true",
          "line": 643,
          "bound": null
        },
        {
          "cond": "self.elements.next() matches None",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "self.elements.next() matches None",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        11,
        13,
        23,
        1,
        2,
        3,
        5,
        7,
        8,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.elements.next() matches None",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "self.elements.next() matches None",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        24
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}