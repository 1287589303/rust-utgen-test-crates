{
  "name": "regex_automata::dfa::accel::{impl#5}::from_slice",
  "mod_info": {
    "name": "dfa::accel",
    "loc": "regex-automata/src/dfa/mod.rs:346:1:346:22"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/accel.rs:414:5:420:6",
  "doc": "/// Returns a verified accelerator derived from the beginning of the given\n/// slice.\n///\n/// If the slice is not long enough or contains invalid bytes for an\n/// accelerator, then this returns an error.\n",
  "code": [
    "pub fn from_slice(mut slice: &[u8]) -> Result<Accel, DeserializeError> {",
    "    slice = &slice[..core::cmp::min(ACCEL_LEN, slice.len())];",
    "    let bytes = slice",
    "        .try_into()",
    "        .map_err(|_| DeserializeError::buffer_too_small(\"accelerator\"))?;",
    "    Accel::from_bytes(bytes)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "slice\n            .try_into()\n            .map_err(|_| DeserializeError::buffer_too_small(\"accelerator\"))?",
          "norm": null,
          "value": "Err/None",
          "line": 416,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        11,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "slice\n            .try_into()\n            .map_err(|_| DeserializeError::buffer_too_small(\"accelerator\"))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 416,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}