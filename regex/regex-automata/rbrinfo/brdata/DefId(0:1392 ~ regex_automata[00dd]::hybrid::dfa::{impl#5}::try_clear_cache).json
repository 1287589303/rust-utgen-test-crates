{
  "name": "regex_automata::hybrid::dfa::{impl#5}::try_clear_cache",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:2348:5:2415:6",
  "doc": "/// Attempt to clear the cache used by this lazy DFA.\n///\n/// If clearing the cache exceeds the minimum number of required cache\n/// clearings, then this will return a cache error. In this case,\n/// callers should bubble this up as the cache can't be used until it is\n/// reset. Implementations of search should convert this error into a\n/// [`MatchError::gave_up`].\n///\n/// If 'self.state_saver' is set to save a state, then this state is\n/// persisted through cache clearing. Otherwise, the cache is returned to\n/// its state after initialization with two exceptions: its clear count\n/// is incremented and some of its memory likely has additional capacity.\n/// That is, clearing a cache does _not_ release memory.\n///\n/// Otherwise, any lazy state ID generated by the cache prior to resetting\n/// it is invalid after the reset.\n",
  "code": [
    "fn try_clear_cache(&mut self) -> Result<(), CacheError> {",
    "    let c = self.dfa.get_config();",
    "    if let Some(min_count) = c.get_minimum_cache_clear_count() {",
    "        if self.cache.clear_count >= min_count {",
    "            if let Some(min_bytes_per) = c.get_minimum_bytes_per_state() {",
    "                let len = self.cache.search_total_len();",
    "                let min_bytes =",
    "                    min_bytes_per.saturating_mul(self.cache.states.len());",
    "                // If we've searched 0 bytes then probably something has",
    "                // gone wrong and the lazy DFA search implementation isn't",
    "                // correctly updating the search progress state.",
    "                if len == 0 {",
    "                    trace!(",
    "                        \"number of bytes searched is 0, but \\",
    "                         a minimum bytes per state searched ({}) is \\",
    "                         enabled, maybe Cache::search_update \\",
    "                         is not being used?\",",
    "                        min_bytes_per,",
    "                    );",
    "                }",
    "                if len < min_bytes {",
    "                    trace!(",
    "                        \"lazy DFA cache has been cleared {} times, \\",
    "                         which exceeds the limit of {}, \\",
    "                         AND its bytes searched per state is less \\",
    "                         than the configured minimum of {}, \\",
    "                         therefore lazy DFA is giving up \\",
    "                         (bytes searched since cache clear = {}, \\",
    "                          number of states = {})\",",
    "                        self.cache.clear_count,",
    "                        min_count,",
    "                        min_bytes_per,",
    "                        len,",
    "                        self.cache.states.len(),",
    "                    );",
    "                    return Err(CacheError::bad_efficiency());",
    "                } else {",
    "                    trace!(",
    "                        \"lazy DFA cache has been cleared {} times, \\",
    "                         which exceeds the limit of {}, \\",
    "                         AND its bytes searched per state is greater \\",
    "                         than the configured minimum of {}, \\",
    "                         therefore lazy DFA is continuing! \\",
    "                         (bytes searched since cache clear = {}, \\",
    "                          number of states = {})\",",
    "                        self.cache.clear_count,",
    "                        min_count,",
    "                        min_bytes_per,",
    "                        len,",
    "                        self.cache.states.len(),",
    "                    );",
    "                }",
    "            } else {",
    "                trace!(",
    "                    \"lazy DFA cache has been cleared {} times, \\",
    "                     which exceeds the limit of {}, \\",
    "                     since there is no configured bytes per state \\",
    "                     minimum, lazy DFA is giving up\",",
    "                    self.cache.clear_count,",
    "                    min_count,",
    "                );",
    "                return Err(CacheError::too_many_cache_clears());",
    "            }",
    "        }",
    "    }",
    "    self.clear_cache();",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(min_count) = c.get_minimum_cache_clear_count()",
          "norm": null,
          "value": "true",
          "line": 2350,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        22,
        23,
        24,
        26
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(min_count) = c.get_minimum_cache_clear_count()",
          "norm": null,
          "value": "true",
          "line": 2350,
          "bound": null
        },
        {
          "cond": "self.cache.clear_count >= min_count",
          "norm": "min_count <= self.cache.clear_count",
          "value": "true",
          "line": 2351,
          "bound": "self.cache.clear_count == min_count"
        },
        {
          "cond": "let Some(min_bytes_per) = c.get_minimum_bytes_per_state()",
          "norm": null,
          "value": "true",
          "line": 2352,
          "bound": null
        }
      ],
      "ret": "Err(CacheError::too_many_cache_clears())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        19,
        25,
        26
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(min_count) = c.get_minimum_cache_clear_count()",
          "norm": null,
          "value": "true",
          "line": 2350,
          "bound": null
        },
        {
          "cond": "self.cache.clear_count >= min_count",
          "norm": "min_count <= self.cache.clear_count",
          "value": "true",
          "line": 2351,
          "bound": "self.cache.clear_count == min_count"
        },
        {
          "cond": "let Some(min_bytes_per) = c.get_minimum_bytes_per_state()",
          "norm": null,
          "value": "true",
          "line": 2352,
          "bound": null
        },
        {
          "cond": "len == 0",
          "norm": "0 == len",
          "value": "false",
          "line": 2359,
          "bound": null
        },
        {
          "cond": "len < min_bytes",
          "norm": null,
          "value": "true",
          "line": 2368,
          "bound": null
        }
      ],
      "ret": "Err(CacheError::bad_efficiency())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        25,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(min_count) = c.get_minimum_cache_clear_count()",
          "norm": null,
          "value": "true",
          "line": 2350,
          "bound": null
        },
        {
          "cond": "self.cache.clear_count >= min_count",
          "norm": "min_count <= self.cache.clear_count",
          "value": "true",
          "line": 2351,
          "bound": "self.cache.clear_count == min_count"
        },
        {
          "cond": "let Some(min_bytes_per) = c.get_minimum_bytes_per_state()",
          "norm": null,
          "value": "true",
          "line": 2352,
          "bound": null
        },
        {
          "cond": "len == 0",
          "norm": "0 == len",
          "value": "false",
          "line": 2359,
          "bound": null
        },
        {
          "cond": "len < min_bytes",
          "norm": null,
          "value": "false",
          "line": 2368,
          "bound": "len == min_bytes"
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        17,
        21,
        23,
        24,
        26
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(min_count) = c.get_minimum_cache_clear_count()",
          "norm": null,
          "value": "true",
          "line": 2350,
          "bound": null
        },
        {
          "cond": "self.cache.clear_count >= min_count",
          "norm": "min_count <= self.cache.clear_count",
          "value": "true",
          "line": 2351,
          "bound": "self.cache.clear_count == min_count"
        },
        {
          "cond": "let Some(min_bytes_per) = c.get_minimum_bytes_per_state()",
          "norm": null,
          "value": "true",
          "line": 2352,
          "bound": null
        },
        {
          "cond": "len == 0",
          "norm": "0 == len",
          "value": "true",
          "line": 2359,
          "bound": null
        },
        {
          "cond": "len < min_bytes",
          "norm": null,
          "value": "true",
          "line": 2368,
          "bound": null
        }
      ],
      "ret": "Err(CacheError::bad_efficiency())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        14,
        15,
        16,
        25,
        26
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "let Some(min_count) = c.get_minimum_cache_clear_count()",
          "norm": null,
          "value": "true",
          "line": 2350,
          "bound": null
        },
        {
          "cond": "self.cache.clear_count >= min_count",
          "norm": "min_count <= self.cache.clear_count",
          "value": "true",
          "line": 2351,
          "bound": "self.cache.clear_count == min_count"
        },
        {
          "cond": "let Some(min_bytes_per) = c.get_minimum_bytes_per_state()",
          "norm": null,
          "value": "true",
          "line": 2352,
          "bound": null
        },
        {
          "cond": "len == 0",
          "norm": "0 == len",
          "value": "true",
          "line": 2359,
          "bound": null
        },
        {
          "cond": "len < min_bytes",
          "norm": null,
          "value": "false",
          "line": 2368,
          "bound": "len == min_bytes"
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        14,
        17,
        21,
        23,
        24,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "let Some(min_count) = c.get_minimum_cache_clear_count()",
          "norm": null,
          "value": "true",
          "line": 2350,
          "bound": null
        },
        {
          "cond": "self.cache.clear_count >= min_count",
          "norm": "min_count <= self.cache.clear_count",
          "value": "false",
          "line": 2351,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        20,
        21,
        23,
        24,
        26
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}