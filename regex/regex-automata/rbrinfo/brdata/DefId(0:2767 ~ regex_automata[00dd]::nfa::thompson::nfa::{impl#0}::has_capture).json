{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::has_capture",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:743:5:745:6",
  "doc": "/// Returns true if and only if this NFA has at least one\n/// [`Capture`](State::Capture) in its sequence of states.\n///\n/// This is useful as a way to perform a quick test before attempting\n/// something that does or does not require capture states. For example,\n/// some regex engines (like the PikeVM) require capture states in order to\n/// work at all.\n///\n/// # Example\n///\n/// This example shows a few different NFAs and whether they have captures\n/// or not.\n///\n/// ```\n/// use regex_automata::nfa::thompson::{NFA, WhichCaptures};\n///\n/// // Obviously has capture states.\n/// let nfa = NFA::new(\"(a)\")?;\n/// assert!(nfa.has_capture());\n///\n/// // Less obviously has capture states, because every pattern has at\n/// // least one anonymous capture group corresponding to the match for the\n/// // entire pattern.\n/// let nfa = NFA::new(\"a\")?;\n/// assert!(nfa.has_capture());\n///\n/// // Other than hand building your own NFA, this is the only way to build\n/// // an NFA without capturing groups. In general, you should only do this\n/// // if you don't intend to use any of the NFA-oriented regex engines.\n/// // Overall, capturing groups don't have many downsides. Although they\n/// // can add a bit of noise to simple NFAs, so it can be nice to disable\n/// // them for debugging purposes.\n/// //\n/// // Notice that 'has_capture' is false here even when we have an\n/// // explicit capture group in the pattern.\n/// let nfa = NFA::compiler()\n///     .configure(NFA::config().which_captures(WhichCaptures::None))\n///     .build(\"(a)\")?;\n/// assert!(!nfa.has_capture());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn has_capture(&self) -> bool {",
    "    self.0.has_capture",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.0.has_capture",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}