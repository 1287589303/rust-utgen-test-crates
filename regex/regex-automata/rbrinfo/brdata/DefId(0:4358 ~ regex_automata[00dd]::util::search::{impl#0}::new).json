{
  "name": "regex_automata::util::search::{impl#0}::new",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:112:5:124:6",
  "doc": "/// Create a new search configuration for the given haystack.\n",
  "code": [
    "pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {",
    "    // Perform only one call to `haystack.as_ref()` to protect from incorrect",
    "    // implementations that return different values from multiple calls.",
    "    // This is important because there's code that relies on `span` not being",
    "    // out of bounds with respect to the stored `haystack`.",
    "    let haystack = haystack.as_ref();",
    "    Input {",
    "        haystack,",
    "        span: Span { start: 0, end: haystack.len() },",
    "        anchored: Anchored::No,",
    "        earliest: false,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Input {\n            haystack,\n            span: Span { start: 0, end: haystack.len() },\n            anchored: Anchored::No,\n            earliest: false,\n        }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}