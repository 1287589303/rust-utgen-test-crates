{
  "name": "regex_automata::meta::strategy::{impl#3}::search_half_nofail",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:597:5:608:6",
  "doc": "",
  "code": [
    "fn search_half_nofail(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    ") -> Option<HalfMatch> {",
    "    // Only the lazy/full DFA returns half-matches, since the DFA requires",
    "    // a reverse scan to find the start position. These fallback regex",
    "    // engines can find the start and end in a single pass, so we just do",
    "    // that and throw away the start offset to conform to the API.",
    "    let m = self.search_nofail(cache, input)?;",
    "    Some(HalfMatch::new(m.pattern(), m.end()))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.search_nofail(cache, input)?",
          "norm": null,
          "value": "Err/None",
          "line": 606,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.search_nofail(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 606,
          "bound": null
        }
      ],
      "ret": "Some(HalfMatch::new(m.pattern(), m.end()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}