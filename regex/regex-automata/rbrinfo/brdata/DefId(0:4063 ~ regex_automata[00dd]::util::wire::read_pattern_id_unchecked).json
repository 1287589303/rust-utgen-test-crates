{
  "name": "regex_automata::util::wire::read_pattern_id_unchecked",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:597:1:602:2",
  "doc": "/// Reads a pattern ID from the given slice. If the slice has insufficient\n/// length, then this panics. Otherwise, the deserialized integer is assumed\n/// to be a valid pattern ID.\n///\n/// This also returns the number of bytes read.\n",
  "code": [
    "pub(crate) fn read_pattern_id_unchecked(slice: &[u8]) -> (PatternID, usize) {",
    "    let pid = PatternID::from_ne_bytes_unchecked(",
    "        slice[..PatternID::SIZE].try_into().unwrap(),",
    "    );",
    "    (pid, PatternID::SIZE)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(pid, PatternID::SIZE)",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}