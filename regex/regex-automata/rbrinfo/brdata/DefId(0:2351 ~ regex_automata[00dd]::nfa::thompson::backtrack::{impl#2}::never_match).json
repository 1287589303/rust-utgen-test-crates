{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#2}::never_match",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:562:5:565:6",
  "doc": "/// Create a new `BoundedBacktracker` that never matches any input.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::nfa::thompson::backtrack::BoundedBacktracker;\n///\n/// let re = BoundedBacktracker::never_match()?;\n/// let mut cache = re.create_cache();\n///\n/// assert_eq!(None, re.try_find_iter(&mut cache, \"\").next());\n/// assert_eq!(None, re.try_find_iter(&mut cache, \"foo\").next());\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn never_match() -> Result<BoundedBacktracker, BuildError> {",
    "    let nfa = thompson::NFA::never_match();",
    "    BoundedBacktracker::new_from_nfa(nfa)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}