{
  "name": "regex_automata::util::captures::{impl#1}::slots",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1187:5:1189:6",
  "doc": "/// Returns the underlying slots, where each slot stores a single offset.\n///\n/// Every matching capturing group generally corresponds to two slots: one\n/// slot for the starting position and another for the ending position.\n/// Typically, either both are present or neither are. (The weasel word\n/// \"typically\" is used here because it really depends on the regex engine\n/// implementation. Every sensible regex engine likely adheres to this\n/// invariant, and every regex engine in this crate is sensible.)\n///\n/// Generally speaking, callers should prefer to use higher level routines\n/// like [`Captures::get_match`] or [`Captures::get_group`].\n///\n/// An important note here is that a regex engine may not reset all of the\n/// slots to `None` values when no match occurs, or even when a match of\n/// a different pattern occurs. But this depends on how the regex engine\n/// implementation deals with slots.\n///\n/// # Example\n///\n/// This example shows how to get the underlying slots from a regex match.\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     util::primitives::{PatternID, NonMaxUsize},\n/// };\n///\n/// let re = PikeVM::new_many(&[\n///     r\"[a-z]+\",\n///     r\"[0-9]+\",\n/// ])?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// re.captures(&mut cache, \"123\", &mut caps);\n/// assert_eq!(Some(PatternID::must(1)), caps.pattern());\n/// // Note that the only guarantee we have here is that slots 2 and 3\n/// // are set to correct values. The contents of the first two slots are\n/// // unspecified since the 0th pattern did not match.\n/// let expected = &[\n///     None,\n///     None,\n///     NonMaxUsize::new(0),\n///     NonMaxUsize::new(3),\n/// ];\n/// assert_eq!(expected, caps.slots());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn slots(&self) -> &[Option<NonMaxUsize>] {",
    "    &self.slots",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&self.slots",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}