{
  "name": "regex_automata::hybrid::regex::{impl#6}::build_from_dfas",
  "mod_info": {
    "name": "hybrid::regex",
    "loc": "regex-automata/src/hybrid/mod.rs:143:1:143:15"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/regex.rs:851:5:853:6",
  "doc": "/// Build a regex from its component forward and reverse hybrid NFA/DFAs.\n///\n/// This is useful when you've built a forward and reverse lazy DFA\n/// separately, and want to combine them into a single regex. Once build,\n/// the individual DFAs given can still be accessed via [`Regex::forward`]\n/// and [`Regex::reverse`].\n///\n/// It is important that the reverse lazy DFA be compiled under the\n/// following conditions:\n///\n/// * It should use [`MatchKind::All`] semantics.\n/// * It should match in reverse.\n/// * Otherwise, its configuration should match the forward DFA.\n///\n/// If these conditions aren't satisfied, then the behavior of searches is\n/// unspecified.\n///\n/// Note that when using this constructor, no configuration is applied.\n/// Since this routine provides the DFAs to the builder, there is no\n/// opportunity to apply other configuration options.\n///\n/// # Example\n///\n/// This shows how to build individual lazy forward and reverse DFAs, and\n/// then combine them into a single `Regex`.\n///\n/// ```\n/// use regex_automata::{\n///     hybrid::{dfa::DFA, regex::Regex},\n///     nfa::thompson,\n///     MatchKind,\n/// };\n///\n/// let fwd = DFA::new(r\"foo[0-9]+\")?;\n/// let rev = DFA::builder()\n///     .configure(DFA::config().match_kind(MatchKind::All))\n///     .thompson(thompson::Config::new().reverse(true))\n///     .build(r\"foo[0-9]+\")?;\n///\n/// let re = Regex::builder().build_from_dfas(fwd, rev);\n/// let mut cache = re.create_cache();\n/// assert_eq!(true, re.is_match(&mut cache, \"foo123\"));\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn build_from_dfas(&self, forward: DFA, reverse: DFA) -> Regex {",
    "    Regex { forward, reverse }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Regex { forward, reverse }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}