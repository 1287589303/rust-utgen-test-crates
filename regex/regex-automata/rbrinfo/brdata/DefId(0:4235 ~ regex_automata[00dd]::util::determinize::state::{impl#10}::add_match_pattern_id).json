{
  "name": "regex_automata::util::determinize::state::{impl#10}::add_match_pattern_id",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/util/determinize/state.rs:657:5:691:6",
  "doc": "/// Add a pattern ID to this state. All match states must have at least\n/// one pattern ID associated with it.\n///\n/// Callers must never add duplicative pattern IDs.\n///\n/// The order in which patterns are added must correspond to the order\n/// in which patterns are reported as matches.\n",
  "code": [
    "fn add_match_pattern_id(&mut self, pid: PatternID) {",
    "    // As a (somewhat small) space saving optimization, in the case where",
    "    // a matching state has exactly one pattern ID, PatternID::ZERO, we do",
    "    // not write either the pattern ID or the number of patterns encoded.",
    "    // Instead, all we do is set the 'is_match' bit on this state. Overall,",
    "    // this saves 8 bytes per match state for the overwhelming majority of",
    "    // match states.",
    "    //",
    "    // In order to know whether pattern IDs need to be explicitly read or",
    "    // not, we use another internal-only bit, 'has_pattern_ids', to",
    "    // indicate whether they have been explicitly written or not.",
    "    if !self.repr().has_pattern_ids() {",
    "        if pid == PatternID::ZERO {",
    "            self.set_is_match();",
    "            return;",
    "        }",
    "        // Make room for 'close_match_pattern_ids' to write the total",
    "        // number of pattern IDs written.",
    "        self.0.extend(core::iter::repeat(0).take(PatternID::SIZE));",
    "        self.set_has_pattern_ids();",
    "        // If this was already a match state, then the only way that's",
    "        // possible when the state doesn't have pattern IDs is if",
    "        // PatternID::ZERO was added by the caller previously. In this",
    "        // case, we are now adding a non-ZERO pattern ID after it, in",
    "        // which case, we want to make sure to represent ZERO explicitly",
    "        // now.",
    "        if self.repr().is_match() {",
    "            write_u32(self.0, 0)",
    "        } else {",
    "            // Otherwise, just make sure the 'is_match' bit is set.",
    "            self.set_is_match();",
    "        }",
    "    }",
    "    write_u32(self.0, pid.as_u32());",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.repr().has_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 668,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        20,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.repr().has_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 668,
          "bound": null
        },
        {
          "cond": "pid == PatternID::ZERO",
          "norm": "PatternID::ZERO == pid",
          "value": "true",
          "line": 669,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.repr().has_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 668,
          "bound": null
        },
        {
          "cond": "pid == PatternID::ZERO",
          "norm": "PatternID::ZERO == pid",
          "value": "false",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.repr().is_match()",
          "norm": null,
          "value": "true",
          "line": 683,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        20,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.repr().has_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 668,
          "bound": null
        },
        {
          "cond": "pid == PatternID::ZERO",
          "norm": "PatternID::ZERO == pid",
          "value": "false",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.repr().is_match()",
          "norm": null,
          "value": "false",
          "line": 683,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        18,
        19,
        20,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}