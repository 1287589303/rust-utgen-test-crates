{
  "name": "regex_automata::meta::wrappers::{impl#7}::new",
  "mod_info": {
    "name": "meta::wrappers",
    "loc": "regex-automata/src/meta/mod.rs:62:1:62:14"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/wrappers.rs:376:5:422:6",
  "doc": "",
  "code": [
    "pub(crate) fn new(info: &RegexInfo, nfa: &NFA) -> Option<OnePassEngine> {",
    "    #[cfg(feature = \"dfa-onepass\")]",
    "    {",
    "        if !info.config().get_onepass() {",
    "            return None;",
    "        }",
    "        // In order to even attempt building a one-pass DFA, we require",
    "        // that we either have at least one explicit capturing group or",
    "        // there's a Unicode word boundary somewhere. If we don't have",
    "        // either of these things, then the lazy DFA will almost certainly",
    "        // be useable and be much faster. The only case where it might",
    "        // not is if the lazy DFA isn't utilizing its cache effectively,",
    "        // but in those cases, the underlying regex is almost certainly",
    "        // not one-pass or is too big to fit within the current one-pass",
    "        // implementation limits.",
    "        if info.props_union().explicit_captures_len() == 0",
    "            && !info.props_union().look_set().contains_word_unicode()",
    "        {",
    "            debug!(\"not building OnePass because it isn't worth it\");",
    "            return None;",
    "        }",
    "        let onepass_config = onepass::Config::new()",
    "            .match_kind(info.config().get_match_kind())",
    "            // Like for the lazy DFA, we unconditionally enable this",
    "            // because it doesn't cost much and makes the API more",
    "            // flexible.",
    "            .starts_for_each_pattern(true)",
    "            .byte_classes(info.config().get_byte_classes())",
    "            .size_limit(info.config().get_onepass_size_limit());",
    "        let result = onepass::Builder::new()",
    "            .configure(onepass_config)",
    "            .build_from_nfa(nfa.clone());",
    "        let engine = match result {",
    "            Ok(engine) => engine,",
    "            Err(_err) => {",
    "                debug!(\"OnePass failed to build: {}\", _err);",
    "                return None;",
    "            }",
    "        };",
    "        debug!(\"OnePass built, {} bytes\", engine.memory_usage());",
    "        Some(OnePassEngine(engine))",
    "    }",
    "    #[cfg(not(feature = \"dfa-onepass\"))]",
    "    {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "info.config().get_onepass()",
          "norm": null,
          "value": "true",
          "line": 379,
          "bound": null
        },
        {
          "cond": "info.props_union().explicit_captures_len() == 0",
          "norm": "0 == info.props_union().explicit_captures_len()",
          "value": "false",
          "line": 391,
          "bound": null
        },
        {
          "cond": "info.props_union().look_set().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 392,
          "bound": null
        },
        {
          "cond": "result matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "info.config().get_onepass()",
          "norm": null,
          "value": "true",
          "line": 379,
          "bound": null
        },
        {
          "cond": "info.props_union().explicit_captures_len() == 0",
          "norm": "0 == info.props_union().explicit_captures_len()",
          "value": "false",
          "line": 391,
          "bound": null
        },
        {
          "cond": "info.props_union().look_set().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 392,
          "bound": null
        },
        {
          "cond": "result matches Ok(engine)",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        },
        {
          "cond": "result matches Ok(engine)",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": "Some(OnePassEngine(engine))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "info.config().get_onepass()",
          "norm": null,
          "value": "true",
          "line": 379,
          "bound": null
        },
        {
          "cond": "info.props_union().explicit_captures_len() == 0",
          "norm": "0 == info.props_union().explicit_captures_len()",
          "value": "false",
          "line": 391,
          "bound": null
        },
        {
          "cond": "info.props_union().look_set().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 392,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "info.config().get_onepass()",
          "norm": null,
          "value": "true",
          "line": 379,
          "bound": null
        },
        {
          "cond": "info.props_union().explicit_captures_len() == 0",
          "norm": "0 == info.props_union().explicit_captures_len()",
          "value": "true",
          "line": 391,
          "bound": null
        },
        {
          "cond": "result matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "info.config().get_onepass()",
          "norm": null,
          "value": "true",
          "line": 379,
          "bound": null
        },
        {
          "cond": "info.props_union().explicit_captures_len() == 0",
          "norm": "0 == info.props_union().explicit_captures_len()",
          "value": "true",
          "line": 391,
          "bound": null
        },
        {
          "cond": "result matches Ok(engine)",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        },
        {
          "cond": "result matches Ok(engine)",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": "Some(OnePassEngine(engine))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "info.config().get_onepass()",
          "norm": null,
          "value": "false",
          "line": 379,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        42
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}