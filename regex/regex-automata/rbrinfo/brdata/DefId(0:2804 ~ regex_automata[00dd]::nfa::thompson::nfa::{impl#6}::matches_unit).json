{
  "name": "regex_automata::nfa::thompson::nfa::{impl#6}::matches_unit",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1818:5:1823:6",
  "doc": "/// This follows the matching transition for any member of the alphabet.\n///\n/// The matching transition is found by looking for a matching byte\n/// range (there is at most one) corresponding to the position `at` in\n/// `haystack`. If the given alphabet unit is [`EOI`](alphabet::Unit::eoi),\n/// then this always returns `None`.\n",
  "code": [
    "pub(crate) fn matches_unit(",
    "    &self,",
    "    unit: alphabet::Unit,",
    ") -> Option<StateID> {",
    "    unit.as_u8().map_or(None, |byte| self.matches_byte(byte))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}