{
  "name": "regex_automata::dfa::dense::{impl#8}::from_bytes_unchecked",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:2397:5:2436:6",
  "doc": "/// Deserialize a DFA with a specific state identifier representation in\n/// constant time by omitting the verification of the validity of the\n/// transition table and other data inside the DFA.\n///\n/// This is just like [`DFA::from_bytes`], except it can potentially return\n/// a DFA that exhibits undefined behavior if its transition table contains\n/// invalid state identifiers.\n///\n/// This routine is useful if you need to deserialize a DFA cheaply\n/// and cannot afford the transition table validation performed by\n/// `from_bytes`.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{dfa::{Automaton, dense::DFA}, HalfMatch, Input};\n///\n/// let initial = DFA::new(\"foo[0-9]+\")?;\n/// let (bytes, _) = initial.to_bytes_native_endian();\n/// // SAFETY: This is guaranteed to be safe since the bytes given come\n/// // directly from a compatible serialization routine.\n/// let dfa: DFA<&[u32]> = unsafe { DFA::from_bytes_unchecked(&bytes)?.0 };\n///\n/// let expected = Some(HalfMatch::must(0, 8));\n/// assert_eq!(expected, dfa.try_search_fwd(&Input::new(\"foo12345\"))?);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub unsafe fn from_bytes_unchecked(",
    "    slice: &'a [u8],",
    ") -> Result<(DFA<&'a [u32]>, usize), DeserializeError> {",
    "    let mut nr = 0;",
    "",
    "    nr += wire::skip_initial_padding(slice);",
    "    wire::check_alignment::<StateID>(&slice[nr..])?;",
    "    nr += wire::read_label(&slice[nr..], LABEL)?;",
    "    nr += wire::read_endianness_check(&slice[nr..])?;",
    "    nr += wire::read_version(&slice[nr..], VERSION)?;",
    "",
    "    let _unused = wire::try_read_u32(&slice[nr..], \"unused space\")?;",
    "    nr += size_of::<u32>();",
    "",
    "    let (flags, nread) = Flags::from_bytes(&slice[nr..])?;",
    "    nr += nread;",
    "",
    "    let (tt, nread) = TransitionTable::from_bytes_unchecked(&slice[nr..])?;",
    "    nr += nread;",
    "",
    "    let (st, nread) = StartTable::from_bytes_unchecked(&slice[nr..])?;",
    "    nr += nread;",
    "",
    "    let (ms, nread) = MatchStates::from_bytes_unchecked(&slice[nr..])?;",
    "    nr += nread;",
    "",
    "    let (special, nread) = Special::from_bytes(&slice[nr..])?;",
    "    nr += nread;",
    "    special.validate_state_len(tt.len(), tt.stride2)?;",
    "",
    "    let (accels, nread) = Accels::from_bytes_unchecked(&slice[nr..])?;",
    "    nr += nread;",
    "",
    "    let (quitset, nread) = ByteSet::from_bytes(&slice[nr..])?;",
    "    nr += nread;",
    "",
    "    // Prefilters don't support serialization, so they're always absent.",
    "    let pre = None;",
    "    Ok((DFA { tt, st, ms, special, accels, pre, quitset, flags }, nr))",
    "}"
  ],
  "size": {
    "chain": 14,
    "contra": 0,
    "min_set": 14
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Err/None",
          "line": 2403,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Err/None",
          "line": 2404,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        15,
        17,
        18,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2404,
          "bound": null
        },
        {
          "cond": "wire::read_endianness_check(&slice[nr..])?",
          "norm": null,
          "value": "Err/None",
          "line": 2405,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        24,
        26,
        27,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2404,
          "bound": null
        },
        {
          "cond": "wire::read_endianness_check(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2405,
          "bound": null
        },
        {
          "cond": "wire::read_version(&slice[nr..], VERSION)?",
          "norm": null,
          "value": "Err/None",
          "line": 2406,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        33,
        35,
        36,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2404,
          "bound": null
        },
        {
          "cond": "wire::read_endianness_check(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2405,
          "bound": null
        },
        {
          "cond": "wire::read_version(&slice[nr..], VERSION)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2406,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(&slice[nr..], \"unused space\")?",
          "norm": null,
          "value": "Err/None",
          "line": 2408,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        128,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2404,
          "bound": null
        },
        {
          "cond": "wire::read_endianness_check(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2405,
          "bound": null
        },
        {
          "cond": "wire::read_version(&slice[nr..], VERSION)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2406,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(&slice[nr..], \"unused space\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2408,
          "bound": null
        },
        {
          "cond": "Flags::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Err/None",
          "line": 2411,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        54,
        55,
        128,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2404,
          "bound": null
        },
        {
          "cond": "wire::read_endianness_check(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2405,
          "bound": null
        },
        {
          "cond": "wire::read_version(&slice[nr..], VERSION)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2406,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(&slice[nr..], \"unused space\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2408,
          "bound": null
        },
        {
          "cond": "Flags::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2411,
          "bound": null
        },
        {
          "cond": "TransitionTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Err/None",
          "line": 2414,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        53,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        127,
        128,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2404,
          "bound": null
        },
        {
          "cond": "wire::read_endianness_check(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2405,
          "bound": null
        },
        {
          "cond": "wire::read_version(&slice[nr..], VERSION)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2406,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(&slice[nr..], \"unused space\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2408,
          "bound": null
        },
        {
          "cond": "Flags::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2411,
          "bound": null
        },
        {
          "cond": "TransitionTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2414,
          "bound": null
        },
        {
          "cond": "StartTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Err/None",
          "line": 2417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        53,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        72,
        73,
        126,
        127,
        128,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2404,
          "bound": null
        },
        {
          "cond": "wire::read_endianness_check(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2405,
          "bound": null
        },
        {
          "cond": "wire::read_version(&slice[nr..], VERSION)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2406,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(&slice[nr..], \"unused space\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2408,
          "bound": null
        },
        {
          "cond": "Flags::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2411,
          "bound": null
        },
        {
          "cond": "TransitionTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2414,
          "bound": null
        },
        {
          "cond": "StartTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2417,
          "bound": null
        },
        {
          "cond": "MatchStates::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Err/None",
          "line": 2420,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        53,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        71,
        74,
        75,
        76,
        77,
        79,
        81,
        82,
        125,
        126,
        127,
        128,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2404,
          "bound": null
        },
        {
          "cond": "wire::read_endianness_check(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2405,
          "bound": null
        },
        {
          "cond": "wire::read_version(&slice[nr..], VERSION)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2406,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(&slice[nr..], \"unused space\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2408,
          "bound": null
        },
        {
          "cond": "Flags::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2411,
          "bound": null
        },
        {
          "cond": "TransitionTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2414,
          "bound": null
        },
        {
          "cond": "StartTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2417,
          "bound": null
        },
        {
          "cond": "MatchStates::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2420,
          "bound": null
        },
        {
          "cond": "Special::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Err/None",
          "line": 2423,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        53,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        71,
        74,
        75,
        76,
        77,
        80,
        83,
        84,
        85,
        86,
        88,
        90,
        91,
        124,
        125,
        126,
        127,
        128,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2404,
          "bound": null
        },
        {
          "cond": "wire::read_endianness_check(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2405,
          "bound": null
        },
        {
          "cond": "wire::read_version(&slice[nr..], VERSION)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2406,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(&slice[nr..], \"unused space\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2408,
          "bound": null
        },
        {
          "cond": "Flags::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2411,
          "bound": null
        },
        {
          "cond": "TransitionTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2414,
          "bound": null
        },
        {
          "cond": "StartTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2417,
          "bound": null
        },
        {
          "cond": "MatchStates::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2420,
          "bound": null
        },
        {
          "cond": "Special::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2423,
          "bound": null
        },
        {
          "cond": "special.validate_state_len(tt.len(), tt.stride2)?",
          "norm": null,
          "value": "Err/None",
          "line": 2425,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        53,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        71,
        74,
        75,
        76,
        77,
        80,
        83,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        97,
        99,
        100,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2404,
          "bound": null
        },
        {
          "cond": "wire::read_endianness_check(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2405,
          "bound": null
        },
        {
          "cond": "wire::read_version(&slice[nr..], VERSION)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2406,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(&slice[nr..], \"unused space\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2408,
          "bound": null
        },
        {
          "cond": "Flags::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2411,
          "bound": null
        },
        {
          "cond": "TransitionTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2414,
          "bound": null
        },
        {
          "cond": "StartTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2417,
          "bound": null
        },
        {
          "cond": "MatchStates::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2420,
          "bound": null
        },
        {
          "cond": "Special::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2423,
          "bound": null
        },
        {
          "cond": "special.validate_state_len(tt.len(), tt.stride2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2425,
          "bound": null
        },
        {
          "cond": "Accels::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Err/None",
          "line": 2427,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        53,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        71,
        74,
        75,
        76,
        77,
        80,
        83,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        98,
        101,
        102,
        103,
        105,
        107,
        108,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2404,
          "bound": null
        },
        {
          "cond": "wire::read_endianness_check(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2405,
          "bound": null
        },
        {
          "cond": "wire::read_version(&slice[nr..], VERSION)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2406,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(&slice[nr..], \"unused space\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2408,
          "bound": null
        },
        {
          "cond": "Flags::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2411,
          "bound": null
        },
        {
          "cond": "TransitionTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2414,
          "bound": null
        },
        {
          "cond": "StartTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2417,
          "bound": null
        },
        {
          "cond": "MatchStates::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2420,
          "bound": null
        },
        {
          "cond": "Special::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2423,
          "bound": null
        },
        {
          "cond": "special.validate_state_len(tt.len(), tt.stride2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2425,
          "bound": null
        },
        {
          "cond": "Accels::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2427,
          "bound": null
        },
        {
          "cond": "ByteSet::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Err/None",
          "line": 2430,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        53,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        71,
        74,
        75,
        76,
        77,
        80,
        83,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        98,
        101,
        102,
        103,
        106,
        109,
        110,
        111,
        112,
        114,
        116,
        117,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "wire::check_alignment::<StateID>(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2403,
          "bound": null
        },
        {
          "cond": "wire::read_label(&slice[nr..], LABEL)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2404,
          "bound": null
        },
        {
          "cond": "wire::read_endianness_check(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2405,
          "bound": null
        },
        {
          "cond": "wire::read_version(&slice[nr..], VERSION)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2406,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(&slice[nr..], \"unused space\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2408,
          "bound": null
        },
        {
          "cond": "Flags::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2411,
          "bound": null
        },
        {
          "cond": "TransitionTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2414,
          "bound": null
        },
        {
          "cond": "StartTable::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2417,
          "bound": null
        },
        {
          "cond": "MatchStates::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2420,
          "bound": null
        },
        {
          "cond": "Special::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2423,
          "bound": null
        },
        {
          "cond": "special.validate_state_len(tt.len(), tt.stride2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2425,
          "bound": null
        },
        {
          "cond": "Accels::from_bytes_unchecked(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2427,
          "bound": null
        },
        {
          "cond": "ByteSet::from_bytes(&slice[nr..])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2430,
          "bound": null
        }
      ],
      "ret": "Ok((DFA { tt, st, ms, special, accels, pre, quitset, flags }, nr))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        53,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        71,
        74,
        75,
        76,
        77,
        80,
        83,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        98,
        101,
        102,
        103,
        106,
        109,
        110,
        111,
        112,
        115,
        118,
        119,
        120,
        121,
        122,
        130
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}