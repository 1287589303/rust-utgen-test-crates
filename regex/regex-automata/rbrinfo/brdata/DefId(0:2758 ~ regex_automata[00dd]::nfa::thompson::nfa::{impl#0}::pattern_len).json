{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::pattern_len",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:440:5:442:6",
  "doc": "/// Returns the total number of regex patterns in this NFA.\n///\n/// This may return zero if the NFA was constructed with no patterns. In\n/// this case, the NFA can never produce a match for any input.\n///\n/// This is guaranteed to be no bigger than [`PatternID::LIMIT`] because\n/// NFA construction will fail if too many patterns are added.\n///\n/// It is always true that `nfa.patterns().count() == nfa.pattern_len()`.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::nfa::thompson::NFA;\n///\n/// let nfa = NFA::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"])?;\n/// assert_eq!(3, nfa.pattern_len());\n///\n/// let nfa = NFA::never_match();\n/// assert_eq!(0, nfa.pattern_len());\n///\n/// let nfa = NFA::always_match();\n/// assert_eq!(1, nfa.pattern_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn pattern_len(&self) -> usize {",
    "    self.0.start_pattern.len()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}