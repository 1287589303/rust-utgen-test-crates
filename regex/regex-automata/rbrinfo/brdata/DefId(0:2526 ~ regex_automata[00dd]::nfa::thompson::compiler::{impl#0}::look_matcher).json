{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::look_matcher",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:454:5:457:6",
  "doc": "/// Sets the look-around matcher that should be used with this NFA.\n///\n/// A look-around matcher determines how to match look-around assertions.\n/// In particular, some assertions are configurable. For example, the\n/// `(?m:^)` and `(?m:$)` assertions can have their line terminator changed\n/// from the default of `\\n` to any other byte.\n///\n/// # Example\n///\n/// This shows how to change the line terminator for multi-line assertions.\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::{self, pikevm::PikeVM},\n///     util::look::LookMatcher,\n///     Match, Input,\n/// };\n///\n/// let mut lookm = LookMatcher::new();\n/// lookm.set_line_terminator(b'\\x00');\n///\n/// let re = PikeVM::builder()\n///     .thompson(thompson::Config::new().look_matcher(lookm))\n///     .build(r\"(?m)^[a-z]+$\")?;\n/// let mut cache = re.create_cache();\n///\n/// // Multi-line assertions now use NUL as a terminator.\n/// assert_eq!(\n///     Some(Match::must(0, 1..4)),\n///     re.find(&mut cache, b\"\\x00abc\\x00\"),\n/// );\n/// // ... and \\n is no longer recognized as a terminator.\n/// assert_eq!(\n///     None,\n///     re.find(&mut cache, b\"\\nabc\\n\"),\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn look_matcher(mut self, m: LookMatcher) -> Config {",
    "    self.look_matcher = Some(m);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}