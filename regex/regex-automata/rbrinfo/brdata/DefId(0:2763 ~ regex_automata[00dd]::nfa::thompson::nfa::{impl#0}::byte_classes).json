{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::byte_classes",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:598:5:600:6",
  "doc": "/// Get the byte classes for this NFA.\n///\n/// Byte classes represent a partitioning of this NFA's alphabet into\n/// equivalence classes. Any two bytes in the same equivalence class are\n/// guaranteed to never discriminate between a match or a non-match. (The\n/// partitioning may not be minimal.)\n///\n/// Byte classes are used internally by this crate when building DFAs.\n/// Namely, among other optimizations, they enable a space optimization\n/// where the DFA's internal alphabet is defined over the equivalence\n/// classes of bytes instead of all possible byte values. The former is\n/// often quite a bit smaller than the latter, which permits the DFA to use\n/// less space for its transition table.\n///\n/// # Example\n///\n/// This example shows how to query the class of various bytes.\n///\n/// ```\n/// use regex_automata::nfa::thompson::NFA;\n///\n/// let nfa = NFA::new(\"[a-z]+\")?;\n/// let classes = nfa.byte_classes();\n/// // 'a' and 'z' are in the same class for this regex.\n/// assert_eq!(classes.get(b'a'), classes.get(b'z'));\n/// // But 'a' and 'A' are not.\n/// assert_ne!(classes.get(b'a'), classes.get(b'A'));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn byte_classes(&self) -> &ByteClasses {",
    "    &self.0.byte_classes",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&self.0.byte_classes",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}