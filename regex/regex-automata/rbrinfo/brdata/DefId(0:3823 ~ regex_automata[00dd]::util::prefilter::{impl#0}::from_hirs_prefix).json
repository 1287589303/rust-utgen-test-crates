{
  "name": "regex_automata::util::prefilter::{impl#0}::from_hirs_prefix",
  "mod_info": {
    "name": "util::prefilter",
    "loc": "regex-automata/src/util/mod.rs:41:1:41:19"
  },
  "visible": true,
  "loc": "regex-automata/src/util/prefilter/mod.rs:309:5:316:6",
  "doc": "/// This attempts to extract prefixes from the given `Hir` expressions for\n/// the given match semantics, and if possible, builds a prefilter for\n/// them.\n///\n/// Note that as of now, prefilters throw away information about which\n/// pattern each literal comes from. In other words, when a prefilter finds\n/// a match, there's no way to know which pattern (or patterns) it came\n/// from. Therefore, in order to confirm a match, you'll have to check all\n/// of the patterns by running the full regex engine.\n///\n/// # Example\n///\n/// This example shows how to build a prefilter directly from multiple\n/// `Hir` expressions expression, and use it to find an occurrence of a\n/// prefix from the regex patterns.\n///\n/// ```\n/// use regex_automata::{\n///     util::{prefilter::Prefilter, syntax},\n///     MatchKind, Span,\n/// };\n///\n/// let hirs = syntax::parse_many(&[\n///     r\"(Bruce|Patti) \\w+\",\n///     r\"Mrs?\\. Doubtfire\",\n/// ])?;\n/// let pre = Prefilter::from_hirs_prefix(MatchKind::LeftmostFirst, &hirs)\n///     .expect(\"a prefilter\");\n/// let hay = \"Hello Mrs. Doubtfire\";\n/// assert_eq!(\n///     Some(Span::from(6..20)),\n///     pre.find(hay.as_bytes(), Span::from(0..hay.len())),\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn from_hirs_prefix<H: Borrow<Hir>>(",
    "    kind: MatchKind,",
    "    hirs: &[H],",
    ") -> Option<Prefilter> {",
    "    prefixes(kind, hirs)",
    "        .literals()",
    "        .and_then(|lits| Prefilter::new(kind, lits))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}