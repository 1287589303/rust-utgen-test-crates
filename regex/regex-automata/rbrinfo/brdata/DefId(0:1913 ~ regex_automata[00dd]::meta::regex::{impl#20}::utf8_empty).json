{
  "name": "regex_automata::meta::regex::{impl#20}::utf8_empty",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2531:5:2533:6",
  "doc": "/// Toggles whether empty matches are permitted to occur between the code\n/// units of a UTF-8 encoded codepoint.\n///\n/// This should generally be enabled when search a `&str` or anything that\n/// you otherwise know is valid UTF-8. It should be disabled in all other\n/// cases. Namely, if the haystack is not valid UTF-8 and this is enabled,\n/// then behavior is unspecified.\n///\n/// By default, this is enabled.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{meta::Regex, Match};\n///\n/// let re = Regex::new(\"\")?;\n/// let got: Vec<Match> = re.find_iter(\"☃\").collect();\n/// // Matches only occur at the beginning and end of the snowman.\n/// assert_eq!(got, vec![\n///     Match::must(0, 0..0),\n///     Match::must(0, 3..3),\n/// ]);\n///\n/// let re = Regex::builder()\n///     .configure(Regex::config().utf8_empty(false))\n///     .build(\"\")?;\n/// let got: Vec<Match> = re.find_iter(\"☃\").collect();\n/// // Matches now occur at every position!\n/// assert_eq!(got, vec![\n///     Match::must(0, 0..0),\n///     Match::must(0, 1..1),\n///     Match::must(0, 2..2),\n///     Match::must(0, 3..3),\n/// ]);\n///\n/// Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn utf8_empty(self, yes: bool) -> Config {",
    "    Config { utf8_empty: Some(yes), ..self }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Config { utf8_empty: Some(yes), ..self }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}