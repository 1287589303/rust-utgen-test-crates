{
  "name": "regex_automata::hybrid::dfa::minimum_lazy_state_id",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:4285:1:4291:2",
  "doc": "/// Based on the minimum number of states required for a useful lazy DFA cache,\n/// this returns the minimum lazy state ID that must be representable.\n///\n/// It's not likely for this to have any impact 32-bit systems (or higher), but\n/// on 16-bit systems, the lazy state ID space is quite constrained and thus\n/// may be insufficient if our MIN_STATES value is (for some reason) too high.\n",
  "code": [
    "fn minimum_lazy_state_id(",
    "    classes: &ByteClasses,",
    ") -> Result<LazyStateID, LazyStateIDError> {",
    "    let stride = 1 << classes.stride2();",
    "    let min_state_index = MIN_STATES.checked_sub(1).unwrap();",
    "    LazyStateID::new(min_state_index * stride)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}