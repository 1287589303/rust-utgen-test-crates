{
  "name": "regex_automata::dfa::determinize::{impl#0}::match_kind",
  "mod_info": {
    "name": "dfa::determinize",
    "loc": "regex-automata/src/dfa/mod.rs:350:1:350:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/determinize.rs:89:5:92:6",
  "doc": "/// The match semantics to use for determinization.\n///\n/// MatchKind::All corresponds to the standard textbook construction.\n/// All possible match states are represented in the DFA.\n/// MatchKind::LeftmostFirst permits greediness and otherwise tries to\n/// simulate the match semantics of backtracking regex engines. Namely,\n/// only a subset of match states are built, and dead states are used to\n/// stop searches with an unanchored prefix.\n///\n/// The default is MatchKind::LeftmostFirst.\n",
  "code": [
    "pub fn match_kind(&mut self, kind: MatchKind) -> &mut Config {",
    "    self.match_kind = kind;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}