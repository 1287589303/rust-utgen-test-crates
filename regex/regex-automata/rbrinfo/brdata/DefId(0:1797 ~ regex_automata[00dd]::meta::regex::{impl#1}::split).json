{
  "name": "regex_automata::meta::regex::{impl#1}::split",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:815:5:820:6",
  "doc": "/// Returns an iterator of spans of the haystack given, delimited by a\n/// match of the regex. Namely, each element of the iterator corresponds to\n/// a part of the haystack that *isn't* matched by the regular expression.\n///\n/// # Example\n///\n/// To split a string delimited by arbitrary amounts of spaces or tabs:\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\"[ \\t]+\")?;\n/// let hay = \"a b \\t  c\\td    e\";\n/// let fields: Vec<&str> = re.split(hay).map(|span| &hay[span]).collect();\n/// assert_eq!(fields, vec![\"a\", \"b\", \"c\", \"d\", \"e\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// # Example: more cases\n///\n/// Basic usage:\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\" \")?;\n/// let hay = \"Mary had a little lamb\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"lionXXtigerXleopard\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"lion\", \"\", \"tiger\", \"leopard\"]);\n///\n/// let re = Regex::new(r\"::\")?;\n/// let hay = \"lion::tiger::leopard\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"lion\", \"tiger\", \"leopard\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// If a haystack contains multiple contiguous matches, you will end up\n/// with empty spans yielded by the iterator:\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"XXXXaXXbXc\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n///\n/// let re = Regex::new(r\"/\")?;\n/// let hay = \"(///)\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"(\", \"\", \"\", \")\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Separators at the start or end of a haystack are neighbored by empty\n/// spans.\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\"0\")?;\n/// let hay = \"010\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\", \"1\", \"\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// When the empty string is used as a regex, it splits at every valid\n/// UTF-8 boundary by default (which includes the beginning and end of the\n/// haystack):\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\"\")?;\n/// let hay = \"rust\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n///\n/// // Splitting by an empty string is UTF-8 aware by default!\n/// let re = Regex::new(r\"\")?;\n/// let hay = \"☃\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\", \"☃\", \"\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// But note that UTF-8 mode for empty strings can be disabled, which will\n/// then result in a match at every byte offset in the haystack,\n/// including between every UTF-8 code unit.\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::builder()\n///     .configure(Regex::config().utf8_empty(false))\n///     .build(r\"\")?;\n/// let hay = \"☃\".as_bytes();\n/// let got: Vec<&[u8]> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\n///     // Writing byte string slices is just brutal. The problem is that\n///     // b\"foo\" has type &[u8; 3] instead of &[u8].\n///     &[][..], &[b'\\xE2'][..], &[b'\\x98'][..], &[b'\\x83'][..], &[][..],\n/// ]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Contiguous separators (commonly shows up with whitespace), can lead to\n/// possibly surprising behavior. For example, this code is correct:\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\" \")?;\n/// let hay = \"    a  b c\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// It does *not* give you `[\"a\", \"b\", \"c\"]`. For that behavior, you'd want\n/// to match contiguous space characters:\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\" +\")?;\n/// let hay = \"    a  b c\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// // N.B. This does still include a leading empty span because ' +'\n/// // matches at the beginning of the haystack.\n/// assert_eq!(got, vec![\"\", \"a\", \"b\", \"c\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn split<'r, 'h, I: Into<Input<'h>>>(",
    "    &'r self,",
    "    input: I,",
    ") -> Split<'r, 'h> {",
    "    Split { finder: self.find_iter(input), last: 0 }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Split { finder: self.find_iter(input), last: 0 }",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}