{
  "name": "regex_automata::dfa::accel::{impl#0}::set_len",
  "mod_info": {
    "name": "dfa::accel",
    "loc": "regex-automata/src/dfa/mod.rs:346:1:346:22"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/accel.rs:165:5:172:6",
  "doc": "/// Set the number of accelerators in this sequence, which is encoded in\n/// the first 4 bytes of the underlying bytes.\n",
  "code": [
    "fn set_len(&mut self, new_len: usize) {",
    "    // The only way an accelerator gets added is if a state exists for",
    "    // it, and if a state exists, then its index is guaranteed to be",
    "    // representable by a AccelTy by virtue of the guarantees provided by",
    "    // StateID.",
    "    let new_len = AccelTy::try_from(new_len).unwrap();",
    "    self.accels[0] = new_len;",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}