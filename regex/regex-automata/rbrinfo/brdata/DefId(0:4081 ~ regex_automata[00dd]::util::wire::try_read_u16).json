{
  "name": "regex_automata::util::wire::try_read_u16",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:716:1:722:2",
  "doc": "/// Try to read a u16 from the beginning of the given slice in native endian\n/// format. If the slice has fewer than 2 bytes, then this returns an error.\n/// The error message will include the `what` description of what is being\n/// deserialized, for better error messages. `what` should be a noun in\n/// singular form.\n///\n/// Upon success, this also returns the number of bytes read.\n",
  "code": [
    "pub(crate) fn try_read_u16(",
    "    slice: &[u8],",
    "    what: &'static str,",
    ") -> Result<(u16, usize), DeserializeError> {",
    "    check_slice_len(slice, size_of::<u16>(), what)?;",
    "    Ok((read_u16(slice), size_of::<u16>()))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "check_slice_len(slice, size_of::<u16>(), what)?",
          "norm": null,
          "value": "Err/None",
          "line": 720,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "check_slice_len(slice, size_of::<u16>(), what)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 720,
          "bound": null
        }
      ],
      "ret": "Ok((read_u16(slice), size_of::<u16>()))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}