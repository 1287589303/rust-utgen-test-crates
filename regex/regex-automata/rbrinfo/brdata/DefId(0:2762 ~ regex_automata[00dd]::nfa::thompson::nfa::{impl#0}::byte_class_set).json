{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::byte_class_set",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:563:5:565:6",
  "doc": "/// Get the byte class set for this NFA.\n///\n/// A byte class set is a partitioning of this NFA's alphabet into\n/// equivalence classes. Any two bytes in the same equivalence class are\n/// guaranteed to never discriminate between a match or a non-match. (The\n/// partitioning may not be minimal.)\n///\n/// Byte classes are used internally by this crate when building DFAs.\n/// Namely, among other optimizations, they enable a space optimization\n/// where the DFA's internal alphabet is defined over the equivalence\n/// classes of bytes instead of all possible byte values. The former is\n/// often quite a bit smaller than the latter, which permits the DFA to use\n/// less space for its transition table.\n",
  "code": [
    "pub(crate) fn byte_class_set(&self) -> &ByteClassSet {",
    "    &self.0.byte_class_set",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&self.0.byte_class_set",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}