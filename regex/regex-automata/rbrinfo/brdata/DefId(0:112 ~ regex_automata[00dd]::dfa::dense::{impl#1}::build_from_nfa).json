{
  "name": "regex_automata::dfa::dense::{impl#1}::build_from_nfa",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:1209:5:1278:6",
  "doc": "/// Build a DFA from the given NFA.\n///\n/// # Example\n///\n/// This example shows how to build a DFA if you already have an NFA in\n/// hand.\n///\n/// ```\n/// use regex_automata::{\n///     dfa::{Automaton, dense},\n///     nfa::thompson::NFA,\n///     HalfMatch, Input,\n/// };\n///\n/// let haystack = \"foo123bar\".as_bytes();\n///\n/// // This shows how to set non-default options for building an NFA.\n/// let nfa = NFA::compiler()\n///     .configure(NFA::config().shrink(true))\n///     .build(r\"[0-9]+\")?;\n/// let dfa = dense::Builder::new().build_from_nfa(&nfa)?;\n/// let expected = Some(HalfMatch::must(0, 6));\n/// let got = dfa.try_search_fwd(&Input::new(haystack))?;\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn build_from_nfa(",
    "    &self,",
    "    nfa: &thompson::NFA,",
    ") -> Result<OwnedDFA, BuildError> {",
    "    let mut quitset = self.config.quitset.unwrap_or(ByteSet::empty());",
    "    if self.config.get_unicode_word_boundary()",
    "        && nfa.look_set_any().contains_word_unicode()",
    "    {",
    "        for b in 0x80..=0xFF {",
    "            quitset.add(b);",
    "        }",
    "    }",
    "    let classes = if !self.config.get_byte_classes() {",
    "        // DFAs will always use the equivalence class map, but enabling",
    "        // this option is useful for debugging. Namely, this will cause all",
    "        // transitions to be defined over their actual bytes instead of an",
    "        // opaque equivalence class identifier. The former is much easier",
    "        // to grok as a human.",
    "        ByteClasses::singletons()",
    "    } else {",
    "        let mut set = nfa.byte_class_set().clone();",
    "        // It is important to distinguish any \"quit\" bytes from all other",
    "        // bytes. Otherwise, a non-quit byte may end up in the same",
    "        // class as a quit byte, and thus cause the DFA to stop when it",
    "        // shouldn't.",
    "        //",
    "        // Test case:",
    "        //",
    "        //   regex-cli find match dense --unicode-word-boundary \\",
    "        //     -p '^#' -p '\\b10\\.55\\.182\\.100\\b' -y @conn.json.1000x.log",
    "        if !quitset.is_empty() {",
    "            set.add_set(&quitset);",
    "        }",
    "        set.byte_classes()",
    "    };",
    "",
    "    let mut dfa = DFA::initial(",
    "        classes,",
    "        nfa.pattern_len(),",
    "        self.config.get_starts(),",
    "        nfa.look_matcher(),",
    "        self.config.get_starts_for_each_pattern(),",
    "        self.config.get_prefilter().map(|p| p.clone()),",
    "        quitset,",
    "        Flags::from_nfa(&nfa),",
    "    )?;",
    "    determinize::Config::new()",
    "        .match_kind(self.config.get_match_kind())",
    "        .quit(quitset)",
    "        .dfa_size_limit(self.config.get_dfa_size_limit())",
    "        .determinize_size_limit(self.config.get_determinize_size_limit())",
    "        .run(nfa, &mut dfa)?;",
    "    if self.config.get_minimize() {",
    "        dfa.minimize();",
    "    }",
    "    if self.config.get_accelerate() {",
    "        dfa.accelerate();",
    "    }",
    "    // The state shuffling done before this point always assumes that start",
    "    // states should be marked as \"special,\" even though it isn't the",
    "    // default configuration. State shuffling is complex enough as it is,",
    "    // so it's simpler to just \"fix\" our special state ID ranges to not",
    "    // include starting states after-the-fact.",
    "    if !self.config.get_specialize_start_states() {",
    "        dfa.special.set_no_special_start_states();",
    "    }",
    "    // Look for and set the universal starting states.",
    "    dfa.set_universal_starts();",
    "    Ok(dfa)",
    "}"
  ],
  "size": {
    "chain": 120,
    "contra": 30,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        47,
        86,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 1255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        84,
        85,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        47,
        86,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 1255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        84,
        85,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        47,
        86,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 1255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        84,
        85,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        47,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 1255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        84,
        85,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        47,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 1255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        84,
        85,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        47,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 1255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        84,
        85,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 1217,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        47,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 1255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        84,
        85,
        88,
        89
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        47,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 1255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        84,
        85,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 78,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 79,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 80,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 81,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        47,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 82,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 1255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        84,
        85,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 83,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 84,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 85,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 86,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 87,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 88,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 89,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 90,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 1215,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 91,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        47,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 92,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 1255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        84,
        85,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 93,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 94,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 95,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 96,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 97,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 98,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 99,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 100,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 101,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        47,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 102,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 1255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        84,
        85,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 103,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 104,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 105,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 106,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 107,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 108,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 109,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 110,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 111,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        47,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 112,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 1255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        84,
        85,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 113,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 114,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 115,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 116,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "true",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 117,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 118,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        72,
        73,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 119,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "true",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 120,
      "conds": [
        {
          "cond": "self.config.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 1214,
          "bound": null
        },
        {
          "cond": "self.config.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 1221,
          "bound": null
        },
        {
          "cond": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1255,
          "bound": null
        },
        {
          "cond": "self.config.get_minimize()",
          "norm": null,
          "value": "false",
          "line": 1261,
          "bound": null
        },
        {
          "cond": "self.config.get_accelerate()",
          "norm": null,
          "value": "false",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "self.config.get_specialize_start_states()",
          "norm": null,
          "value": "false",
          "line": 1272,
          "bound": null
        }
      ],
      "ret": "Ok(dfa)",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21,
        22,
        24,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}