{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#5}::start_config",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:1771:5:1784:6",
  "doc": "/// Return the starting configuration of a PikeVM search.\n///\n/// The \"start config\" is basically whether the search should be anchored\n/// or not and the NFA state ID at which to begin the search. The state ID\n/// returned always corresponds to an anchored starting state even when the\n/// search is unanchored. This is because the PikeVM search loop deals with\n/// unanchored searches with an explicit epsilon closure out of the start\n/// state.\n///\n/// This routine accounts for both the caller's `Input` configuration\n/// and the pattern itself. For example, even if the caller asks for an\n/// unanchored search, if the pattern itself is anchored, then this will\n/// always return 'true' because implementing an unanchored search in that\n/// case would be incorrect.\n///\n/// Similarly, if the caller requests an anchored search for a particular\n/// pattern, then the starting state ID returned will reflect that.\n///\n/// If a pattern ID is given in the input configuration that is not in\n/// this regex, then `None` is returned.\n",
  "code": [
    "fn start_config(&self, input: &Input<'_>) -> Option<(bool, StateID)> {",
    "    match input.get_anchored() {",
    "        // Only way we're unanchored is if both the caller asked for an",
    "        // unanchored search *and* the pattern is itself not anchored.",
    "        Anchored::No => Some((",
    "            self.nfa.is_always_start_anchored(),",
    "            self.nfa.start_anchored(),",
    "        )),",
    "        Anchored::Yes => Some((true, self.nfa.start_anchored())),",
    "        Anchored::Pattern(pid) => {",
    "            Some((true, self.nfa.start_pattern(pid)?))",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "input.get_anchored() matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 1772,
          "bound": null
        },
        {
          "cond": "self.nfa.start_pattern(pid)?",
          "norm": null,
          "value": "Err/None",
          "line": 1781,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        11,
        12,
        14,
        16,
        17,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "input.get_anchored() matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 1772,
          "bound": null
        },
        {
          "cond": "self.nfa.start_pattern(pid)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1781,
          "bound": null
        }
      ],
      "ret": "Some((true, self.nfa.start_pattern(pid)?))",
      "path": [
        0,
        1,
        5,
        11,
        12,
        15,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "input.get_anchored() matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 1772,
          "bound": null
        },
        {
          "cond": "input.get_anchored() matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 1772,
          "bound": null
        }
      ],
      "ret": "Some((true, self.nfa.start_anchored()))",
      "path": [
        0,
        1,
        4,
        9,
        10,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "input.get_anchored() matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 1772,
          "bound": null
        },
        {
          "cond": "input.get_anchored() matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 1772,
          "bound": null
        }
      ],
      "ret": "Some((\n                self.nfa.is_always_start_anchored(),\n                self.nfa.start_anchored(),\n            ))",
      "path": [
        0,
        1,
        3,
        6,
        7,
        8,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}