{
  "name": "regex_automata::dfa::onepass::{impl#0}::match_kind",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:102:5:105:6",
  "doc": "/// Set the desired match semantics.\n///\n/// The default is [`MatchKind::LeftmostFirst`], which corresponds to the\n/// match semantics of Perl-like regex engines. That is, when multiple\n/// patterns would match at the same leftmost position, the pattern that\n/// appears first in the concrete syntax is chosen.\n///\n/// Currently, the only other kind of match semantics supported is\n/// [`MatchKind::All`]. This corresponds to \"classical DFA\" construction\n/// where all possible matches are visited.\n///\n/// When it comes to the one-pass DFA, it is rarer for preference order and\n/// \"longest match\" to actually disagree. Since if they did disagree, then\n/// the regex typically isn't one-pass. For example, searching `Samwise`\n/// for `Sam|Samwise` will report `Sam` for leftmost-first matching and\n/// `Samwise` for \"longest match\" or \"all\" matching. However, this regex is\n/// not one-pass if taken literally. The equivalent regex, `Sam(?:|wise)`\n/// is one-pass and `Sam|Samwise` may be optimized to it.\n///\n/// The other main difference is that \"all\" match semantics don't support\n/// non-greedy matches. \"All\" match semantics always try to match as much\n/// as possible.\n",
  "code": [
    "pub fn match_kind(mut self, kind: MatchKind) -> Config {",
    "    self.match_kind = Some(kind);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}