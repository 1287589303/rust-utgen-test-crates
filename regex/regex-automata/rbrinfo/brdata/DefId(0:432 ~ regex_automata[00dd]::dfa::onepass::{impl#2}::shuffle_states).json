{
  "name": "regex_automata::dfa::onepass::{impl#2}::shuffle_states",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:737:5:754:6",
  "doc": "/// Shuffle all match states to the end of the transition table and set\n/// 'min_match_id' to the ID of the first such match state.\n///\n/// The point of this is to make it extremely cheap to determine whether\n/// a state is a match state or not. We need to check on this on every\n/// transition during a search, so it being cheap is important. This\n/// permits us to check it by simply comparing two state identifiers, as\n/// opposed to looking for the pattern ID in the state's `PatternEpsilons`.\n/// (Which requires a memory load and some light arithmetic.)\n",
  "code": [
    "fn shuffle_states(&mut self) {",
    "    let mut remapper = Remapper::new(&self.dfa);",
    "    let mut next_dest = self.dfa.last_state_id();",
    "    for i in (0..self.dfa.state_len()).rev() {",
    "        let id = StateID::must(i);",
    "        let is_match =",
    "            self.dfa.pattern_epsilons(id).pattern_id().is_some();",
    "        if !is_match {",
    "            continue;",
    "        }",
    "        remapper.swap(&mut self.dfa, next_dest, id);",
    "        self.dfa.min_match_id = next_dest;",
    "        next_dest = self.dfa.prev_state_id(next_dest).expect(",
    "            \"match states should be a proper subset of all states\",",
    "        );",
    "    }",
    "    remapper.remap(&mut self.dfa);",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "i in (0..self.dfa.state_len()).rev()",
          "norm": null,
          "value": "true",
          "line": 740,
          "bound": null
        },
        {
          "cond": "is_match",
          "norm": null,
          "value": "true",
          "line": 744,
          "bound": null
        },
        {
          "cond": "i in (0..self.dfa.state_len()).rev()",
          "norm": null,
          "value": "false",
          "line": 740,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        6,
        7,
        8,
        10,
        12,
        22,
        23
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "i in (0..self.dfa.state_len()).rev()",
          "norm": null,
          "value": "true",
          "line": 740,
          "bound": null
        },
        {
          "cond": "is_match",
          "norm": null,
          "value": "false",
          "line": 744,
          "bound": null
        },
        {
          "cond": "i in (0..self.dfa.state_len()).rev()",
          "norm": null,
          "value": "false",
          "line": 740,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        13,
        14,
        15,
        16,
        21,
        6,
        7,
        8,
        10,
        12,
        22,
        23
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "i in (0..self.dfa.state_len()).rev()",
          "norm": null,
          "value": "false",
          "line": 740,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}