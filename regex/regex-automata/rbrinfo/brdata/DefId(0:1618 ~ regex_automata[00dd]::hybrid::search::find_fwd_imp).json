{
  "name": "regex_automata::hybrid::search::find_fwd_imp",
  "mod_info": {
    "name": "hybrid::search",
    "loc": "regex-automata/src/hybrid/mod.rs:144:1:144:12"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/search.rs:50:1:293:2",
  "doc": "",
  "code": [
    "fn find_fwd_imp(",
    "    dfa: &DFA,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    "    pre: Option<&'_ Prefilter>,",
    "    earliest: bool,",
    ") -> Result<Option<HalfMatch>, MatchError> {",
    "    // See 'prefilter_restart' docs for explanation.",
    "    let universal_start = dfa.get_nfa().look_set_prefix_any().is_empty();",
    "    let mut mat = None;",
    "    let mut sid = init_fwd(dfa, cache, input)?;",
    "    let mut at = input.start();",
    "    // This could just be a closure, but then I think it would be unsound",
    "    // because it would need to be safe to invoke. This way, the lack of safety",
    "    // is clearer in the code below.",
    "    macro_rules! next_unchecked {",
    "        ($sid:expr, $at:expr) => {{",
    "            let byte = *input.haystack().get_unchecked($at);",
    "            dfa.next_state_untagged_unchecked(cache, $sid, byte)",
    "        }};",
    "    }",
    "",
    "    if let Some(ref pre) = pre {",
    "        let span = Span::from(at..input.end());",
    "        match pre.find(input.haystack(), span) {",
    "            None => return Ok(mat),",
    "            Some(ref span) => {",
    "                at = span.start;",
    "                if !universal_start {",
    "                    sid = prefilter_restart(dfa, cache, &input, at)?;",
    "                }",
    "            }",
    "        }",
    "    }",
    "    cache.search_start(at);",
    "    while at < input.end() {",
    "        if sid.is_tagged() {",
    "            cache.search_update(at);",
    "            sid = dfa",
    "                .next_state(cache, sid, input.haystack()[at])",
    "                .map_err(|_| gave_up(at))?;",
    "        } else {",
    "            // SAFETY: There are two safety invariants we need to uphold",
    "            // here in the loops below: that 'sid' and 'prev_sid' are valid",
    "            // state IDs for this DFA, and that 'at' is a valid index into",
    "            // 'haystack'. For the former, we rely on the invariant that",
    "            // next_state* and start_state_forward always returns a valid state",
    "            // ID (given a valid state ID in the former case), and that we are",
    "            // only at this place in the code if 'sid' is untagged. Moreover,",
    "            // every call to next_state_untagged_unchecked below is guarded by",
    "            // a check that sid is untagged. For the latter safety invariant,",
    "            // we always guard unchecked access with a check that 'at' is less",
    "            // than 'end', where 'end <= haystack.len()'. In the unrolled loop",
    "            // below, we ensure that 'at' is always in bounds.",
    "            //",
    "            // PERF: For justification of omitting bounds checks, it gives us a",
    "            // ~10% bump in search time. This was used for a benchmark:",
    "            //",
    "            //     regex-cli find half hybrid -p '(?m)^.+$' -UBb bigfile",
    "            //",
    "            // PERF: For justification for the loop unrolling, we use a few",
    "            // different tests:",
    "            //",
    "            //     regex-cli find half hybrid -p '\\w{50}' -UBb bigfile",
    "            //     regex-cli find half hybrid -p '(?m)^.+$' -UBb bigfile",
    "            //     regex-cli find half hybrid -p 'ZQZQZQZQ' -UBb bigfile",
    "            //",
    "            // And there are three different configurations:",
    "            //",
    "            //     nounroll: this entire 'else' block vanishes and we just",
    "            //               always use 'dfa.next_state(..)'.",
    "            //      unroll1: just the outer loop below",
    "            //      unroll2: just the inner loop below",
    "            //      unroll3: both the outer and inner loops below",
    "            //",
    "            // This results in a matrix of timings for each of the above",
    "            // regexes with each of the above unrolling configurations:",
    "            //",
    "            //              '\\w{50}'   '(?m)^.+$'   'ZQZQZQZQ'",
    "            //   nounroll   1.51s      2.34s        1.51s",
    "            //    unroll1   1.53s      2.32s        1.56s",
    "            //    unroll2   2.22s      1.50s        0.61s",
    "            //    unroll3   1.67s      1.45s        0.61s",
    "            //",
    "            // Ideally we'd be able to find a configuration that yields the",
    "            // best time for all regexes, but alas we settle for unroll3 that",
    "            // gives us *almost* the best for '\\w{50}' and the best for the",
    "            // other two regexes.",
    "            //",
    "            // So what exactly is going on here? The first unrolling (grouping",
    "            // together runs of untagged transitions) specifically targets",
    "            // our choice of representation. The second unrolling (grouping",
    "            // together runs of self-transitions) specifically targets a common",
    "            // DFA topology. Let's dig in a little bit by looking at our",
    "            // regexes:",
    "            //",
    "            // '\\w{50}': This regex spends a lot of time outside of the DFA's",
    "            // start state matching some part of the '\\w' repetition. This",
    "            // means that it's a bit of a worst case for loop unrolling that",
    "            // targets self-transitions since the self-transitions in '\\w{50}'",
    "            // are not particularly active for this haystack. However, the",
    "            // first unrolling (grouping together untagged transitions)",
    "            // does apply quite well here since very few transitions hit",
    "            // match/dead/quit/unknown states. It is however worth mentioning",
    "            // that if start states are configured to be tagged (which you",
    "            // typically want to do if you have a prefilter), then this regex",
    "            // actually slows way down because it is constantly ping-ponging",
    "            // out of the unrolled loop and into the handling of a tagged start",
    "            // state below. But when start states aren't tagged, the unrolled",
    "            // loop stays hot. (This is why it's imperative that start state",
    "            // tagging be disabled when there isn't a prefilter!)",
    "            //",
    "            // '(?m)^.+$': There are two important aspects of this regex: 1)",
    "            // on this haystack, its match count is very high, much higher",
    "            // than the other two regex and 2) it spends the vast majority",
    "            // of its time matching '.+'. Since Unicode mode is disabled,",
    "            // this corresponds to repeatedly following self transitions for",
    "            // the vast majority of the input. This does benefit from the",
    "            // untagged unrolling since most of the transitions will be to",
    "            // untagged states, but the untagged unrolling does more work than",
    "            // what is actually required. Namely, it has to keep track of the",
    "            // previous and next state IDs, which I guess requires a bit more",
    "            // shuffling. This is supported by the fact that nounroll+unroll1",
    "            // are both slower than unroll2+unroll3, where the latter has a",
    "            // loop unrolling that specifically targets self-transitions.",
    "            //",
    "            // 'ZQZQZQZQ': This one is very similar to '(?m)^.+$' because it",
    "            // spends the vast majority of its time in self-transitions for",
    "            // the (implicit) unanchored prefix. The main difference with",
    "            // '(?m)^.+$' is that it has a much lower match count. So there",
    "            // isn't much time spent in the overhead of reporting matches. This",
    "            // is the primary explainer in the perf difference here. We include",
    "            // this regex and the former to make sure we have comparison points",
    "            // with high and low match counts.",
    "            //",
    "            // NOTE: I used 'OpenSubtitles2018.raw.sample.en' for 'bigfile'.",
    "            //",
    "            // NOTE: In a follow-up, it turns out that the \"inner\" loop",
    "            // mentioned above was a pretty big pessimization in some other",
    "            // cases. Namely, it resulted in too much ping-ponging into and out",
    "            // of the loop, which resulted in nearly ~2x regressions in search",
    "            // time when compared to the originally lazy DFA in the regex crate.",
    "            // So I've removed the second loop unrolling that targets the",
    "            // self-transition case.",
    "            let mut prev_sid = sid;",
    "            while at < input.end() {",
    "                prev_sid = unsafe { next_unchecked!(sid, at) };",
    "                if prev_sid.is_tagged() || at + 3 >= input.end() {",
    "                    core::mem::swap(&mut prev_sid, &mut sid);",
    "                    break;",
    "                }",
    "                at += 1;",
    "",
    "                sid = unsafe { next_unchecked!(prev_sid, at) };",
    "                if sid.is_tagged() {",
    "                    break;",
    "                }",
    "                at += 1;",
    "",
    "                prev_sid = unsafe { next_unchecked!(sid, at) };",
    "                if prev_sid.is_tagged() {",
    "                    core::mem::swap(&mut prev_sid, &mut sid);",
    "                    break;",
    "                }",
    "                at += 1;",
    "",
    "                sid = unsafe { next_unchecked!(prev_sid, at) };",
    "                if sid.is_tagged() {",
    "                    break;",
    "                }",
    "                at += 1;",
    "            }",
    "            // If we quit out of the code above with an unknown state ID at",
    "            // any point, then we need to re-compute that transition using",
    "            // 'next_state', which will do NFA powerset construction for us.",
    "            if sid.is_unknown() {",
    "                cache.search_update(at);",
    "                sid = dfa",
    "                    .next_state(cache, prev_sid, input.haystack()[at])",
    "                    .map_err(|_| gave_up(at))?;",
    "            }",
    "        }",
    "        if sid.is_tagged() {",
    "            if sid.is_start() {",
    "                if let Some(ref pre) = pre {",
    "                    let span = Span::from(at..input.end());",
    "                    match pre.find(input.haystack(), span) {",
    "                        None => {",
    "                            cache.search_finish(span.end);",
    "                            return Ok(mat);",
    "                        }",
    "                        Some(ref span) => {",
    "                            // We want to skip any update to 'at' below",
    "                            // at the end of this iteration and just",
    "                            // jump immediately back to the next state",
    "                            // transition at the leading position of the",
    "                            // candidate match.",
    "                            //",
    "                            // ... but only if we actually made progress",
    "                            // with our prefilter, otherwise if the start",
    "                            // state has a self-loop, we can get stuck.",
    "                            if span.start > at {",
    "                                at = span.start;",
    "                                if !universal_start {",
    "                                    sid = prefilter_restart(",
    "                                        dfa, cache, &input, at,",
    "                                    )?;",
    "                                }",
    "                                continue;",
    "                            }",
    "                        }",
    "                    }",
    "                }",
    "            } else if sid.is_match() {",
    "                let pattern = dfa.match_pattern(cache, sid, 0);",
    "                // Since slice ranges are inclusive at the beginning and",
    "                // exclusive at the end, and since forward searches report",
    "                // the end, we can return 'at' as-is. This only works because",
    "                // matches are delayed by 1 byte. So by the time we observe a",
    "                // match, 'at' has already been set to 1 byte past the actual",
    "                // match location, which is precisely the exclusive ending",
    "                // bound of the match.",
    "                mat = Some(HalfMatch::new(pattern, at));",
    "                if earliest {",
    "                    cache.search_finish(at);",
    "                    return Ok(mat);",
    "                }",
    "            } else if sid.is_dead() {",
    "                cache.search_finish(at);",
    "                return Ok(mat);",
    "            } else if sid.is_quit() {",
    "                cache.search_finish(at);",
    "                return Err(MatchError::quit(input.haystack()[at], at));",
    "            } else {",
    "                debug_assert!(sid.is_unknown());",
    "                unreachable!(\"sid being unknown is a bug\");",
    "            }",
    "        }",
    "        at += 1;",
    "    }",
    "    eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?;",
    "    cache.search_finish(input.end());",
    "    Ok(mat)",
    "}"
  ],
  "size": {
    "chain": 888,
    "contra": 585,
    "min_set": 19
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Err/None",
          "line": 60,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        205,
        206,
        207,
        208
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 88,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        50,
        52,
        53,
        197,
        198,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 78,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 79,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 80,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 81,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 82,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 83,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 84,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 85,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 86,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 87,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 88,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 89,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 90,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 91,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 92,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 93,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 94,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 95,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 96,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 97,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 98,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 99,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 100,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 101,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 102,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 103,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 104,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 105,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 106,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 107,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 108,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 109,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 110,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 111,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 112,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 113,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 114,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 115,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 116,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 117,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 118,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 119,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 120,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 121,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 122,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 123,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 124,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 125,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 126,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 127,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 128,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 129,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 130,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 131,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 132,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 133,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 134,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 135,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 136,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 137,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 138,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 139,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 140,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 141,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 142,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 143,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 144,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 145,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 146,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 147,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 148,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 149,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 150,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 151,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 152,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 153,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 154,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 155,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 156,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 157,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 158,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 159,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 160,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 161,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 162,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 163,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 164,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 165,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 166,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 167,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 168,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 169,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 170,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 171,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 172,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 173,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 174,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 175,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 176,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 177,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 178,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 179,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 180,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 181,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 182,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 183,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 184,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 185,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 186,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 187,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 188,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 189,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 190,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 191,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 192,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 193,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 194,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 195,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 196,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 197,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 198,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 199,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 200,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 201,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 202,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 203,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 204,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 205,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 206,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 207,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 208,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 209,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 210,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 211,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 212,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 213,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 214,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 215,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 216,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 217,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 218,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 219,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 220,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 221,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 222,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 223,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 224,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 225,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 226,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 227,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 228,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 229,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 230,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 231,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 232,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 233,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 234,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 235,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 236,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 237,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 238,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 239,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 240,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 241,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 242,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 243,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 244,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 245,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 246,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 247,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 248,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 249,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 250,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 251,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 252,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 253,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 254,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 255,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 256,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 257,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 258,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 259,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 260,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 261,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 262,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 263,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 264,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 265,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 266,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 267,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 268,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 269,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 270,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 271,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 272,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 273,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 274,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 275,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 276,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 277,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 278,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 279,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 280,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 281,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 282,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 283,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 284,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 285,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 286,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 287,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 288,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 289,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 290,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 291,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 292,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 293,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 294,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 295,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 296,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        34,
        35,
        36,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 297,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 88,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        50,
        52,
        53,
        197,
        198,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 298,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 299,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 300,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 301,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 302,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 303,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 304,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 305,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 306,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 307,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 308,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 309,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 310,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 311,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 312,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 313,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 314,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 315,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 316,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 317,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 318,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 319,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 320,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 321,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 322,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 323,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 324,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 325,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 326,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 327,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 328,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 329,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 330,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 331,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 332,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 333,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 334,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 335,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 336,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 337,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 338,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 339,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 340,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 341,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 342,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 343,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 344,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 345,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 346,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 347,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 348,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 349,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 350,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 351,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 352,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 353,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 354,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 355,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 356,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 357,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 358,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 359,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 360,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 361,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 362,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 363,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 364,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 365,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 366,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 367,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 368,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 369,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 370,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 371,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 372,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 373,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 374,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 375,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 376,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 377,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 378,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 379,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 380,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 381,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 382,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 383,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 384,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 385,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 386,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 387,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 388,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 389,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 390,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 391,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 392,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 393,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 394,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 395,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 396,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 397,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 398,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 399,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 400,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 401,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 402,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 403,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 404,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 405,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 406,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 407,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 408,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 409,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 410,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 411,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 412,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 413,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 414,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 415,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 416,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 417,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 418,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 419,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 420,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 421,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 422,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 423,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 424,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 425,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 426,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 427,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 428,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 429,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 430,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 431,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 432,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 433,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 434,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 435,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 436,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 437,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 438,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 439,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 440,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 441,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 442,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 443,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 444,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 445,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 446,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 447,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 448,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 449,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 450,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 451,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 452,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 453,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 454,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 455,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 456,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 457,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 458,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 459,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 460,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 461,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 462,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 463,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 464,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 465,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 466,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 467,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 468,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 469,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 470,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 471,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 472,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 473,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 474,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 475,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 476,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 477,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 478,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 479,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 480,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 481,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 482,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 483,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 484,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 485,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 486,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 487,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 488,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 489,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 490,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 491,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 492,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 493,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 494,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 495,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 496,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 497,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 498,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 499,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 500,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 501,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 502,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 503,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 504,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 505,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 506,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 507,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 508,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 509,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 510,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 511,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 512,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 513,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 514,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 515,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 516,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 517,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 518,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 519,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 520,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 521,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 522,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 523,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 524,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 525,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 526,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 527,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 528,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 529,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 530,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 531,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 532,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 533,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 534,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 535,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 536,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 537,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 538,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 539,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 540,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 541,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 542,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 543,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 544,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 545,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 546,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 547,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 548,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 549,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 550,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 551,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 552,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 553,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 554,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 555,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 556,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 557,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 558,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 559,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 560,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 561,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 562,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 563,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 564,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 565,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 566,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 567,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 568,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 569,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 570,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 571,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 572,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 573,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 574,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 575,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 576,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 577,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 578,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 579,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 580,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 581,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 582,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 583,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 584,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 585,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 586,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 587,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 588,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 589,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 590,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 591,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        32,
        33,
        35,
        36,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 592,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 79,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        27,
        29,
        30,
        201,
        202,
        203,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 593,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 88,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        50,
        52,
        53,
        197,
        198,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 594,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 595,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 596,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 597,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 598,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 599,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 600,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 601,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 602,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 603,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 604,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 605,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 606,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 607,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 608,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 609,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 610,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 611,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 612,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 86,
          "bound": null
        },
        {
          "cond": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 88,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 613,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 614,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 615,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 616,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 617,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 618,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 619,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 620,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 621,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 622,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 623,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 624,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 625,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 626,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 627,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 628,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 629,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 630,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 631,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 632,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 633,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 634,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 635,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 636,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 637,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 638,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 639,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 640,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 641,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 642,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 643,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 644,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 645,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 646,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 647,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 648,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 649,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 650,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 651,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 652,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 653,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 654,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 655,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 656,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 657,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 658,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 659,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 660,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 661,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 662,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 663,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 664,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 665,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 666,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 667,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 668,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 669,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 670,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 671,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 672,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 673,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 674,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 675,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 676,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 677,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 678,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 679,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 680,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 681,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 682,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 683,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 684,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 685,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 686,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 687,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 688,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 689,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 690,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "true",
          "line": 197,
          "bound": "at + 3 == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 691,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 692,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 693,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 694,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 695,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 696,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 697,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 698,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 699,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 700,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 701,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 702,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 703,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 704,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 705,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 706,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 707,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 708,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 709,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 710,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 711,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 712,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 713,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 714,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 715,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 716,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 717,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 718,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 719,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 720,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 721,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 722,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 723,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 724,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 725,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 726,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 727,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 728,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 729,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 730,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 731,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 732,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 733,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 734,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 735,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 736,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 737,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 738,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 739,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 740,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 741,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 742,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 743,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 744,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 745,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 746,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 747,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 748,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 749,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 750,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 751,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 752,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 753,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 754,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 755,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 756,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 757,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 758,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 759,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 760,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 761,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 762,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 763,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 764,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 765,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 766,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 767,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 768,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 769,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 770,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 771,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 772,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 773,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 774,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 775,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 776,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 777,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 778,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 779,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 780,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 781,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 782,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 783,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 784,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 785,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 786,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 787,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 788,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 789,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 790,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 791,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 792,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 793,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 794,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 795,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 796,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 797,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 798,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 799,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 800,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 801,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 802,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 803,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 804,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 805,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 806,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 807,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 808,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 809,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 810,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 811,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 812,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 813,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 814,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 815,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 816,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 817,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 818,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 819,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 820,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 821,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 822,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 823,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 824,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 825,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 826,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 827,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 828,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 829,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 830,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 831,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 832,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 833,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 834,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 835,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 836,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 837,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 838,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 839,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 840,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 841,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 842,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 843,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 844,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 845,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 846,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 195,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "at + 3 >= input.end()",
          "norm": null,
          "value": "false",
          "line": 197,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "prev_sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        86,
        87,
        88,
        89,
        90,
        91,
        93,
        94,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 847,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        106,
        108,
        109,
        195,
        196,
        199,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 848,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 849,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 850,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 851,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 852,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 853,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 854,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 855,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 856,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 857,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 858,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 859,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 860,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 861,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 862,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 863,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 864,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 865,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 866,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 227,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        107,
        110,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 867,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 868,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        142,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 869,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 870,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "true",
          "line": 253,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        139,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 871,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 254,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        134,
        136,
        137,
        191,
        192,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 872,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 873,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 253,
          "bound": null
        },
        {
          "cond": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 254,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        129,
        130,
        131,
        132,
        135,
        138,
        140,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 874,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 875,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "span.start > at",
          "norm": "at < span.start",
          "value": "false",
          "line": 251,
          "bound": "span.start == at"
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        126,
        141,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 876,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "true",
          "line": 233,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        125,
        127,
        128,
        193,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 877,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 878,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 879,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "earliest",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        145,
        146,
        147,
        150,
        172,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 880,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        153,
        154,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 881,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 280,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        189,
        190,
        194,
        200,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 882,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        166,
        169,
        170,
        171,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 883,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 232,
          "bound": null
        },
        {
          "cond": "sid.is_start()",
          "norm": null,
          "value": "false",
          "line": 233,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 263,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 280,
          "bound": null
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        115,
        116,
        143,
        144,
        151,
        152,
        155,
        156,
        163,
        164,
        165,
        167,
        233
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 884,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 885,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 86,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 195,
          "bound": "at == input.end()"
        },
        {
          "cond": "sid.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 225,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        55,
        56,
        57,
        58,
        95,
        96,
        97,
        111,
        112,
        113,
        114,
        173,
        174,
        175,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 886,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        176,
        177,
        178,
        180,
        182,
        183,
        187,
        188,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 887,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "universal_start",
          "norm": null,
          "value": "false",
          "line": 78,
          "bound": null
        },
        {
          "cond": "prefilter_restart(dfa, cache, &input, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 79,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": "at == input.end()"
        },
        {
          "cond": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        28,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        176,
        177,
        178,
        181,
        184,
        185,
        186,
        208
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 888,
      "conds": [
        {
          "cond": "init_fwd(dfa, cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 60,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 72,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        203,
        204,
        207,
        208
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}