{
  "name": "regex_automata::hybrid::dfa::{impl#0}::memory_usage",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:446:5:454:6",
  "doc": "/// Returns the memory usage, in bytes, of this lazy DFA.\n///\n/// This does **not** include the stack size used up by this lazy DFA. To\n/// compute that, use `std::mem::size_of::<DFA>()`. This also does not\n/// include the size of the `Cache` used.\n///\n/// This also does not include any heap memory used by the NFA inside of\n/// this hybrid NFA/DFA. This is because the NFA's ownership is shared, and\n/// thus not owned by this hybrid NFA/DFA. More practically, several regex\n/// engines in this crate embed an NFA, and reporting the NFA's memory\n/// usage in all of them would likely result in reporting higher heap\n/// memory than is actually used.\n",
  "code": [
    "pub fn memory_usage(&self) -> usize {",
    "    // The only thing that uses heap memory in a DFA is the NFA. But the",
    "    // NFA has shared ownership, so reporting its memory as part of the",
    "    // hybrid DFA is likely to lead to double-counting the NFA memory",
    "    // somehow. In particular, this DFA does not really own an NFA, so",
    "    // including it in the DFA's memory usage doesn't seem semantically",
    "    // correct.",
    "    0",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "0",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}