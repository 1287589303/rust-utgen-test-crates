{
  "name": "regex_automata::meta::regex::{impl#0}::config",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:421:5:423:6",
  "doc": "/// Return a default configuration for a `Regex`.\n///\n/// This is a convenience routine to avoid needing to import the [`Config`]\n/// type when customizing the construction of a `Regex`.\n///\n/// # Example: lower the NFA size limit\n///\n/// In some cases, the default size limit might be too big. The size limit\n/// can be lowered, which will prevent large regex patterns from compiling.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::meta::Regex;\n///\n/// let result = Regex::builder()\n///     .configure(Regex::config().nfa_size_limit(Some(20 * (1<<10))))\n///     // Not even 20KB is enough to build a single large Unicode class!\n///     .build(r\"\\pL\");\n/// assert!(result.is_err());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn config() -> Config {",
    "    Config::new()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}