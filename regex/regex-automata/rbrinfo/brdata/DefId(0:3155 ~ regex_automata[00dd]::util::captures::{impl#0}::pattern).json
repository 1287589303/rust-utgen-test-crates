{
  "name": "regex_automata::util::captures::{impl#0}::pattern",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:369:5:371:6",
  "doc": "/// Returns the identifier of the pattern that matched when this\n/// capturing group represents a match. If no match was found, then this\n/// always returns `None`.\n///\n/// This returns a pattern ID in precisely the cases in which `is_match`\n/// returns `true`. Similarly, the pattern ID returned is always the\n/// same pattern ID found in the `Match` returned by `get_match`.\n///\n/// # Example\n///\n/// When using the PikeVM (for example), the lightest weight way of\n/// detecting which pattern matched is to create capturing groups that only\n/// track the ID of the pattern that match (if any):\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     util::captures::Captures,\n///     PatternID,\n/// };\n///\n/// let re = PikeVM::new_many(&[r\"[a-z]+\", r\"[A-Z]+\"])?;\n/// let mut cache = re.create_cache();\n/// let mut caps = Captures::empty(re.get_nfa().group_info().clone());\n///\n/// re.captures(&mut cache, \"ABC\", &mut caps);\n/// assert_eq!(Some(PatternID::must(1)), caps.pattern());\n/// // Recall that offsets are only available when using a non-empty\n/// // Captures value. So even though a match occurred, this returns None!\n/// assert_eq!(None, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn pattern(&self) -> Option<PatternID> {",
    "    self.pid",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.pid",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}