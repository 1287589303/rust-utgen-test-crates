{
  "name": "regex_automata::util::alphabet::{impl#5}::next",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:533:5:544:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<Unit> {",
    "    if self.i + 1 == self.classes.alphabet_len() {",
    "        self.i += 1;",
    "        Some(self.classes.eoi())",
    "    } else if self.i < self.classes.alphabet_len() {",
    "        let class = u8::try_from(self.i).unwrap();",
    "        self.i += 1;",
    "        Some(Unit::u8(class))",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.i + 1 == self.classes.alphabet_len()",
          "norm": "self.classes.alphabet_len() == self.i + 1",
          "value": "true",
          "line": 534,
          "bound": null
        }
      ],
      "ret": "Some(self.classes.eoi())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.i + 1 == self.classes.alphabet_len()",
          "norm": "self.classes.alphabet_len() == self.i + 1",
          "value": "false",
          "line": 534,
          "bound": null
        },
        {
          "cond": "self.i < self.classes.alphabet_len()",
          "norm": "self.classes.alphabet_len() > self.i",
          "value": "true",
          "line": 537,
          "bound": null
        }
      ],
      "ret": "Some(Unit::u8(class))",
      "path": [
        0,
        1,
        2,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.i + 1 == self.classes.alphabet_len()",
          "norm": "self.classes.alphabet_len() == self.i + 1",
          "value": "false",
          "line": 534,
          "bound": null
        },
        {
          "cond": "self.i < self.classes.alphabet_len()",
          "norm": "self.classes.alphabet_len() > self.i",
          "value": "false",
          "line": 537,
          "bound": "self.i == self.classes.alphabet_len()"
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        6,
        7,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}