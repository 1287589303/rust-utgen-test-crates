{
  "name": "regex_automata::meta::strategy::{impl#4}::which_overlapping_matches",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:861:5:900:6",
  "doc": "",
  "code": [
    "fn which_overlapping_matches(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    "    patset: &mut PatternSet,",
    ") {",
    "    if let Some(e) = self.dfa.get(input) {",
    "        trace!(",
    "            \"using full DFA for overlapping search at {:?}\",",
    "            input.get_span()",
    "        );",
    "        let _err = match e.try_which_overlapping_matches(input, patset) {",
    "            Ok(()) => return,",
    "            Err(err) => err,",
    "        };",
    "        trace!(\"fast overlapping search failed: {}\", _err);",
    "    } else if let Some(e) = self.hybrid.get(input) {",
    "        trace!(",
    "            \"using lazy DFA for overlapping search at {:?}\",",
    "            input.get_span()",
    "        );",
    "        let _err = match e.try_which_overlapping_matches(",
    "            &mut cache.hybrid,",
    "            input,",
    "            patset,",
    "        ) {",
    "            Ok(()) => {",
    "                return;",
    "            }",
    "            Err(err) => err,",
    "        };",
    "        trace!(\"fast overlapping search failed: {}\", _err);",
    "    }",
    "    trace!(",
    "        \"using PikeVM for overlapping search at {:?}\",",
    "        input.get_span()",
    "    );",
    "    let e = self.pikevm.get();",
    "    e.which_overlapping_matches(&mut cache.pikevm, input, patset)",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 867,
          "bound": null
        },
        {
          "cond": "let Some(e) = self.hybrid.get(input)",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        10,
        18,
        19,
        20,
        21,
        22,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 867,
          "bound": null
        },
        {
          "cond": "let Some(e) = self.hybrid.get(input)",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "e.try_which_overlapping_matches(\n                &mut cache.hybrid,\n                input,\n                patset,\n            ) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 882,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        10,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 867,
          "bound": null
        },
        {
          "cond": "let Some(e) = self.hybrid.get(input)",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "e.try_which_overlapping_matches(\n                &mut cache.hybrid,\n                input,\n                patset,\n            ) matches Ok(())",
          "norm": null,
          "value": "true",
          "line": 882,
          "bound": null
        },
        {
          "cond": "e.try_which_overlapping_matches(\n                &mut cache.hybrid,\n                input,\n                patset,\n            ) matches Ok(())",
          "norm": null,
          "value": "true",
          "line": 882,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        10,
        11,
        12,
        13,
        15,
        17,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 867,
          "bound": null
        },
        {
          "cond": "e.try_which_overlapping_matches(input, patset) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 872,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        20,
        21,
        22,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 867,
          "bound": null
        },
        {
          "cond": "e.try_which_overlapping_matches(input, patset) matches Ok(())",
          "norm": null,
          "value": "true",
          "line": 872,
          "bound": null
        },
        {
          "cond": "e.try_which_overlapping_matches(input, patset) matches Ok(())",
          "norm": null,
          "value": "true",
          "line": 872,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}