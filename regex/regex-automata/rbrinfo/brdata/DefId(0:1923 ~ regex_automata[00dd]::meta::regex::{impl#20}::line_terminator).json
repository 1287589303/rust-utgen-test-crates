{
  "name": "regex_automata::meta::regex::{impl#20}::line_terminator",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2972:5:2974:6",
  "doc": "/// Set the line terminator to be used by the `^` and `$` anchors in\n/// multi-line mode.\n///\n/// This option has no effect when CRLF mode is enabled. That is,\n/// regardless of this setting, `(?Rm:^)` and `(?Rm:$)` will always treat\n/// `\\r` and `\\n` as line terminators (and will never match between a `\\r`\n/// and a `\\n`).\n///\n/// By default, `\\n` is the line terminator.\n///\n/// **Warning**: This does not change the behavior of `.`. To do that,\n/// you'll need to configure the syntax option\n/// [`syntax::Config::line_terminator`](crate::util::syntax::Config::line_terminator)\n/// in addition to this. Otherwise, `.` will continue to match any\n/// character other than `\\n`.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{meta::Regex, util::syntax, Match};\n///\n/// let re = Regex::builder()\n///     .syntax(syntax::Config::new().multi_line(true))\n///     .configure(Regex::config().line_terminator(b'\\x00'))\n///     .build(r\"^foo$\")?;\n/// let hay = \"\\x00foo\\x00\";\n/// assert_eq!(Some(Match::must(0, 1..4)), re.find(hay));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn line_terminator(self, byte: u8) -> Config {",
    "    Config { line_terminator: Some(byte), ..self }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Config { line_terminator: Some(byte), ..self }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}