{
  "name": "regex_automata::meta::limited::hybrid_try_search_half_rev",
  "mod_info": {
    "name": "meta::limited",
    "loc": "regex-automata/src/meta/mod.rs:55:1:55:13"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/limited.rs:127:1:186:2",
  "doc": "",
  "code": [
    "pub(crate) fn hybrid_try_search_half_rev(",
    "    dfa: &crate::hybrid::dfa::DFA,",
    "    cache: &mut crate::hybrid::dfa::Cache,",
    "    input: &Input<'_>,",
    "    min_start: usize,",
    ") -> Result<Option<HalfMatch>, RetryError> {",
    "    let mut mat = None;",
    "    let mut sid = dfa.start_state_reverse(cache, input)?;",
    "    if input.start() == input.end() {",
    "        hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?;",
    "        return Ok(mat);",
    "    }",
    "    let mut at = input.end() - 1;",
    "    loop {",
    "        sid = dfa",
    "            .next_state(cache, sid, input.haystack()[at])",
    "            .map_err(|_| MatchError::gave_up(at))?;",
    "        if sid.is_tagged() {",
    "            if sid.is_match() {",
    "                let pattern = dfa.match_pattern(cache, sid, 0);",
    "                // Since reverse searches report the beginning of a",
    "                // match and the beginning is inclusive (not exclusive",
    "                // like the end of a match), we add 1 to make it",
    "                // inclusive.",
    "                mat = Some(HalfMatch::new(pattern, at + 1));",
    "            } else if sid.is_dead() {",
    "                return Ok(mat);",
    "            } else if sid.is_quit() {",
    "                return Err(MatchError::quit(input.haystack()[at], at).into());",
    "            }",
    "        }",
    "        if at == input.start() {",
    "            break;",
    "        }",
    "        at -= 1;",
    "        if at < min_start {",
    "            trace!(",
    "                \"reached position {} which is before the previous literal \\",
    "\t\t\t\t match, quitting to avoid quadratic behavior\",",
    "                at,",
    "            );",
    "            return Err(RetryError::Quadratic(RetryQuadraticError::new()));",
    "        }",
    "    }",
    "    let was_dead = sid.is_dead();",
    "    hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?;",
    "    // See the comments in the full DFA routine above for why we need this.",
    "    if at == input.start()",
    "        && mat.map_or(false, |m| m.offset() > input.start())",
    "        && !was_dead",
    "    {",
    "        trace!(",
    "            \"reached beginning of search at offset {} without hitting \\",
    "             a dead state, quitting to avoid potential false positive match\",",
    "            at,",
    "        );",
    "        return Err(RetryError::Quadratic(RetryQuadraticError::new()));",
    "    }",
    "    Ok(mat)",
    "}"
  ],
  "size": {
    "chain": 27,
    "contra": 3,
    "min_set": 13
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Err/None",
          "line": 134,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        93,
        94,
        95,
        96
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "true",
          "line": 135,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 136,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        17,
        18,
        90,
        91,
        92,
        95,
        96
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "true",
          "line": 135,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 136,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        16,
        19,
        92,
        95,
        96
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 141,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        33,
        34,
        86,
        87,
        88,
        89,
        95,
        96
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 172,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        54,
        56,
        57,
        58,
        64,
        65,
        66,
        68,
        70,
        71,
        82,
        83,
        84,
        89,
        95,
        96
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "mat.map_or(false, |m| m.offset() > input.start())",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "was_dead",
          "norm": null,
          "value": "true",
          "line": 176,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        54,
        56,
        57,
        58,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        81,
        96
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "mat.map_or(false, |m| m.offset() > input.start())",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "was_dead",
          "norm": null,
          "value": "false",
          "line": 176,
          "bound": null
        }
      ],
      "ret": "Err(RetryError::Quadratic(RetryQuadraticError::new()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        54,
        56,
        57,
        58,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        84,
        89,
        95,
        96
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "mat.map_or(false, |m| m.offset() > input.start())",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        54,
        56,
        57,
        58,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        79,
        81,
        96
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 174,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        54,
        56,
        57,
        58,
        64,
        65,
        66,
        69,
        72,
        73,
        80,
        81,
        96
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 158,
          "bound": null
        },
        {
          "cond": "at < min_start",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        }
      ],
      "ret": "Err(RetryError::Quadratic(RetryQuadraticError::new()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        54,
        56,
        57,
        59,
        60,
        61,
        62,
        88,
        89,
        95,
        96
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 158,
          "bound": null
        },
        {
          "cond": "at < min_start",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": "at == min_start"
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 141,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        54,
        56,
        57,
        59,
        60,
        63,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        33,
        34,
        86,
        87,
        88,
        89,
        95,
        96
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "true",
          "line": 152,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        43,
        44,
        45,
        85,
        88,
        89,
        95,
        96
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 154,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at).into())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        43,
        44,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        85,
        88,
        89,
        95,
        96
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 154,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 172,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        43,
        44,
        46,
        47,
        53,
        54,
        56,
        57,
        58,
        64,
        65,
        66,
        68,
        70,
        71,
        82,
        83,
        84,
        89,
        95,
        96
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 154,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "mat.map_or(false, |m| m.offset() > input.start())",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "was_dead",
          "norm": null,
          "value": "true",
          "line": 176,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        43,
        44,
        46,
        47,
        53,
        54,
        56,
        57,
        58,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        81,
        96
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 154,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "mat.map_or(false, |m| m.offset() > input.start())",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "was_dead",
          "norm": null,
          "value": "false",
          "line": 176,
          "bound": null
        }
      ],
      "ret": "Err(RetryError::Quadratic(RetryQuadraticError::new()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        43,
        44,
        46,
        47,
        53,
        54,
        56,
        57,
        58,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        84,
        89,
        95,
        96
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 154,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "mat.map_or(false, |m| m.offset() > input.start())",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        43,
        44,
        46,
        47,
        53,
        54,
        56,
        57,
        58,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        79,
        81,
        96
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 154,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 174,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        43,
        44,
        46,
        47,
        53,
        54,
        56,
        57,
        58,
        64,
        65,
        66,
        69,
        72,
        73,
        80,
        81,
        96
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 154,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 158,
          "bound": null
        },
        {
          "cond": "at < min_start",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        }
      ],
      "ret": "Err(RetryError::Quadratic(RetryQuadraticError::new()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        43,
        44,
        46,
        47,
        53,
        54,
        56,
        57,
        59,
        60,
        61,
        62,
        88,
        89,
        95,
        96
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "sid.is_dead()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 154,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 158,
          "bound": null
        },
        {
          "cond": "at < min_start",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": "at == min_start"
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 141,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        37,
        38,
        43,
        44,
        46,
        47,
        53,
        54,
        56,
        57,
        59,
        60,
        63,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        33,
        34,
        86,
        87,
        88,
        89,
        95,
        96
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 172,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        55,
        56,
        57,
        58,
        64,
        65,
        66,
        68,
        70,
        71,
        82,
        83,
        84,
        89,
        95,
        96
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "mat.map_or(false, |m| m.offset() > input.start())",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "was_dead",
          "norm": null,
          "value": "true",
          "line": 176,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        55,
        56,
        57,
        58,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        81,
        96
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "mat.map_or(false, |m| m.offset() > input.start())",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "was_dead",
          "norm": null,
          "value": "false",
          "line": 176,
          "bound": null
        }
      ],
      "ret": "Err(RetryError::Quadratic(RetryQuadraticError::new()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        55,
        56,
        57,
        58,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        84,
        89,
        95,
        96
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "mat.map_or(false, |m| m.offset() > input.start())",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        55,
        56,
        57,
        58,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        79,
        81,
        96
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 172,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 174,
          "bound": null
        }
      ],
      "ret": "Ok(mat)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        55,
        56,
        57,
        58,
        64,
        65,
        66,
        69,
        72,
        73,
        80,
        81,
        96
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 158,
          "bound": null
        },
        {
          "cond": "at < min_start",
          "norm": null,
          "value": "true",
          "line": 162,
          "bound": null
        }
      ],
      "ret": "Err(RetryError::Quadratic(RetryQuadraticError::new()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        55,
        56,
        57,
        59,
        60,
        61,
        62,
        88,
        89,
        95,
        96
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "dfa.start_state_reverse(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        },
        {
          "cond": "input.start() == input.end()",
          "norm": "input.end() == input.start()",
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 141,
          "bound": null
        },
        {
          "cond": "sid.is_tagged()",
          "norm": null,
          "value": "false",
          "line": 144,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 158,
          "bound": null
        },
        {
          "cond": "at < min_start",
          "norm": null,
          "value": "false",
          "line": 162,
          "bound": "at == min_start"
        },
        {
          "cond": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?",
          "norm": null,
          "value": "Err/None",
          "line": 141,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        35,
        36,
        55,
        56,
        57,
        59,
        60,
        63,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        33,
        34,
        86,
        87,
        88,
        89,
        95,
        96
      ],
      "may_contra": true,
      "min_set": true
    }
  ]
}