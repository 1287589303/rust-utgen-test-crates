{
  "name": "regex_automata::util::wire::check_slice_len",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:786:1:795:2",
  "doc": "/// Checks that the given slice has some minimal length. If it's smaller than\n/// the bound given, then a \"buffer too small\" error is returned with `what`\n/// describing what the buffer represents.\n",
  "code": [
    "pub(crate) fn check_slice_len<T>(",
    "    slice: &[T],",
    "    at_least_len: usize,",
    "    what: &'static str,",
    ") -> Result<(), DeserializeError> {",
    "    if slice.len() < at_least_len {",
    "        return Err(DeserializeError::buffer_too_small(what));",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "slice.len() < at_least_len",
          "norm": "at_least_len > slice.len()",
          "value": "true",
          "line": 791,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::buffer_too_small(what))",
      "path": [
        0,
        1,
        2,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "slice.len() < at_least_len",
          "norm": "at_least_len > slice.len()",
          "value": "false",
          "line": 791,
          "bound": "slice.len() == at_least_len"
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}