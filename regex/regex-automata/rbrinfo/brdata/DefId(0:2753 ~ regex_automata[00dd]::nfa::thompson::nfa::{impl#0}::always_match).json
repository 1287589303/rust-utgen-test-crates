{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::always_match",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:274:5:297:6",
  "doc": "/// Returns an NFA with a single regex pattern that always matches at every\n/// position.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{nfa::thompson::{NFA, pikevm::PikeVM}, Match};\n///\n/// let re = PikeVM::new_from_nfa(NFA::always_match())?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// let expected = Some(Match::must(0, 0..0));\n/// re.captures(&mut cache, b\"\", &mut caps);\n/// assert_eq!(expected, caps.get_match());\n/// re.captures(&mut cache, b\"foo\", &mut caps);\n/// assert_eq!(expected, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn always_match() -> NFA {",
    "    // We could use NFA::new(\"\") here and we'd get the same semantics, but",
    "    // hand-assembling the NFA (as below) does the same thing with a fewer",
    "    // number of states. It also avoids needing the 'syntax' feature",
    "    // enabled.",
    "    //",
    "    // Technically all we need is the \"match\" state, but we add the",
    "    // \"capture\" states so that the PikeVM can use this NFA.",
    "    //",
    "    // The unwraps below are OK because we add so few states that they will",
    "    // never exhaust any default limits in any environment.",
    "    let mut builder = Builder::new();",
    "    let pid = builder.start_pattern().unwrap();",
    "    assert_eq!(pid.as_usize(), 0);",
    "    let start_id =",
    "        builder.add_capture_start(StateID::ZERO, 0, None).unwrap();",
    "    let end_id = builder.add_capture_end(StateID::ZERO, 0).unwrap();",
    "    let match_id = builder.add_match().unwrap();",
    "    builder.patch(start_id, end_id).unwrap();",
    "    builder.patch(end_id, match_id).unwrap();",
    "    let pid = builder.finish_pattern(start_id).unwrap();",
    "    assert_eq!(pid.as_usize(), 0);",
    "    builder.build(start_id, start_id).unwrap()",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 1,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        34,
        35
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}