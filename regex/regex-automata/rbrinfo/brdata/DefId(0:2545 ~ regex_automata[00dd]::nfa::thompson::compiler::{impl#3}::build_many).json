{
  "name": "regex_automata::nfa::thompson::compiler::{impl#3}::build_many",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:785:5:800:6",
  "doc": "/// Compile the given regular expression patterns into a single NFA.\n///\n/// When matches are returned, the pattern ID corresponds to the index of\n/// the pattern in the slice given.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{nfa::thompson::{NFA, pikevm::PikeVM}, Match};\n///\n/// let config = NFA::config().nfa_size_limit(Some(1_000));\n/// let nfa = NFA::compiler().configure(config).build_many(&[\n///     r\"(?-u)\\s\",\n///     r\"(?-u)\\w\",\n/// ])?;\n///\n/// let re = PikeVM::new_from_nfa(nfa)?;\n/// let mut cache = re.create_cache();\n/// let mut caps = re.create_captures();\n/// let expected = Some(Match::must(1, 1..2));\n/// re.captures(&mut cache, \"!A! !A!\", &mut caps);\n/// assert_eq!(expected, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn build_many<P: AsRef<str>>(",
    "    &self,",
    "    patterns: &[P],",
    ") -> Result<NFA, BuildError> {",
    "    let mut hirs = vec![];",
    "    for p in patterns {",
    "        hirs.push(",
    "            self.parser",
    "                .build()",
    "                .parse(p.as_ref())",
    "                .map_err(BuildError::syntax)?,",
    "        );",
    "        debug!(\"parsed: {:?}\", p.as_ref());",
    "    }",
    "    self.build_many_from_hir(&hirs)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "p in patterns",
          "norm": null,
          "value": "true",
          "line": 790,
          "bound": null
        },
        {
          "cond": "self.parser\n                    .build()\n                    .parse(p.as_ref())\n                    .map_err(BuildError::syntax)?",
          "norm": null,
          "value": "Err/None",
          "line": 792,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        19,
        27,
        28,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "p in patterns",
          "norm": null,
          "value": "true",
          "line": 790,
          "bound": null
        },
        {
          "cond": "self.parser\n                    .build()\n                    .parse(p.as_ref())\n                    .map_err(BuildError::syntax)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 792,
          "bound": null
        },
        {
          "cond": "p in patterns",
          "norm": null,
          "value": "false",
          "line": 790,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        13,
        14,
        17,
        20,
        21,
        22,
        23,
        3,
        4,
        5,
        7,
        9,
        24,
        25,
        26,
        31
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "p in patterns",
          "norm": null,
          "value": "false",
          "line": 790,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        24,
        25,
        26,
        31
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}