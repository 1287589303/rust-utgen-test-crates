{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::add_union_reverse",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:739:5:744:6",
  "doc": "/// Add a \"reverse union\" NFA state.\n///\n/// A \"reverse union\" NFA state contains zero or more unconditional epsilon\n/// transitions to other NFA states. The order of these transitions\n/// reflects a priority order where later transitions are preferred\n/// over earlier transitions. This is an inverted priority order when\n/// compared to `add_union`. This is useful, for example, for implementing\n/// non-greedy repetition operators.\n///\n/// Callers may provide an empty set of alternates to this method call, and\n/// then later add transitions via `patch`. At final build time, a \"reverse\n/// union\" state with no alternates is converted to a \"fail\" state, and a\n/// \"reverse union\" state with exactly one alternate is treated as if it\n/// were an \"empty\" state.\n///\n/// # Errors\n///\n/// This returns an error if the state identifier space is exhausted, or if\n/// the configured heap size limit has been exceeded.\n",
  "code": [
    "pub fn add_union_reverse(",
    "    &mut self,",
    "    alternates: Vec<StateID>,",
    ") -> Result<StateID, BuildError> {",
    "    self.add(State::UnionReverse { alternates })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}