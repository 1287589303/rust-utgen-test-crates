{
  "name": "regex_automata::util::syntax::parse_many_with",
  "mod_info": {
    "name": "util::syntax",
    "loc": "regex-automata/src/util/mod.rs:45:1:45:16"
  },
  "visible": true,
  "loc": "regex-automata/src/util/syntax.rs:118:1:129:2",
  "doc": "/// A convenience routine for parsing many patterns into HIR values using a\n/// `Config`.\n///\n/// # Example\n///\n/// This shows how to parse many patterns into an corresponding HIR values\n/// with a non-default configuration:\n///\n/// ```\n/// use {\n///     regex_automata::util::syntax,\n///     regex_syntax::hir::Properties,\n/// };\n///\n/// let patterns = &[\n///     r\"([a-z]+)|([0-9]+)\",\n///     r\"\\W\",\n///     r\"foo(A-Z]+)bar\",\n/// ];\n/// let config = syntax::Config::new().unicode(false).utf8(false);\n/// let hirs = syntax::parse_many_with(patterns, &config)?;\n/// let props = Properties::union(hirs.iter().map(|h| h.properties()));\n/// assert!(!props.is_utf8());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn parse_many_with<P: AsRef<str>>(",
    "    patterns: &[P],",
    "    config: &Config,",
    ") -> Result<Vec<Hir>, Error> {",
    "    let mut builder = ParserBuilder::new();",
    "    config.apply(&mut builder);",
    "    let mut hirs = vec![];",
    "    for p in patterns.iter() {",
    "        hirs.push(builder.build().parse(p.as_ref())?);",
    "    }",
    "    Ok(hirs)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "p in patterns.iter()",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "builder.build().parse(p.as_ref())?",
          "norm": null,
          "value": "Err/None",
          "line": 126,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        13,
        14,
        15,
        16,
        18,
        20,
        21,
        28,
        29,
        30,
        31,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "p in patterns.iter()",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "builder.build().parse(p.as_ref())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 126,
          "bound": null
        },
        {
          "cond": "p in patterns.iter()",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        }
      ],
      "ret": "Ok(hirs)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        13,
        14,
        15,
        16,
        19,
        22,
        23,
        24,
        25,
        6,
        7,
        8,
        10,
        12,
        26,
        27,
        32
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "p in patterns.iter()",
          "norm": null,
          "value": "false",
          "line": 125,
          "bound": null
        }
      ],
      "ret": "Ok(hirs)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        26,
        27,
        32
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}