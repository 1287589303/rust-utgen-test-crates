{
  "name": "regex_automata::util::captures::{impl#0}::is_match",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:331:5:333:6",
  "doc": "/// Returns true if and only if this capturing group represents a match.\n///\n/// This is a convenience routine for `caps.pattern().is_some()`.\n///\n/// # Example\n///\n/// When using the PikeVM (for example), the lightest weight way of\n/// detecting whether a match exists is to create capturing groups that\n/// only track the ID of the pattern that match (if any):\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     util::captures::Captures,\n/// };\n///\n/// let re = PikeVM::new(r\"[a-z]+\")?;\n/// let mut cache = re.create_cache();\n/// let mut caps = Captures::empty(re.get_nfa().group_info().clone());\n///\n/// re.captures(&mut cache, \"aABCz\", &mut caps);\n/// assert!(caps.is_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn is_match(&self) -> bool {",
    "    self.pid.is_some()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}