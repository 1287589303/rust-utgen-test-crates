{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#7}::new",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:1676:5:1678:6",
  "doc": "/// Create a new [`BoundedBacktracker`] cache.\n///\n/// A potentially more convenient routine to create a cache is\n/// [`BoundedBacktracker::create_cache`], as it does not require also\n/// importing the `Cache` type.\n///\n/// If you want to reuse the returned `Cache` with some other\n/// `BoundedBacktracker`, then you must call [`Cache::reset`] with the\n/// desired `BoundedBacktracker`.\n",
  "code": [
    "pub fn new(re: &BoundedBacktracker) -> Cache {",
    "    Cache { stack: vec![], visited: Visited::new(re) }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Cache { stack: vec![], visited: Visited::new(re) }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}