{
  "name": "regex_automata::dfa::accel::{impl#5}::add",
  "mod_info": {
    "name": "dfa::accel",
    "loc": "regex-automata/src/dfa/mod.rs:346:1:346:22"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/accel.rs:449:5:467:6",
  "doc": "/// Attempts to add the given byte to this accelerator. If the accelerator\n/// is already full or thinks the byte is a poor accelerator, then this\n/// returns false. Otherwise, returns true.\n///\n/// If the given byte is already in this accelerator, then it panics.\n",
  "code": [
    "pub fn add(&mut self, byte: u8) -> bool {",
    "    if self.len() >= 3 {",
    "        return false;",
    "    }",
    "    // As a special case, we totally reject trying to accelerate a state",
    "    // with an ASCII space. In most cases, it occurs very frequently, and",
    "    // tends to result in worse overall performance.",
    "    if byte == b' ' {",
    "        return false;",
    "    }",
    "    assert!(",
    "        !self.contains(byte),",
    "        \"accelerator already contains {:?}\",",
    "        crate::util::escape::DebugByte(byte)",
    "    );",
    "    self.bytes[self.len() + 1] = byte;",
    "    self.bytes[0] += 1;",
    "    true",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.len() >= 3",
          "norm": "3 <= self.len()",
          "value": "true",
          "line": 450,
          "bound": "self.len() == 3"
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.len() >= 3",
          "norm": "3 <= self.len()",
          "value": "false",
          "line": 450,
          "bound": null
        },
        {
          "cond": "byte == b' '",
          "norm": "b' ' == byte",
          "value": "false",
          "line": 456,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        3,
        4,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.len() >= 3",
          "norm": "3 <= self.len()",
          "value": "false",
          "line": 450,
          "bound": null
        },
        {
          "cond": "byte == b' '",
          "norm": "b' ' == byte",
          "value": "true",
          "line": 456,
          "bound": null
        },
        {
          "cond": "self.contains(byte)",
          "norm": null,
          "value": "true",
          "line": 460,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        9,
        10,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.len() >= 3",
          "norm": "3 <= self.len()",
          "value": "false",
          "line": 450,
          "bound": null
        },
        {
          "cond": "byte == b' '",
          "norm": "b' ' == byte",
          "value": "true",
          "line": 456,
          "bound": null
        },
        {
          "cond": "self.contains(byte)",
          "norm": null,
          "value": "false",
          "line": 460,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        3,
        5,
        6,
        8,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}