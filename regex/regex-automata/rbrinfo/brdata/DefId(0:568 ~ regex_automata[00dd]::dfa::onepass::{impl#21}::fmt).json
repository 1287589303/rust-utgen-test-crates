{
  "name": "regex_automata::dfa::onepass::{impl#21}::fmt",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:3045:5:3078:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {",
    "    use self::BuildErrorKind::*;",
    "",
    "    match self.kind {",
    "        NFA(_) => write!(f, \"error building NFA\"),",
    "        Word(_) => write!(f, \"NFA contains Unicode word boundary\"),",
    "        TooManyStates { limit } => write!(",
    "            f,",
    "            \"one-pass DFA exceeded a limit of {:?} for number of states\",",
    "            limit,",
    "        ),",
    "        TooManyPatterns { limit } => write!(",
    "            f,",
    "            \"one-pass DFA exceeded a limit of {:?} for number of patterns\",",
    "            limit,",
    "        ),",
    "        UnsupportedLook { look } => write!(",
    "            f,",
    "            \"one-pass DFA does not support the {:?} assertion\",",
    "            look,",
    "        ),",
    "        ExceededSizeLimit { limit } => write!(",
    "            f,",
    "            \"one-pass DFA exceeded size limit of {:?} during building\",",
    "            limit,",
    "        ),",
    "        NotOnePass { msg } => write!(",
    "            f,",
    "            \"one-pass DFA could not be built because \\",
    "             pattern is not one-pass: {}\",",
    "            msg,",
    "        ),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.kind matches NotOnePass { msg }",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        31,
        32,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.kind matches ExceededSizeLimit { limit }",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        },
        {
          "cond": "self.kind matches ExceededSizeLimit { limit }",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        27,
        28,
        29,
        30,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.kind matches UnsupportedLook { look }",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        },
        {
          "cond": "self.kind matches UnsupportedLook { look }",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        23,
        24,
        25,
        26,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.kind matches TooManyPatterns { limit }",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        },
        {
          "cond": "self.kind matches TooManyPatterns { limit }",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        19,
        20,
        21,
        22,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.kind matches TooManyStates { limit }",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        },
        {
          "cond": "self.kind matches TooManyStates { limit }",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        15,
        16,
        17,
        18,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.kind matches Word(_)",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        },
        {
          "cond": "self.kind matches Word(_)",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.kind matches NFA(_)",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        },
        {
          "cond": "self.kind matches NFA(_)",
          "norm": null,
          "value": "true",
          "line": 3048,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        9,
        10,
        11,
        34
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}