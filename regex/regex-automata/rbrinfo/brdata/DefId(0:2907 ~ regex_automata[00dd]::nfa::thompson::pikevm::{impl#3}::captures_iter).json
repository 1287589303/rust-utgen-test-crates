{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#3}::captures_iter",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:932:5:940:6",
  "doc": "/// Returns an iterator over all non-overlapping `Captures` values. If no\n/// match exists, then the iterator yields no elements.\n///\n/// This yields the same matches as [`PikeVM::find_iter`], but it includes\n/// the spans of all capturing groups that participate in each match.\n///\n/// **Tip:** See [`util::iter::Searcher`](crate::util::iter::Searcher) for\n/// how to correctly iterate over all matches in a haystack while avoiding\n/// the creation of a new `Captures` value for every match. (Which you are\n/// forced to do with an `Iterator`.)\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, Span};\n///\n/// let re = PikeVM::new(\"foo(?P<numbers>[0-9]+)\")?;\n/// let mut cache = re.create_cache();\n///\n/// let text = \"foo1 foo12 foo123\";\n/// let matches: Vec<Span> = re\n///     .captures_iter(&mut cache, text)\n///     // The unwrap is OK since 'numbers' matches if the pattern matches.\n///     .map(|caps| caps.get_group_by_name(\"numbers\").unwrap())\n///     .collect();\n/// assert_eq!(matches, vec![\n///     Span::from(3..4),\n///     Span::from(8..10),\n///     Span::from(14..17),\n/// ]);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn captures_iter<'r, 'c, 'h, I: Into<Input<'h>>>(",
    "    &'r self,",
    "    cache: &'c mut Cache,",
    "    input: I,",
    ") -> CapturesMatches<'r, 'c, 'h> {",
    "    let caps = self.create_captures();",
    "    let it = iter::Searcher::new(input.into());",
    "    CapturesMatches { re: self, cache, caps, it }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "CapturesMatches { re: self, cache, caps, it }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}