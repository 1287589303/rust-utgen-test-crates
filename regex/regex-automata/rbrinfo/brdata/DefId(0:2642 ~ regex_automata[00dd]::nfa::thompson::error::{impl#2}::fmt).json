{
  "name": "regex_automata::nfa::thompson::error::{impl#2}::fmt",
  "mod_info": {
    "name": "nfa::thompson::error",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:61:1:61:11"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/error.rs:145:5:184:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {",
    "    match self.kind() {",
    "        #[cfg(feature = \"syntax\")]",
    "        BuildErrorKind::Syntax(_) => write!(f, \"error parsing regex\"),",
    "        BuildErrorKind::Captures(_) => {",
    "            write!(f, \"error with capture groups\")",
    "        }",
    "        BuildErrorKind::Word(_) => {",
    "            write!(f, \"NFA contains Unicode word boundary\")",
    "        }",
    "        BuildErrorKind::TooManyPatterns { given, limit } => write!(",
    "            f,",
    "            \"attempted to compile {} patterns, \\",
    "             which exceeds the limit of {}\",",
    "            given, limit,",
    "        ),",
    "        BuildErrorKind::TooManyStates { given, limit } => write!(",
    "            f,",
    "            \"attempted to compile {} NFA states, \\",
    "             which exceeds the limit of {}\",",
    "            given, limit,",
    "        ),",
    "        BuildErrorKind::ExceededSizeLimit { limit } => write!(",
    "            f,",
    "            \"heap usage during NFA compilation exceeded limit of {}\",",
    "            limit,",
    "        ),",
    "        BuildErrorKind::InvalidCaptureIndex { index } => write!(",
    "            f,",
    "            \"capture group index {} is invalid (too big or discontinuous)\",",
    "            index,",
    "        ),",
    "        #[cfg(feature = \"syntax\")]",
    "        BuildErrorKind::UnsupportedCaptures => write!(",
    "            f,",
    "            \"currently captures must be disabled when compiling \\",
    "             a reverse NFA\",",
    "        ),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::UnsupportedCaptures",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        10,
        38,
        39,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::InvalidCaptureIndex { index }",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::InvalidCaptureIndex { index }",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        34,
        35,
        36,
        37,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::ExceededSizeLimit { limit }",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::ExceededSizeLimit { limit }",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        8,
        30,
        31,
        32,
        33,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::TooManyStates { given, limit }",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::TooManyStates { given, limit }",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        25,
        26,
        27,
        28,
        29,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::TooManyPatterns { given, limit }",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::TooManyPatterns { given, limit }",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        20,
        21,
        22,
        23,
        24,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::Word(_)",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::Word(_)",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        17,
        18,
        19,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::Captures(_)",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::Captures(_)",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        14,
        15,
        16,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::Syntax(_)",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::Syntax(_)",
          "norm": null,
          "value": "true",
          "line": 146,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        11,
        12,
        13,
        40
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}