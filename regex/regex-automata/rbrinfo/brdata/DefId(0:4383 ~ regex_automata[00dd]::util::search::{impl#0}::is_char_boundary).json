{
  "name": "regex_automata::util::search::{impl#0}::is_char_boundary",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:767:5:769:6",
  "doc": "/// Returns true if and only if the given offset in this search's haystack\n/// falls on a valid UTF-8 encoded codepoint boundary.\n///\n/// If the haystack is not valid UTF-8, then the behavior of this routine\n/// is unspecified.\n///\n/// # Example\n///\n/// This shows where codepoint boundaries do and don't exist in valid\n/// UTF-8.\n///\n/// ```\n/// use regex_automata::Input;\n///\n/// let input = Input::new(\"â˜ƒ\");\n/// assert!(input.is_char_boundary(0));\n/// assert!(!input.is_char_boundary(1));\n/// assert!(!input.is_char_boundary(2));\n/// assert!(input.is_char_boundary(3));\n/// assert!(!input.is_char_boundary(4));\n/// ```\n",
  "code": [
    "pub fn is_char_boundary(&self, offset: usize) -> bool {",
    "    utf8::is_boundary(self.haystack(), offset)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}