{
  "name": "regex_automata::util::iter::{impl#0}::handle_overlapping_empty_half_match",
  "mod_info": {
    "name": "util::iter",
    "loc": "regex-automata/src/util/mod.rs:36:1:36:14"
  },
  "visible": false,
  "loc": "regex-automata/src/util/iter.rs:625:5:644:6",
  "doc": "/// Handles the special case of a match that begins where the previous\n/// match ended. Without this special handling, it'd be possible to get\n/// stuck where an empty match never results in forward progress. This\n/// also makes it more consistent with how presiding general purpose regex\n/// engines work.\n",
  "code": [
    "fn handle_overlapping_empty_half_match<F>(",
    "    &mut self,",
    "    _: HalfMatch,",
    "    mut finder: F,",
    ") -> Result<Option<HalfMatch>, MatchError>",
    "where",
    "    F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,",
    "{",
    "    // Since we are only here when 'm.offset()' matches the offset of the",
    "    // last match, it follows that this must have been an empty match.",
    "    // Since we both need to make progress *and* prevent overlapping",
    "    // matches, we discard this match and advance the search by 1.",
    "    //",
    "    // Note that this may start a search in the middle of a codepoint. The",
    "    // regex engines themselves are expected to deal with that and not",
    "    // report any matches within a codepoint if they are configured in",
    "    // UTF-8 mode.",
    "    self.input.set_start(self.input.start().checked_add(1).unwrap());",
    "    finder(&self.input)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}