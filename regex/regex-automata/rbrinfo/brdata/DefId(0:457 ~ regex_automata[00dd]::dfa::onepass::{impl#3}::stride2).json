{
  "name": "regex_automata::dfa::onepass::{impl#3}::stride2",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:1506:5:1508:6",
  "doc": "/// Returns the total stride for every state in this DFA, expressed as the\n/// exponent of a power of 2. The stride is the amount of space each state\n/// takes up in the transition table, expressed as a number of transitions.\n/// (Unused transitions map to dead states.)\n///\n/// The stride of a DFA is always equivalent to the smallest power of\n/// 2 that is greater than or equal to the DFA's alphabet length. This\n/// definition uses extra space, but possibly permits faster translation\n/// between state identifiers and their corresponding offsets in this DFA's\n/// transition table.\n///\n/// For example, if the DFA's stride is 16 transitions, then its `stride2`\n/// is `4` since `2^4 = 16`.\n///\n/// The minimum `stride2` value is `1` (corresponding to a stride of `2`)\n/// while the maximum `stride2` value is `9` (corresponding to a stride\n/// of `512`). The maximum in theory should be `8`, but because of some\n/// implementation quirks that may be relaxed in the future, it is one more\n/// than `8`. (Do note that a maximal stride is incredibly rare, as it\n/// would imply that there is almost no redundant in the regex pattern.)\n///\n/// Note that unlike dense or sparse DFAs, a one-pass DFA does not expose\n/// a low level DFA API. Therefore, this routine has little use other than\n/// being informational.\n",
  "code": [
    "pub fn stride2(&self) -> usize {",
    "    self.stride2",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.stride2",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}