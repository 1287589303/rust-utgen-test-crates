{
  "name": "regex_automata::util::syntax::parse_many",
  "mod_info": {
    "name": "util::syntax",
    "loc": "regex-automata/src/util/mod.rs:45:1:45:16"
  },
  "visible": true,
  "loc": "regex-automata/src/util/syntax.rs:63:1:65:2",
  "doc": "/// A convenience routine for parsing many patterns into HIR value with the\n/// default configuration.\n///\n/// # Example\n///\n/// This shows how to parse many patterns into an corresponding HIR values:\n///\n/// ```\n/// use {\n///     regex_automata::util::syntax,\n///     regex_syntax::hir::Properties,\n/// };\n///\n/// let hirs = syntax::parse_many(&[\n///     r\"([a-z]+)|([0-9]+)\",\n///     r\"foo(A-Z]+)bar\",\n/// ])?;\n/// let props = Properties::union(hirs.iter().map(|h| h.properties()));\n/// assert_eq!(Some(1), props.static_explicit_captures_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn parse_many<P: AsRef<str>>(patterns: &[P]) -> Result<Vec<Hir>, Error> {",
    "    parse_many_with(patterns, &Config::default())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}