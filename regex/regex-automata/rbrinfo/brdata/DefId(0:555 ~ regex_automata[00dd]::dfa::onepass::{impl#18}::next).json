{
  "name": "regex_automata::dfa::onepass::{impl#18}::next",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:2960:5:2968:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<usize> {",
    "    // Number of zeroes here is always <= u8::MAX, and so fits in a usize.",
    "    let slot = self.slots.0.trailing_zeros().as_usize();",
    "    if slot >= Slots::LIMIT {",
    "        return None;",
    "    }",
    "    self.slots = self.slots.remove(slot);",
    "    Some(slot)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "slot >= Slots::LIMIT",
          "norm": "Slots::LIMIT <= slot",
          "value": "true",
          "line": 2963,
          "bound": "slot == Slots::LIMIT"
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "slot >= Slots::LIMIT",
          "norm": "Slots::LIMIT <= slot",
          "value": "false",
          "line": 2963,
          "bound": null
        }
      ],
      "ret": "Some(slot)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}