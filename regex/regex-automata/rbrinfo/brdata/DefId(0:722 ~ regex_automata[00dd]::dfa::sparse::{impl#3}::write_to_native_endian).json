{
  "name": "regex_automata::dfa::sparse::{impl#3}::write_to_native_endian",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/sparse.rs:776:5:781:6",
  "doc": "/// Serialize this DFA as raw bytes to the given slice, in native endian\n/// format. Upon success, the total number of bytes written to `dst` is\n/// returned.\n///\n/// The written bytes are guaranteed to be deserialized correctly and\n/// without errors in a semver compatible release of this crate by a\n/// `DFA`'s deserialization APIs (assuming all other criteria for the\n/// deserialization APIs has been satisfied):\n///\n/// * [`DFA::from_bytes`]\n/// * [`DFA::from_bytes_unchecked`]\n///\n/// Generally speaking, native endian format should only be used when\n/// you know that the target you're compiling the DFA for matches the\n/// endianness of the target on which you're compiling DFA. For example,\n/// if serialization and deserialization happen in the same process or on\n/// the same machine. Otherwise, when serializing a DFA for use in a\n/// portable environment, you'll almost certainly want to serialize _both_\n/// a little endian and a big endian version and then load the correct one\n/// based on the target's configuration.\n///\n/// # Errors\n///\n/// This returns an error if the given destination slice is not big enough\n/// to contain the full serialized DFA. If an error occurs, then nothing\n/// is written to `dst`.\n///\n/// # Example\n///\n/// This example shows how to serialize and deserialize a DFA without\n/// dynamic memory allocation.\n///\n/// ```\n/// use regex_automata::{dfa::{Automaton, sparse::DFA}, HalfMatch, Input};\n///\n/// // Compile our original DFA.\n/// let original_dfa = DFA::new(\"foo[0-9]+\")?;\n///\n/// // Create a 4KB buffer on the stack to store our serialized DFA.\n/// let mut buf = [0u8; 4 * (1<<10)];\n/// let written = original_dfa.write_to_native_endian(&mut buf)?;\n/// let dfa: DFA<&[u8]> = DFA::from_bytes(&buf[..written])?.0;\n///\n/// let expected = Some(HalfMatch::must(0, 8));\n/// assert_eq!(expected, dfa.try_search_fwd(&Input::new(\"foo12345\"))?);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn write_to_native_endian(",
    "    &self,",
    "    dst: &mut [u8],",
    ") -> Result<usize, SerializeError> {",
    "    self.write_to::<wire::NE>(dst)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}