{
  "name": "regex_automata::dfa::dense::{impl#0}::accelerate",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:120:5:123:6",
  "doc": "/// Enable state acceleration.\n///\n/// When enabled, DFA construction will analyze each state to determine\n/// whether it is eligible for simple acceleration. Acceleration typically\n/// occurs when most of a state's transitions loop back to itself, leaving\n/// only a select few bytes that will exit the state. When this occurs,\n/// other routines like `memchr` can be used to look for those bytes which\n/// may be much faster than traversing the DFA.\n///\n/// Callers may elect to disable this if consistent performance is more\n/// desirable than variable performance. Namely, acceleration can sometimes\n/// make searching slower than it otherwise would be if the transitions\n/// that leave accelerated states are traversed frequently.\n///\n/// See [`Automaton::accelerator`] for an example.\n///\n/// This is enabled by default.\n",
  "code": [
    "pub fn accelerate(mut self, yes: bool) -> Config {",
    "    self.accelerate = Some(yes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}