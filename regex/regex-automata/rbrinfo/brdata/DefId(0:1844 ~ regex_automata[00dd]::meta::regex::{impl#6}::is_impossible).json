{
  "name": "regex_automata::meta::regex::{impl#6}::is_impossible",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/regex.rs:1997:5:2036:6",
  "doc": "/// Returns true if and only if it is known that a match is impossible\n/// for the given input. This is useful for short-circuiting and avoiding\n/// running the regex engine if it's known no match can be reported.\n///\n/// Note that this doesn't necessarily detect every possible case. For\n/// example, when `pattern_len() == 0`, a match is impossible, but that\n/// case is so rare that it's fine to be handled by the regex engine\n/// itself. That is, it's not worth the cost of adding it here in order to\n/// make it a little faster. The reason is that this is called for every\n/// search. so there is some cost to adding checks here. Arguably, some of\n/// the checks that are here already probably shouldn't be here...\n",
  "code": [
    "fn is_impossible(&self, input: &Input<'_>) -> bool {",
    "    // The underlying regex is anchored, so if we don't start the search",
    "    // at position 0, a match is impossible, because the anchor can only",
    "    // match at position 0.",
    "    if input.start() > 0 && self.is_always_anchored_start() {",
    "        return true;",
    "    }",
    "    // Same idea, but for the end anchor.",
    "    if input.end() < input.haystack().len()",
    "        && self.is_always_anchored_end()",
    "    {",
    "        return true;",
    "    }",
    "    // If the haystack is smaller than the minimum length required, then",
    "    // we know there can be no match.",
    "    let minlen = match self.props_union().minimum_len() {",
    "        None => return false,",
    "        Some(minlen) => minlen,",
    "    };",
    "    if input.get_span().len() < minlen {",
    "        return true;",
    "    }",
    "    // Same idea as minimum, but for maximum. This is trickier. We can",
    "    // only apply the maximum when we know the entire span that we're",
    "    // searching *has* to match according to the regex (and possibly the",
    "    // input configuration). If we know there is too much for the regex",
    "    // to match, we can bail early.",
    "    //",
    "    // I don't think we can apply the maximum otherwise unfortunately.",
    "    if self.is_anchored_start(input) && self.is_always_anchored_end() {",
    "        let maxlen = match self.props_union().maximum_len() {",
    "            None => return false,",
    "            Some(maxlen) => maxlen,",
    "        };",
    "        if input.get_span().len() > maxlen {",
    "            return true;",
    "        }",
    "    }",
    "    false",
    "}"
  ],
  "size": {
    "chain": 31,
    "contra": 0,
    "min_set": 9
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "true",
          "line": 2001,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        4,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2006,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches Some(maxlen)",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "input.get_span().len() > maxlen",
          "norm": null,
          "value": "true",
          "line": 2031,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches Some(maxlen)",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "input.get_span().len() > maxlen",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": "input.get_span().len() == maxlen"
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        44,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2026,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        41,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "false",
          "line": 2026,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        42,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        20,
        22,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches Some(maxlen)",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "input.get_span().len() > maxlen",
          "norm": null,
          "value": "true",
          "line": 2031,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches Some(maxlen)",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "input.get_span().len() > maxlen",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": "input.get_span().len() == maxlen"
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        44,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2026,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        41,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "false",
          "line": 2026,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        42,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "true",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_start()",
          "norm": null,
          "value": "false",
          "line": 2001,
          "bound": null
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        20,
        22,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2006,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches Some(maxlen)",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "input.get_span().len() > maxlen",
          "norm": null,
          "value": "true",
          "line": 2031,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches Some(maxlen)",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "input.get_span().len() > maxlen",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": "input.get_span().len() == maxlen"
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        44,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2026,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        41,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "false",
          "line": 2026,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        42,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "true",
          "line": 2005,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2006,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        20,
        22,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches Some(maxlen)",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "input.get_span().len() > maxlen",
          "norm": null,
          "value": "true",
          "line": 2031,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches Some(maxlen)",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "input.get_span().len() > maxlen",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": "input.get_span().len() == maxlen"
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        44,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.props_union().maximum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "true",
          "line": 2026,
          "bound": null
        },
        {
          "cond": "self.is_always_anchored_end()",
          "norm": null,
          "value": "false",
          "line": 2026,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        41,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches Some(minlen)",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "input.get_span().len() < minlen",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": "input.get_span().len() == minlen"
        },
        {
          "cond": "self.is_anchored_start(input)",
          "norm": null,
          "value": "false",
          "line": 2026,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        26,
        27,
        42,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "input.start() > 0",
          "norm": "0 < input.start()",
          "value": "false",
          "line": 2001,
          "bound": "input.start() == 0"
        },
        {
          "cond": "input.end() < input.haystack().len()",
          "norm": null,
          "value": "false",
          "line": 2005,
          "bound": "input.end() == input.haystack().len()"
        },
        {
          "cond": "self.props_union().minimum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "self.props_union().minimum_len() matches None",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        15,
        16,
        17,
        18,
        20,
        22,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}