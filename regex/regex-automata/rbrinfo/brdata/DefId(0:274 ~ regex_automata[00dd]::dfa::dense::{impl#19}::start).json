{
  "name": "regex_automata::dfa::dense::{impl#19}::start",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:4194:5:4229:6",
  "doc": "/// Return the start state for the given input and starting configuration.\n/// This returns an error if the input configuration is not supported by\n/// this DFA. For example, requesting an unanchored search when the DFA was\n/// not built with unanchored starting states. Or asking for an anchored\n/// pattern search with an invalid pattern ID or on a DFA that was not\n/// built with start states for each pattern.\n",
  "code": [
    "fn start(",
    "    &self,",
    "    anchored: Anchored,",
    "    start: Start,",
    ") -> Result<StateID, StartError> {",
    "    let start_index = start.as_usize();",
    "    let index = match anchored {",
    "        Anchored::No => {",
    "            if !self.kind.has_unanchored() {",
    "                return Err(StartError::unsupported_anchored(anchored));",
    "            }",
    "            start_index",
    "        }",
    "        Anchored::Yes => {",
    "            if !self.kind.has_anchored() {",
    "                return Err(StartError::unsupported_anchored(anchored));",
    "            }",
    "            self.stride + start_index",
    "        }",
    "        Anchored::Pattern(pid) => {",
    "            let len = match self.pattern_len {",
    "                None => {",
    "                    return Err(StartError::unsupported_anchored(anchored))",
    "                }",
    "                Some(len) => len,",
    "            };",
    "            if pid.as_usize() >= len {",
    "                return Ok(DEAD);",
    "            }",
    "            (2 * self.stride)",
    "                + (self.stride * pid.as_usize())",
    "                + start_index",
    "        }",
    "    };",
    "    Ok(self.table()[index])",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "anchored matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 4200,
          "bound": null
        },
        {
          "cond": "self.pattern_len matches Some(len)",
          "norm": null,
          "value": "true",
          "line": 4214,
          "bound": null
        },
        {
          "cond": "pid.as_usize() >= len",
          "norm": "len <= pid.as_usize()",
          "value": "true",
          "line": 4220,
          "bound": "pid.as_usize() == len"
        }
      ],
      "ret": "Ok(DEAD)",
      "path": [
        0,
        1,
        5,
        19,
        22,
        23,
        33,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "anchored matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 4200,
          "bound": null
        },
        {
          "cond": "self.pattern_len matches Some(len)",
          "norm": null,
          "value": "true",
          "line": 4214,
          "bound": null
        },
        {
          "cond": "pid.as_usize() >= len",
          "norm": "len <= pid.as_usize()",
          "value": "false",
          "line": 4220,
          "bound": null
        }
      ],
      "ret": "Ok(self.table()[index])",
      "path": [
        0,
        1,
        5,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "anchored matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 4200,
          "bound": null
        },
        {
          "cond": "self.pattern_len matches None",
          "norm": null,
          "value": "true",
          "line": 4214,
          "bound": null
        },
        {
          "cond": "self.pattern_len matches None",
          "norm": null,
          "value": "true",
          "line": 4214,
          "bound": null
        }
      ],
      "ret": "Err(StartError::unsupported_anchored(anchored))",
      "path": [
        0,
        1,
        5,
        18,
        20,
        21,
        33,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "anchored matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 4200,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 4200,
          "bound": null
        },
        {
          "cond": "self.kind.has_anchored()",
          "norm": null,
          "value": "true",
          "line": 4208,
          "bound": null
        }
      ],
      "ret": "Ok(self.table()[index])",
      "path": [
        0,
        1,
        4,
        11,
        12,
        13,
        16,
        30,
        31,
        32,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "anchored matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 4200,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 4200,
          "bound": null
        },
        {
          "cond": "self.kind.has_anchored()",
          "norm": null,
          "value": "false",
          "line": 4208,
          "bound": null
        }
      ],
      "ret": "Err(StartError::unsupported_anchored(anchored))",
      "path": [
        0,
        1,
        4,
        11,
        12,
        14,
        15,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "anchored matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 4200,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 4200,
          "bound": null
        },
        {
          "cond": "self.kind.has_unanchored()",
          "norm": null,
          "value": "true",
          "line": 4202,
          "bound": null
        }
      ],
      "ret": "Ok(self.table()[index])",
      "path": [
        0,
        1,
        3,
        6,
        7,
        8,
        30,
        31,
        32,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "anchored matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 4200,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 4200,
          "bound": null
        },
        {
          "cond": "self.kind.has_unanchored()",
          "norm": null,
          "value": "false",
          "line": 4202,
          "bound": null
        }
      ],
      "ret": "Err(StartError::unsupported_anchored(anchored))",
      "path": [
        0,
        1,
        3,
        6,
        7,
        9,
        10,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}