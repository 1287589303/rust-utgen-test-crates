{
  "name": "regex_automata::meta::strategy::{impl#6}::which_overlapping_matches",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:1101:5:1112:6",
  "doc": "",
  "code": [
    "fn which_overlapping_matches(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    "    patset: &mut PatternSet,",
    ") {",
    "    // It seems like this could probably benefit from a reverse anchored",
    "    // optimization, perhaps by doing an overlapping reverse search (which",
    "    // the DFAs do support). I haven't given it much thought though, and",
    "    // I'm currently focus more on the single pattern case.",
    "    self.core.which_overlapping_matches(cache, input, patset)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}