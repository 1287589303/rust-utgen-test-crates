{
  "name": "regex_automata::util::alphabet::{impl#6}::next",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:564:5:589:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<Unit> {",
    "    while self.cur_byte < self.end_byte.unwrap_or(256) {",
    "        let byte = u8::try_from(self.cur_byte).unwrap();",
    "        let class = self.classes.get(byte);",
    "        self.cur_byte += 1;",
    "",
    "        if self.last_class != Some(class) {",
    "            self.last_class = Some(class);",
    "            return Some(Unit::u8(byte));",
    "        }",
    "    }",
    "    if self.cur_byte != usize::MAX && self.end_byte.is_none() {",
    "        // Using usize::MAX as a sentinel is OK because we ban usize::MAX",
    "        // from appearing as a start bound in iterator construction. But",
    "        // why do it this way? Well, we want to return the EOI class",
    "        // whenever the end of the given range is unbounded because EOI",
    "        // isn't really a \"byte\" per se, so the only way it should be",
    "        // excluded is if there is a bounded end to the range. Therefore,",
    "        // when the end is unbounded, we just need to know whether we've",
    "        // reported EOI or not. When we do, we set cur_byte to a value it",
    "        // can never otherwise be.",
    "        self.cur_byte = usize::MAX;",
    "        return Some(self.classes.eoi());",
    "    }",
    "    None",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 3,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.cur_byte < self.end_byte.unwrap_or(256)",
          "norm": null,
          "value": "true",
          "line": 565,
          "bound": null
        },
        {
          "cond": "self.last_class != Some(class)",
          "norm": "Some(class) != self.last_class",
          "value": "true",
          "line": 570,
          "bound": null
        }
      ],
      "ret": "Some(Unit::u8(byte))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.cur_byte < self.end_byte.unwrap_or(256)",
          "norm": null,
          "value": "true",
          "line": 565,
          "bound": null
        },
        {
          "cond": "self.last_class != Some(class)",
          "norm": "Some(class) != self.last_class",
          "value": "false",
          "line": 570,
          "bound": null
        },
        {
          "cond": "self.cur_byte < self.end_byte.unwrap_or(256)",
          "norm": null,
          "value": "false",
          "line": 565,
          "bound": "self.cur_byte == self.end_byte.unwrap_or(256)"
        },
        {
          "cond": "self.cur_byte != usize::MAX",
          "norm": null,
          "value": "true",
          "line": 575,
          "bound": null
        },
        {
          "cond": "self.end_byte.is_none()",
          "norm": null,
          "value": "true",
          "line": 575,
          "bound": null
        }
      ],
      "ret": "Some(self.classes.eoi())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        12,
        1,
        2,
        3,
        13,
        14,
        16,
        17,
        18,
        21
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.cur_byte < self.end_byte.unwrap_or(256)",
          "norm": null,
          "value": "true",
          "line": 565,
          "bound": null
        },
        {
          "cond": "self.last_class != Some(class)",
          "norm": "Some(class) != self.last_class",
          "value": "false",
          "line": 570,
          "bound": null
        },
        {
          "cond": "self.cur_byte < self.end_byte.unwrap_or(256)",
          "norm": null,
          "value": "false",
          "line": 565,
          "bound": "self.cur_byte == self.end_byte.unwrap_or(256)"
        },
        {
          "cond": "self.cur_byte != usize::MAX",
          "norm": null,
          "value": "true",
          "line": 575,
          "bound": null
        },
        {
          "cond": "self.end_byte.is_none()",
          "norm": null,
          "value": "false",
          "line": 575,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        12,
        1,
        2,
        3,
        13,
        14,
        16,
        19,
        20,
        21
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.cur_byte < self.end_byte.unwrap_or(256)",
          "norm": null,
          "value": "true",
          "line": 565,
          "bound": null
        },
        {
          "cond": "self.last_class != Some(class)",
          "norm": "Some(class) != self.last_class",
          "value": "false",
          "line": 570,
          "bound": null
        },
        {
          "cond": "self.cur_byte < self.end_byte.unwrap_or(256)",
          "norm": null,
          "value": "false",
          "line": 565,
          "bound": "self.cur_byte == self.end_byte.unwrap_or(256)"
        },
        {
          "cond": "self.cur_byte != usize::MAX",
          "norm": null,
          "value": "false",
          "line": 575,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        12,
        1,
        2,
        3,
        13,
        15,
        20,
        21
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.cur_byte < self.end_byte.unwrap_or(256)",
          "norm": null,
          "value": "false",
          "line": 565,
          "bound": "self.cur_byte == self.end_byte.unwrap_or(256)"
        },
        {
          "cond": "self.cur_byte != usize::MAX",
          "norm": null,
          "value": "true",
          "line": 575,
          "bound": null
        },
        {
          "cond": "self.end_byte.is_none()",
          "norm": null,
          "value": "true",
          "line": 575,
          "bound": null
        }
      ],
      "ret": "Some(self.classes.eoi())",
      "path": [
        0,
        1,
        2,
        3,
        13,
        14,
        16,
        17,
        18,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.cur_byte < self.end_byte.unwrap_or(256)",
          "norm": null,
          "value": "false",
          "line": 565,
          "bound": "self.cur_byte == self.end_byte.unwrap_or(256)"
        },
        {
          "cond": "self.cur_byte != usize::MAX",
          "norm": null,
          "value": "true",
          "line": 575,
          "bound": null
        },
        {
          "cond": "self.end_byte.is_none()",
          "norm": null,
          "value": "false",
          "line": 575,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        13,
        14,
        16,
        19,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.cur_byte < self.end_byte.unwrap_or(256)",
          "norm": null,
          "value": "false",
          "line": 565,
          "bound": "self.cur_byte == self.end_byte.unwrap_or(256)"
        },
        {
          "cond": "self.cur_byte != usize::MAX",
          "norm": null,
          "value": "false",
          "line": 575,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        13,
        15,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}