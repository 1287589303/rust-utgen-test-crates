{
  "name": "regex_automata::nfa::thompson::nfa::{impl#7}::matches_byte",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1922:5:1929:6",
  "doc": "/// This follows the matching transition for a particular byte.\n///\n/// The matching transition is found by looking for a transition that\n/// doesn't correspond to `StateID::ZERO` for the given `byte`.\n///\n/// If `at >= haystack.len()`, then this returns `None`.\n",
  "code": [
    "pub fn matches_byte(&self, byte: u8) -> Option<StateID> {",
    "    let next = self.transitions[usize::from(byte)];",
    "    if next == StateID::ZERO {",
    "        None",
    "    } else {",
    "        Some(next)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "next == StateID::ZERO",
          "norm": "StateID::ZERO == next",
          "value": "true",
          "line": 1924,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "next == StateID::ZERO",
          "norm": "StateID::ZERO == next",
          "value": "false",
          "line": 1924,
          "bound": null
        }
      ],
      "ret": "Some(next)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}