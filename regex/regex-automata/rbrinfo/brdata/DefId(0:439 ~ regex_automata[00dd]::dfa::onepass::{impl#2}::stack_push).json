{
  "name": "regex_automata::dfa::onepass::{impl#2}::stack_push",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:901:5:921:6",
  "doc": "/// Push the given NFA state ID and its corresponding epsilons (slots and\n/// conditional epsilon transitions) on to a stack for use in a depth first\n/// traversal of a sub-graph of the NFA.\n///\n/// If the given NFA state ID has already been pushed on to the stack, then\n/// it indicates the regex is not one-pass and this correspondingly returns\n/// an error.\n",
  "code": [
    "fn stack_push(",
    "    &mut self,",
    "    nfa_id: StateID,",
    "    epsilons: Epsilons,",
    ") -> Result<(), BuildError> {",
    "    // If we already have seen a match and we are compiling a leftmost",
    "    // first DFA, then we shouldn't add any more states to look at. This is",
    "    // effectively how preference order and non-greediness is implemented.",
    "    // if !self.config.get_match_kind().continue_past_first_match()",
    "    // && self.matched",
    "    // {",
    "    // return Ok(());",
    "    // }",
    "    if !self.seen.insert(nfa_id) {",
    "        return Err(BuildError::not_one_pass(",
    "            \"multiple epsilon transitions to same state\",",
    "        ));",
    "    }",
    "    self.stack.push((nfa_id, epsilons));",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.seen.insert(nfa_id)",
          "norm": null,
          "value": "true",
          "line": 914,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.seen.insert(nfa_id)",
          "norm": null,
          "value": "false",
          "line": 914,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::not_one_pass(\n                \"multiple epsilon transitions to same state\",\n            ))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}