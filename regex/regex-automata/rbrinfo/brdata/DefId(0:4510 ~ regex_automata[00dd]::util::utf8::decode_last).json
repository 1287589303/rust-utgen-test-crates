{
  "name": "regex_automata::util::utf8::decode_last",
  "mod_info": {
    "name": "util::utf8",
    "loc": "regex-automata/src/util/mod.rs:57:1:57:21"
  },
  "visible": true,
  "loc": "regex-automata/src/util/utf8.rs:79:1:93:2",
  "doc": "/// Decodes the last UTF-8 encoded codepoint from the given byte slice.\n///\n/// If no valid encoding of a codepoint exists at the end of the given byte\n/// slice, then the last byte is returned instead.\n///\n/// This returns `None` if and only if `bytes` is empty.\n",
  "code": [
    "pub(crate) fn decode_last(bytes: &[u8]) -> Option<Result<char, u8>> {",
    "    if bytes.is_empty() {",
    "        return None;",
    "    }",
    "    let mut start = bytes.len() - 1;",
    "    let limit = bytes.len().saturating_sub(4);",
    "    while start > limit && !is_leading_or_invalid_byte(bytes[start]) {",
    "        start -= 1;",
    "    }",
    "    match decode(&bytes[start..]) {",
    "        None => None,",
    "        Some(Ok(ch)) => Some(Ok(ch)),",
    "        Some(Err(_)) => Some(Err(bytes[bytes.len() - 1])),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 3,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "true",
          "line": 80,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "start > limit",
          "norm": "limit < start",
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "is_leading_or_invalid_byte(bytes[start])",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches Some(Ok(ch)) or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches Some(Ok(ch)) or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        }
      ],
      "ret": "Some(Err(bytes[bytes.len() - 1]))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        22,
        24,
        27,
        28,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "start > limit",
          "norm": "limit < start",
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "is_leading_or_invalid_byte(bytes[start])",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches Some(Ok(ch)) or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches None",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches Some(Ok(ch))",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        }
      ],
      "ret": "Some(Ok(ch))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        22,
        23,
        26,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "start > limit",
          "norm": "limit < start",
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "is_leading_or_invalid_byte(bytes[start])",
          "norm": null,
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches None",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches None",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        25,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "start > limit",
          "norm": "limit < start",
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "is_leading_or_invalid_byte(bytes[start])",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": null
        },
        {
          "cond": "start > limit",
          "norm": "limit < start",
          "value": "false",
          "line": 85,
          "bound": "start == limit"
        },
        {
          "cond": "decode(&bytes[start..]) matches Some(Ok(ch)) or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches Some(Ok(ch)) or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        }
      ],
      "ret": "Some(Err(bytes[bytes.len() - 1]))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        8,
        9,
        16,
        17,
        18,
        19,
        22,
        24,
        27,
        28,
        29,
        30,
        31
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "start > limit",
          "norm": "limit < start",
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "is_leading_or_invalid_byte(bytes[start])",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": null
        },
        {
          "cond": "start > limit",
          "norm": "limit < start",
          "value": "false",
          "line": 85,
          "bound": "start == limit"
        },
        {
          "cond": "decode(&bytes[start..]) matches Some(Ok(ch)) or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches None",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches Some(Ok(ch))",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        }
      ],
      "ret": "Some(Ok(ch))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        8,
        9,
        16,
        17,
        18,
        19,
        22,
        23,
        26,
        30,
        31
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "start > limit",
          "norm": "limit < start",
          "value": "true",
          "line": 85,
          "bound": null
        },
        {
          "cond": "is_leading_or_invalid_byte(bytes[start])",
          "norm": null,
          "value": "false",
          "line": 85,
          "bound": null
        },
        {
          "cond": "start > limit",
          "norm": "limit < start",
          "value": "false",
          "line": 85,
          "bound": "start == limit"
        },
        {
          "cond": "decode(&bytes[start..]) matches None",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches None",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        8,
        9,
        16,
        17,
        18,
        19,
        21,
        25,
        30,
        31
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "start > limit",
          "norm": "limit < start",
          "value": "false",
          "line": 85,
          "bound": "start == limit"
        },
        {
          "cond": "decode(&bytes[start..]) matches Some(Ok(ch)) or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches Some(Ok(ch)) or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        }
      ],
      "ret": "Some(Err(bytes[bytes.len() - 1]))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        16,
        17,
        18,
        19,
        22,
        24,
        27,
        28,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "start > limit",
          "norm": "limit < start",
          "value": "false",
          "line": 85,
          "bound": "start == limit"
        },
        {
          "cond": "decode(&bytes[start..]) matches Some(Ok(ch)) or Some(Err(_))",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches None",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches Some(Ok(ch))",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        }
      ],
      "ret": "Some(Ok(ch))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        16,
        17,
        18,
        19,
        22,
        23,
        26,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "start > limit",
          "norm": "limit < start",
          "value": "false",
          "line": 85,
          "bound": "start == limit"
        },
        {
          "cond": "decode(&bytes[start..]) matches None",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "decode(&bytes[start..]) matches None",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        16,
        17,
        18,
        19,
        21,
        25,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}