{
  "name": "regex_automata::nfa::thompson::nfa::{impl#4}::is_epsilon",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1655:5:1667:6",
  "doc": "/// Returns true if and only if this state contains one or more epsilon\n/// transitions.\n///\n/// In practice, a state has no outgoing transitions (like `Match`), has\n/// only non-epsilon transitions (like `ByteRange`) or has only epsilon\n/// transitions (like `Union`).\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::{State, Transition},\n///     util::primitives::{PatternID, StateID, SmallIndex},\n/// };\n///\n/// // Capture states are epsilon transitions.\n/// let state = State::Capture {\n///     next: StateID::ZERO,\n///     pattern_id: PatternID::ZERO,\n///     group_index: SmallIndex::ZERO,\n///     slot: SmallIndex::ZERO,\n/// };\n/// assert!(state.is_epsilon());\n///\n/// // ByteRange states are not.\n/// let state = State::ByteRange {\n///     trans: Transition { start: b'a', end: b'z', next: StateID::ZERO },\n/// };\n/// assert!(!state.is_epsilon());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn is_epsilon(&self) -> bool {",
    "    match *self {",
    "        State::ByteRange { .. }",
    "        | State::Sparse { .. }",
    "        | State::Dense { .. }",
    "        | State::Fail",
    "        | State::Match { .. } => false,",
    "        State::Look { .. }",
    "        | State::Union { .. }",
    "        | State::BinaryUnion { .. }",
    "        | State::Capture { .. } => true,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 0,
    "min_set": 9
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches State::Match { .. }",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        },
        {
          "cond": "*self matches State::Dense { .. } or State::Sparse { .. } or State::ByteRange { .. } or State::Match { .. } or State::Fail",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        2,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        },
        {
          "cond": "*self matches State::Dense { .. } or State::Sparse { .. } or State::ByteRange { .. } or State::Match { .. } or State::Fail",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        2,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches State::Capture { .. }",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches State::BinaryUnion { .. }",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self matches State::Union { .. }",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self matches State::Look { .. }",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*self matches State::Dense { .. }",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        },
        {
          "cond": "*self matches State::Dense { .. } or State::Sparse { .. } or State::ByteRange { .. } or State::Match { .. } or State::Fail",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        2,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*self matches State::Sparse { .. }",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        },
        {
          "cond": "*self matches State::Dense { .. } or State::Sparse { .. } or State::ByteRange { .. } or State::Match { .. } or State::Fail",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        2,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*self matches State::ByteRange { .. }",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        },
        {
          "cond": "*self matches State::Dense { .. } or State::Sparse { .. } or State::ByteRange { .. } or State::Match { .. } or State::Fail",
          "norm": null,
          "value": "true",
          "line": 1656,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        2,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}