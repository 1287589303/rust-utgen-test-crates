{
  "name": "regex_automata::util::lazy::lazy::{impl#1}::new",
  "mod_info": {
    "name": "util::lazy::lazy",
    "loc": "regex-automata/src/util/lazy.rs:98:1:223:2"
  },
  "visible": false,
  "loc": "regex-automata/src/util/lazy.rs:150:9:156:10",
  "doc": "/// Create a new alloc but non-std lazy value that is racily\n/// initialized. That is, the 'create' function may be called more than\n/// once.\n",
  "code": [
    "pub(super) const fn new(create: F) -> Lazy<T, F> {",
    "    Lazy {",
    "        data: AtomicPtr::new(core::ptr::null_mut()),",
    "        create,",
    "        owned: PhantomData,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Lazy {\n                data: AtomicPtr::new(core::ptr::null_mut()),\n                create,\n                owned: PhantomData,\n            }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}