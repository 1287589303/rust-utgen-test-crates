{
  "name": "regex_automata::dfa::onepass::{impl#2}::compile_transition",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:767:5:796:6",
  "doc": "/// Compile the given NFA transition into the DFA state given.\n///\n/// 'Epsilons' corresponds to any conditional epsilon transitions that need\n/// to be satisfied to follow this transition, and any slots that need to\n/// be saved if the transition is followed.\n///\n/// If this transition indicates that the NFA is not one-pass, then\n/// this returns an error. (This occurs, for example, if the DFA state\n/// already has a transition defined for the same input symbols as the\n/// given transition, *and* the result of the old and new transitions is\n/// different.)\n",
  "code": [
    "fn compile_transition(",
    "    &mut self,",
    "    dfa_id: StateID,",
    "    trans: &thompson::Transition,",
    "    epsilons: Epsilons,",
    ") -> Result<(), BuildError> {",
    "    let next_dfa_id = self.add_dfa_state_for_nfa_state(trans.next)?;",
    "    for byte in self",
    "        .classes",
    "        .representatives(trans.start..=trans.end)",
    "        .filter_map(|r| r.as_u8())",
    "    {",
    "        let oldtrans = self.dfa.transition(dfa_id, byte);",
    "        let newtrans =",
    "            Transition::new(self.matched, next_dfa_id, epsilons);",
    "        // If the old transition points to the DEAD state, then we know",
    "        // 'byte' has not been mapped to any transition for this DFA state",
    "        // yet. So set it unconditionally. Otherwise, we require that the",
    "        // old and new transitions are equivalent. Otherwise, there is",
    "        // ambiguity and thus the regex is not one-pass.",
    "        if oldtrans.state_id() == DEAD {",
    "            self.dfa.set_transition(dfa_id, byte, newtrans);",
    "        } else if oldtrans != newtrans {",
    "            return Err(BuildError::not_one_pass(",
    "                \"conflicting transition\",",
    "            ));",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 2,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.add_dfa_state_for_nfa_state(trans.next)?",
          "norm": null,
          "value": "Err/None",
          "line": 773,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        33,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.add_dfa_state_for_nfa_state(trans.next)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "byte in self\n            .classes\n            .representatives(trans.start..=trans.end)\n            .filter_map(|r| r.as_u8())",
          "norm": null,
          "value": "true",
          "line": 774,
          "bound": null
        },
        {
          "cond": "oldtrans.state_id() == DEAD",
          "norm": "DEAD == oldtrans.state_id()",
          "value": "true",
          "line": 787,
          "bound": null
        },
        {
          "cond": "byte in self\n            .classes\n            .representatives(trans.start..=trans.end)\n            .filter_map(|r| r.as_u8())",
          "norm": null,
          "value": "false",
          "line": 774,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        32,
        13,
        14,
        15,
        17,
        19,
        36
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.add_dfa_state_for_nfa_state(trans.next)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "byte in self\n            .classes\n            .representatives(trans.start..=trans.end)\n            .filter_map(|r| r.as_u8())",
          "norm": null,
          "value": "true",
          "line": 774,
          "bound": null
        },
        {
          "cond": "oldtrans.state_id() == DEAD",
          "norm": "DEAD == oldtrans.state_id()",
          "value": "false",
          "line": 787,
          "bound": null
        },
        {
          "cond": "oldtrans != newtrans",
          "norm": "newtrans != oldtrans",
          "value": "true",
          "line": 789,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::not_one_pass(\n                    \"conflicting transition\",\n                ))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        18,
        20,
        21,
        22,
        23,
        26,
        27,
        28,
        29,
        30,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.add_dfa_state_for_nfa_state(trans.next)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "byte in self\n            .classes\n            .representatives(trans.start..=trans.end)\n            .filter_map(|r| r.as_u8())",
          "norm": null,
          "value": "true",
          "line": 774,
          "bound": null
        },
        {
          "cond": "oldtrans.state_id() == DEAD",
          "norm": "DEAD == oldtrans.state_id()",
          "value": "false",
          "line": 787,
          "bound": null
        },
        {
          "cond": "oldtrans != newtrans",
          "norm": "newtrans != oldtrans",
          "value": "false",
          "line": 789,
          "bound": null
        },
        {
          "cond": "byte in self\n            .classes\n            .representatives(trans.start..=trans.end)\n            .filter_map(|r| r.as_u8())",
          "norm": null,
          "value": "false",
          "line": 774,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        18,
        20,
        21,
        22,
        23,
        26,
        27,
        31,
        32,
        13,
        14,
        15,
        17,
        19,
        36
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.add_dfa_state_for_nfa_state(trans.next)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "byte in self\n            .classes\n            .representatives(trans.start..=trans.end)\n            .filter_map(|r| r.as_u8())",
          "norm": null,
          "value": "false",
          "line": 774,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        19,
        36
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}