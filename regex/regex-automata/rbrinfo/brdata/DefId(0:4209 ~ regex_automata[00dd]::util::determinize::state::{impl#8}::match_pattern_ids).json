{
  "name": "regex_automata::util::determinize::state::{impl#8}::match_pattern_ids",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/util/determinize/state.rs:489:5:496:6",
  "doc": "/// Returns a copy of all match pattern IDs in this state. If this state\n/// is not a match state, then this returns None.\n",
  "code": [
    "fn match_pattern_ids(&self) -> Option<Vec<PatternID>> {",
    "    if !self.is_match() {",
    "        return None;",
    "    }",
    "    let mut pids = alloc::vec![];",
    "    self.iter_match_pattern_ids(|pid| pids.push(pid));",
    "    Some(pids)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_match()",
          "norm": null,
          "value": "true",
          "line": 490,
          "bound": null
        }
      ],
      "ret": "Some(pids)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_match()",
          "norm": null,
          "value": "false",
          "line": 490,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}