{
  "name": "regex_automata::nfa::thompson::map::{impl#1}::new",
  "mod_info": {
    "name": "nfa::thompson::map",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:65:1:65:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/map.rs:233:5:236:6",
  "doc": "/// Create a new bounded map with the given capacity. The map will never\n/// grow beyond the given size.\n///\n/// Note that this does not allocate. Instead, callers must call `clear`\n/// before using this map. `clear` will allocate space if necessary.\n///\n/// This avoids the need to pay for the allocation of this map when\n/// compiling regexes that lack large Unicode character classes.\n",
  "code": [
    "pub fn new(capacity: usize) -> Utf8SuffixMap {",
    "    assert!(capacity > 0);",
    "    Utf8SuffixMap { version: 0, capacity, map: vec![] }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "capacity > 0",
          "norm": "0 < capacity",
          "value": "true",
          "line": 234,
          "bound": null
        }
      ],
      "ret": "Utf8SuffixMap { version: 0, capacity, map: vec![] }",
      "path": [
        0,
        1,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "capacity > 0",
          "norm": "0 < capacity",
          "value": "false",
          "line": 234,
          "bound": "capacity == 0"
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}