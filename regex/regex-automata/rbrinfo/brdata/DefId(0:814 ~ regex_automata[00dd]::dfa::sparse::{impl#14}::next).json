{
  "name": "regex_automata::dfa::sparse::{impl#14}::next",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/sparse.rs:2176:5:2201:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<(StateID, Anchored, Start)> {",
    "    let i = self.i;",
    "    if i >= self.st.len() {",
    "        return None;",
    "    }",
    "    self.i += 1;",
    "",
    "    // This unwrap is okay since the stride of any DFA must always match",
    "    // the number of start state types.",
    "    let start_type = Start::from_usize(i % self.st.stride).unwrap();",
    "    let anchored = if i < self.st.stride {",
    "        Anchored::No",
    "    } else if i < (2 * self.st.stride) {",
    "        Anchored::Yes",
    "    } else {",
    "        let pid = (i - (2 * self.st.stride)) / self.st.stride;",
    "        Anchored::Pattern(PatternID::new(pid).unwrap())",
    "    };",
    "    let start = i * StateID::SIZE;",
    "    let end = start + StateID::SIZE;",
    "    let bytes = self.st.table()[start..end].try_into().unwrap();",
    "    // This is OK since we're allowed to assume that any IDs in this start",
    "    // table are correct and valid for this DFA.",
    "    let id = StateID::from_ne_bytes_unchecked(bytes);",
    "    Some((id, anchored, start_type))",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "i >= self.st.len()",
          "norm": null,
          "value": "true",
          "line": 2178,
          "bound": "i == self.st.len()"
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "i >= self.st.len()",
          "norm": null,
          "value": "false",
          "line": 2178,
          "bound": null
        },
        {
          "cond": "i < self.st.stride",
          "norm": null,
          "value": "true",
          "line": 2186,
          "bound": null
        }
      ],
      "ret": "Some((id, anchored, start_type))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "i >= self.st.len()",
          "norm": null,
          "value": "false",
          "line": 2178,
          "bound": null
        },
        {
          "cond": "i < self.st.stride",
          "norm": null,
          "value": "false",
          "line": 2186,
          "bound": "i == self.st.stride"
        },
        {
          "cond": "i < (2 * self.st.stride)",
          "norm": "(2 * self.st.stride) > i",
          "value": "true",
          "line": 2188,
          "bound": null
        }
      ],
      "ret": "Some((id, anchored, start_type))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        11,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "i >= self.st.len()",
          "norm": null,
          "value": "false",
          "line": 2178,
          "bound": null
        },
        {
          "cond": "i < self.st.stride",
          "norm": null,
          "value": "false",
          "line": 2186,
          "bound": "i == self.st.stride"
        },
        {
          "cond": "i < (2 * self.st.stride)",
          "norm": "(2 * self.st.stride) > i",
          "value": "false",
          "line": 2188,
          "bound": "i == (2 * self.st.stride)"
        }
      ],
      "ret": "Some((id, anchored, start_type))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}