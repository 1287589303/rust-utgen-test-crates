{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::start_pattern",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:545:5:547:6",
  "doc": "/// Return the state identifier of the initial anchored state for the given\n/// pattern, or `None` if there is no pattern corresponding to the given\n/// identifier.\n///\n/// If one uses the starting state for a particular pattern, then the only\n/// match that can be returned is for the corresponding pattern.\n///\n/// The returned identifier is guaranteed to be a valid index into the\n/// slice returned by [`NFA::states`], and is also a valid argument to\n/// [`NFA::state`].\n///\n/// # Errors\n///\n/// If the pattern doesn't exist in this NFA, then this returns an error.\n/// This occurs when `pid.as_usize() >= nfa.pattern_len()`.\n///\n/// # Example\n///\n/// This example shows that the anchored and unanchored starting states\n/// are equivalent when an anchored NFA is built.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, PatternID};\n///\n/// let nfa = NFA::new_many(&[\"^a\", \"^b\"])?;\n/// // The anchored and unanchored states for the entire NFA are the same,\n/// // since all of the patterns are anchored.\n/// assert_eq!(nfa.start_anchored(), nfa.start_unanchored());\n/// // But the anchored starting states for each pattern are distinct,\n/// // because these starting states can only lead to matches for the\n/// // corresponding pattern.\n/// let anchored = Some(nfa.start_anchored());\n/// assert_ne!(anchored, nfa.start_pattern(PatternID::must(0)));\n/// assert_ne!(anchored, nfa.start_pattern(PatternID::must(1)));\n/// // Requesting a pattern not in the NFA will result in None:\n/// assert_eq!(None, nfa.start_pattern(PatternID::must(2)));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn start_pattern(&self, pid: PatternID) -> Option<StateID> {",
    "    self.0.start_pattern.get(pid.as_usize()).copied()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}