{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#3}::is_match",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:767:5:774:6",
  "doc": "/// Returns true if and only if this `PikeVM` matches the given haystack.\n///\n/// This routine may short circuit if it knows that scanning future\n/// input will never lead to a different result. In particular, if the\n/// underlying NFA enters a match state, then this routine will return\n/// `true` immediately without inspecting any future input. (Consider how\n/// this might make a difference given the regex `a+` on the haystack\n/// `aaaaaaaaaaaaaaa`. This routine can stop after it sees the first `a`,\n/// but routines like `find` need to continue searching because `+` is\n/// greedy by default.)\n///\n/// # Example\n///\n/// This shows basic usage:\n///\n/// ```\n/// use regex_automata::nfa::thompson::pikevm::PikeVM;\n///\n/// let re = PikeVM::new(\"foo[0-9]+bar\")?;\n/// let mut cache = re.create_cache();\n///\n/// assert!(re.is_match(&mut cache, \"foo12345bar\"));\n/// assert!(!re.is_match(&mut cache, \"foobar\"));\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// # Example: consistency with search APIs\n///\n/// `is_match` is guaranteed to return `true` whenever `find` returns a\n/// match. This includes searches that are executed entirely within a\n/// codepoint:\n///\n/// ```\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, Input};\n///\n/// let re = PikeVM::new(\"a*\")?;\n/// let mut cache = re.create_cache();\n///\n/// assert!(!re.is_match(&mut cache, Input::new(\"☃\").span(1..2)));\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Notice that when UTF-8 mode is disabled, then the above reports a\n/// match because the restriction against zero-width matches that split a\n/// codepoint has been lifted:\n///\n/// ```\n/// use regex_automata::{nfa::thompson::{pikevm::PikeVM, NFA}, Input};\n///\n/// let re = PikeVM::builder()\n///     .thompson(NFA::config().utf8(false))\n///     .build(\"a*\")?;\n/// let mut cache = re.create_cache();\n///\n/// assert!(re.is_match(&mut cache, Input::new(\"☃\").span(1..2)));\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn is_match<'h, I: Into<Input<'h>>>(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: I,",
    ") -> bool {",
    "    let input = input.into().earliest(true);",
    "    self.search_slots(cache, &input, &mut []).is_some()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}