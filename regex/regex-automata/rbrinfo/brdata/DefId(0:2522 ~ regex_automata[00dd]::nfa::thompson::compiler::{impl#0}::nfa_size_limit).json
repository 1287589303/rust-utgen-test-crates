{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::nfa_size_limit",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:248:5:251:6",
  "doc": "/// Sets an approximate size limit on the total heap used by the NFA being\n/// compiled.\n///\n/// This permits imposing constraints on the size of a compiled NFA. This\n/// may be useful in contexts where the regex pattern is untrusted and one\n/// wants to avoid using too much memory.\n///\n/// This size limit does not apply to auxiliary heap used during\n/// compilation that is not part of the built NFA.\n///\n/// Note that this size limit is applied during compilation in order for\n/// the limit to prevent too much heap from being used. However, the\n/// implementation may use an intermediate NFA representation that is\n/// otherwise slightly bigger than the final public form. Since the size\n/// limit may be applied to an intermediate representation, there is not\n/// necessarily a precise correspondence between the configured size limit\n/// and the heap usage of the final NFA.\n///\n/// There is no size limit by default.\n///\n/// # Example\n///\n/// This example demonstrates how Unicode mode can greatly increase the\n/// size of the NFA.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::nfa::thompson::NFA;\n///\n/// // 400KB isn't enough!\n/// NFA::compiler()\n///     .configure(NFA::config().nfa_size_limit(Some(400_000)))\n///     .build(r\"\\w{20}\")\n///     .unwrap_err();\n///\n/// // ... but 500KB probably is.\n/// let nfa = NFA::compiler()\n///     .configure(NFA::config().nfa_size_limit(Some(500_000)))\n///     .build(r\"\\w{20}\")?;\n///\n/// assert_eq!(nfa.pattern_len(), 1);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn nfa_size_limit(mut self, bytes: Option<usize>) -> Config {",
    "    self.nfa_size_limit = Some(bytes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}