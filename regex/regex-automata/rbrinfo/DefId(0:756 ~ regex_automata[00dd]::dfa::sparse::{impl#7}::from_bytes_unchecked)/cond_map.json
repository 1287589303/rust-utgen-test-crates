{
  "regex-automata/src/dfa/sparse.rs:1317:13:1317:78": [
    {
      "Try": "wire::try_read_u32_as_usize(&slice, \"sparse transitions length\")?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1320:9:1320:72": [
    {
      "Try": "wire::check_slice_len(slice, len, \"sparse states byte length\")?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1325:20:1325:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "slice.as_ptr().as_usize() - slice_start",
          "lhs": "slice.as_ptr().as_usize()",
          "rhs": "slice_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1313:29:1313:61": [
    {
      "Try": "ByteClasses::from_bytes(&slice)?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1310:13:1310:67": [
    {
      "Try": "wire::try_read_u32_as_usize(&slice, \"pattern length\")?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1306:13:1306:65": [
    {
      "Try": "wire::try_read_u32_as_usize(&slice, \"state length\")?"
    }
  ]
}