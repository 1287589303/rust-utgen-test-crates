bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1140:13-1140:18)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1140:21-1140:36)
  2: _5 = &(((*_1).0: dfa::sparse::Transitions<T>).1: util::alphabet::ByteClasses)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1140:21-1140:36)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1140:41-1140:46)
  4: _6 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1140:41-1140:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1140:21-1140:47)
      kind: _4 = util::alphabet::ByteClasses::get(move _5, move _6) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1140:46-1140:47)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1140:46-1140:47)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1140:13-1140:18)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:9-1141:31)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:9-1141:31)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:9-1141:16)
  6: _9 = &((*_1).0: dfa::sparse::Transitions<T>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:9-1141:16)
  7: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:23-1141:30)
  8: _10 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:23-1141:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1141:9-1141:31)
      kind: _8 = dfa::sparse::Transitions::<T>::state(move _9, move _10) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: _7 = &_8
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:9-1141:31)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:30-1141:31)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:30-1141:31)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:37-1141:42)
  4: _11 = _4
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:37-1141:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1141:9-1141:43)
      kind: _0 = dfa::sparse::State::<'_>::next(move _7, move _11) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:42-1141:43)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1141:42-1141:43)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1142:5-1142:6)
  3: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1142:5-1142:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1142:6-1142:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1139:5-1142:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

