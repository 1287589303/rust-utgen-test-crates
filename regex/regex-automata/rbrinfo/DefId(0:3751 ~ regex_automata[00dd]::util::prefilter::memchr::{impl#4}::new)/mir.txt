bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:140:13-142:14)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:140:16-140:34)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:140:16-140:29)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:140:16-140:23)
  4: _6 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:140:16-140:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:140:16-140:29)
      kind: _5 = core::slice::<impl [B]>::len(move _6) -> [return: bb1, unwind: bb18]
  }
  preds []
  succs [bb1, bb18]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:140:28-140:29)
  1: _4 = Ne(move _5, const 3_usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:140:16-140:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:140:16-140:34)
      kind: switchInt(move _4) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:140:33-140:34)
  1: _0 = core::option::Option::<util::prefilter::memchr::Memchr3>::None
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:141:24-141:28)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:142:13-142:14)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:142:13-142:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb17
  }
  preds [bb1]
  succs [bb17]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:140:33-140:34)
  1: _3 = const ()
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:142:14-142:14)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:142:13-142:14)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:142:13-142:14)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:13-145:14)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:17-143:62)
  6: StorageLive(_10)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:17-143:31)
  7: StorageLive(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:17-143:31)
  8: StorageLive(_12)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:17-143:24)
  9: _12 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:17-143:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:17-143:31)
      kind: _11 = core::slice::<impl [B]>::iter(move _12) -> [return: bb4, unwind: bb18]
  }
  preds [bb1]
  succs [bb4, bb18]

bb4
  0: _10 = &mut _11
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:17-143:31)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:30-143:31)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:36-143:61)
  3: _13 = {closure@regex-automata/src/util/prefilter/memchr.rs:143:36: 143:39}
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:36-143:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:17-143:62)
      kind: _9 = <core::slice::Iter<'_, B> as core::iter::Iterator>::all::<{closure@regex-automata/src/util/prefilter/memchr.rs:143:36: 143:39}>(move _10, move _13) -> [return: bb5, unwind: bb18]
  }
  preds [bb3]
  succs [bb5, bb18]

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:17-143:62)
      kind: switchInt(move _9) -> [0: bb7, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:61-143:62)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:61-143:62)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:61-143:62)
  3: _8 = const ()
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:145:14-145:14)
  4: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:145:13-145:14)
  5: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:145:13-145:14)
  6: StorageLive(_15)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:17-146:19)
  7: StorageLive(_16)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:22-146:41)
  8: StorageLive(_17)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:22-146:32)
  9: StorageLive(_18)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:30-146:31)
  10: _18 = const 0_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:30-146:31)
  11: _19 = Len((*_2))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:22-146:32)
  12: _20 = Lt(_18, _19)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:22-146:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:22-146:32)
      kind: assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb8, unwind: bb18]
  }
  preds [bb5]
  succs [bb8, bb18]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:61-143:62)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:61-143:62)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:143:61-143:62)
  3: _0 = core::option::Option::<util::prefilter::memchr::Memchr3>::None
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:144:24-144:28)
  4: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:145:13-145:14)
  5: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:145:13-145:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb17
  }
  preds [bb5]
  succs [bb17]

bb8
  0: _17 = &(*_2)[_18]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:22-146:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:22-146:41)
      kind: _16 = <B as core::convert::AsRef<[u8]>>::as_ref(move _17) -> [return: bb9, unwind: bb18]
  }
  preds [bb6]
  succs [bb9, bb18]

bb9
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:40-146:41)
  1: StorageLive(_21)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:42-146:43)
  2: _21 = const 0_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:42-146:43)
  3: _22 = Len((*_16))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:22-146:44)
  4: _23 = Lt(_21, _22)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:22-146:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:22-146:44)
      kind: assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> [success: bb10, unwind: bb18]
  }
  preds [bb8]
  succs [bb10, bb18]

bb10
  0: _15 = (*_16)[_21]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:22-146:44)
  1: FakeRead(ForLet(None), _15)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:17-146:19)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:44-146:45)
  3: StorageDead(_18)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:44-146:45)
  4: StorageDead(_16)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:146:44-146:45)
  5: StorageLive(_24)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:17-147:19)
  6: StorageLive(_25)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:22-147:41)
  7: StorageLive(_26)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:22-147:32)
  8: StorageLive(_27)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:30-147:31)
  9: _27 = const 1_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:30-147:31)
  10: _28 = Len((*_2))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:22-147:32)
  11: _29 = Lt(_27, _28)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:22-147:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:22-147:32)
      kind: assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb11, unwind: bb18]
  }
  preds [bb9]
  succs [bb11, bb18]

bb11
  0: _26 = &(*_2)[_27]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:22-147:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:22-147:41)
      kind: _25 = <B as core::convert::AsRef<[u8]>>::as_ref(move _26) -> [return: bb12, unwind: bb18]
  }
  preds [bb10]
  succs [bb12, bb18]

bb12
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:40-147:41)
  1: StorageLive(_30)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:42-147:43)
  2: _30 = const 0_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:42-147:43)
  3: _31 = Len((*_25))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:22-147:44)
  4: _32 = Lt(_30, _31)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:22-147:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:22-147:44)
      kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb13, unwind: bb18]
  }
  preds [bb11]
  succs [bb13, bb18]

bb13
  0: _24 = (*_25)[_30]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:22-147:44)
  1: FakeRead(ForLet(None), _24)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:17-147:19)
  2: StorageDead(_30)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:44-147:45)
  3: StorageDead(_27)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:44-147:45)
  4: StorageDead(_25)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:147:44-147:45)
  5: StorageLive(_33)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:17-148:19)
  6: StorageLive(_34)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:22-148:41)
  7: StorageLive(_35)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:22-148:32)
  8: StorageLive(_36)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:30-148:31)
  9: _36 = const 2_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:30-148:31)
  10: _37 = Len((*_2))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:22-148:32)
  11: _38 = Lt(_36, _37)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:22-148:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:22-148:32)
      kind: assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> [success: bb14, unwind: bb18]
  }
  preds [bb12]
  succs [bb14, bb18]

bb14
  0: _35 = &(*_2)[_36]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:22-148:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:22-148:41)
      kind: _34 = <B as core::convert::AsRef<[u8]>>::as_ref(move _35) -> [return: bb15, unwind: bb18]
  }
  preds [bb13]
  succs [bb15, bb18]

bb15
  0: StorageDead(_35)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:40-148:41)
  1: StorageLive(_39)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:42-148:43)
  2: _39 = const 0_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:42-148:43)
  3: _40 = Len((*_34))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:22-148:44)
  4: _41 = Lt(_39, _40)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:22-148:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:22-148:44)
      kind: assert(move _41, "index out of bounds: the length is {} but the index is {}", move _40, _39) -> [success: bb16, unwind: bb18]
  }
  preds [bb14]
  succs [bb16, bb18]

bb16
  0: _33 = (*_34)[_39]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:22-148:44)
  1: FakeRead(ForLet(None), _33)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:17-148:19)
  2: StorageDead(_39)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:44-148:45)
  3: StorageDead(_36)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:44-148:45)
  4: StorageDead(_34)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:148:44-148:45)
  5: StorageLive(_42)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:18-149:37)
  6: StorageLive(_43)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:26-149:28)
  7: _43 = _15
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:26-149:28)
  8: StorageLive(_44)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:30-149:32)
  9: _44 = _24
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:30-149:32)
  10: StorageLive(_45)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:34-149:36)
  11: _45 = _33
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:34-149:36)
  12: _42 = util::prefilter::memchr::Memchr3(move _43, move _44, move _45)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:18-149:37)
  13: StorageDead(_45)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:36-149:37)
  14: StorageDead(_44)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:36-149:37)
  15: StorageDead(_43)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:36-149:37)
  16: _0 = core::option::Option::<util::prefilter::memchr::Memchr3>::Some(move _42)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:13-149:38)
  17: StorageDead(_42)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:149:37-149:38)
  18: StorageDead(_33)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:150:9-150:10)
  19: StorageDead(_24)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:150:9-150:10)
  20: StorageDead(_15)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:150:9-150:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:151:6-151:6)
      kind: goto -> bb17
  }
  preds [bb15]
  succs [bb17]

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:151:6-151:6)
      kind: return
  }
  preds [bb2, bb7, bb16]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:130:5-151:6)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb6, bb8, bb9, bb10, bb11, bb12, bb13, bb14, bb15]
  succs []

