bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1952:69)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1952:54)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1952:28)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1952:21)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1952:21)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1952:13)
  6: _7 = &(*_1)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1952:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1952:21)
      kind: _6 = meta::regex::RegexInfo::props(move _7) -> [return: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: _5 = &(*_6)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1952:21)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:20-1952:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1952:28)
      kind: _4 = core::slice::<impl [regex_syntax::hir::Properties]>::iter(move _5) -> [return: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:27-1952:28)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:33-1952:53)
  2: _8 = {closure@regex-automata/src/meta/regex.rs:1952:33: 1952:36}
    SourceInfo(regex-automata/src/meta/regex.rs:1952:33-1952:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1952:54)
      kind: _3 = <core::slice::Iter<'_, regex_syntax::hir::Properties> as core::iter::Iterator>::map::<usize, {closure@regex-automata/src/meta/regex.rs:1952:33: 1952:36}>(move _4, move _8) -> [return: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:53-1952:54)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:53-1952:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1952:69)
      kind: _2 = <core::iter::Map<core::slice::Iter<'_, regex_syntax::hir::Properties>, {closure@regex-automata/src/meta/regex.rs:1952:33: 1952:36}> as core::iter::Iterator>::sum::<usize>(move _3) -> [return: bb4, unwind: bb8]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:68-1952:69)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/regex.rs:1953:15-1953:48)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/regex.rs:1953:15-1953:33)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/regex.rs:1953:15-1953:33)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/regex.rs:1953:15-1953:19)
  5: _12 = &(*_1)
    SourceInfo(regex-automata/src/meta/regex.rs:1953:15-1953:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1953:15-1953:33)
      kind: _11 = meta::regex::RegexInfo::props_union(move _12) -> [return: bb5, unwind: bb8]
  }
  preds [bb3]
  succs [bb5, bb8]

bb5
  0: _10 = &(*_11)
    SourceInfo(regex-automata/src/meta/regex.rs:1953:15-1953:33)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/regex.rs:1953:32-1953:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1953:15-1953:48)
      kind: _9 = regex_syntax::hir::Properties::memory_usage(move _10) -> [return: bb6, unwind: bb8]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/regex.rs:1953:47-1953:48)
  1: _13 = AddWithOverflow(_2, _9)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1953:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1953:48)
      kind: assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _9) -> [success: bb7, unwind: bb8]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: _0 = move (_13.0: usize)
    SourceInfo(regex-automata/src/meta/regex.rs:1952:9-1953:48)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/regex.rs:1953:47-1953:48)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/meta/regex.rs:1953:47-1953:48)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/regex.rs:1954:5-1954:6)
  4: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/regex.rs:1954:5-1954:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1954:6-1954:6)
      kind: return
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1951:5-1954:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6]
  succs []

