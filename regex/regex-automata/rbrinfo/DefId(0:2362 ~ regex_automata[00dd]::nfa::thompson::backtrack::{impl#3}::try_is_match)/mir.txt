bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:904:13-904:18)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:904:21-904:33)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:904:21-904:26)
  3: _6 = move _3
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:904:21-904:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:904:21-904:33)
      kind: _5 = <I as core::convert::Into<util::search::Input<'_>>>::into(move _6) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:904:32-904:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:904:21-904:48)
      kind: _4 = util::search::Input::<'_>::earliest(move _5, const true) -> [return: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:904:47-904:48)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:904:13-904:18)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:9-905:54)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:9-905:13)
  4: _8 = &(*_1)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:9-905:13)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:31-905:36)
  6: _9 = &mut (*_2)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:31-905:36)
  7: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:38-905:44)
  8: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:38-905:44)
  9: _11 = &_4
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:38-905:44)
  10: _10 = &(*_11)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:38-905:44)
  11: StorageLive(_12)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:46-905:53)
  12: StorageLive(_13)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:46-905:53)
  13: StorageLive(_14)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:46-905:53)
  14: StorageLive(_15)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:51-905:53)
  15: _15 = []
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:51-905:53)
  16: _14 = &mut _15
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:46-905:53)
  17: _13 = &mut (*_14)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:46-905:53)
  18: _12 = move _13 as &mut [core::option::Option<util::primitives::NonMaxUsize>] (PointerCoercion(Unsize))
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:46-905:53)
  19: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:52-905:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:9-905:54)
      kind: _7 = nfa::thompson::backtrack::BoundedBacktracker::try_search_slots(move _8, move _9, move _10, move _12) -> [return: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:53-905:54)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:53-905:54)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:53-905:54)
  3: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:53-905:54)
  4: StorageLive(_16)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:59-905:78)
  5: _16 = {closure@regex-automata/src/nfa/thompson/backtrack.rs:905:59: 905:64}
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:59-905:78)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:9-905:79)
      kind: _0 = core::result::Result::<core::option::Option<util::primitives::PatternID>, util::search::MatchError>::map::<bool, {closure@regex-automata/src/nfa/thompson/backtrack.rs:905:59: 905:64}>(move _7, move _16) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:78-905:79)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:78-905:79)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:906:5-906:6)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:906:5-906:6)
  4: StorageDead(_14)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:906:5-906:6)
  5: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:906:5-906:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:906:5-906:6)
      kind: drop(_3) -> [return: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:906:6-906:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:905:78-905:79)
      kind: drop(_7) -> [return: bb8, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb8]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:904:32-904:33)
      kind: drop(_6) -> [return: bb8, unwind terminate(cleanup)]
  }
  preds [bb0]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:906:5-906:6)
      kind: drop(_3) -> [return: bb9, unwind terminate(cleanup)]
  }
  preds [bb1, bb2, bb6, bb7]
  succs [bb9]

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:899:5-906:6)
      kind: resume
  }
  preds [bb4, bb8]
  succs []

