{
  "regex-automata/src/dfa/onepass.rs:599:12:599:68": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "lhs": "self.nfa.group_info().explicit_slot_len()",
          "rhs": "Slots::LIMIT",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:611:12:611:53": [
    {
      "Bool": {
        "Other": "self.config.get_starts_for_each_pattern()"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:610:9:610:63": [
    {
      "Try": "self.add_start_state(None, self.nfa.start_anchored())?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:640:23:640:42": [
    {
      "Match": {
        "match_source": "regex-automata/src/dfa/onepass.rs:640:23:640:42",
        "match_str": "*self.nfa.state(id)",
        "match_kind": {
          "Enum": [
            "ByteRange",
            "Sparse",
            "Dense",
            "Look",
            "Union",
            "BinaryUnion",
            "Capture",
            "Fail",
            "Match"
          ]
        },
        "arms": {
          "regex-automata/src/dfa/onepass.rs:658:21:658:62": {
            "pat": {
              "pat_str": "thompson::State::Union { ref alternates }",
              "kind": {
                "Enum": 4
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/onepass.rs:658:66:662:22"
          },
          "regex-automata/src/dfa/onepass.rs:641:21:641:61": {
            "pat": {
              "pat_str": "thompson::State::ByteRange { ref trans }",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/onepass.rs:641:65:643:22"
          },
          "regex-automata/src/dfa/onepass.rs:654:21:654:57": {
            "pat": {
              "pat_str": "thompson::State::Look { look, next }",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/onepass.rs:654:61:657:22"
          },
          "regex-automata/src/dfa/onepass.rs:649:21:649:54": {
            "pat": {
              "pat_str": "thompson::State::Dense(ref dense)",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/onepass.rs:649:58:653:22"
          },
          "regex-automata/src/dfa/onepass.rs:687:21:687:58": {
            "pat": {
              "pat_str": "thompson::State::Match { pattern_id }",
              "kind": {
                "Enum": 8
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/onepass.rs:687:62:720:22"
          },
          "regex-automata/src/dfa/onepass.rs:667:21:667:64": {
            "pat": {
              "pat_str": "thompson::State::Capture { next, slot, .. }",
              "kind": {
                "Enum": 6
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/onepass.rs:667:68:683:22"
          },
          "regex-automata/src/dfa/onepass.rs:684:21:684:42": {
            "pat": {
              "pat_str": "thompson::State::Fail",
              "kind": {
                "Enum": 7
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/onepass.rs:684:46:686:22"
          },
          "regex-automata/src/dfa/onepass.rs:644:21:644:56": {
            "pat": {
              "pat_str": "thompson::State::Sparse(ref sparse)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/onepass.rs:644:60:648:22"
          },
          "regex-automata/src/dfa/onepass.rs:663:21:663:64": {
            "pat": {
              "pat_str": "thompson::State::BinaryUnion { alt1, alt2 }",
              "kind": {
                "Enum": 5
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/onepass.rs:663:68:666:22"
          }
        }
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:669:43:669:69": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "slot < explicit_slot_start",
          "lhs": "slot",
          "rhs": "explicit_slot_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:665:25:665:57": [
    {
      "Try": "self.stack_push(alt1, epsilons)?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:660:29:660:60": [
    {
      "Try": "self.stack_push(sid, epsilons)?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:664:25:664:57": [
    {
      "Try": "self.stack_push(alt2, epsilons)?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:638:13:638:56": [
    {
      "Try": "self.stack_push(nfa_id, Epsilons::empty())?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:650:38:650:50": [
    {
      "For": {
        "iter_var": "trans",
        "iter_range": "dense.iter()"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:645:38:645:63": [
    {
      "For": {
        "iter_var": "trans",
        "iter_range": "sparse.transitions.iter()"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:593:12:593:79": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "lhs": "self.nfa.pattern_len().as_u64()",
          "rhs": "PatternEpsilons::PATTERN_ID_LIMIT",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:613:17:616:19": [
    {
      "Try": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:589:16:589:66": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "lhs": "look.as_repr()",
          "rhs": "Look::WordUnicodeNegate.as_repr()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:582:9:582:71": [
    {
      "Try": "self.nfa.look_set_any().available().map_err(BuildError::word)?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:679:42:679:68": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "slot - explicit_slot_start",
          "lhs": "slot",
          "rhs": "explicit_slot_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:656:25:656:74": [
    {
      "Try": "self.stack_push(next, epsilons.set_looks(looks))?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:604:26:604:49": [
    {
      "Try": "self.add_empty_state()?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:609:35:609:61": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.nfa.pattern_len() * 2",
          "lhs": "self.nfa.pattern_len()",
          "rhs": "2",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:659:37:659:60": [
    {
      "For": {
        "iter_var": "&sid",
        "iter_range": "alternates.iter().rev()"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:682:25:682:57": [
    {
      "Try": "self.stack_push(next, epsilons)?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:625:15:625:63": [
    {
      "Bool": {
        "Other": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:612:24:612:43": [
    {
      "For": {
        "iter_var": "pid",
        "iter_range": "self.nfa.patterns()"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:642:25:642:74": [
    {
      "Try": "self.compile_transition(dfa_id, trans, epsilons)?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:639:19:639:62": [
    {
      "Bool": {
        "Other": "let Some((id, epsilons)) = self.stack.pop()"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:583:21:583:51": [
    {
      "For": {
        "iter_var": "look",
        "iter_range": "self.nfa.look_set_any().iter()"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:646:29:646:78": [
    {
      "Try": "self.compile_transition(dfa_id, trans, epsilons)?"
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15:38:32": [
    {
      "Match": {
        "match_source": "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15:38:32",
        "match_str": "(&$left, &$right)",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13:39:34": {
            "pat": {
              "pat_str": "(left_val, right_val)",
              "kind": {
                "StructLike": {
                  "1": [
                    null,
                    "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24:39:33"
                  ],
                  "0": [
                    null,
                    "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14:39:22"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": null
          }
        }
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9:48:10": [
    {
      "Match": {
        "match_source": "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15:38:32",
        "match_str": "(&$left, &$right)",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13:39:34": {
            "pat": {
              "pat_str": "(left_val, right_val)",
              "kind": {
                "StructLike": {
                  "1": [
                    null,
                    "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24:39:33"
                  ],
                  "0": [
                    null,
                    "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14:39:22"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": null
          }
        }
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:691:28:691:40": [
    {
      "Bool": {
        "Other": "self.matched"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:651:29:651:79": [
    {
      "Try": "self.compile_transition(dfa_id, &trans, epsilons)?"
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21:40:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "(*left_val == *right_val)",
          "lhs": "*left_val",
          "rhs": "*right_val",
          "cmp_with_int": false
        }
      }
    }
  ]
}