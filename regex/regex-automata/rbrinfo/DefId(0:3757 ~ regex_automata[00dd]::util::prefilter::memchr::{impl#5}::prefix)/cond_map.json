{
  "regex-automata/src/util/prefilter/memchr.rs:172:42:172:53": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.2 == b",
          "lhs": "self.2",
          "rhs": "b",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/prefilter/memchr.rs:172:27:172:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.1 == b",
          "lhs": "self.1",
          "rhs": "b",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/prefilter/memchr.rs:171:18:171:43": [
    {
      "Try": "haystack.get(span.start)?"
    }
  ],
  "regex-automata/src/util/prefilter/memchr.rs:172:12:172:23": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.0 == b",
          "lhs": "self.0",
          "rhs": "b",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/prefilter/memchr.rs:173:49:173:63": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "span.start + 1",
          "lhs": "span.start",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ]
}