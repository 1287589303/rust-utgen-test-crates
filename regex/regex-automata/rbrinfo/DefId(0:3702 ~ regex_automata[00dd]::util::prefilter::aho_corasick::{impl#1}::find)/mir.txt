bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:90:17-90:22)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:17-91:51)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:42-91:50)
  3: _6 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:42-91:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:17-91:51)
      kind: _5 = aho_corasick::Input::<'_>::new::<[u8]>(move _6) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:50-91:51)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:57-91:77)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:57-91:67)
  3: _8 = (_3.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:57-91:67)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:69-91:77)
  5: _9 = (_3.1: usize)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:69-91:77)
  6: _7 = core::ops::Range::<usize> { start: move _8, end: move _9 }
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:57-91:77)
  7: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:76-91:77)
  8: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:76-91:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:17-91:78)
      kind: _4 = aho_corasick::Input::<'_>::span::<core::ops::Range<usize>>(move _5, move _7) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:77-91:78)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:91:77-91:78)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:90:17-90:22)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:92:13-93:29)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:92:13-92:20)
  5: _11 = &((*_1).0: aho_corasick::AhoCorasick)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:92:13-92:20)
  6: StorageLive(_12)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:93:23-93:28)
  7: _12 = move _4
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:93:23-93:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:92:13-93:29)
      kind: _10 = aho_corasick::AhoCorasick::find::<'_, aho_corasick::Input<'_>>(move _11, move _12) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:93:28-93:29)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:93:28-93:29)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:94:22-94:65)
  3: _13 = {closure@regex-automata/src/util/prefilter/aho_corasick.rs:94:22: 94:25}
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:94:22-94:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:92:13-94:66)
      kind: _0 = core::option::Option::<aho_corasick::Match>::map::<util::search::Span, {closure@regex-automata/src/util/prefilter/aho_corasick.rs:94:22: 94:25}>(move _10, move _13) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:94:65-94:66)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:94:65-94:66)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:95:9-95:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:96:6-96:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/aho_corasick.rs:83:5-96:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

