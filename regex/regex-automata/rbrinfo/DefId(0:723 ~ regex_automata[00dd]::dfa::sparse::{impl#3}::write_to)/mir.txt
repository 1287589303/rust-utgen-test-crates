bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:789:13-789:19)
  1: _3 = const 0_usize
    SourceInfo(regex-automata/src/dfa/sparse.rs:789:22-789:23)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:789:13-789:19)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:56)
  4: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:56)
  5: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:55)
  6: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:33-790:38)
  7: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:33-790:38)
  8: _8 = const dfa::sparse::LABEL
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:33-790:38)
  9: _7 = &(*_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:33-790:38)
  10: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:40-790:54)
  11: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:40-790:54)
  12: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:48-790:54)
  13: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:45-790:48)
  14: _12 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:45-790:48)
  15: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:49-790:53)
  16: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:49-790:51)
  17: _14 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:49-790:51)
  18: _13 = core::ops::RangeFrom::<usize> { start: move _14 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:49-790:53)
  19: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:52-790:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:790:48-790:54)
      kind: _11 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _12, move _13) -> [return: bb1, unwind: bb79]
  }
  preds []
  succs [bb1, bb79]

bb1
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:53-790:54)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:53-790:54)
  2: _10 = &mut (*_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:40-790:54)
  3: _9 = &mut (*_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:40-790:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:55)
      kind: _6 = util::wire::write_label(move _7, move _9) -> [return: bb2, unwind: bb79]
  }
  preds [bb0]
  succs [bb2, bb79]

bb2
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:54-790:55)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:54-790:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:56)
      kind: _5 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::Try>::branch(move _6) -> [return: bb3, unwind: bb79]
  }
  preds [bb1]
  succs [bb3, bb79]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:55-790:56)
  1: PlaceMention(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:56)
  2: _15 = discriminant(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:56)
      kind: switchInt(move _15) -> [0: bb6, 1: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5, bb6]

bb4
  0: FakeRead(ForMatchedPlace(None), _5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:56)
      kind: unreachable
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:790:55-790:56)
      kind: falseEdge -> [real: bb7, imaginary: bb6]
  }
  preds [bb3]
  succs [bb6, bb7]

bb6
  0: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:56)
  1: _19 = ((_5 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:56)
  2: _4 = _19
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:56)
  3: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:55-790:56)
  4: _20 = AddWithOverflow(_3, _4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:9-790:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:790:9-790:56)
      kind: assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _4) -> [success: bb9, unwind: bb79]
  }
  preds [bb3, bb5]
  succs [bb9, bb79]

bb7
  0: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:55-790:56)
  1: _16 = move ((_5 as Break).0: core::result::Result<core::convert::Infallible, util::wire::SerializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:55-790:56)
  2: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:55-790:56)
  3: _18 = move _16
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:55-790:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:790:15-790:56)
      kind: _0 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::SerializeError>>>::from_residual(move _18) -> [return: bb8, unwind: bb79]
  }
  preds [bb5]
  succs [bb8, bb79]

bb8
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:55-790:56)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:55-790:56)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:55-790:56)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:56-790:57)
  4: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:56-790:57)
  5: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:56-790:57)
  6: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:56-790:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb77
  }
  preds [bb7]
  succs [bb77]

bb9
  0: _3 = move (_20.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:9-790:56)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:55-790:56)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:56-790:57)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:56-790:57)
  4: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:56-790:57)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:790:56-790:57)
  6: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:65)
  7: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:65)
  8: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:64)
  9: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:49-791:63)
  10: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:49-791:63)
  11: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:57-791:63)
  12: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:54-791:57)
  13: _27 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:54-791:57)
  14: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:58-791:62)
  15: StorageLive(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:58-791:60)
  16: _29 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:58-791:60)
  17: _28 = core::ops::RangeFrom::<usize> { start: move _29 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:58-791:62)
  18: StorageDead(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:61-791:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:791:57-791:63)
      kind: _26 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _27, move _28) -> [return: bb10, unwind: bb79]
  }
  preds [bb6]
  succs [bb10, bb79]

bb10
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:62-791:63)
  1: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:62-791:63)
  2: _25 = &mut (*_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:49-791:63)
  3: _24 = &mut (*_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:49-791:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:64)
      kind: _23 = util::wire::write_endianness_check::<E>(move _24) -> [return: bb11, unwind: bb79]
  }
  preds [bb9]
  succs [bb11, bb79]

bb11
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:63-791:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:65)
      kind: _22 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::Try>::branch(move _23) -> [return: bb12, unwind: bb79]
  }
  preds [bb10]
  succs [bb12, bb79]

bb12
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:64-791:65)
  1: PlaceMention(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:65)
  2: _30 = discriminant(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:65)
      kind: switchInt(move _30) -> [0: bb15, 1: bb14, otherwise: bb13]
  }
  preds [bb11]
  succs [bb13, bb14, bb15]

bb13
  0: FakeRead(ForMatchedPlace(None), _22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:65)
      kind: unreachable
  }
  preds [bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:791:64-791:65)
      kind: falseEdge -> [real: bb16, imaginary: bb15]
  }
  preds [bb12]
  succs [bb15, bb16]

bb15
  0: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:65)
  1: _34 = ((_22 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:65)
  2: _21 = _34
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:65)
  3: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:64-791:65)
  4: _35 = AddWithOverflow(_3, _21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:9-791:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:791:9-791:65)
      kind: assert(!move (_35.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _21) -> [success: bb18, unwind: bb79]
  }
  preds [bb12, bb14]
  succs [bb18, bb79]

bb16
  0: StorageLive(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:64-791:65)
  1: _31 = move ((_22 as Break).0: core::result::Result<core::convert::Infallible, util::wire::SerializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:64-791:65)
  2: StorageLive(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:64-791:65)
  3: _33 = move _31
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:64-791:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:791:15-791:65)
      kind: _0 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::SerializeError>>>::from_residual(move _33) -> [return: bb17, unwind: bb79]
  }
  preds [bb14]
  succs [bb17, bb79]

bb17
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:64-791:65)
  1: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:64-791:65)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:64-791:65)
  3: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:65-791:66)
  4: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:65-791:66)
  5: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:65-791:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb77
  }
  preds [bb16]
  succs [bb77]

bb18
  0: _3 = move (_35.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:9-791:65)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:64-791:65)
  2: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:65-791:66)
  3: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:65-791:66)
  4: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:791:65-791:66)
  5: StorageLive(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:65)
  6: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:65)
  7: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:64)
  8: StorageLive(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:49-792:63)
  9: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:49-792:63)
  10: StorageLive(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:57-792:63)
  11: StorageLive(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:54-792:57)
  12: _42 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:54-792:57)
  13: StorageLive(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:58-792:62)
  14: StorageLive(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:58-792:60)
  15: _44 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:58-792:60)
  16: _43 = core::ops::RangeFrom::<usize> { start: move _44 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:58-792:62)
  17: StorageDead(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:61-792:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:792:57-792:63)
      kind: _41 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _42, move _43) -> [return: bb19, unwind: bb79]
  }
  preds [bb15]
  succs [bb19, bb79]

bb19
  0: StorageDead(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:62-792:63)
  1: StorageDead(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:62-792:63)
  2: _40 = &mut (*_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:49-792:63)
  3: _39 = &mut (*_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:49-792:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:64)
      kind: _38 = util::wire::write_version::<E>(const dfa::sparse::VERSION, move _39) -> [return: bb20, unwind: bb79]
  }
  preds [bb18]
  succs [bb20, bb79]

bb20
  0: StorageDead(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:63-792:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:65)
      kind: _37 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::Try>::branch(move _38) -> [return: bb21, unwind: bb79]
  }
  preds [bb19]
  succs [bb21, bb79]

bb21
  0: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:64-792:65)
  1: PlaceMention(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:65)
  2: _45 = discriminant(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:65)
      kind: switchInt(move _45) -> [0: bb24, 1: bb23, otherwise: bb22]
  }
  preds [bb20]
  succs [bb22, bb23, bb24]

bb22
  0: FakeRead(ForMatchedPlace(None), _37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:65)
      kind: unreachable
  }
  preds [bb21]
  succs []

bb23
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:792:64-792:65)
      kind: falseEdge -> [real: bb25, imaginary: bb24]
  }
  preds [bb21]
  succs [bb24, bb25]

bb24
  0: StorageLive(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:65)
  1: _49 = ((_37 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:65)
  2: _36 = _49
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:65)
  3: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:64-792:65)
  4: _50 = AddWithOverflow(_3, _36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:9-792:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:792:9-792:65)
      kind: assert(!move (_50.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _36) -> [success: bb27, unwind: bb79]
  }
  preds [bb21, bb23]
  succs [bb27, bb79]

bb25
  0: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:64-792:65)
  1: _46 = move ((_37 as Break).0: core::result::Result<core::convert::Infallible, util::wire::SerializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:64-792:65)
  2: StorageLive(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:64-792:65)
  3: _48 = move _46
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:64-792:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:792:15-792:65)
      kind: _0 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::SerializeError>>>::from_residual(move _48) -> [return: bb26, unwind: bb79]
  }
  preds [bb23]
  succs [bb26, bb79]

bb26
  0: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:64-792:65)
  1: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:64-792:65)
  2: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:64-792:65)
  3: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:65-792:66)
  4: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:65-792:66)
  5: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:65-792:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb77
  }
  preds [bb25]
  succs [bb77]

bb27
  0: _3 = move (_50.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:9-792:65)
  1: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:64-792:65)
  2: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:65-792:66)
  3: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:65-792:66)
  4: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:792:65-792:66)
  5: StorageLive(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:793:15-797:10)
  6: StorageLive(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:13-795:44)
  7: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:29-795:43)
  8: StorageLive(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:29-795:43)
  9: StorageLive(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:37-795:43)
  10: StorageLive(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:34-795:37)
  11: _56 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:34-795:37)
  12: StorageLive(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:38-795:42)
  13: StorageLive(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:38-795:40)
  14: _58 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:38-795:40)
  15: _57 = core::ops::RangeFrom::<usize> { start: move _58 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:38-795:42)
  16: StorageDead(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:41-795:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:795:37-795:43)
      kind: _55 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _56, move _57) -> [return: bb28, unwind: bb79]
  }
  preds [bb24]
  succs [bb28, bb79]

bb28
  0: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:42-795:43)
  1: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:42-795:43)
  2: _54 = &mut (*_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:29-795:43)
  3: _53 = &mut (*_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:29-795:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:795:13-795:44)
      kind: _52 = <E as util::wire::Endian>::write_u32(const 0_u32, move _53) -> [return: bb29, unwind: bb79]
  }
  preds [bb27]
  succs [bb29, bb79]

bb29
  0: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:43-795:44)
  1: StorageDead(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:44-795:45)
  2: StorageDead(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:44-795:45)
  3: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:795:44-795:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:796:13-796:29)
      kind: _51 = core::mem::size_of::<u32>() -> [return: bb30, unwind: bb79]
  }
  preds [bb28]
  succs [bb30, bb79]

bb30
  0: _59 = AddWithOverflow(_3, _51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:793:9-797:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:793:9-797:10)
      kind: assert(!move (_59.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _51) -> [success: bb31, unwind: bb79]
  }
  preds [bb29]
  succs [bb31, bb79]

bb31
  0: _3 = move (_59.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:793:9-797:10)
  1: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:797:9-797:10)
  2: StorageLive(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:56)
  3: StorageLive(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:56)
  4: StorageLive(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:55)
  5: StorageLive(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:25)
  6: _63 = &((*_1).5: dfa::dense::Flags)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:25)
  7: StorageLive(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:40-798:54)
  8: StorageLive(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:40-798:54)
  9: StorageLive(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:48-798:54)
  10: StorageLive(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:45-798:48)
  11: _67 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:45-798:48)
  12: StorageLive(_68)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:49-798:53)
  13: StorageLive(_69)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:49-798:51)
  14: _69 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:49-798:51)
  15: _68 = core::ops::RangeFrom::<usize> { start: move _69 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:49-798:53)
  16: StorageDead(_69)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:52-798:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:798:48-798:54)
      kind: _66 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _67, move _68) -> [return: bb32, unwind: bb79]
  }
  preds [bb30]
  succs [bb32, bb79]

bb32
  0: StorageDead(_68)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:53-798:54)
  1: StorageDead(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:53-798:54)
  2: _65 = &mut (*_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:40-798:54)
  3: _64 = &mut (*_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:40-798:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:55)
      kind: _62 = dfa::dense::Flags::write_to::<E>(move _63, move _64) -> [return: bb33, unwind: bb79]
  }
  preds [bb31]
  succs [bb33, bb79]

bb33
  0: StorageDead(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:54-798:55)
  1: StorageDead(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:54-798:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:56)
      kind: _61 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::Try>::branch(move _62) -> [return: bb34, unwind: bb79]
  }
  preds [bb32]
  succs [bb34, bb79]

bb34
  0: StorageDead(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:55-798:56)
  1: PlaceMention(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:56)
  2: _70 = discriminant(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:56)
      kind: switchInt(move _70) -> [0: bb37, 1: bb36, otherwise: bb35]
  }
  preds [bb33]
  succs [bb35, bb36, bb37]

bb35
  0: FakeRead(ForMatchedPlace(None), _61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:56)
      kind: unreachable
  }
  preds [bb34]
  succs []

bb36
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:798:55-798:56)
      kind: falseEdge -> [real: bb38, imaginary: bb37]
  }
  preds [bb34]
  succs [bb37, bb38]

bb37
  0: StorageLive(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:56)
  1: _74 = ((_61 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:56)
  2: _60 = _74
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:56)
  3: StorageDead(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:55-798:56)
  4: _75 = AddWithOverflow(_3, _60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:9-798:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:798:9-798:56)
      kind: assert(!move (_75.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _60) -> [success: bb40, unwind: bb79]
  }
  preds [bb34, bb36]
  succs [bb40, bb79]

bb38
  0: StorageLive(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:55-798:56)
  1: _71 = move ((_61 as Break).0: core::result::Result<core::convert::Infallible, util::wire::SerializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:55-798:56)
  2: StorageLive(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:55-798:56)
  3: _73 = move _71
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:55-798:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:798:15-798:56)
      kind: _0 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::SerializeError>>>::from_residual(move _73) -> [return: bb39, unwind: bb79]
  }
  preds [bb36]
  succs [bb39, bb79]

bb39
  0: StorageDead(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:55-798:56)
  1: StorageDead(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:55-798:56)
  2: StorageDead(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:55-798:56)
  3: StorageDead(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:56-798:57)
  4: StorageDead(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:56-798:57)
  5: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:56-798:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb77
  }
  preds [bb38]
  succs [bb77]

bb40
  0: _3 = move (_75.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:9-798:56)
  1: StorageDead(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:55-798:56)
  2: StorageDead(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:56-798:57)
  3: StorageDead(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:56-798:57)
  4: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:798:56-798:57)
  5: StorageLive(_76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:53)
  6: StorageLive(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:53)
  7: StorageLive(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:52)
  8: StorageLive(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:22)
  9: _79 = &((*_1).0: dfa::sparse::Transitions<T>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:22)
  10: StorageLive(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:37-799:51)
  11: StorageLive(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:37-799:51)
  12: StorageLive(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:45-799:51)
  13: StorageLive(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:42-799:45)
  14: _83 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:42-799:45)
  15: StorageLive(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:46-799:50)
  16: StorageLive(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:46-799:48)
  17: _85 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:46-799:48)
  18: _84 = core::ops::RangeFrom::<usize> { start: move _85 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:46-799:50)
  19: StorageDead(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:49-799:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:799:45-799:51)
      kind: _82 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _83, move _84) -> [return: bb41, unwind: bb79]
  }
  preds [bb37]
  succs [bb41, bb79]

bb41
  0: StorageDead(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:50-799:51)
  1: StorageDead(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:50-799:51)
  2: _81 = &mut (*_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:37-799:51)
  3: _80 = &mut (*_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:37-799:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:52)
      kind: _78 = dfa::sparse::Transitions::<T>::write_to::<E>(move _79, move _80) -> [return: bb42, unwind: bb79]
  }
  preds [bb40]
  succs [bb42, bb79]

bb42
  0: StorageDead(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:51-799:52)
  1: StorageDead(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:51-799:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:53)
      kind: _77 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::Try>::branch(move _78) -> [return: bb43, unwind: bb79]
  }
  preds [bb41]
  succs [bb43, bb79]

bb43
  0: StorageDead(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:52-799:53)
  1: PlaceMention(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:53)
  2: _86 = discriminant(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:53)
      kind: switchInt(move _86) -> [0: bb46, 1: bb45, otherwise: bb44]
  }
  preds [bb42]
  succs [bb44, bb45, bb46]

bb44
  0: FakeRead(ForMatchedPlace(None), _77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:53)
      kind: unreachable
  }
  preds [bb43]
  succs []

bb45
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:799:52-799:53)
      kind: falseEdge -> [real: bb47, imaginary: bb46]
  }
  preds [bb43]
  succs [bb46, bb47]

bb46
  0: StorageLive(_90)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:53)
  1: _90 = ((_77 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:53)
  2: _76 = _90
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:53)
  3: StorageDead(_90)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:52-799:53)
  4: _91 = AddWithOverflow(_3, _76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:9-799:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:799:9-799:53)
      kind: assert(!move (_91.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _76) -> [success: bb49, unwind: bb79]
  }
  preds [bb43, bb45]
  succs [bb49, bb79]

bb47
  0: StorageLive(_87)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:52-799:53)
  1: _87 = move ((_77 as Break).0: core::result::Result<core::convert::Infallible, util::wire::SerializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:52-799:53)
  2: StorageLive(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:52-799:53)
  3: _89 = move _87
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:52-799:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:799:15-799:53)
      kind: _0 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::SerializeError>>>::from_residual(move _89) -> [return: bb48, unwind: bb79]
  }
  preds [bb45]
  succs [bb48, bb79]

bb48
  0: StorageDead(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:52-799:53)
  1: StorageDead(_87)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:52-799:53)
  2: StorageDead(_76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:52-799:53)
  3: StorageDead(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:53-799:54)
  4: StorageDead(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:53-799:54)
  5: StorageDead(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:53-799:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb77
  }
  preds [bb47]
  succs [bb77]

bb49
  0: _3 = move (_91.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:9-799:53)
  1: StorageDead(_76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:52-799:53)
  2: StorageDead(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:53-799:54)
  3: StorageDead(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:53-799:54)
  4: StorageDead(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:799:53-799:54)
  5: StorageLive(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:53)
  6: StorageLive(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:53)
  7: StorageLive(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:52)
  8: StorageLive(_95)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:22)
  9: _95 = &((*_1).1: dfa::sparse::StartTable<T>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:22)
  10: StorageLive(_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:37-800:51)
  11: StorageLive(_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:37-800:51)
  12: StorageLive(_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:45-800:51)
  13: StorageLive(_99)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:42-800:45)
  14: _99 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:42-800:45)
  15: StorageLive(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:46-800:50)
  16: StorageLive(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:46-800:48)
  17: _101 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:46-800:48)
  18: _100 = core::ops::RangeFrom::<usize> { start: move _101 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:46-800:50)
  19: StorageDead(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:49-800:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:800:45-800:51)
      kind: _98 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _99, move _100) -> [return: bb50, unwind: bb79]
  }
  preds [bb46]
  succs [bb50, bb79]

bb50
  0: StorageDead(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:50-800:51)
  1: StorageDead(_99)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:50-800:51)
  2: _97 = &mut (*_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:37-800:51)
  3: _96 = &mut (*_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:37-800:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:52)
      kind: _94 = dfa::sparse::StartTable::<T>::write_to::<E>(move _95, move _96) -> [return: bb51, unwind: bb79]
  }
  preds [bb49]
  succs [bb51, bb79]

bb51
  0: StorageDead(_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:51-800:52)
  1: StorageDead(_95)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:51-800:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:53)
      kind: _93 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::Try>::branch(move _94) -> [return: bb52, unwind: bb79]
  }
  preds [bb50]
  succs [bb52, bb79]

bb52
  0: StorageDead(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:52-800:53)
  1: PlaceMention(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:53)
  2: _102 = discriminant(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:53)
      kind: switchInt(move _102) -> [0: bb55, 1: bb54, otherwise: bb53]
  }
  preds [bb51]
  succs [bb53, bb54, bb55]

bb53
  0: FakeRead(ForMatchedPlace(None), _93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:53)
      kind: unreachable
  }
  preds [bb52]
  succs []

bb54
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:800:52-800:53)
      kind: falseEdge -> [real: bb56, imaginary: bb55]
  }
  preds [bb52]
  succs [bb55, bb56]

bb55
  0: StorageLive(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:53)
  1: _106 = ((_93 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:53)
  2: _92 = _106
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:53)
  3: StorageDead(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:52-800:53)
  4: _107 = AddWithOverflow(_3, _92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:9-800:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:800:9-800:53)
      kind: assert(!move (_107.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _92) -> [success: bb58, unwind: bb79]
  }
  preds [bb52, bb54]
  succs [bb58, bb79]

bb56
  0: StorageLive(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:52-800:53)
  1: _103 = move ((_93 as Break).0: core::result::Result<core::convert::Infallible, util::wire::SerializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:52-800:53)
  2: StorageLive(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:52-800:53)
  3: _105 = move _103
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:52-800:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:800:15-800:53)
      kind: _0 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::SerializeError>>>::from_residual(move _105) -> [return: bb57, unwind: bb79]
  }
  preds [bb54]
  succs [bb57, bb79]

bb57
  0: StorageDead(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:52-800:53)
  1: StorageDead(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:52-800:53)
  2: StorageDead(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:52-800:53)
  3: StorageDead(_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:53-800:54)
  4: StorageDead(_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:53-800:54)
  5: StorageDead(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:53-800:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb77
  }
  preds [bb56]
  succs [bb77]

bb58
  0: _3 = move (_107.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:9-800:53)
  1: StorageDead(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:52-800:53)
  2: StorageDead(_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:53-800:54)
  3: StorageDead(_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:53-800:54)
  4: StorageDead(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:800:53-800:54)
  5: StorageLive(_108)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:58)
  6: StorageLive(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:58)
  7: StorageLive(_110)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:57)
  8: StorageLive(_111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:27)
  9: _111 = &((*_1).2: dfa::special::Special)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:27)
  10: StorageLive(_112)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:42-801:56)
  11: StorageLive(_113)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:42-801:56)
  12: StorageLive(_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:50-801:56)
  13: StorageLive(_115)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:47-801:50)
  14: _115 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:47-801:50)
  15: StorageLive(_116)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:51-801:55)
  16: StorageLive(_117)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:51-801:53)
  17: _117 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:51-801:53)
  18: _116 = core::ops::RangeFrom::<usize> { start: move _117 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:51-801:55)
  19: StorageDead(_117)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:54-801:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:801:50-801:56)
      kind: _114 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _115, move _116) -> [return: bb59, unwind: bb79]
  }
  preds [bb55]
  succs [bb59, bb79]

bb59
  0: StorageDead(_116)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:55-801:56)
  1: StorageDead(_115)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:55-801:56)
  2: _113 = &mut (*_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:42-801:56)
  3: _112 = &mut (*_113)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:42-801:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:57)
      kind: _110 = dfa::special::Special::write_to::<E>(move _111, move _112) -> [return: bb60, unwind: bb79]
  }
  preds [bb58]
  succs [bb60, bb79]

bb60
  0: StorageDead(_112)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:56-801:57)
  1: StorageDead(_111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:56-801:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:58)
      kind: _109 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::Try>::branch(move _110) -> [return: bb61, unwind: bb79]
  }
  preds [bb59]
  succs [bb61, bb79]

bb61
  0: StorageDead(_110)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:57-801:58)
  1: PlaceMention(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:58)
  2: _118 = discriminant(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:58)
      kind: switchInt(move _118) -> [0: bb64, 1: bb63, otherwise: bb62]
  }
  preds [bb60]
  succs [bb62, bb63, bb64]

bb62
  0: FakeRead(ForMatchedPlace(None), _109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:58)
      kind: unreachable
  }
  preds [bb61]
  succs []

bb63
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:801:57-801:58)
      kind: falseEdge -> [real: bb65, imaginary: bb64]
  }
  preds [bb61]
  succs [bb64, bb65]

bb64
  0: StorageLive(_122)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:58)
  1: _122 = ((_109 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:58)
  2: _108 = _122
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:58)
  3: StorageDead(_122)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:57-801:58)
  4: _123 = AddWithOverflow(_3, _108)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:9-801:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:801:9-801:58)
      kind: assert(!move (_123.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _108) -> [success: bb67, unwind: bb79]
  }
  preds [bb61, bb63]
  succs [bb67, bb79]

bb65
  0: StorageLive(_119)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:57-801:58)
  1: _119 = move ((_109 as Break).0: core::result::Result<core::convert::Infallible, util::wire::SerializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:57-801:58)
  2: StorageLive(_121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:57-801:58)
  3: _121 = move _119
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:57-801:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:801:15-801:58)
      kind: _0 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::SerializeError>>>::from_residual(move _121) -> [return: bb66, unwind: bb79]
  }
  preds [bb63]
  succs [bb66, bb79]

bb66
  0: StorageDead(_121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:57-801:58)
  1: StorageDead(_119)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:57-801:58)
  2: StorageDead(_108)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:57-801:58)
  3: StorageDead(_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:58-801:59)
  4: StorageDead(_113)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:58-801:59)
  5: StorageDead(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:58-801:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb77
  }
  preds [bb65]
  succs [bb77]

bb67
  0: _3 = move (_123.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:9-801:58)
  1: StorageDead(_108)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:57-801:58)
  2: StorageDead(_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:58-801:59)
  3: StorageDead(_113)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:58-801:59)
  4: StorageDead(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:801:58-801:59)
  5: StorageLive(_124)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:58)
  6: StorageLive(_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:58)
  7: StorageLive(_126)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:57)
  8: StorageLive(_127)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:27)
  9: _127 = &((*_1).4: util::alphabet::ByteSet)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:27)
  10: StorageLive(_128)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:42-802:56)
  11: StorageLive(_129)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:42-802:56)
  12: StorageLive(_130)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:50-802:56)
  13: StorageLive(_131)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:47-802:50)
  14: _131 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:47-802:50)
  15: StorageLive(_132)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:51-802:55)
  16: StorageLive(_133)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:51-802:53)
  17: _133 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:51-802:53)
  18: _132 = core::ops::RangeFrom::<usize> { start: move _133 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:51-802:55)
  19: StorageDead(_133)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:54-802:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:802:50-802:56)
      kind: _130 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _131, move _132) -> [return: bb68, unwind: bb79]
  }
  preds [bb64]
  succs [bb68, bb79]

bb68
  0: StorageDead(_132)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:55-802:56)
  1: StorageDead(_131)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:55-802:56)
  2: _129 = &mut (*_130)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:42-802:56)
  3: _128 = &mut (*_129)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:42-802:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:57)
      kind: _126 = util::alphabet::ByteSet::write_to::<E>(move _127, move _128) -> [return: bb69, unwind: bb79]
  }
  preds [bb67]
  succs [bb69, bb79]

bb69
  0: StorageDead(_128)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:56-802:57)
  1: StorageDead(_127)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:56-802:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:58)
      kind: _125 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::Try>::branch(move _126) -> [return: bb70, unwind: bb79]
  }
  preds [bb68]
  succs [bb70, bb79]

bb70
  0: StorageDead(_126)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:57-802:58)
  1: PlaceMention(_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:58)
  2: _134 = discriminant(_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:58)
      kind: switchInt(move _134) -> [0: bb73, 1: bb72, otherwise: bb71]
  }
  preds [bb69]
  succs [bb71, bb72, bb73]

bb71
  0: FakeRead(ForMatchedPlace(None), _125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:58)
      kind: unreachable
  }
  preds [bb70]
  succs []

bb72
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:802:57-802:58)
      kind: falseEdge -> [real: bb74, imaginary: bb73]
  }
  preds [bb70]
  succs [bb73, bb74]

bb73
  0: StorageLive(_138)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:58)
  1: _138 = ((_125 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:58)
  2: _124 = _138
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:58)
  3: StorageDead(_138)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:57-802:58)
  4: _139 = AddWithOverflow(_3, _124)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:9-802:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:802:9-802:58)
      kind: assert(!move (_139.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _124) -> [success: bb76, unwind: bb79]
  }
  preds [bb70, bb72]
  succs [bb76, bb79]

bb74
  0: StorageLive(_135)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:57-802:58)
  1: _135 = move ((_125 as Break).0: core::result::Result<core::convert::Infallible, util::wire::SerializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:57-802:58)
  2: StorageLive(_137)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:57-802:58)
  3: _137 = move _135
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:57-802:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:802:15-802:58)
      kind: _0 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::SerializeError>>>::from_residual(move _137) -> [return: bb75, unwind: bb79]
  }
  preds [bb72]
  succs [bb75, bb79]

bb75
  0: StorageDead(_137)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:57-802:58)
  1: StorageDead(_135)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:57-802:58)
  2: StorageDead(_124)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:57-802:58)
  3: StorageDead(_130)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:58-802:59)
  4: StorageDead(_129)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:58-802:59)
  5: StorageDead(_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:58-802:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb77
  }
  preds [bb74]
  succs [bb77]

bb76
  0: _3 = move (_139.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:9-802:58)
  1: StorageDead(_124)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:57-802:58)
  2: StorageDead(_130)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:58-802:59)
  3: StorageDead(_129)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:58-802:59)
  4: StorageDead(_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:802:58-802:59)
  5: StorageLive(_140)
    SourceInfo(regex-automata/src/dfa/sparse.rs:803:12-803:14)
  6: _140 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:803:12-803:14)
  7: _0 = core::result::Result::<usize, util::wire::SerializeError>::Ok(move _140)
    SourceInfo(regex-automata/src/dfa/sparse.rs:803:9-803:15)
  8: StorageDead(_140)
    SourceInfo(regex-automata/src/dfa/sparse.rs:803:14-803:15)
  9: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:804:5-804:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:804:6-804:6)
      kind: goto -> bb78
  }
  preds [bb73]
  succs [bb78]

bb77
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:804:5-804:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:804:6-804:6)
      kind: goto -> bb78
  }
  preds [bb8, bb17, bb26, bb39, bb48, bb57, bb66, bb75]
  succs [bb78]

bb78
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:804:6-804:6)
      kind: return
  }
  preds [bb76, bb77]
  succs []

bb79
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:785:5-804:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb6, bb7, bb9, bb10, bb11, bb15, bb16, bb18, bb19, bb20, bb24, bb25, bb27, bb28, bb29, bb30, bb31, bb32, bb33, bb37, bb38, bb40, bb41, bb42, bb46, bb47, bb49, bb50, bb51, bb55, bb56, bb58, bb59, bb60, bb64, bb65, bb67, bb68, bb69, bb73, bb74]
  succs []

