bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:9-71:56)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:25-71:39)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:25-71:39)
  3: _4 = &mut ((*_1).0: util::sparse_set::SparseSet)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:25-71:39)
  4: _3 = &mut (*_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:25-71:39)
  5: StorageLive(_5)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:41-71:55)
  6: StorageLive(_6)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:41-71:55)
  7: _6 = &mut ((*_1).1: util::sparse_set::SparseSet)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:41-71:55)
  8: _5 = &mut (*_6)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:41-71:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:71:9-71:56)
      kind: _2 = core::mem::swap::<util::sparse_set::SparseSet>(move _3, move _5) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:55-71:56)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:55-71:56)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:56-71:57)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:56-71:57)
  4: StorageDead(_2)
    SourceInfo(regex-automata/src/util/sparse_set.rs:71:56-71:57)
  5: _0 = const ()
    SourceInfo(regex-automata/src/util/sparse_set.rs:70:35-72:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:72:6-72:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:70:5-72:6)
      kind: resume
  }
  preds [bb0]
  succs []

