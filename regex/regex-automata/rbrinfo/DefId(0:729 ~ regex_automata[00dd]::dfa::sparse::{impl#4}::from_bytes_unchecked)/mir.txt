bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1039:13-1039:19)
  1: _2 = const 0_usize
    SourceInfo(regex-automata/src/dfa/sparse.rs:1039:22-1039:23)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1039:13-1039:19)
  3: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:53)
  4: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:53)
  5: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:52)
  6: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:32-1041:44)
  7: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:32-1041:44)
  8: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:38-1041:44)
  9: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:33-1041:38)
  10: _9 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:33-1041:38)
  11: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:39-1041:43)
  12: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:39-1041:41)
  13: _11 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:39-1041:41)
  14: _10 = core::ops::RangeFrom::<usize> { start: move _11 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:39-1041:43)
  15: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:42-1041:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1041:38-1041:44)
      kind: _8 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _9, move _10) -> [return: bb1, unwind: bb103]
  }
  preds []
  succs [bb1, bb103]

bb1
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:43-1041:44)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:43-1041:44)
  2: _7 = &(*_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:32-1041:44)
  3: _6 = &(*_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:32-1041:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:52)
      kind: _5 = util::wire::read_label(move _6, const dfa::sparse::LABEL) -> [return: bb2, unwind: bb103]
  }
  preds [bb0]
  succs [bb2, bb103]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:51-1041:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:53)
      kind: _4 = <core::result::Result<usize, util::wire::DeserializeError> as core::ops::Try>::branch(move _5) -> [return: bb3, unwind: bb103]
  }
  preds [bb1]
  succs [bb3, bb103]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:52-1041:53)
  1: PlaceMention(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:53)
  2: _12 = discriminant(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:53)
      kind: switchInt(move _12) -> [0: bb6, 1: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5, bb6]

bb4
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:53)
      kind: unreachable
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1041:52-1041:53)
      kind: falseEdge -> [real: bb7, imaginary: bb6]
  }
  preds [bb3]
  succs [bb6, bb7]

bb6
  0: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:53)
  1: _16 = ((_4 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:53)
  2: _3 = _16
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:53)
  3: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:52-1041:53)
  4: _17 = AddWithOverflow(_2, _3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:9-1041:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1041:9-1041:53)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _3) -> [success: bb9, unwind: bb103]
  }
  preds [bb3, bb5]
  succs [bb9, bb103]

bb7
  0: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:52-1041:53)
  1: _13 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:52-1041:53)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:52-1041:53)
  3: _15 = move _13
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:52-1041:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1041:15-1041:53)
      kind: _0 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _15) -> [return: bb8, unwind: bb103]
  }
  preds [bb5]
  succs [bb8, bb103]

bb8
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:52-1041:53)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:52-1041:53)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:52-1041:53)
  3: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:53-1041:54)
  4: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:53-1041:54)
  5: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:53-1041:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb98
  }
  preds [bb7]
  succs [bb98]

bb9
  0: _2 = move (_17.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:9-1041:53)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:52-1041:53)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:53-1041:54)
  3: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:53-1041:54)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1041:53-1041:54)
  5: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:57)
  6: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:57)
  7: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:56)
  8: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:43-1042:55)
  9: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:43-1042:55)
  10: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:49-1042:55)
  11: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:44-1042:49)
  12: _24 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:44-1042:49)
  13: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:50-1042:54)
  14: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:50-1042:52)
  15: _26 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:50-1042:52)
  16: _25 = core::ops::RangeFrom::<usize> { start: move _26 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:50-1042:54)
  17: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:53-1042:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1042:49-1042:55)
      kind: _23 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _24, move _25) -> [return: bb10, unwind: bb103]
  }
  preds [bb6]
  succs [bb10, bb103]

bb10
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:54-1042:55)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:54-1042:55)
  2: _22 = &(*_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:43-1042:55)
  3: _21 = &(*_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:43-1042:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:56)
      kind: _20 = util::wire::read_endianness_check(move _21) -> [return: bb11, unwind: bb103]
  }
  preds [bb9]
  succs [bb11, bb103]

bb11
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:55-1042:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:57)
      kind: _19 = <core::result::Result<usize, util::wire::DeserializeError> as core::ops::Try>::branch(move _20) -> [return: bb12, unwind: bb103]
  }
  preds [bb10]
  succs [bb12, bb103]

bb12
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:56-1042:57)
  1: PlaceMention(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:57)
  2: _27 = discriminant(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:57)
      kind: switchInt(move _27) -> [0: bb15, 1: bb14, otherwise: bb13]
  }
  preds [bb11]
  succs [bb13, bb14, bb15]

bb13
  0: FakeRead(ForMatchedPlace(None), _19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:57)
      kind: unreachable
  }
  preds [bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1042:56-1042:57)
      kind: falseEdge -> [real: bb16, imaginary: bb15]
  }
  preds [bb12]
  succs [bb15, bb16]

bb15
  0: StorageLive(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:57)
  1: _31 = ((_19 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:57)
  2: _18 = _31
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:57)
  3: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:56-1042:57)
  4: _32 = AddWithOverflow(_2, _18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:9-1042:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1042:9-1042:57)
      kind: assert(!move (_32.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _18) -> [success: bb18, unwind: bb103]
  }
  preds [bb12, bb14]
  succs [bb18, bb103]

bb16
  0: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:56-1042:57)
  1: _28 = move ((_19 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:56-1042:57)
  2: StorageLive(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:56-1042:57)
  3: _30 = move _28
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:56-1042:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1042:15-1042:57)
      kind: _0 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _30) -> [return: bb17, unwind: bb103]
  }
  preds [bb14]
  succs [bb17, bb103]

bb17
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:56-1042:57)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:56-1042:57)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:56-1042:57)
  3: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:57-1042:58)
  4: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:57-1042:58)
  5: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:57-1042:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb98
  }
  preds [bb16]
  succs [bb98]

bb18
  0: _2 = move (_32.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:9-1042:57)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:56-1042:57)
  2: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:57-1042:58)
  3: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:57-1042:58)
  4: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1042:57-1042:58)
  5: StorageLive(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:57)
  6: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:57)
  7: StorageLive(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:56)
  8: StorageLive(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:34-1043:46)
  9: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:34-1043:46)
  10: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:40-1043:46)
  11: StorageLive(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:35-1043:40)
  12: _39 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:35-1043:40)
  13: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:41-1043:45)
  14: StorageLive(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:41-1043:43)
  15: _41 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:41-1043:43)
  16: _40 = core::ops::RangeFrom::<usize> { start: move _41 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:41-1043:45)
  17: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:44-1043:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1043:40-1043:46)
      kind: _38 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _39, move _40) -> [return: bb19, unwind: bb103]
  }
  preds [bb15]
  succs [bb19, bb103]

bb19
  0: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:45-1043:46)
  1: StorageDead(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:45-1043:46)
  2: _37 = &(*_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:34-1043:46)
  3: _36 = &(*_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:34-1043:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:56)
      kind: _35 = util::wire::read_version(move _36, const dfa::sparse::VERSION) -> [return: bb20, unwind: bb103]
  }
  preds [bb18]
  succs [bb20, bb103]

bb20
  0: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:55-1043:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:57)
      kind: _34 = <core::result::Result<usize, util::wire::DeserializeError> as core::ops::Try>::branch(move _35) -> [return: bb21, unwind: bb103]
  }
  preds [bb19]
  succs [bb21, bb103]

bb21
  0: StorageDead(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:56-1043:57)
  1: PlaceMention(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:57)
  2: _42 = discriminant(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:57)
      kind: switchInt(move _42) -> [0: bb24, 1: bb23, otherwise: bb22]
  }
  preds [bb20]
  succs [bb22, bb23, bb24]

bb22
  0: FakeRead(ForMatchedPlace(None), _34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:57)
      kind: unreachable
  }
  preds [bb21]
  succs []

bb23
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1043:56-1043:57)
      kind: falseEdge -> [real: bb25, imaginary: bb24]
  }
  preds [bb21]
  succs [bb24, bb25]

bb24
  0: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:57)
  1: _46 = ((_34 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:57)
  2: _33 = _46
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:57)
  3: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:56-1043:57)
  4: _47 = AddWithOverflow(_2, _33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:9-1043:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1043:9-1043:57)
      kind: assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _33) -> [success: bb27, unwind: bb103]
  }
  preds [bb21, bb23]
  succs [bb27, bb103]

bb25
  0: StorageLive(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:56-1043:57)
  1: _43 = move ((_34 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:56-1043:57)
  2: StorageLive(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:56-1043:57)
  3: _45 = move _43
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:56-1043:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1043:15-1043:57)
      kind: _0 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _45) -> [return: bb26, unwind: bb103]
  }
  preds [bb23]
  succs [bb26, bb103]

bb26
  0: StorageDead(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:56-1043:57)
  1: StorageDead(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:56-1043:57)
  2: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:56-1043:57)
  3: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:57-1043:58)
  4: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:57-1043:58)
  5: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:57-1043:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb98
  }
  preds [bb25]
  succs [bb98]

bb27
  0: _2 = move (_47.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:9-1043:57)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:56-1043:57)
  2: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:57-1043:58)
  3: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:57-1043:58)
  4: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1043:57-1043:58)
  5: StorageLive(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:13-1045:20)
  6: StorageLive(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:72)
  7: StorageLive(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:71)
  8: StorageLive(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:42-1045:54)
  9: StorageLive(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:42-1045:54)
  10: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:48-1045:54)
  11: StorageLive(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:43-1045:48)
  12: _54 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:43-1045:48)
  13: StorageLive(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:49-1045:53)
  14: StorageLive(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:49-1045:51)
  15: _56 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:49-1045:51)
  16: _55 = core::ops::RangeFrom::<usize> { start: move _56 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:49-1045:53)
  17: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:52-1045:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1045:48-1045:54)
      kind: _53 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _54, move _55) -> [return: bb28, unwind: bb103]
  }
  preds [bb24]
  succs [bb28, bb103]

bb28
  0: StorageDead(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:53-1045:54)
  1: StorageDead(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:53-1045:54)
  2: _52 = &(*_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:42-1045:54)
  3: _51 = &(*_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:42-1045:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:71)
      kind: _50 = util::wire::try_read_u32(move _51, const "unused space") -> [return: bb29, unwind: bb103]
  }
  preds [bb27]
  succs [bb29, bb103]

bb29
  0: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:70-1045:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:72)
      kind: _49 = <core::result::Result<(u32, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _50) -> [return: bb30, unwind: bb103]
  }
  preds [bb28]
  succs [bb30, bb103]

bb30
  0: StorageDead(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:71-1045:72)
  1: PlaceMention(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:72)
  2: _57 = discriminant(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:72)
      kind: switchInt(move _57) -> [0: bb33, 1: bb32, otherwise: bb31]
  }
  preds [bb29]
  succs [bb31, bb32, bb33]

bb31
  0: FakeRead(ForMatchedPlace(None), _49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:72)
      kind: unreachable
  }
  preds [bb30]
  succs []

bb32
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1045:71-1045:72)
      kind: falseEdge -> [real: bb34, imaginary: bb33]
  }
  preds [bb30]
  succs [bb33, bb34]

bb33
  0: StorageLive(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:72)
  1: _61 = ((_49 as Continue).0: (u32, usize))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:72)
  2: _48 = _61
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:72)
  3: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:71-1045:72)
  4: FakeRead(ForLet(None), _48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:13-1045:20)
  5: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:72-1045:73)
  6: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:72-1045:73)
  7: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:72-1045:73)
  8: StorageLive(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1046:15-1046:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1046:15-1046:31)
      kind: _62 = core::mem::size_of::<u32>() -> [return: bb36, unwind: bb103]
  }
  preds [bb30, bb32]
  succs [bb36, bb103]

bb34
  0: StorageLive(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:71-1045:72)
  1: _58 = move ((_49 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:71-1045:72)
  2: StorageLive(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:71-1045:72)
  3: _60 = move _58
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:71-1045:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1045:23-1045:72)
      kind: _0 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _60) -> [return: bb35, unwind: bb103]
  }
  preds [bb32]
  succs [bb35, bb103]

bb35
  0: StorageDead(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:71-1045:72)
  1: StorageDead(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:71-1045:72)
  2: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:72-1045:73)
  3: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:72-1045:73)
  4: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1045:72-1045:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb97
  }
  preds [bb34]
  succs [bb97]

bb36
  0: _63 = AddWithOverflow(_2, _62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1046:9-1046:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1046:9-1046:31)
      kind: assert(!move (_63.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _62) -> [success: bb37, unwind: bb103]
  }
  preds [bb33]
  succs [bb37, bb103]

bb37
  0: _2 = move (_63.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1046:9-1046:31)
  1: StorageDead(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1046:30-1046:31)
  2: StorageLive(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
  3: StorageLive(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
  4: StorageLive(_68)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:61)
  5: StorageLive(_69)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:48-1048:60)
  6: StorageLive(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:48-1048:60)
  7: StorageLive(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:54-1048:60)
  8: StorageLive(_72)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:49-1048:54)
  9: _72 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:49-1048:54)
  10: StorageLive(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:55-1048:59)
  11: StorageLive(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:55-1048:57)
  12: _74 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:55-1048:57)
  13: _73 = core::ops::RangeFrom::<usize> { start: move _74 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:55-1048:59)
  14: StorageDead(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:58-1048:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1048:54-1048:60)
      kind: _71 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _72, move _73) -> [return: bb38, unwind: bb103]
  }
  preds [bb36]
  succs [bb38, bb103]

bb38
  0: StorageDead(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:59-1048:60)
  1: StorageDead(_72)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:59-1048:60)
  2: _70 = &(*_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:48-1048:60)
  3: _69 = &(*_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:48-1048:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:61)
      kind: _68 = dfa::dense::Flags::from_bytes(move _69) -> [return: bb39, unwind: bb103]
  }
  preds [bb37]
  succs [bb39, bb103]

bb39
  0: StorageDead(_69)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:60-1048:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
      kind: _67 = <core::result::Result<(dfa::dense::Flags, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _68) -> [return: bb40, unwind: bb103]
  }
  preds [bb38]
  succs [bb40, bb103]

bb40
  0: StorageDead(_68)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:61-1048:62)
  1: PlaceMention(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
  2: _75 = discriminant(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
      kind: switchInt(move _75) -> [0: bb43, 1: bb42, otherwise: bb41]
  }
  preds [bb39]
  succs [bb41, bb42, bb43]

bb41
  0: FakeRead(ForMatchedPlace(None), _67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
      kind: unreachable
  }
  preds [bb40]
  succs []

bb42
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1048:61-1048:62)
      kind: falseEdge -> [real: bb44, imaginary: bb43]
  }
  preds [bb40]
  succs [bb43, bb44]

bb43
  0: StorageLive(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
  1: _79 = ((_67 as Continue).0: (dfa::dense::Flags, usize))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
  2: _66 = _79
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
  3: StorageDead(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:61-1048:62)
  4: PlaceMention(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
  5: StorageLive(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:14-1048:19)
  6: _64 = (_66.0: dfa::dense::Flags)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:14-1048:19)
  7: StorageLive(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:21-1048:26)
  8: _65 = (_66.1: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:21-1048:26)
  9: StorageDead(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:62-1048:63)
  10: StorageDead(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:62-1048:63)
  11: StorageDead(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:62-1048:63)
  12: StorageDead(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:62-1048:63)
  13: StorageLive(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1049:15-1049:20)
  14: _80 = _65
    SourceInfo(regex-automata/src/dfa/sparse.rs:1049:15-1049:20)
  15: _81 = AddWithOverflow(_2, _80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1049:9-1049:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1049:9-1049:20)
      kind: assert(!move (_81.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _80) -> [success: bb46, unwind: bb103]
  }
  preds [bb40, bb42]
  succs [bb46, bb103]

bb44
  0: StorageLive(_76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:61-1048:62)
  1: _76 = move ((_67 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:61-1048:62)
  2: StorageLive(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:61-1048:62)
  3: _78 = move _76
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:61-1048:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1048:30-1048:62)
      kind: _0 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _78) -> [return: bb45, unwind: bb103]
  }
  preds [bb42]
  succs [bb45, bb103]

bb45
  0: StorageDead(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:61-1048:62)
  1: StorageDead(_76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:61-1048:62)
  2: StorageDead(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:62-1048:63)
  3: StorageDead(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:62-1048:63)
  4: StorageDead(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:62-1048:63)
  5: StorageDead(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1048:62-1048:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb97
  }
  preds [bb44]
  succs [bb97]

bb46
  0: _2 = move (_81.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1049:9-1049:20)
  1: StorageDead(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1049:19-1049:20)
  2: StorageLive(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
  3: StorageLive(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
  4: StorageLive(_86)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:74)
  5: StorageLive(_87)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:61-1051:73)
  6: StorageLive(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:61-1051:73)
  7: StorageLive(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:67-1051:73)
  8: StorageLive(_90)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:62-1051:67)
  9: _90 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:62-1051:67)
  10: StorageLive(_91)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:68-1051:72)
  11: StorageLive(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:68-1051:70)
  12: _92 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:68-1051:70)
  13: _91 = core::ops::RangeFrom::<usize> { start: move _92 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:68-1051:72)
  14: StorageDead(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:71-1051:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1051:67-1051:73)
      kind: _89 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _90, move _91) -> [return: bb47, unwind: bb103]
  }
  preds [bb43]
  succs [bb47, bb103]

bb47
  0: StorageDead(_91)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:72-1051:73)
  1: StorageDead(_90)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:72-1051:73)
  2: _88 = &(*_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:61-1051:73)
  3: _87 = &(*_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:61-1051:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:74)
      kind: _86 = dfa::sparse::Transitions::<&[u8]>::from_bytes_unchecked(move _87) -> [return: bb48, unwind: bb103]
  }
  preds [bb46]
  succs [bb48, bb103]

bb48
  0: StorageDead(_87)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:73-1051:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
      kind: _85 = <core::result::Result<(dfa::sparse::Transitions<&[u8]>, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _86) -> [return: bb49, unwind: bb103]
  }
  preds [bb47]
  succs [bb49, bb103]

bb49
  0: StorageDead(_86)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:74-1051:75)
  1: PlaceMention(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
  2: _93 = discriminant(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
      kind: switchInt(move _93) -> [0: bb52, 1: bb51, otherwise: bb50]
  }
  preds [bb48]
  succs [bb50, bb51, bb52]

bb50
  0: FakeRead(ForMatchedPlace(None), _85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
      kind: unreachable
  }
  preds [bb49]
  succs []

bb51
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1051:74-1051:75)
      kind: falseEdge -> [real: bb53, imaginary: bb52]
  }
  preds [bb49]
  succs [bb52, bb53]

bb52
  0: StorageLive(_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
  1: _97 = move ((_85 as Continue).0: (dfa::sparse::Transitions<&[u8]>, usize))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
  2: _84 = move _97
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
  3: StorageDead(_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:74-1051:75)
  4: PlaceMention(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
  5: StorageLive(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:14-1051:16)
  6: _82 = move (_84.0: dfa::sparse::Transitions<&[u8]>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:14-1051:16)
  7: StorageLive(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:18-1051:23)
  8: _83 = (_84.1: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:18-1051:23)
  9: StorageDead(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:75-1051:76)
  10: StorageDead(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:75-1051:76)
  11: StorageDead(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:75-1051:76)
  12: StorageDead(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:75-1051:76)
  13: StorageLive(_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1052:15-1052:20)
  14: _98 = _83
    SourceInfo(regex-automata/src/dfa/sparse.rs:1052:15-1052:20)
  15: _99 = AddWithOverflow(_2, _98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1052:9-1052:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1052:9-1052:20)
      kind: assert(!move (_99.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _98) -> [success: bb55, unwind: bb103]
  }
  preds [bb49, bb51]
  succs [bb55, bb103]

bb53
  0: StorageLive(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:74-1051:75)
  1: _94 = move ((_85 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:74-1051:75)
  2: StorageLive(_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:74-1051:75)
  3: _96 = move _94
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:74-1051:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1051:27-1051:75)
      kind: _0 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _96) -> [return: bb54, unwind: bb103]
  }
  preds [bb51]
  succs [bb54, bb103]

bb54
  0: StorageDead(_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:74-1051:75)
  1: StorageDead(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:74-1051:75)
  2: StorageDead(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:75-1051:76)
  3: StorageDead(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:75-1051:76)
  4: StorageDead(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:75-1051:76)
  5: StorageDead(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1051:75-1051:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb96
  }
  preds [bb53]
  succs [bb96]

bb55
  0: _2 = move (_99.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1052:9-1052:20)
  1: StorageDead(_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1052:19-1052:20)
  2: StorageLive(_102)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
  3: StorageLive(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
  4: StorageLive(_104)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:73)
  5: StorageLive(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:60-1054:72)
  6: StorageLive(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:60-1054:72)
  7: StorageLive(_107)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:66-1054:72)
  8: StorageLive(_108)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:61-1054:66)
  9: _108 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:61-1054:66)
  10: StorageLive(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:67-1054:71)
  11: StorageLive(_110)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:67-1054:69)
  12: _110 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:67-1054:69)
  13: _109 = core::ops::RangeFrom::<usize> { start: move _110 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:67-1054:71)
  14: StorageDead(_110)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:70-1054:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1054:66-1054:72)
      kind: _107 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _108, move _109) -> [return: bb56, unwind: bb103]
  }
  preds [bb52]
  succs [bb56, bb103]

bb56
  0: StorageDead(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:71-1054:72)
  1: StorageDead(_108)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:71-1054:72)
  2: _106 = &(*_107)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:60-1054:72)
  3: _105 = &(*_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:60-1054:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:73)
      kind: _104 = dfa::sparse::StartTable::<&[u8]>::from_bytes_unchecked(move _105) -> [return: bb57, unwind: bb103]
  }
  preds [bb55]
  succs [bb57, bb103]

bb57
  0: StorageDead(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:72-1054:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
      kind: _103 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _104) -> [return: bb58, unwind: bb103]
  }
  preds [bb56]
  succs [bb58, bb103]

bb58
  0: StorageDead(_104)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:73-1054:74)
  1: PlaceMention(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
  2: _111 = discriminant(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
      kind: switchInt(move _111) -> [0: bb61, 1: bb60, otherwise: bb59]
  }
  preds [bb57]
  succs [bb59, bb60, bb61]

bb59
  0: FakeRead(ForMatchedPlace(None), _103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
      kind: unreachable
  }
  preds [bb58]
  succs []

bb60
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1054:73-1054:74)
      kind: falseEdge -> [real: bb62, imaginary: bb61]
  }
  preds [bb58]
  succs [bb61, bb62]

bb61
  0: StorageLive(_115)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
  1: _115 = move ((_103 as Continue).0: (dfa::sparse::StartTable<&[u8]>, usize))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
  2: _102 = move _115
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
  3: StorageDead(_115)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:73-1054:74)
  4: PlaceMention(_102)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
  5: StorageLive(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:14-1054:16)
  6: _100 = move (_102.0: dfa::sparse::StartTable<&[u8]>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:14-1054:16)
  7: StorageLive(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:18-1054:23)
  8: _101 = (_102.1: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:18-1054:23)
  9: StorageDead(_107)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:74-1054:75)
  10: StorageDead(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:74-1054:75)
  11: StorageDead(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:74-1054:75)
  12: StorageDead(_102)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:74-1054:75)
  13: StorageLive(_116)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1055:15-1055:20)
  14: _116 = _101
    SourceInfo(regex-automata/src/dfa/sparse.rs:1055:15-1055:20)
  15: _117 = AddWithOverflow(_2, _116)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1055:9-1055:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1055:9-1055:20)
      kind: assert(!move (_117.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _116) -> [success: bb64, unwind: bb103]
  }
  preds [bb58, bb60]
  succs [bb64, bb103]

bb62
  0: StorageLive(_112)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:73-1054:74)
  1: _112 = move ((_103 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:73-1054:74)
  2: StorageLive(_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:73-1054:74)
  3: _114 = move _112
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:73-1054:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1054:27-1054:74)
      kind: _0 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _114) -> [return: bb63, unwind: bb103]
  }
  preds [bb60]
  succs [bb63, bb103]

bb63
  0: StorageDead(_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:73-1054:74)
  1: StorageDead(_112)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:73-1054:74)
  2: StorageDead(_107)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:74-1054:75)
  3: StorageDead(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:74-1054:75)
  4: StorageDead(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:74-1054:75)
  5: StorageDead(_102)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1054:74-1054:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb95
  }
  preds [bb62]
  succs [bb95]

bb64
  0: _2 = move (_117.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1055:9-1055:20)
  1: StorageDead(_116)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1055:19-1055:20)
  2: StorageLive(_120)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
  3: StorageLive(_121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
  4: StorageLive(_122)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:65)
  5: StorageLive(_123)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:52-1057:64)
  6: StorageLive(_124)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:52-1057:64)
  7: StorageLive(_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:58-1057:64)
  8: StorageLive(_126)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:53-1057:58)
  9: _126 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:53-1057:58)
  10: StorageLive(_127)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:59-1057:63)
  11: StorageLive(_128)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:59-1057:61)
  12: _128 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:59-1057:61)
  13: _127 = core::ops::RangeFrom::<usize> { start: move _128 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:59-1057:63)
  14: StorageDead(_128)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:62-1057:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1057:58-1057:64)
      kind: _125 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _126, move _127) -> [return: bb65, unwind: bb103]
  }
  preds [bb61]
  succs [bb65, bb103]

bb65
  0: StorageDead(_127)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:63-1057:64)
  1: StorageDead(_126)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:63-1057:64)
  2: _124 = &(*_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:52-1057:64)
  3: _123 = &(*_124)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:52-1057:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:65)
      kind: _122 = dfa::special::Special::from_bytes(move _123) -> [return: bb66, unwind: bb103]
  }
  preds [bb64]
  succs [bb66, bb103]

bb66
  0: StorageDead(_123)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:64-1057:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
      kind: _121 = <core::result::Result<(dfa::special::Special, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _122) -> [return: bb67, unwind: bb103]
  }
  preds [bb65]
  succs [bb67, bb103]

bb67
  0: StorageDead(_122)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:65-1057:66)
  1: PlaceMention(_121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
  2: _129 = discriminant(_121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
      kind: switchInt(move _129) -> [0: bb70, 1: bb69, otherwise: bb68]
  }
  preds [bb66]
  succs [bb68, bb69, bb70]

bb68
  0: FakeRead(ForMatchedPlace(None), _121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
      kind: unreachable
  }
  preds [bb67]
  succs []

bb69
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1057:65-1057:66)
      kind: falseEdge -> [real: bb71, imaginary: bb70]
  }
  preds [bb67]
  succs [bb70, bb71]

bb70
  0: StorageLive(_133)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
  1: _133 = ((_121 as Continue).0: (dfa::special::Special, usize))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
  2: _120 = _133
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
  3: StorageDead(_133)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:65-1057:66)
  4: PlaceMention(_120)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
  5: StorageLive(_118)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:14-1057:21)
  6: _118 = (_120.0: dfa::special::Special)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:14-1057:21)
  7: StorageLive(_119)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:23-1057:28)
  8: _119 = (_120.1: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:23-1057:28)
  9: StorageDead(_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:66-1057:67)
  10: StorageDead(_124)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:66-1057:67)
  11: StorageDead(_121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:66-1057:67)
  12: StorageDead(_120)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:66-1057:67)
  13: StorageLive(_134)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1058:15-1058:20)
  14: _134 = _119
    SourceInfo(regex-automata/src/dfa/sparse.rs:1058:15-1058:20)
  15: _135 = AddWithOverflow(_2, _134)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1058:9-1058:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1058:9-1058:20)
      kind: assert(!move (_135.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _134) -> [success: bb73, unwind: bb103]
  }
  preds [bb67, bb69]
  succs [bb73, bb103]

bb71
  0: StorageLive(_130)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:65-1057:66)
  1: _130 = move ((_121 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:65-1057:66)
  2: StorageLive(_132)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:65-1057:66)
  3: _132 = move _130
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:65-1057:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1057:32-1057:66)
      kind: _0 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _132) -> [return: bb72, unwind: bb103]
  }
  preds [bb69]
  succs [bb72, bb103]

bb72
  0: StorageDead(_132)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:65-1057:66)
  1: StorageDead(_130)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:65-1057:66)
  2: StorageDead(_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:66-1057:67)
  3: StorageDead(_124)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:66-1057:67)
  4: StorageDead(_121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:66-1057:67)
  5: StorageDead(_120)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1057:66-1057:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb94
  }
  preds [bb71]
  succs [bb94]

bb73
  0: _2 = move (_135.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1058:9-1058:20)
  1: StorageDead(_134)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1058:19-1058:20)
  2: StorageLive(_136)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:9-1063:10)
  3: StorageLive(_137)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:12-1059:55)
  4: StorageLive(_138)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:12-1059:34)
  5: StorageLive(_139)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:12-1059:23)
  6: _139 = &(_118.0: util::primitives::StateID)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:12-1059:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1059:12-1059:34)
      kind: _138 = util::primitives::StateID::as_usize(move _139) -> [return: bb74, unwind: bb103]
  }
  preds [bb70]
  succs [bb74, bb103]

bb74
  0: StorageDead(_139)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:33-1059:34)
  1: StorageLive(_140)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:38-1059:55)
  2: StorageLive(_141)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:38-1059:49)
  3: StorageLive(_142)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:38-1059:49)
  4: StorageLive(_143)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:38-1059:40)
  5: _143 = &_82
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:38-1059:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1059:38-1059:49)
      kind: _142 = dfa::sparse::Transitions::<&[u8]>::sparse(move _143) -> [return: bb75, unwind: bb103]
  }
  preds [bb73]
  succs [bb75, bb103]

bb75
  0: _141 = &(*_142)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:38-1059:49)
  1: StorageDead(_143)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:48-1059:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1059:38-1059:55)
      kind: _140 = core::slice::<impl [u8]>::len(move _141) -> [return: bb76, unwind: bb103]
  }
  preds [bb74]
  succs [bb76, bb103]

bb76
  0: StorageDead(_141)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:54-1059:55)
  1: _137 = Ge(move _138, move _140)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:12-1059:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1059:12-1059:55)
      kind: switchInt(move _137) -> [0: bb79, otherwise: bb77]
  }
  preds [bb75]
  succs [bb77, bb79]

bb77
  0: StorageDead(_142)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:54-1059:55)
  1: StorageDead(_140)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:54-1059:55)
  2: StorageDead(_138)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:54-1059:55)
  3: StorageLive(_145)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1060:24-1062:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1060:24-1062:14)
      kind: _145 = util::wire::DeserializeError::generic(const "max should not be greater than or equal to sparse bytes") -> [return: bb78, unwind: bb103]
  }
  preds [bb76]
  succs [bb78, bb103]

bb78
  0: _0 = core::result::Result::<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError>::Err(move _145)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1060:20-1062:15)
  1: StorageDead(_145)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1062:14-1062:15)
  2: StorageDead(_137)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1063:9-1063:10)
  3: StorageDead(_136)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1063:9-1063:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb93
  }
  preds [bb77]
  succs [bb93]

bb79
  0: StorageDead(_142)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:54-1059:55)
  1: StorageDead(_140)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:54-1059:55)
  2: StorageDead(_138)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1059:54-1059:55)
  3: _136 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1063:10-1063:10)
  4: StorageDead(_137)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1063:9-1063:10)
  5: StorageDead(_136)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1063:9-1063:10)
  6: StorageLive(_148)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
  7: StorageLive(_149)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
  8: StorageLive(_150)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:65)
  9: StorageLive(_151)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:52-1065:64)
  10: StorageLive(_152)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:52-1065:64)
  11: StorageLive(_153)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:58-1065:64)
  12: StorageLive(_154)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:53-1065:58)
  13: _154 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:53-1065:58)
  14: StorageLive(_155)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:59-1065:63)
  15: StorageLive(_156)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:59-1065:61)
  16: _156 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:59-1065:61)
  17: _155 = core::ops::RangeFrom::<usize> { start: move _156 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:59-1065:63)
  18: StorageDead(_156)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:62-1065:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1065:58-1065:64)
      kind: _153 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _154, move _155) -> [return: bb80, unwind: bb103]
  }
  preds [bb76]
  succs [bb80, bb103]

bb80
  0: StorageDead(_155)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:63-1065:64)
  1: StorageDead(_154)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:63-1065:64)
  2: _152 = &(*_153)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:52-1065:64)
  3: _151 = &(*_152)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:52-1065:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:65)
      kind: _150 = util::alphabet::ByteSet::from_bytes(move _151) -> [return: bb81, unwind: bb103]
  }
  preds [bb79]
  succs [bb81, bb103]

bb81
  0: StorageDead(_151)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:64-1065:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
      kind: _149 = <core::result::Result<(util::alphabet::ByteSet, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _150) -> [return: bb82, unwind: bb103]
  }
  preds [bb80]
  succs [bb82, bb103]

bb82
  0: StorageDead(_150)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:65-1065:66)
  1: PlaceMention(_149)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
  2: _157 = discriminant(_149)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
      kind: switchInt(move _157) -> [0: bb85, 1: bb84, otherwise: bb83]
  }
  preds [bb81]
  succs [bb83, bb84, bb85]

bb83
  0: FakeRead(ForMatchedPlace(None), _149)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
      kind: unreachable
  }
  preds [bb82]
  succs []

bb84
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1065:65-1065:66)
      kind: falseEdge -> [real: bb86, imaginary: bb85]
  }
  preds [bb82]
  succs [bb85, bb86]

bb85
  0: StorageLive(_161)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
  1: _161 = ((_149 as Continue).0: (util::alphabet::ByteSet, usize))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
  2: _148 = _161
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
  3: StorageDead(_161)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:65-1065:66)
  4: PlaceMention(_148)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
  5: StorageLive(_146)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:14-1065:21)
  6: _146 = (_148.0: util::alphabet::ByteSet)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:14-1065:21)
  7: StorageLive(_147)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:23-1065:28)
  8: _147 = (_148.1: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:23-1065:28)
  9: StorageDead(_153)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:66-1065:67)
  10: StorageDead(_152)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:66-1065:67)
  11: StorageDead(_149)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:66-1065:67)
  12: StorageDead(_148)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:66-1065:67)
  13: StorageLive(_162)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1066:15-1066:20)
  14: _162 = _147
    SourceInfo(regex-automata/src/dfa/sparse.rs:1066:15-1066:20)
  15: _163 = AddWithOverflow(_2, _162)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1066:9-1066:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1066:9-1066:20)
      kind: assert(!move (_163.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _162) -> [success: bb88, unwind: bb103]
  }
  preds [bb82, bb84]
  succs [bb88, bb103]

bb86
  0: StorageLive(_158)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:65-1065:66)
  1: _158 = move ((_149 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:65-1065:66)
  2: StorageLive(_160)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:65-1065:66)
  3: _160 = move _158
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:65-1065:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1065:32-1065:66)
      kind: _0 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _160) -> [return: bb87, unwind: bb103]
  }
  preds [bb84]
  succs [bb87, bb103]

bb87
  0: StorageDead(_160)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:65-1065:66)
  1: StorageDead(_158)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:65-1065:66)
  2: StorageDead(_153)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:66-1065:67)
  3: StorageDead(_152)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:66-1065:67)
  4: StorageDead(_149)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:66-1065:67)
  5: StorageDead(_148)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1065:66-1065:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb93
  }
  preds [bb86]
  succs [bb93]

bb88
  0: _2 = move (_163.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1066:9-1066:20)
  1: StorageDead(_162)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1066:19-1066:20)
  2: StorageLive(_164)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1069:13-1069:16)
  3: _164 = core::option::Option::<util::prefilter::Prefilter>::None
    SourceInfo(regex-automata/src/dfa/sparse.rs:1069:19-1069:23)
  4: FakeRead(ForLet(None), _164)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1069:13-1069:16)
  5: StorageLive(_165)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:12-1070:62)
  6: StorageLive(_166)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:13-1070:57)
  7: StorageLive(_167)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:19-1070:21)
  8: _167 = move _82
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:19-1070:21)
  9: StorageLive(_168)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:23-1070:25)
  10: _168 = move _100
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:23-1070:25)
  11: StorageLive(_169)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:27-1070:34)
  12: _169 = _118
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:27-1070:34)
  13: StorageLive(_170)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:36-1070:39)
  14: _170 = move _164
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:36-1070:39)
  15: StorageLive(_171)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:41-1070:48)
  16: _171 = _146
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:41-1070:48)
  17: StorageLive(_172)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:50-1070:55)
  18: _172 = _64
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:50-1070:55)
  19: _166 = dfa::sparse::DFA::<&[u8]> { tt: move _167, st: move _168, special: move _169, pre: move _170, quitset: move _171, flags: move _172 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:13-1070:57)
  20: StorageDead(_172)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:56-1070:57)
  21: StorageDead(_171)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:56-1070:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1070:56-1070:57)
      kind: drop(_170) -> [return: bb89, unwind: bb101]
  }
  preds [bb85]
  succs [bb89, bb101]

bb89
  0: StorageDead(_170)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:56-1070:57)
  1: StorageDead(_169)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:56-1070:57)
  2: StorageDead(_168)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:56-1070:57)
  3: StorageDead(_167)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:56-1070:57)
  4: StorageLive(_173)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:59-1070:61)
  5: _173 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:59-1070:61)
  6: _165 = (move _166, move _173)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:12-1070:62)
  7: StorageDead(_173)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:61-1070:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1070:61-1070:62)
      kind: drop(_166) -> [return: bb90, unwind: bb100]
  }
  preds [bb88]
  succs [bb90, bb100]

bb90
  0: StorageDead(_166)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:61-1070:62)
  1: _0 = core::result::Result::<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError>::Ok(move _165)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:9-1070:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1070:62-1070:63)
      kind: drop(_165) -> [return: bb91, unwind: bb102]
  }
  preds [bb89]
  succs [bb91, bb102]

bb91
  0: StorageDead(_165)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1070:62-1070:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
      kind: drop(_164) -> [return: bb92, unwind: bb103]
  }
  preds [bb90]
  succs [bb92, bb103]

bb92
  0: StorageDead(_164)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  1: StorageDead(_147)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  2: StorageDead(_146)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  3: StorageDead(_119)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  4: StorageDead(_118)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  5: StorageDead(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  6: StorageDead(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  7: StorageDead(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  8: StorageDead(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  9: StorageDead(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  10: StorageDead(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  11: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  12: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1071:6-1071:6)
      kind: goto -> bb99
  }
  preds [bb91]
  succs [bb99]

bb93
  0: StorageDead(_119)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  1: StorageDead(_118)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb94
  }
  preds [bb78, bb87]
  succs [bb94]

bb94
  0: StorageDead(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  1: StorageDead(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb95
  }
  preds [bb72, bb93]
  succs [bb95]

bb95
  0: StorageDead(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  1: StorageDead(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb96
  }
  preds [bb63, bb94]
  succs [bb96]

bb96
  0: StorageDead(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  1: StorageDead(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb97
  }
  preds [bb54, bb95]
  succs [bb97]

bb97
  0: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb98
  }
  preds [bb35, bb45, bb96]
  succs [bb98]

bb98
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1071:6-1071:6)
      kind: goto -> bb99
  }
  preds [bb8, bb17, bb26, bb97]
  succs [bb99]

bb99
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1071:6-1071:6)
      kind: return
  }
  preds [bb92, bb98]
  succs []

bb100
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1070:62-1070:63)
      kind: drop(_165) -> [return: bb102, unwind terminate(cleanup)]
  }
  preds [bb89]
  succs [bb102]

bb101
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1070:61-1070:62)
      kind: drop(_166) -> [return: bb102, unwind terminate(cleanup)]
  }
  preds [bb88]
  succs [bb102]

bb102
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1071:5-1071:6)
      kind: drop(_164) -> [return: bb103, unwind terminate(cleanup)]
  }
  preds [bb90, bb100, bb101]
  succs [bb103]

bb103
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1036:5-1071:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb6, bb7, bb9, bb10, bb11, bb15, bb16, bb18, bb19, bb20, bb24, bb25, bb27, bb28, bb29, bb33, bb34, bb36, bb37, bb38, bb39, bb43, bb44, bb46, bb47, bb48, bb52, bb53, bb55, bb56, bb57, bb61, bb62, bb64, bb65, bb66, bb70, bb71, bb73, bb74, bb75, bb77, bb79, bb80, bb81, bb85, bb86, bb91, bb102]
  succs []

