bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:1140:13-1140:24)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:59)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:58)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:1140:45-1140:53)
  4: _7 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1140:45-1140:53)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:1140:55-1140:57)
  6: _8 = _3
    SourceInfo(regex-automata/src/util/look.rs:1140:55-1140:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:58)
      kind: _6 = util::look::is_word_char::rev(move _7, move _8) -> [return: bb1, unwind: bb20]
  }
  preds []
  succs [bb1, bb20]

bb1
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:1140:57-1140:58)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1140:57-1140:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:59)
      kind: _5 = <core::result::Result<bool, util::look::UnicodeWordBoundaryError> as core::ops::Try>::branch(move _6) -> [return: bb2, unwind: bb20]
  }
  preds [bb0]
  succs [bb2, bb20]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1140:58-1140:59)
  1: PlaceMention(_5)
    SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:59)
  2: _9 = discriminant(_5)
    SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:59)
      kind: switchInt(move _9) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _5)
    SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:59)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1140:58-1140:59)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_13)
    SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:59)
  1: _13 = ((_5 as Continue).0: bool)
    SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:59)
  2: _4 = _13
    SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:59)
  3: StorageDead(_13)
    SourceInfo(regex-automata/src/util/look.rs:1140:58-1140:59)
  4: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/look.rs:1140:13-1140:24)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1140:59-1140:60)
  6: StorageLive(_14)
    SourceInfo(regex-automata/src/util/look.rs:1141:13-1141:23)
  7: StorageLive(_15)
    SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:58)
  8: StorageLive(_16)
    SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:57)
  9: StorageLive(_17)
    SourceInfo(regex-automata/src/util/look.rs:1141:44-1141:52)
  10: _17 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1141:44-1141:52)
  11: StorageLive(_18)
    SourceInfo(regex-automata/src/util/look.rs:1141:54-1141:56)
  12: _18 = _3
    SourceInfo(regex-automata/src/util/look.rs:1141:54-1141:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:57)
      kind: _16 = util::look::is_word_char::fwd(move _17, move _18) -> [return: bb8, unwind: bb20]
  }
  preds [bb2, bb4]
  succs [bb8, bb20]

bb6
  0: StorageLive(_10)
    SourceInfo(regex-automata/src/util/look.rs:1140:58-1140:59)
  1: _10 = move ((_5 as Break).0: core::result::Result<core::convert::Infallible, util::look::UnicodeWordBoundaryError>)
    SourceInfo(regex-automata/src/util/look.rs:1140:58-1140:59)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/util/look.rs:1140:58-1140:59)
  3: _12 = move _10
    SourceInfo(regex-automata/src/util/look.rs:1140:58-1140:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1140:27-1140:59)
      kind: _0 = <core::result::Result<bool, util::look::UnicodeWordBoundaryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::look::UnicodeWordBoundaryError>>>::from_residual(move _12) -> [return: bb7, unwind: bb20]
  }
  preds [bb4]
  succs [bb7, bb20]

bb7
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/look.rs:1140:58-1140:59)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:1140:58-1140:59)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1140:59-1140:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb18
  }
  preds [bb6]
  succs [bb18]

bb8
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/util/look.rs:1141:56-1141:57)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/util/look.rs:1141:56-1141:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:58)
      kind: _15 = <core::result::Result<bool, util::look::UnicodeWordBoundaryError> as core::ops::Try>::branch(move _16) -> [return: bb9, unwind: bb20]
  }
  preds [bb5]
  succs [bb9, bb20]

bb9
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/look.rs:1141:57-1141:58)
  1: PlaceMention(_15)
    SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:58)
  2: _19 = discriminant(_15)
    SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:58)
      kind: switchInt(move _19) -> [0: bb12, 1: bb11, otherwise: bb10]
  }
  preds [bb8]
  succs [bb10, bb11, bb12]

bb10
  0: FakeRead(ForMatchedPlace(None), _15)
    SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:58)
      kind: unreachable
  }
  preds [bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1141:57-1141:58)
      kind: falseEdge -> [real: bb13, imaginary: bb12]
  }
  preds [bb9]
  succs [bb12, bb13]

bb12
  0: StorageLive(_23)
    SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:58)
  1: _23 = ((_15 as Continue).0: bool)
    SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:58)
  2: _14 = _23
    SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:58)
  3: StorageDead(_23)
    SourceInfo(regex-automata/src/util/look.rs:1141:57-1141:58)
  4: FakeRead(ForLet(None), _14)
    SourceInfo(regex-automata/src/util/look.rs:1141:13-1141:23)
  5: StorageDead(_15)
    SourceInfo(regex-automata/src/util/look.rs:1141:58-1141:59)
  6: StorageLive(_24)
    SourceInfo(regex-automata/src/util/look.rs:1142:12-1142:38)
  7: StorageLive(_25)
    SourceInfo(regex-automata/src/util/look.rs:1142:13-1142:24)
  8: _25 = _4
    SourceInfo(regex-automata/src/util/look.rs:1142:13-1142:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1142:13-1142:24)
      kind: switchInt(move _25) -> [0: bb16, otherwise: bb15]
  }
  preds [bb9, bb11]
  succs [bb15, bb16]

bb13
  0: StorageLive(_20)
    SourceInfo(regex-automata/src/util/look.rs:1141:57-1141:58)
  1: _20 = move ((_15 as Break).0: core::result::Result<core::convert::Infallible, util::look::UnicodeWordBoundaryError>)
    SourceInfo(regex-automata/src/util/look.rs:1141:57-1141:58)
  2: StorageLive(_22)
    SourceInfo(regex-automata/src/util/look.rs:1141:57-1141:58)
  3: _22 = move _20
    SourceInfo(regex-automata/src/util/look.rs:1141:57-1141:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1141:26-1141:58)
      kind: _0 = <core::result::Result<bool, util::look::UnicodeWordBoundaryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::look::UnicodeWordBoundaryError>>>::from_residual(move _22) -> [return: bb14, unwind: bb20]
  }
  preds [bb11]
  succs [bb14, bb20]

bb14
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/util/look.rs:1141:57-1141:58)
  1: StorageDead(_20)
    SourceInfo(regex-automata/src/util/look.rs:1141:57-1141:58)
  2: StorageDead(_15)
    SourceInfo(regex-automata/src/util/look.rs:1141:58-1141:59)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/util/look.rs:1143:5-1143:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb18
  }
  preds [bb13]
  succs [bb18]

bb15
  0: _24 = const false
    SourceInfo(regex-automata/src/util/look.rs:1142:12-1142:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1142:12-1142:38)
      kind: goto -> bb17
  }
  preds [bb12]
  succs [bb17]

bb16
  0: _24 = _14
    SourceInfo(regex-automata/src/util/look.rs:1142:28-1142:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1142:12-1142:38)
      kind: goto -> bb17
  }
  preds [bb12]
  succs [bb17]

bb17
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/util/look.rs:1142:37-1142:38)
  1: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::Ok(move _24)
    SourceInfo(regex-automata/src/util/look.rs:1142:9-1142:39)
  2: StorageDead(_24)
    SourceInfo(regex-automata/src/util/look.rs:1142:38-1142:39)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/util/look.rs:1143:5-1143:6)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1143:5-1143:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1143:6-1143:6)
      kind: goto -> bb19
  }
  preds [bb15, bb16]
  succs [bb19]

bb18
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1143:5-1143:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1143:6-1143:6)
      kind: goto -> bb19
  }
  preds [bb7, bb14]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1143:6-1143:6)
      kind: return
  }
  preds [bb17, bb18]
  succs []

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1135:5-1143:6)
      kind: resume
  }
  preds [bb0, bb1, bb5, bb6, bb8, bb13]
  succs []

