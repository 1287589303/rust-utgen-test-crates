bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:13-1500:22)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:39-1500:56)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:26-1500:39)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:26-1500:39)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:26-1500:30)
  5: _7 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:26-1500:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1500:26-1500:39)
      kind: _6 = dfa::sparse::Transitions::<T>::sparse(move _7) -> [return: bb1, unwind: bb26]
  }
  preds []
  succs [bb1, bb26]

bb1
  0: _5 = &(*_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:26-1500:39)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:38-1500:39)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:40-1500:55)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:40-1500:53)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:40-1500:42)
  5: _10 = &_2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:40-1500:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1500:40-1500:53)
      kind: _9 = util::primitives::StateID::as_usize(move _10) -> [return: bb2, unwind: bb26]
  }
  preds [bb0]
  succs [bb2, bb26]

bb2
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:52-1500:53)
  1: _8 = core::ops::RangeFrom::<usize> { start: move _9 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:40-1500:55)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:54-1500:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1500:39-1500:56)
      kind: _4 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _5, move _8) -> [return: bb3, unwind: bb26]
  }
  preds [bb1]
  succs [bb3, bb26]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:55-1500:56)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:55-1500:56)
  2: _3 = &(*_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:25-1500:56)
  3: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1500:13-1500:22)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1501:13-1501:23)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1501:26-1501:48)
  6: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1501:41-1501:47)
  7: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1501:41-1501:47)
  8: _14 = &_3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1501:41-1501:47)
  9: _13 = &(*(*_14))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1501:41-1501:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1501:26-1501:48)
      kind: _12 = util::wire::read_u16(move _13) -> [return: bb4, unwind: bb26]
  }
  preds [bb2]
  succs [bb4, bb26]

bb4
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1501:47-1501:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1501:26-1501:59)
      kind: _11 = <u16 as util::int::U16>::as_usize(move _12) -> [return: bb5, unwind: bb26]
  }
  preds [bb3]
  succs [bb5, bb26]

bb5
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1501:58-1501:59)
  1: FakeRead(ForLet(None), _11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1501:13-1501:23)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1501:59-1501:60)
  3: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:13-1502:21)
  4: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:24-1502:42)
  5: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:24-1502:33)
  6: _18 = const 15_i32 as u32 (IntToInt)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:24-1502:33)
  7: _19 = Lt(move _18, const 64_u32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:24-1502:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1502:24-1502:33)
      kind: assert(move _19, "attempt to shift left by `{}`, which would overflow", const 15_i32) -> [success: bb6, unwind: bb26]
  }
  preds [bb4]
  succs [bb6, bb26]

bb6
  0: _17 = Shl(const 1_usize, const 15_i32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:24-1502:33)
  1: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:36-1502:42)
  2: _20 = _11
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:36-1502:42)
  3: _16 = BitAnd(move _17, move _20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:24-1502:42)
  4: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:41-1502:42)
  5: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:41-1502:42)
  6: _15 = Ne(move _16, const 0_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:24-1502:47)
  7: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:46-1502:47)
  8: FakeRead(ForLet(None), _15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1502:13-1502:21)
  9: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1503:19-1503:29)
  10: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1503:20-1503:29)
  11: _23 = const 15_i32 as u32 (IntToInt)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1503:20-1503:29)
  12: _24 = Lt(move _23, const 64_u32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1503:20-1503:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1503:20-1503:29)
      kind: assert(move _24, "attempt to shift left by `{}`, which would overflow", const 15_i32) -> [success: bb7, unwind: bb26]
  }
  preds [bb5]
  succs [bb7, bb26]

bb7
  0: _22 = Shl(const 1_usize, const 15_i32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1503:20-1503:29)
  1: _21 = Not(move _22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1503:19-1503:29)
  2: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1503:28-1503:29)
  3: _11 = BitAnd(_11, move _21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1503:9-1503:29)
  4: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1503:28-1503:29)
  5: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:17-1504:28)
  6: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:17-1504:28)
  7: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:23-1504:28)
  8: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:18-1504:23)
  9: _28 = &(*_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:18-1504:23)
  10: StorageLive(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:24-1504:27)
  11: _29 = core::ops::RangeFrom::<usize> { start: const 2_usize }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:24-1504:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1504:23-1504:28)
      kind: _27 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _28, move _29) -> [return: bb8, unwind: bb26]
  }
  preds [bb6]
  succs [bb8, bb26]

bb8
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:27-1504:28)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:27-1504:28)
  2: _26 = &(*_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:17-1504:28)
  3: _25 = &(*_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:17-1504:28)
  4: _3 = move _25
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:9-1504:28)
  5: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:27-1504:28)
  6: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:28-1504:29)
  7: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1504:28-1504:29)
  8: StorageLive(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:37-1506:63)
  9: StorageLive(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:37-1506:42)
  10: _33 = &(*_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:37-1506:42)
  11: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:52-1506:62)
  12: StorageLive(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:52-1506:58)
  13: _35 = _11
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:52-1506:58)
  14: _36 = MulWithOverflow(_35, const 2_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:52-1506:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1506:52-1506:62)
      kind: assert(!move (_36.1: bool), "attempt to compute `{} * {}`, which would overflow", move _35, const 2_usize) -> [success: bb9, unwind: bb26]
  }
  preds [bb7]
  succs [bb9, bb26]

bb9
  0: _34 = move (_36.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:52-1506:62)
  1: StorageDead(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:61-1506:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1506:37-1506:63)
      kind: _32 = core::slice::<impl [u8]>::split_at(move _33, move _34) -> [return: bb10, unwind: bb26]
  }
  preds [bb8]
  succs [bb10, bb26]

bb10
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:62-1506:63)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:62-1506:63)
  2: PlaceMention(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:37-1506:63)
  3: StorageLive(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:14-1506:26)
  4: _30 = (_32.0: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:14-1506:26)
  5: StorageLive(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:28-1506:33)
  6: _31 = (_32.1: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:28-1506:33)
  7: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1506:63-1506:64)
  8: StorageLive(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:29-1507:67)
  9: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:29-1507:34)
  10: _40 = &(*_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:29-1507:34)
  11: StorageLive(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:44-1507:66)
  12: StorageLive(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:44-1507:50)
  13: _42 = _11
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:44-1507:50)
  14: _43 = MulWithOverflow(_42, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:44-1507:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1507:44-1507:66)
      kind: assert(!move (_43.1: bool), "attempt to compute `{} * {}`, which would overflow", move _42, const util::primitives::StateID::SIZE) -> [success: bb11, unwind: bb26]
  }
  preds [bb9]
  succs [bb11, bb26]

bb11
  0: _41 = move (_43.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:44-1507:66)
  1: StorageDead(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:65-1507:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1507:29-1507:67)
      kind: _39 = core::slice::<impl [u8]>::split_at(move _40, move _41) -> [return: bb12, unwind: bb26]
  }
  preds [bb10]
  succs [bb12, bb26]

bb12
  0: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:66-1507:67)
  1: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:66-1507:67)
  2: PlaceMention(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:29-1507:67)
  3: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:14-1507:18)
  4: _37 = (_39.0: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:14-1507:18)
  5: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:20-1507:25)
  6: _38 = (_39.1: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:20-1507:25)
  7: StorageDead(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1507:67-1507:68)
  8: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1508:36-1513:10)
  9: StorageLive(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1508:39-1508:47)
  10: _47 = _15
    SourceInfo(regex-automata/src/dfa/sparse.rs:1508:39-1508:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1508:39-1508:47)
      kind: switchInt(move _47) -> [0: bb19, otherwise: bb13]
  }
  preds [bb11]
  succs [bb13, bb19]

bb13
  0: StorageLive(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1509:17-1509:22)
  1: StorageLive(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1509:25-1509:47)
  2: StorageLive(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1509:40-1509:46)
  3: StorageLive(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1509:40-1509:46)
  4: _51 = &_38
    SourceInfo(regex-automata/src/dfa/sparse.rs:1509:40-1509:46)
  5: _50 = &(*(*_51))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1509:40-1509:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1509:25-1509:47)
      kind: _49 = util::wire::read_u32(move _50) -> [return: bb14, unwind: bb26]
  }
  preds [bb12]
  succs [bb14, bb26]

bb14
  0: StorageDead(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1509:46-1509:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1509:25-1509:58)
      kind: _48 = <u32 as util::int::U32>::as_usize(move _49) -> [return: bb15, unwind: bb26]
  }
  preds [bb13]
  succs [bb15, bb26]

bb15
  0: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1509:57-1509:58)
  1: FakeRead(ForLet(None), _48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1509:17-1509:22)
  2: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1509:58-1509:59)
  3: StorageLive(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:13-1510:23)
  4: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:18-1510:23)
  5: StorageLive(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:13-1510:18)
  6: _54 = &(*_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:13-1510:18)
  7: StorageLive(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:19-1510:22)
  8: _55 = core::ops::RangeFrom::<usize> { start: const 4_usize }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:19-1510:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1510:18-1510:23)
      kind: _53 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _54, move _55) -> [return: bb16, unwind: bb26]
  }
  preds [bb14]
  succs [bb16, bb26]

bb16
  0: _52 = &(*_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:13-1510:23)
  1: StorageDead(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:22-1510:23)
  2: StorageDead(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:22-1510:23)
  3: StorageLive(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:33-1510:42)
  4: StorageLive(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:33-1510:38)
  5: _57 = _48
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:33-1510:38)
  6: _58 = MulWithOverflow(_57, const 4_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:33-1510:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1510:33-1510:42)
      kind: assert(!move (_58.1: bool), "attempt to compute `{} * {}`, which would overflow", move _57, const 4_usize) -> [success: bb17, unwind: bb26]
  }
  preds [bb15]
  succs [bb17, bb26]

bb17
  0: _56 = move (_58.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:33-1510:42)
  1: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:41-1510:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1510:13-1510:43)
      kind: _46 = core::slice::<impl [u8]>::split_at(move _52, move _56) -> [return: bb18, unwind: bb26]
  }
  preds [bb16]
  succs [bb18, bb26]

bb18
  0: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:42-1510:43)
  1: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1510:42-1510:43)
  2: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1511:9-1511:10)
  3: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1511:9-1511:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1508:36-1513:10)
      kind: goto -> bb21
  }
  preds [bb17]
  succs [bb21]

bb19
  0: StorageLive(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:14-1512:21)
  1: StorageLive(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:17-1512:21)
  2: StorageLive(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:15-1512:17)
  3: StorageLive(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:15-1512:17)
  4: _62 = []
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:15-1512:17)
  5: _61 = &_62
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:15-1512:17)
  6: StorageLive(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:18-1512:20)
  7: _63 = core::ops::RangeFull
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:18-1512:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1512:17-1512:21)
      kind: _60 = <[u8; 0] as core::ops::Index<core::ops::RangeFull>>::index(move _61, move _63) -> [return: bb20, unwind: bb26]
  }
  preds [bb12]
  succs [bb20, bb26]

bb20
  0: StorageDead(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:20-1512:21)
  1: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:20-1512:21)
  2: _59 = &(*_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:14-1512:21)
  3: StorageLive(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:23-1512:28)
  4: _64 = _38
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:23-1512:28)
  5: _46 = (move _59, move _64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:13-1512:29)
  6: StorageDead(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:28-1512:29)
  7: StorageDead(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1512:28-1512:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1508:36-1513:10)
      kind: goto -> bb21
  }
  preds [bb19]
  succs [bb21]

bb21
  0: StorageDead(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1513:9-1513:10)
  1: PlaceMention(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1508:36-1513:10)
  2: StorageLive(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1508:14-1508:25)
  3: _44 = (_46.0: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1508:14-1508:25)
  4: StorageLive(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1508:27-1508:32)
  5: _45 = (_46.1: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1508:27-1508:32)
  6: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1513:10-1513:11)
  7: StorageLive(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1515:13-1515:22)
  8: StorageLive(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1515:37-1515:45)
  9: StorageLive(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1515:43-1515:44)
  10: _67 = const 0_usize
    SourceInfo(regex-automata/src/dfa/sparse.rs:1515:43-1515:44)
  11: _68 = Len((*_45))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1515:37-1515:45)
  12: _69 = Lt(_67, _68)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1515:37-1515:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1515:37-1515:45)
      kind: assert(move _69, "index out of bounds: the length is {} but the index is {}", move _68, _67) -> [success: bb22, unwind: bb26]
  }
  preds [bb18, bb20]
  succs [bb22, bb26]

bb22
  0: _66 = (*_45)[_67]
    SourceInfo(regex-automata/src/dfa/sparse.rs:1515:37-1515:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1515:25-1515:46)
      kind: _65 = <usize as core::convert::From<u8>>::from(move _66) -> [return: bb23, unwind: bb26]
  }
  preds [bb21]
  succs [bb23, bb26]

bb23
  0: StorageDead(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1515:45-1515:46)
  1: FakeRead(ForLet(None), _65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1515:13-1515:22)
  2: StorageDead(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1515:46-1515:47)
  3: StorageLive(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:13-1516:18)
  4: StorageLive(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:27-1516:45)
  5: StorageLive(_72)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:22-1516:27)
  6: _72 = &(*_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:22-1516:27)
  7: StorageLive(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:28-1516:44)
  8: StorageLive(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:31-1516:44)
  9: StorageLive(_75)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:31-1516:40)
  10: _75 = _65
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:31-1516:40)
  11: _76 = AddWithOverflow(_75, const 1_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:31-1516:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1516:31-1516:44)
      kind: assert(!move (_76.1: bool), "attempt to compute `{} + {}`, which would overflow", move _75, const 1_usize) -> [success: bb24, unwind: bb26]
  }
  preds [bb22]
  succs [bb24, bb26]

bb24
  0: _74 = move (_76.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:31-1516:44)
  1: StorageDead(_75)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:43-1516:44)
  2: _73 = core::ops::Range::<usize> { start: const 1_usize, end: move _74 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:28-1516:44)
  3: StorageDead(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:43-1516:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1516:27-1516:45)
      kind: _71 = <[u8] as core::ops::Index<core::ops::Range<usize>>>::index(move _72, move _73) -> [return: bb25, unwind: bb26]
  }
  preds [bb23]
  succs [bb25, bb26]

bb25
  0: StorageDead(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:44-1516:45)
  1: StorageDead(_72)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:44-1516:45)
  2: _70 = &(*_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:21-1516:45)
  3: FakeRead(ForLet(None), _70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1516:13-1516:18)
  4: StorageLive(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:17-1517:19)
  5: _77 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:17-1517:19)
  6: StorageLive(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:21-1517:29)
  7: _78 = _15
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:21-1517:29)
  8: StorageLive(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:31-1517:37)
  9: _79 = _11
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:31-1517:37)
  10: StorageLive(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:39-1517:51)
  11: _80 = &(*_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:39-1517:51)
  12: StorageLive(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:53-1517:57)
  13: _81 = &(*_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:53-1517:57)
  14: StorageLive(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:59-1517:70)
  15: _82 = &(*_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:59-1517:70)
  16: StorageLive(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:72-1517:77)
  17: _83 = &(*_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:72-1517:77)
  18: _0 = dfa::sparse::State::<'_> { id: move _77, is_match: move _78, ntrans: move _79, input_ranges: move _80, next: move _81, pattern_ids: move _82, accel: move _83 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:9-1517:79)
  19: StorageDead(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:78-1517:79)
  20: StorageDead(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:78-1517:79)
  21: StorageDead(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:78-1517:79)
  22: StorageDead(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:78-1517:79)
  23: StorageDead(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:78-1517:79)
  24: StorageDead(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:78-1517:79)
  25: StorageDead(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1517:78-1517:79)
  26: StorageDead(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  27: StorageDead(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  28: StorageDead(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  29: StorageDead(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  30: StorageDead(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  31: StorageDead(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  32: StorageDead(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  33: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  34: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  35: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  36: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  37: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  38: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  39: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  40: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  41: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1518:5-1518:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1518:6-1518:6)
      kind: return
  }
  preds [bb24]
  succs []

bb26
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1499:5-1518:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb13, bb14, bb15, bb16, bb17, bb19, bb21, bb22, bb23, bb24]
  succs []

