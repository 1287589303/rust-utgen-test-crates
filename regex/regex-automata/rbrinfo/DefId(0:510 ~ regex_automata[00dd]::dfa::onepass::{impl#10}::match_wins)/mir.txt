bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2621:9-2621:53)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2621:10-2621:48)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2621:10-2621:16)
  3: _4 = ((*_1).0: u64)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2621:10-2621:16)
  4: _5 = Lt(const dfa::onepass::Transition::MATCH_WINS_SHIFT, const 64_u64)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2621:10-2621:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:2621:10-2621:48)
      kind: assert(move _5, "attempt to shift right by `{}`, which would overflow", const dfa::onepass::Transition::MATCH_WINS_SHIFT) -> [success: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _3 = Shr(move _4, const dfa::onepass::Transition::MATCH_WINS_SHIFT)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2621:10-2621:48)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2621:47-2621:48)
  2: _2 = BitAnd(move _3, const 1_u64)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2621:9-2621:53)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2621:52-2621:53)
  4: _0 = Eq(move _2, const 1_u64)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2621:9-2621:58)
  5: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2621:57-2621:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:2622:6-2622:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:2620:5-2622:6)
      kind: resume
  }
  preds [bb0]
  succs []

