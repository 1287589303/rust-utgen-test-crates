bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:55)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:55)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:30)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:30)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:23)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:23)
  6: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:13)
  7: _9 = &(*_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:23)
      kind: _8 = dfa::accel::Accel::needles(move _9) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: _7 = &(*_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:23)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:22-491:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:30)
      kind: _6 = core::slice::<impl [u8]>::iter(move _7) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _5 = &mut _6
    SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:30)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:29-491:30)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:40-491:54)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:40-491:54)
  4: _11 = &_2
    SourceInfo(regex-automata/src/dfa/accel.rs:491:40-491:54)
  5: _10 = {closure@regex-automata/src/dfa/accel.rs:491:40: 491:44} { byte: move _11 }
    SourceInfo(regex-automata/src/dfa/accel.rs:491:40-491:54)
  6: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:43-491:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:55)
      kind: _4 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::position::<{closure@regex-automata/src/dfa/accel.rs:491:40: 491:44}>(move _5, move _10) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _3 = &_4
    SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:55)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:54-491:55)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:54-491:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:491:9-491:65)
      kind: _0 = core::option::Option::<usize>::is_some(move _3) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:491:64-491:65)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:492:5-492:6)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:492:5-492:6)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:492:5-492:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:492:6-492:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:490:5-492:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

