bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/hybrid/id.rs:320:9-320:60)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/id.rs:320:9-320:34)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/id.rs:320:9-320:13)
  3: _4 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/id.rs:320:9-320:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/id.rs:320:9-320:34)
      kind: _3 = hybrid::id::LazyStateID::as_usize_unchecked(move _4) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/id.rs:320:33-320:34)
  1: _2 = BitAnd(move _3, const hybrid::id::LazyStateID::MASK_MATCH)
    SourceInfo(regex-automata/src/hybrid/id.rs:320:9-320:60)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/id.rs:320:59-320:60)
  3: _0 = Gt(move _2, const 0_usize)
    SourceInfo(regex-automata/src/hybrid/id.rs:320:9-320:64)
  4: StorageDead(_2)
    SourceInfo(regex-automata/src/hybrid/id.rs:320:63-320:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/id.rs:321:6-321:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/id.rs:319:5-321:6)
      kind: resume
  }
  preds [bb0]
  succs []

