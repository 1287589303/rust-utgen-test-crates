{
  "regex-automata/src/dfa/special.rs:301:29:301:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "self.quit_id >= self.min_start",
          "lhs": "self.quit_id",
          "rhs": "self.min_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:307:30:307:43": [
    {
      "Bool": {
        "Other": "self.starts()"
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:304:47:304:78": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "self.min_accel < self.min_match",
          "lhs": "self.min_accel",
          "rhs": "self.min_match",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:264:12:264:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.min_match == DEAD",
          "lhs": "self.min_match",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:304:12:304:26": [
    {
      "Bool": {
        "Other": "self.matches()"
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:304:30:304:43": [
    {
      "Bool": {
        "Other": "self.accels()"
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:279:38:279:60": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.max_start == DEAD",
          "lhs": "self.max_start",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:310:12:310:25": [
    {
      "Bool": {
        "Other": "self.accels()"
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:267:12:267:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.min_match != DEAD",
          "lhs": "self.min_match",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:273:12:273:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.min_accel != DEAD",
          "lhs": "self.min_accel",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:307:47:307:78": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "self.min_start < self.min_match",
          "lhs": "self.min_start",
          "rhs": "self.min_match",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:287:12:287:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "self.min_accel > self.max_accel",
          "lhs": "self.min_accel",
          "rhs": "self.max_accel",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:290:12:290:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "self.min_start > self.max_start",
          "lhs": "self.min_start",
          "rhs": "self.max_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:324:12:324:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "self.max < self.max_start",
          "lhs": "self.max",
          "rhs": "self.max_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:301:12:301:25": [
    {
      "Bool": {
        "Other": "self.starts()"
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:318:12:318:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "self.max < self.max_match",
          "lhs": "self.max",
          "rhs": "self.max_match",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:284:12:284:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "self.min_match > self.max_match",
          "lhs": "self.min_match",
          "rhs": "self.max_match",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:298:29:298:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "self.quit_id >= self.min_accel",
          "lhs": "self.quit_id",
          "rhs": "self.min_accel",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:295:30:295:60": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "self.quit_id >= self.min_match",
          "lhs": "self.quit_id",
          "rhs": "self.min_match",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:264:38:264:60": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.max_match != DEAD",
          "lhs": "self.max_match",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:307:12:307:26": [
    {
      "Bool": {
        "Other": "self.matches()"
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:310:29:310:42": [
    {
      "Bool": {
        "Other": "self.starts()"
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:270:38:270:60": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.max_accel != DEAD",
          "lhs": "self.max_accel",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:270:12:270:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.min_accel == DEAD",
          "lhs": "self.min_accel",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:298:12:298:25": [
    {
      "Bool": {
        "Other": "self.accels()"
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:276:12:276:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.min_start == DEAD",
          "lhs": "self.min_start",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:267:38:267:60": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.max_match == DEAD",
          "lhs": "self.max_match",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:279:12:279:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.min_start != DEAD",
          "lhs": "self.min_start",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:321:12:321:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "self.max < self.max_accel",
          "lhs": "self.max",
          "rhs": "self.max_accel",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:315:12:315:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "self.max < self.quit_id",
          "lhs": "self.max",
          "rhs": "self.quit_id",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:273:38:273:60": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.max_accel == DEAD",
          "lhs": "self.max_accel",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:276:38:276:60": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.max_start != DEAD",
          "lhs": "self.max_start",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:310:46:310:77": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "self.min_start < self.min_accel",
          "lhs": "self.min_start",
          "rhs": "self.min_accel",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:295:12:295:26": [
    {
      "Bool": {
        "Other": "self.matches()"
      }
    }
  ]
}