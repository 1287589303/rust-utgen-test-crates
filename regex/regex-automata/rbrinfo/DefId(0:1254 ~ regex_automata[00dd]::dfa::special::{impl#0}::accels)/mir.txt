bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/special.rs:486:9-486:23)
  1: _2 = &((*_1).4: util::primitives::StateID)
    SourceInfo(regex-automata/src/dfa/special.rs:486:9-486:23)
  2: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/special.rs:486:27-486:31)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/special.rs:486:27-486:31)
  4: _4 = const dfa::DEAD
    SourceInfo(regex-automata/src/dfa/special.rs:486:27-486:31)
  5: _3 = &_4
    SourceInfo(regex-automata/src/dfa/special.rs:486:27-486:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:486:9-486:31)
      kind: _0 = <util::primitives::StateID as core::cmp::PartialEq>::ne(move _2, move _3) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/special.rs:486:30-486:31)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/special.rs:486:30-486:31)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/special.rs:487:5-487:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:487:6-487:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:485:5-487:6)
      kind: resume
  }
  preds [bb0]
  succs []

