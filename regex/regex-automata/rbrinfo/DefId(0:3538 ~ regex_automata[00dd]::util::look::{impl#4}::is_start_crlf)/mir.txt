bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:956:9-956:36)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:956:9-956:13)
  2: _5 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:956:9-956:13)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:956:23-956:31)
  4: _6 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:956:23-956:31)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:956:33-956:35)
  6: _7 = _3
    SourceInfo(regex-automata/src/util/look.rs:956:33-956:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:956:9-956:36)
      kind: _4 = util::look::LookMatcher::is_start(move _5, move _6, move _7) -> [return: bb1, unwind: bb20]
  }
  preds []
  succs [bb1, bb20]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:956:9-956:36)
      kind: switchInt(move _4) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:956:35-956:36)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:956:35-956:36)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:956:35-956:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:956:9-959:68)
      kind: goto -> bb7
  }
  preds [bb1]
  succs [bb7]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:956:35-956:36)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:956:35-956:36)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:956:35-956:36)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:957:16-957:41)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:957:16-957:32)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/util/look.rs:957:25-957:31)
  6: StorageLive(_11)
    SourceInfo(regex-automata/src/util/look.rs:957:25-957:27)
  7: _11 = _3
    SourceInfo(regex-automata/src/util/look.rs:957:25-957:27)
  8: _12 = SubWithOverflow(_11, const 1_usize)
    SourceInfo(regex-automata/src/util/look.rs:957:25-957:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:957:25-957:31)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", move _11, const 1_usize) -> [success: bb4, unwind: bb20]
  }
  preds [bb1]
  succs [bb4, bb20]

bb4
  0: _10 = move (_12.0: usize)
    SourceInfo(regex-automata/src/util/look.rs:957:25-957:31)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/look.rs:957:30-957:31)
  2: _13 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:957:16-957:32)
  3: _14 = Lt(_10, _13)
    SourceInfo(regex-automata/src/util/look.rs:957:16-957:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:957:16-957:32)
      kind: assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _10) -> [success: bb5, unwind: bb20]
  }
  preds [bb3]
  succs [bb5, bb20]

bb5
  0: _9 = (*_2)[_10]
    SourceInfo(regex-automata/src/util/look.rs:957:16-957:32)
  1: _8 = Eq(move _9, const 10_u8)
    SourceInfo(regex-automata/src/util/look.rs:957:16-957:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:957:16-957:41)
      kind: switchInt(move _8) -> [0: bb8, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:957:40-957:41)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:957:40-957:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:956:9-959:68)
      kind: goto -> bb7
  }
  preds [bb5]
  succs [bb7]

bb7
  0: _0 = const true
    SourceInfo(regex-automata/src/util/look.rs:956:9-959:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:956:9-959:68)
      kind: goto -> bb19
  }
  preds [bb2, bb6]
  succs [bb19]

bb8
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:957:40-957:41)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:957:40-957:41)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/util/look.rs:958:17-958:42)
  3: StorageLive(_16)
    SourceInfo(regex-automata/src/util/look.rs:958:17-958:33)
  4: StorageLive(_17)
    SourceInfo(regex-automata/src/util/look.rs:958:26-958:32)
  5: StorageLive(_18)
    SourceInfo(regex-automata/src/util/look.rs:958:26-958:28)
  6: _18 = _3
    SourceInfo(regex-automata/src/util/look.rs:958:26-958:28)
  7: _19 = SubWithOverflow(_18, const 1_usize)
    SourceInfo(regex-automata/src/util/look.rs:958:26-958:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:958:26-958:32)
      kind: assert(!move (_19.1: bool), "attempt to compute `{} - {}`, which would overflow", move _18, const 1_usize) -> [success: bb9, unwind: bb20]
  }
  preds [bb5]
  succs [bb9, bb20]

bb9
  0: _17 = move (_19.0: usize)
    SourceInfo(regex-automata/src/util/look.rs:958:26-958:32)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/util/look.rs:958:31-958:32)
  2: _20 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:958:17-958:33)
  3: _21 = Lt(_17, _20)
    SourceInfo(regex-automata/src/util/look.rs:958:17-958:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:958:17-958:33)
      kind: assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _17) -> [success: bb10, unwind: bb20]
  }
  preds [bb8]
  succs [bb10, bb20]

bb10
  0: _16 = (*_2)[_17]
    SourceInfo(regex-automata/src/util/look.rs:958:17-958:33)
  1: _15 = Eq(move _16, const 13_u8)
    SourceInfo(regex-automata/src/util/look.rs:958:17-958:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:958:17-958:42)
      kind: switchInt(move _15) -> [0: bb12, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb12]

bb11
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/look.rs:958:41-958:42)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/look.rs:958:41-958:42)
  2: StorageLive(_22)
    SourceInfo(regex-automata/src/util/look.rs:959:21-959:41)
  3: StorageLive(_23)
    SourceInfo(regex-automata/src/util/look.rs:959:21-959:23)
  4: _23 = _3
    SourceInfo(regex-automata/src/util/look.rs:959:21-959:23)
  5: StorageLive(_24)
    SourceInfo(regex-automata/src/util/look.rs:959:27-959:41)
  6: StorageLive(_25)
    SourceInfo(regex-automata/src/util/look.rs:959:27-959:35)
  7: _25 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:959:27-959:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:959:27-959:41)
      kind: _24 = core::slice::<impl [u8]>::len(move _25) -> [return: bb13, unwind: bb20]
  }
  preds [bb10]
  succs [bb13, bb20]

bb12
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/look.rs:958:41-958:42)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/look.rs:958:41-958:42)
  2: _0 = const false
    SourceInfo(regex-automata/src/util/look.rs:958:16-959:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:958:16-959:68)
      kind: goto -> bb18
  }
  preds [bb10]
  succs [bb18]

bb13
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/util/look.rs:959:40-959:41)
  1: _22 = Ge(move _23, move _24)
    SourceInfo(regex-automata/src/util/look.rs:959:21-959:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:959:21-959:41)
      kind: switchInt(move _22) -> [0: bb15, otherwise: bb14]
  }
  preds [bb11]
  succs [bb14, bb15]

bb14
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/look.rs:959:40-959:41)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/util/look.rs:959:40-959:41)
  2: _0 = const true
    SourceInfo(regex-automata/src/util/look.rs:959:20-959:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:959:20-959:67)
      kind: goto -> bb17
  }
  preds [bb13]
  succs [bb17]

bb15
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/look.rs:959:40-959:41)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/util/look.rs:959:40-959:41)
  2: StorageLive(_26)
    SourceInfo(regex-automata/src/util/look.rs:959:45-959:57)
  3: StorageLive(_27)
    SourceInfo(regex-automata/src/util/look.rs:959:54-959:56)
  4: _27 = _3
    SourceInfo(regex-automata/src/util/look.rs:959:54-959:56)
  5: _28 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:959:45-959:57)
  6: _29 = Lt(_27, _28)
    SourceInfo(regex-automata/src/util/look.rs:959:45-959:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:959:45-959:57)
      kind: assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb16, unwind: bb20]
  }
  preds [bb13]
  succs [bb16, bb20]

bb16
  0: _26 = (*_2)[_27]
    SourceInfo(regex-automata/src/util/look.rs:959:45-959:57)
  1: _0 = Ne(move _26, const 10_u8)
    SourceInfo(regex-automata/src/util/look.rs:959:45-959:66)
  2: StorageDead(_27)
    SourceInfo(regex-automata/src/util/look.rs:959:65-959:66)
  3: StorageDead(_26)
    SourceInfo(regex-automata/src/util/look.rs:959:65-959:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:959:20-959:67)
      kind: goto -> bb17
  }
  preds [bb15]
  succs [bb17]

bb17
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/util/look.rs:959:66-959:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:958:16-959:68)
      kind: goto -> bb18
  }
  preds [bb14, bb16]
  succs [bb18]

bb18
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/util/look.rs:959:67-959:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:956:9-959:68)
      kind: goto -> bb19
  }
  preds [bb12, bb17]
  succs [bb19]

bb19
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:959:67-959:68)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:959:67-959:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:960:6-960:6)
      kind: return
  }
  preds [bb7, bb18]
  succs []

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:955:5-960:6)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb8, bb9, bb11, bb15]
  succs []

