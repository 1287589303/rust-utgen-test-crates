{
  "regex-automata/src/util/look.rs:959:45:959:66": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "haystack[at] != b'\\n'",
          "lhs": "haystack[at]",
          "rhs": "b'\\n'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/look.rs:959:21:959:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "at >= haystack.len()",
          "lhs": "at",
          "rhs": "haystack.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/look.rs:958:26:958:32": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/look.rs:957:25:957:31": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/look.rs:957:16:957:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "haystack[at - 1] == b'\\n'",
          "lhs": "haystack[at - 1]",
          "rhs": "b'\\n'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/look.rs:956:9:956:36": [
    {
      "Bool": {
        "Other": "self.is_start(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:958:17:958:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "haystack[at - 1] == b'\\r'",
          "lhs": "haystack[at - 1]",
          "rhs": "b'\\r'",
          "cmp_with_int": true
        }
      }
    }
  ]
}