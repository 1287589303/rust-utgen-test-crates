bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2761:13-2761:19)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2761:22-2761:47)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2761:22-2761:32)
  3: _5 = &(*((*_1).1: &hybrid::dfa::Cache))
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2761:22-2761:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2761:22-2761:47)
      kind: _4 = hybrid::dfa::Cache::memory_usage(move _5) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2761:46-2761:47)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:15-2762:73)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:15-2762:19)
  3: _7 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:15-2762:19)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:52-2762:72)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:52-2762:57)
  6: _9 = &(*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:52-2762:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:52-2762:72)
      kind: _8 = util::determinize::state::State::memory_usage(move _9) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:71-2762:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:15-2762:73)
      kind: _6 = hybrid::dfa::LazyRef::<'_, '_>::memory_usage_for_one_more_state(move _7, move _8) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:72-2762:73)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:72-2762:73)
  2: _10 = AddWithOverflow(_4, _6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2761:22-2762:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2761:22-2762:73)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _6) -> [success: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: _3 = move (_10.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2761:22-2762:73)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:72-2762:73)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2762:72-2762:73)
  3: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2761:13-2761:19)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2768:9-2768:15)
  5: _11 = _3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2768:9-2768:15)
  6: StorageLive(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2768:19-2768:42)
  7: _12 = ((*((*_1).0: &hybrid::dfa::DFA)).6: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2768:19-2768:42)
  8: _0 = Le(move _11, move _12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2768:9-2768:42)
  9: StorageDead(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2768:41-2768:42)
  10: StorageDead(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2768:41-2768:42)
  11: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2769:5-2769:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2769:6-2769:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2760:5-2769:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

