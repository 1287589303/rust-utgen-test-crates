bb0
  0: PlaceMention(((*_1).0: nfa::thompson::error::BuildErrorKind))
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:85:15-85:24)
  1: _2 = discriminant(((*_1).0: nfa::thompson::error::BuildErrorKind))
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:85:15-85:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/error.rs:85:9-85:24)
      kind: switchInt(move _2) -> [5: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _0 = core::option::Option::<usize>::None
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:87:18-87:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/error.rs:87:18-87:22)
      kind: goto -> bb4
  }
  preds [bb0, bb2]
  succs [bb4]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/error.rs:86:13-86:56)
      kind: falseEdge -> [real: bb3, imaginary: bb1]
  }
  preds [bb0]
  succs [bb1, bb3]

bb3
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:86:49-86:54)
  1: _3 = ((((*_1).0: nfa::thompson::error::BuildErrorKind) as ExceededSizeLimit).0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:86:49-86:54)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:86:65-86:70)
  3: _4 = _3
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:86:65-86:70)
  4: _0 = core::option::Option::<usize>::Some(move _4)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:86:60-86:71)
  5: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:86:70-86:71)
  6: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:86:70-86:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/error.rs:86:70-86:71)
      kind: goto -> bb4
  }
  preds [bb2]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/error.rs:89:6-89:6)
      kind: return
  }
  preds [bb1, bb3]
  succs []

