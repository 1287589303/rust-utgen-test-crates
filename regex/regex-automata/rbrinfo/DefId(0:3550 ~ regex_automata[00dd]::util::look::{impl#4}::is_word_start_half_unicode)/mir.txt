bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:1223:13-1223:24)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:1223:27-1223:33)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:1223:27-1223:29)
  3: _6 = _3
    SourceInfo(regex-automata/src/util/look.rs:1223:27-1223:29)
  4: _5 = Gt(move _6, const 0_usize)
    SourceInfo(regex-automata/src/util/look.rs:1223:27-1223:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1223:27-1223:33)
      kind: switchInt(move _5) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1223:32-1223:33)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:1224:22-1224:56)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:1224:40-1224:55)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:1224:40-1224:55)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/util/look.rs:1224:49-1224:55)
  5: StorageLive(_11)
    SourceInfo(regex-automata/src/util/look.rs:1224:41-1224:49)
  6: _11 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1224:41-1224:49)
  7: StorageLive(_12)
    SourceInfo(regex-automata/src/util/look.rs:1224:50-1224:54)
  8: StorageLive(_13)
    SourceInfo(regex-automata/src/util/look.rs:1224:52-1224:54)
  9: _13 = _3
    SourceInfo(regex-automata/src/util/look.rs:1224:52-1224:54)
  10: _12 = core::ops::RangeTo::<usize> { end: move _13 }
    SourceInfo(regex-automata/src/util/look.rs:1224:50-1224:54)
  11: StorageDead(_13)
    SourceInfo(regex-automata/src/util/look.rs:1224:53-1224:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1224:49-1224:55)
      kind: _10 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _11, move _12) -> [return: bb3, unwind: bb20]
  }
  preds [bb0]
  succs [bb3, bb20]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1223:32-1223:33)
  1: _4 = const false
    SourceInfo(regex-automata/src/util/look.rs:1223:27-1227:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1223:27-1227:14)
      kind: goto -> bb17
  }
  preds [bb0]
  succs [bb17]

bb3
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/look.rs:1224:54-1224:55)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/look.rs:1224:54-1224:55)
  2: _9 = &(*_10)
    SourceInfo(regex-automata/src/util/look.rs:1224:40-1224:55)
  3: _8 = &(*_9)
    SourceInfo(regex-automata/src/util/look.rs:1224:40-1224:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1224:22-1224:56)
      kind: _7 = util::utf8::decode_last(move _8) -> [return: bb4, unwind: bb20]
  }
  preds [bb1]
  succs [bb4, bb20]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:1224:55-1224:56)
  1: PlaceMention(_7)
    SourceInfo(regex-automata/src/util/look.rs:1224:22-1224:56)
  2: _15 = discriminant(_7)
    SourceInfo(regex-automata/src/util/look.rs:1224:22-1224:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1224:16-1224:56)
      kind: switchInt(move _15) -> [0: bb8, 1: bb6, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6, bb8]

bb5
  0: FakeRead(ForMatchedPlace(None), _7)
    SourceInfo(regex-automata/src/util/look.rs:1224:22-1224:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1224:22-1224:56)
      kind: unreachable
  }
  preds [bb4, bb6]
  succs []

bb6
  0: _14 = discriminant(((_7 as Some).0: core::result::Result<char, u8>))
    SourceInfo(regex-automata/src/util/look.rs:1224:22-1224:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1224:16-1224:56)
      kind: switchInt(move _14) -> [0: bb7, 1: bb8, otherwise: bb5]
  }
  preds [bb4]
  succs [bb5, bb7, bb8]

bb7
  0: StorageLive(_17)
    SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:64)
  1: StorageLive(_18)
    SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:63)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/util/look.rs:1226:50-1226:58)
  3: _19 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1226:50-1226:58)
  4: StorageLive(_20)
    SourceInfo(regex-automata/src/util/look.rs:1226:60-1226:62)
  5: _20 = _3
    SourceInfo(regex-automata/src/util/look.rs:1226:60-1226:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:63)
      kind: _18 = util::look::is_word_char::rev(move _19, move _20) -> [return: bb10, unwind: bb20]
  }
  preds [bb6, bb8]
  succs [bb10, bb20]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1225:17-1225:36)
      kind: falseEdge -> [real: bb9, imaginary: bb7]
  }
  preds [bb4, bb6]
  succs [bb7, bb9]

bb9
  0: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::Ok(const false)
    SourceInfo(regex-automata/src/util/look.rs:1225:47-1225:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1225:40-1225:56)
      kind: goto -> bb18
  }
  preds [bb8]
  succs [bb18]

bb10
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/look.rs:1226:62-1226:63)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/util/look.rs:1226:62-1226:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:64)
      kind: _17 = <core::result::Result<bool, util::look::UnicodeWordBoundaryError> as core::ops::Try>::branch(move _18) -> [return: bb11, unwind: bb20]
  }
  preds [bb7]
  succs [bb11, bb20]

bb11
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/util/look.rs:1226:63-1226:64)
  1: PlaceMention(_17)
    SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:64)
  2: _21 = discriminant(_17)
    SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:64)
      kind: switchInt(move _21) -> [0: bb14, 1: bb13, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb13, bb14]

bb12
  0: FakeRead(ForMatchedPlace(None), _17)
    SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:64)
      kind: unreachable
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1226:63-1226:64)
      kind: falseEdge -> [real: bb15, imaginary: bb14]
  }
  preds [bb11]
  succs [bb14, bb15]

bb14
  0: StorageLive(_25)
    SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:64)
  1: _25 = ((_17 as Continue).0: bool)
    SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:64)
  2: _4 = _25
    SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:64)
  3: StorageDead(_25)
    SourceInfo(regex-automata/src/util/look.rs:1226:63-1226:64)
  4: StorageDead(_17)
    SourceInfo(regex-automata/src/util/look.rs:1226:63-1226:64)
  5: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:1227:13-1227:14)
  6: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:1227:13-1227:14)
  7: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1227:13-1227:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1223:27-1227:14)
      kind: goto -> bb17
  }
  preds [bb11, bb13]
  succs [bb17]

bb15
  0: StorageLive(_22)
    SourceInfo(regex-automata/src/util/look.rs:1226:63-1226:64)
  1: _22 = move ((_17 as Break).0: core::result::Result<core::convert::Infallible, util::look::UnicodeWordBoundaryError>)
    SourceInfo(regex-automata/src/util/look.rs:1226:63-1226:64)
  2: StorageLive(_24)
    SourceInfo(regex-automata/src/util/look.rs:1226:63-1226:64)
  3: _24 = move _22
    SourceInfo(regex-automata/src/util/look.rs:1226:63-1226:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1226:32-1226:64)
      kind: _0 = <core::result::Result<bool, util::look::UnicodeWordBoundaryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::look::UnicodeWordBoundaryError>>>::from_residual(move _24) -> [return: bb16, unwind: bb20]
  }
  preds [bb13]
  succs [bb16, bb20]

bb16
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/look.rs:1226:63-1226:64)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/util/look.rs:1226:63-1226:64)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/util/look.rs:1226:63-1226:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb18
  }
  preds [bb15]
  succs [bb18]

bb17
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1227:13-1227:14)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/look.rs:1223:13-1223:24)
  2: StorageLive(_26)
    SourceInfo(regex-automata/src/util/look.rs:1228:12-1228:24)
  3: StorageLive(_27)
    SourceInfo(regex-automata/src/util/look.rs:1228:13-1228:24)
  4: _27 = _4
    SourceInfo(regex-automata/src/util/look.rs:1228:13-1228:24)
  5: _26 = Not(move _27)
    SourceInfo(regex-automata/src/util/look.rs:1228:12-1228:24)
  6: StorageDead(_27)
    SourceInfo(regex-automata/src/util/look.rs:1228:23-1228:24)
  7: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::Ok(move _26)
    SourceInfo(regex-automata/src/util/look.rs:1228:9-1228:25)
  8: StorageDead(_26)
    SourceInfo(regex-automata/src/util/look.rs:1228:24-1228:25)
  9: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1229:5-1229:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1229:6-1229:6)
      kind: goto -> bb19
  }
  preds [bb2, bb14]
  succs [bb19]

bb18
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:1227:13-1227:14)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:1227:13-1227:14)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1227:13-1227:14)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1227:13-1227:14)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1229:5-1229:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1229:6-1229:6)
      kind: goto -> bb19
  }
  preds [bb9, bb16]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1229:6-1229:6)
      kind: return
  }
  preds [bb17, bb18]
  succs []

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1214:5-1229:6)
      kind: resume
  }
  preds [bb1, bb3, bb7, bb10, bb15]
  succs []

