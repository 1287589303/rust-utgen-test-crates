{
  "regex-automata/src/meta/stopat.rs:109:15:111:51": [
    {
      "Try": "dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?"
    }
  ],
  "regex-automata/src/meta/stopat.rs:137:5:137:59": [
    {
      "Try": "hybrid_eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?"
    }
  ],
  "regex-automata/src/meta/stopat.rs:112:12:112:27": [
    {
      "Bool": {
        "Other": "sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/meta/stopat.rs:126:32:126:48": [
    {
      "Bool": {
        "Other": "sid.is_unknown()"
      }
    }
  ],
  "regex-automata/src/meta/stopat.rs:121:23:121:36": [
    {
      "Bool": {
        "Other": "sid.is_quit()"
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12:316:42": [
    {
      "Bool": {
        "Other": "$crate::cfg!(debug_assertions)"
      }
    }
  ],
  "regex-automata/src/meta/stopat.rs:108:11:108:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "at < input.end()",
          "lhs": "at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/meta/stopat.rs:116:20:116:40": [
    {
      "Bool": {
        "Other": "input.get_earliest()"
      }
    }
  ],
  "regex-automata/src/meta/stopat.rs:119:23:119:36": [
    {
      "Bool": {
        "Other": "sid.is_dead()"
      }
    }
  ],
  "regex-automata/src/meta/stopat.rs:132:31:132:45": [
    {
      "Bool": {
        "Other": "sid.is_start()"
      }
    }
  ],
  "regex-automata/src/meta/stopat.rs:106:19:106:57": [
    {
      "Try": "dfa.start_state_forward(cache, input)?"
    }
  ],
  "regex-automata/src/meta/stopat.rs:113:16:113:30": [
    {
      "Bool": {
        "Other": "sid.is_match()"
      }
    }
  ]
}