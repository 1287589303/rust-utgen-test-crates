bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4327:9-4327:15)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4327:23-4327:40)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4327:23-4327:30)
  3: _6 = &(*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4327:23-4327:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4327:23-4327:40)
      kind: _5 = util::alphabet::ByteClasses::stride2(move _6) -> [return: bb1, unwind: bb49]
  }
  preds []
  succs [bb1, bb49]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4327:39-4327:40)
  1: _7 = Lt(_5, const 64_usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4327:18-4327:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4327:18-4327:40)
      kind: assert(move _7, "attempt to shift left by `{}`, which would overflow", _5) -> [success: bb2, unwind: bb49]
  }
  preds [bb0]
  succs [bb2, bb49]

bb2
  0: _4 = Shl(const 1_usize, move _5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4327:18-4327:40)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4327:39-4327:40)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4327:9-4327:15)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4328:9-4328:19)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4328:22-4328:34)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4328:22-4328:34)
  6: StorageLive(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4328:22-4328:25)
  7: _11 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4328:22-4328:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4328:22-4328:34)
      kind: _10 = nfa::thompson::nfa::NFA::states(move _11) -> [return: bb3, unwind: bb49]
  }
  preds [bb1]
  succs [bb3, bb49]

bb3
  0: _9 = &(*_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4328:22-4328:34)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4328:33-4328:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4328:22-4328:40)
      kind: _8 = core::slice::<impl [nfa::thompson::nfa::State]>::len(move _9) -> [return: bb4, unwind: bb49]
  }
  preds [bb2]
  succs [bb4, bb49]

bb4
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4328:39-4328:40)
  1: FakeRead(ForLet(None), _8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4328:9-4328:19)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4328:40-4328:41)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:9-4329:16)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:19-4329:33)
  5: StorageLive(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:23-4329:33)
  6: _14 = _8
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:23-4329:33)
  7: _15 = MulWithOverflow(const 2_usize, _14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:19-4329:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:19-4329:33)
      kind: assert(!move (_15.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _14) -> [success: bb5, unwind: bb49]
  }
  preds [bb3]
  succs [bb5, bb49]

bb5
  0: _13 = move (_15.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:19-4329:33)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:32-4329:33)
  2: _16 = MulWithOverflow(_13, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:19-4329:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:19-4329:52)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} * {}`, which would overflow", move _13, const util::primitives::StateID::SIZE) -> [success: bb6, unwind: bb49]
  }
  preds [bb4]
  succs [bb6, bb49]

bb6
  0: _12 = move (_16.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:19-4329:52)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:51-4329:52)
  2: FakeRead(ForLet(None), _12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4329:9-4329:16)
  3: StorageLive(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:9-4330:14)
  4: StorageLive(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:17-4330:36)
  5: StorageLive(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:30-4330:36)
  6: _19 = _4
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:30-4330:36)
  7: _20 = MulWithOverflow(const hybrid::dfa::MIN_STATES, _19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:17-4330:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:17-4330:36)
      kind: assert(!move (_20.1: bool), "attempt to compute `{} * {}`, which would overflow", const hybrid::dfa::MIN_STATES, move _19) -> [success: bb7, unwind: bb49]
  }
  preds [bb5]
  succs [bb7, bb49]

bb7
  0: _18 = move (_20.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:17-4330:36)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:35-4330:36)
  2: _21 = MulWithOverflow(_18, const hybrid::dfa::minimum_cache_capacity::ID_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:17-4330:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:17-4330:46)
      kind: assert(!move (_21.1: bool), "attempt to compute `{} * {}`, which would overflow", move _18, const hybrid::dfa::minimum_cache_capacity::ID_SIZE) -> [success: bb8, unwind: bb49]
  }
  preds [bb6]
  succs [bb8, bb49]

bb8
  0: _17 = move (_21.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:17-4330:46)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:45-4330:46)
  2: FakeRead(ForLet(None), _17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4330:9-4330:14)
  3: StorageLive(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4332:9-4332:19)
  4: StorageLive(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4332:22-4332:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4332:22-4332:34)
      kind: _23 = util::start::Start::len() -> [return: bb9, unwind: bb49]
  }
  preds [bb7]
  succs [bb9, bb49]

bb9
  0: _24 = MulWithOverflow(_23, const hybrid::dfa::minimum_cache_capacity::ID_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4332:22-4332:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4332:22-4332:44)
      kind: assert(!move (_24.1: bool), "attempt to compute `{} * {}`, which would overflow", move _23, const hybrid::dfa::minimum_cache_capacity::ID_SIZE) -> [success: bb10, unwind: bb49]
  }
  preds [bb8]
  succs [bb10, bb49]

bb10
  0: _22 = move (_24.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4332:22-4332:44)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4332:43-4332:44)
  2: FakeRead(ForLet(None), _22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4332:9-4332:19)
  3: StorageLive(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4333:5-4335:6)
  4: StorageLive(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4333:8-4333:31)
  5: _26 = _3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4333:8-4333:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4333:8-4333:31)
      kind: switchInt(move _26) -> [0: bb17, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb17]

bb11
  0: StorageLive(_27)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:19-4334:63)
  1: StorageLive(_28)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:19-4334:53)
  2: StorageLive(_29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:20-4334:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:20-4334:32)
      kind: _29 = util::start::Start::len() -> [return: bb12, unwind: bb49]
  }
  preds [bb10]
  succs [bb12, bb49]

bb12
  0: StorageLive(_30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:35-4334:52)
  1: StorageLive(_31)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:35-4334:38)
  2: _31 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:35-4334:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:35-4334:52)
      kind: _30 = nfa::thompson::nfa::NFA::pattern_len(move _31) -> [return: bb13, unwind: bb49]
  }
  preds [bb11]
  succs [bb13, bb49]

bb13
  0: StorageDead(_31)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:51-4334:52)
  1: _32 = MulWithOverflow(_29, _30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:19-4334:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:19-4334:53)
      kind: assert(!move (_32.1: bool), "attempt to compute `{} * {}`, which would overflow", move _29, move _30) -> [success: bb14, unwind: bb49]
  }
  preds [bb12]
  succs [bb14, bb49]

bb14
  0: _28 = move (_32.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:19-4334:53)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:52-4334:53)
  2: StorageDead(_29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:52-4334:53)
  3: _33 = MulWithOverflow(_28, const hybrid::dfa::minimum_cache_capacity::ID_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:19-4334:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:19-4334:63)
      kind: assert(!move (_33.1: bool), "attempt to compute `{} * {}`, which would overflow", move _28, const hybrid::dfa::minimum_cache_capacity::ID_SIZE) -> [success: bb15, unwind: bb49]
  }
  preds [bb13]
  succs [bb15, bb49]

bb15
  0: _27 = move (_33.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:19-4334:63)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:62-4334:63)
  2: _34 = AddWithOverflow(_22, _27)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:9-4334:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:9-4334:63)
      kind: assert(!move (_34.1: bool), "attempt to compute `{} + {}`, which would overflow", _22, move _27) -> [success: bb16, unwind: bb49]
  }
  preds [bb14]
  succs [bb16, bb49]

bb16
  0: _22 = move (_34.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:9-4334:63)
  1: StorageDead(_27)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4334:62-4334:63)
  2: _25 = const ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4333:32-4335:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4333:5-4335:6)
      kind: goto -> bb18
  }
  preds [bb15]
  succs [bb18]

bb17
  0: _25 = const ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4335:6-4335:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4333:5-4335:6)
      kind: goto -> bb18
  }
  preds [bb10]
  succs [bb18]

bb18
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4335:5-4335:6)
  1: StorageDead(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4335:5-4335:6)
  2: StorageLive(_35)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:5-4343:78)
  3: StorageLive(_36)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:13-4343:28)
  4: _36 = Ge(const hybrid::dfa::MIN_STATES, const 5_usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:13-4343:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:13-4343:28)
      kind: switchInt(move _36) -> [0: bb19, otherwise: bb21]
  }
  preds [bb16, bb17]
  succs [bb19, bb21]

bb19
  0: StorageLive(_38)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
  1: StorageLive(_39)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  2: StorageLive(_40)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:30-4343:77)
  3: StorageLive(_41)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:30-4343:77)
  4: StorageLive(_42)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:30-4343:77)
  5: _42 = [const "minimum number of states has to be at least 5"]
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:30-4343:77)
  6: _41 = &_42
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:30-4343:77)
  7: _40 = &(*_41)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:30-4343:77)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
      kind: _39 = core::fmt::Arguments::<'_>::new_const::<1>(move _40) -> [return: bb20, unwind: bb49]
  }
  preds [bb18]
  succs [bb20, bb49]

bb20
  0: StorageDead(_40)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
      kind: _38 = core::panicking::panic_fmt(move _39) -> bb49
  }
  preds [bb19]
  succs [bb49]

bb21
  0: _35 = const ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:78-4343:78)
  1: StorageDead(_36)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:77-4343:78)
  2: StorageDead(_35)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4343:77-4343:78)
  3: StorageLive(_43)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4348:9-4348:21)
  4: StorageLive(_44)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4348:24-4348:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4348:24-4348:63)
      kind: _44 = core::num::<impl usize>::checked_sub(const hybrid::dfa::MIN_STATES, const hybrid::dfa::SENTINEL_STATES) -> [return: bb22, unwind: bb49]
  }
  preds [bb18]
  succs [bb22, bb49]

bb22
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4348:24-4348:72)
      kind: _43 = core::option::Option::<usize>::unwrap(move _44) -> [return: bb23, unwind: bb49]
  }
  preds [bb21]
  succs [bb23, bb49]

bb23
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4348:71-4348:72)
  1: FakeRead(ForLet(None), _43)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4348:9-4348:21)
  2: StorageLive(_45)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4358:9-4358:24)
  3: StorageLive(_46)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4358:27-4358:40)
  4: StorageLive(_47)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4358:27-4358:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4358:27-4358:40)
      kind: _47 = util::determinize::state::State::dead() -> [return: bb24, unwind: bb49]
  }
  preds [bb22]
  succs [bb24, bb49]

bb24
  0: _46 = &_47
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4358:27-4358:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4358:27-4358:55)
      kind: _45 = util::determinize::state::State::memory_usage(move _46) -> [return: bb25, unwind: bb48]
  }
  preds [bb23]
  succs [bb25, bb48]

bb25
  0: StorageDead(_46)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4358:54-4358:55)
  1: FakeRead(ForLet(None), _45)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4358:9-4358:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4358:55-4358:56)
      kind: drop(_47) -> [return: bb26, unwind: bb49]
  }
  preds [bb24]
  succs [bb26, bb49]

bb26
  0: StorageDead(_47)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4358:55-4358:56)
  1: StorageLive(_48)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:9-4359:23)
  2: StorageLive(_49)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:26-4359:57)
  3: StorageLive(_50)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:26-4359:31)
  4: _51 = AddWithOverflow(const 5_usize, const 4_usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:26-4359:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:26-4359:31)
      kind: assert(!move (_51.1: bool), "attempt to compute `{} + {}`, which would overflow", const 5_usize, const 4_usize) -> [success: bb27, unwind: bb49]
  }
  preds [bb25]
  succs [bb27, bb49]

bb27
  0: _50 = move (_51.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:26-4359:31)
  1: StorageLive(_52)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:34-4359:57)
  2: StorageLive(_53)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:35-4359:52)
  3: StorageLive(_54)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:35-4359:38)
  4: _54 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:35-4359:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:35-4359:52)
      kind: _53 = nfa::thompson::nfa::NFA::pattern_len(move _54) -> [return: bb28, unwind: bb49]
  }
  preds [bb26]
  succs [bb28, bb49]

bb28
  0: StorageDead(_54)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:51-4359:52)
  1: _55 = MulWithOverflow(_53, const 4_usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:34-4359:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:34-4359:57)
      kind: assert(!move (_55.1: bool), "attempt to compute `{} * {}`, which would overflow", move _53, const 4_usize) -> [success: bb29, unwind: bb49]
  }
  preds [bb27]
  succs [bb29, bb49]

bb29
  0: _52 = move (_55.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:34-4359:57)
  1: StorageDead(_53)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:56-4359:57)
  2: _56 = AddWithOverflow(_50, _52)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:26-4359:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:26-4359:57)
      kind: assert(!move (_56.1: bool), "attempt to compute `{} + {}`, which would overflow", move _50, move _52) -> [success: bb30, unwind: bb49]
  }
  preds [bb28]
  succs [bb30, bb49]

bb30
  0: _49 = move (_56.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:26-4359:57)
  1: StorageDead(_52)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:56-4359:57)
  2: StorageDead(_50)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:56-4359:57)
  3: StorageLive(_57)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:60-4359:76)
  4: StorageLive(_58)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:61-4359:71)
  5: _58 = _8
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:61-4359:71)
  6: _59 = MulWithOverflow(_58, const 5_usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:60-4359:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:60-4359:76)
      kind: assert(!move (_59.1: bool), "attempt to compute `{} * {}`, which would overflow", move _58, const 5_usize) -> [success: bb31, unwind: bb49]
  }
  preds [bb29]
  succs [bb31, bb49]

bb31
  0: _57 = move (_59.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:60-4359:76)
  1: StorageDead(_58)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:75-4359:76)
  2: _60 = AddWithOverflow(_49, _57)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:26-4359:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:26-4359:76)
      kind: assert(!move (_60.1: bool), "attempt to compute `{} + {}`, which would overflow", move _49, move _57) -> [success: bb32, unwind: bb49]
  }
  preds [bb30]
  succs [bb32, bb49]

bb32
  0: _48 = move (_60.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:26-4359:76)
  1: StorageDead(_57)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:75-4359:76)
  2: StorageDead(_49)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:75-4359:76)
  3: FakeRead(ForLet(None), _48)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4359:9-4359:23)
  4: StorageLive(_61)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:9-4360:15)
  5: StorageLive(_62)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:18-4360:68)
  6: StorageLive(_63)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:37-4360:67)
  7: StorageLive(_64)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:51-4360:66)
  8: _64 = _45
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:51-4360:66)
  9: _65 = AddWithOverflow(const hybrid::dfa::minimum_cache_capacity::STATE_SIZE, _64)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:37-4360:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:37-4360:67)
      kind: assert(!move (_65.1: bool), "attempt to compute `{} + {}`, which would overflow", const hybrid::dfa::minimum_cache_capacity::STATE_SIZE, move _64) -> [success: bb33, unwind: bb49]
  }
  preds [bb31]
  succs [bb33, bb49]

bb33
  0: _63 = move (_65.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:37-4360:67)
  1: StorageDead(_64)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:66-4360:67)
  2: _66 = MulWithOverflow(const hybrid::dfa::SENTINEL_STATES, _63)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:18-4360:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:18-4360:68)
      kind: assert(!move (_66.1: bool), "attempt to compute `{} * {}`, which would overflow", const hybrid::dfa::SENTINEL_STATES, move _63) -> [success: bb34, unwind: bb49]
  }
  preds [bb32]
  succs [bb34, bb49]

bb34
  0: _62 = move (_66.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:18-4360:68)
  1: StorageDead(_63)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:67-4360:68)
  2: StorageLive(_67)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:11-4361:57)
  3: StorageLive(_68)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:12-4361:24)
  4: _68 = _43
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:12-4361:24)
  5: StorageLive(_69)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:27-4361:56)
  6: StorageLive(_70)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:41-4361:55)
  7: _70 = _48
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:41-4361:55)
  8: _71 = AddWithOverflow(const hybrid::dfa::minimum_cache_capacity::STATE_SIZE, _70)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:27-4361:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:27-4361:56)
      kind: assert(!move (_71.1: bool), "attempt to compute `{} + {}`, which would overflow", const hybrid::dfa::minimum_cache_capacity::STATE_SIZE, move _70) -> [success: bb35, unwind: bb49]
  }
  preds [bb33]
  succs [bb35, bb49]

bb35
  0: _69 = move (_71.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:27-4361:56)
  1: StorageDead(_70)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:55-4361:56)
  2: _72 = MulWithOverflow(_68, _69)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:11-4361:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:11-4361:57)
      kind: assert(!move (_72.1: bool), "attempt to compute `{} * {}`, which would overflow", move _68, move _69) -> [success: bb36, unwind: bb49]
  }
  preds [bb34]
  succs [bb36, bb49]

bb36
  0: _67 = move (_72.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:11-4361:57)
  1: StorageDead(_69)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:56-4361:57)
  2: StorageDead(_68)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:56-4361:57)
  3: _73 = AddWithOverflow(_62, _67)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:18-4361:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:18-4361:57)
      kind: assert(!move (_73.1: bool), "attempt to compute `{} + {}`, which would overflow", move _62, move _67) -> [success: bb37, unwind: bb49]
  }
  preds [bb35]
  succs [bb37, bb49]

bb37
  0: _61 = move (_73.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:18-4361:57)
  1: StorageDead(_67)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:56-4361:57)
  2: StorageDead(_62)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4361:56-4361:57)
  3: FakeRead(ForLet(None), _61)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4360:9-4360:15)
  4: StorageLive(_74)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:9-4365:22)
  5: StorageLive(_75)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:25-4365:50)
  6: _76 = MulWithOverflow(const hybrid::dfa::MIN_STATES, const hybrid::dfa::minimum_cache_capacity::STATE_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:25-4365:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:25-4365:50)
      kind: assert(!move (_76.1: bool), "attempt to compute `{} * {}`, which would overflow", const hybrid::dfa::MIN_STATES, const hybrid::dfa::minimum_cache_capacity::STATE_SIZE) -> [success: bb38, unwind: bb49]
  }
  preds [bb36]
  succs [bb38, bb49]

bb38
  0: _75 = move (_76.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:25-4365:50)
  1: StorageLive(_77)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:53-4365:75)
  2: _78 = MulWithOverflow(const hybrid::dfa::MIN_STATES, const hybrid::dfa::minimum_cache_capacity::ID_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:53-4365:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:53-4365:75)
      kind: assert(!move (_78.1: bool), "attempt to compute `{} * {}`, which would overflow", const hybrid::dfa::MIN_STATES, const hybrid::dfa::minimum_cache_capacity::ID_SIZE) -> [success: bb39, unwind: bb49]
  }
  preds [bb37]
  succs [bb39, bb49]

bb39
  0: _77 = move (_78.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:53-4365:75)
  1: _79 = AddWithOverflow(_75, _77)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:25-4365:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:25-4365:75)
      kind: assert(!move (_79.1: bool), "attempt to compute `{} + {}`, which would overflow", move _75, move _77) -> [success: bb40, unwind: bb49]
  }
  preds [bb38]
  succs [bb40, bb49]

bb40
  0: _74 = move (_79.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:25-4365:75)
  1: StorageDead(_77)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:74-4365:75)
  2: StorageDead(_75)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:74-4365:75)
  3: FakeRead(ForLet(None), _74)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4365:9-4365:22)
  4: StorageLive(_80)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4366:9-4366:14)
  5: StorageLive(_81)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4366:17-4366:27)
  6: _81 = _8
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4366:17-4366:27)
  7: _82 = MulWithOverflow(_81, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4366:17-4366:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4366:17-4366:46)
      kind: assert(!move (_82.1: bool), "attempt to compute `{} * {}`, which would overflow", move _81, const util::primitives::StateID::SIZE) -> [success: bb41, unwind: bb49]
  }
  preds [bb39]
  succs [bb41, bb49]

bb41
  0: _80 = move (_82.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4366:17-4366:46)
  1: StorageDead(_81)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4366:45-4366:46)
  2: FakeRead(ForLet(None), _80)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4366:9-4366:14)
  3: StorageLive(_83)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4367:9-4367:30)
  4: _83 = _48
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4367:33-4367:47)
  5: FakeRead(ForLet(None), _83)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4367:9-4367:30)
  6: StorageLive(_84)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4374:16)
  7: StorageLive(_85)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4373:18)
  8: StorageLive(_86)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4372:24)
  9: StorageLive(_87)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4371:17)
  10: StorageLive(_88)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4370:17)
  11: StorageLive(_89)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4369:10)
  12: _89 = _17
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4369:10)
  13: StorageLive(_90)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4370:11-4370:17)
  14: _90 = _22
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4370:11-4370:17)
  15: _91 = AddWithOverflow(_89, _90)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4370:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4370:17)
      kind: assert(!move (_91.1: bool), "attempt to compute `{} + {}`, which would overflow", move _89, move _90) -> [success: bb42, unwind: bb49]
  }
  preds [bb40]
  succs [bb42, bb49]

bb42
  0: _88 = move (_91.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4370:17)
  1: StorageDead(_90)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4370:16-4370:17)
  2: StorageDead(_89)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4370:16-4370:17)
  3: StorageLive(_92)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4371:11-4371:17)
  4: _92 = _61
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4371:11-4371:17)
  5: _93 = AddWithOverflow(_88, _92)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4371:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4371:17)
      kind: assert(!move (_93.1: bool), "attempt to compute `{} + {}`, which would overflow", move _88, move _92) -> [success: bb43, unwind: bb49]
  }
  preds [bb41]
  succs [bb43, bb49]

bb43
  0: _87 = move (_93.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4371:17)
  1: StorageDead(_92)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4371:16-4371:17)
  2: StorageDead(_88)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4371:16-4371:17)
  3: StorageLive(_94)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4372:11-4372:24)
  4: _94 = _74
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4372:11-4372:24)
  5: _95 = AddWithOverflow(_87, _94)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4372:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4372:24)
      kind: assert(!move (_95.1: bool), "attempt to compute `{} + {}`, which would overflow", move _87, move _94) -> [success: bb44, unwind: bb49]
  }
  preds [bb42]
  succs [bb44, bb49]

bb44
  0: _86 = move (_95.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4372:24)
  1: StorageDead(_94)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4372:23-4372:24)
  2: StorageDead(_87)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4372:23-4372:24)
  3: StorageLive(_96)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4373:11-4373:18)
  4: _96 = _12
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4373:11-4373:18)
  5: _97 = AddWithOverflow(_86, _96)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4373:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4373:18)
      kind: assert(!move (_97.1: bool), "attempt to compute `{} + {}`, which would overflow", move _86, move _96) -> [success: bb45, unwind: bb49]
  }
  preds [bb43]
  succs [bb45, bb49]

bb45
  0: _85 = move (_97.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4373:18)
  1: StorageDead(_96)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4373:17-4373:18)
  2: StorageDead(_86)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4373:17-4373:18)
  3: StorageLive(_98)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4374:11-4374:16)
  4: _98 = _80
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4374:11-4374:16)
  5: _99 = AddWithOverflow(_85, _98)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4374:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4374:16)
      kind: assert(!move (_99.1: bool), "attempt to compute `{} + {}`, which would overflow", move _85, move _98) -> [success: bb46, unwind: bb49]
  }
  preds [bb44]
  succs [bb46, bb49]

bb46
  0: _84 = move (_99.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4374:16)
  1: StorageDead(_98)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4374:15-4374:16)
  2: StorageDead(_85)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4374:15-4374:16)
  3: StorageLive(_100)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4375:11-4375:32)
  4: _100 = _83
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4375:11-4375:32)
  5: _101 = AddWithOverflow(_84, _100)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4375:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4375:32)
      kind: assert(!move (_101.1: bool), "attempt to compute `{} + {}`, which would overflow", move _84, move _100) -> [success: bb47, unwind: bb49]
  }
  preds [bb45]
  succs [bb47, bb49]

bb47
  0: _0 = move (_101.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4369:5-4375:32)
  1: StorageDead(_100)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4375:31-4375:32)
  2: StorageDead(_84)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4375:31-4375:32)
  3: StorageDead(_83)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:1-4376:2)
  4: StorageDead(_80)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:1-4376:2)
  5: StorageDead(_74)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:1-4376:2)
  6: StorageDead(_61)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:1-4376:2)
  7: StorageDead(_48)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:1-4376:2)
  8: StorageDead(_45)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:1-4376:2)
  9: StorageDead(_43)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:1-4376:2)
  10: StorageDead(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:1-4376:2)
  11: StorageDead(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:1-4376:2)
  12: StorageDead(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:1-4376:2)
  13: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:1-4376:2)
  14: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:1-4376:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4376:2-4376:2)
      kind: return
  }
  preds [bb46]
  succs []

bb48
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4358:55-4358:56)
      kind: drop(_47) -> [return: bb49, unwind terminate(cleanup)]
  }
  preds [bb24]
  succs [bb49]

bb49
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:4319:1-4376:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb11, bb12, bb13, bb14, bb15, bb19, bb20, bb21, bb22, bb23, bb25, bb26, bb27, bb28, bb29, bb30, bb31, bb32, bb33, bb34, bb35, bb36, bb37, bb38, bb39, bb40, bb41, bb42, bb43, bb44, bb45, bb46, bb48]
  succs []

