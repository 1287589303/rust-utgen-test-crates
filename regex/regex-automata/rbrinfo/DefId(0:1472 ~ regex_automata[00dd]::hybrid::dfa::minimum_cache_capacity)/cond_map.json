{
  "regex-automata/src/hybrid/dfa.rs:4359:26:4359:76": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "5 + 4 + (nfa.pattern_len() * 4) + (states_len * 5)",
          "lhs": "5 + 4 + (nfa.pattern_len() * 4)",
          "rhs": "(states_len * 5)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4332:22:4332:44": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "Start::len() * ID_SIZE",
          "lhs": "Start::len()",
          "rhs": "ID_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4361:27:4361:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(STATE_SIZE + max_state_size)",
          "lhs": "STATE_SIZE",
          "rhs": "max_state_size",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4369:5:4373:18": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "trans\n        + starts\n        + states\n        + states_to_sid\n        + sparses",
          "lhs": "trans\n        + starts\n        + states\n        + states_to_sid",
          "rhs": "sparses",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4366:17:4366:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "states_len * NFAStateID::SIZE",
          "lhs": "states_len",
          "rhs": "NFAStateID::SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4369:5:4375:32": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "trans\n        + starts\n        + states\n        + states_to_sid\n        + sparses\n        + stack\n        + scratch_state_builder",
          "lhs": "trans\n        + starts\n        + states\n        + states_to_sid\n        + sparses\n        + stack",
          "rhs": "scratch_state_builder",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4359:60:4359:76": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(states_len * 5)",
          "lhs": "states_len",
          "rhs": "5",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4369:5:4371:17": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "trans\n        + starts\n        + states",
          "lhs": "trans\n        + starts",
          "rhs": "states",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4369:5:4370:17": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "trans\n        + starts",
          "lhs": "trans",
          "rhs": "starts",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4360:37:4360:67": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(STATE_SIZE + dead_state_size)",
          "lhs": "STATE_SIZE",
          "rhs": "dead_state_size",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4361:11:4361:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(non_sentinel * (STATE_SIZE + max_state_size))",
          "lhs": "non_sentinel",
          "rhs": "(STATE_SIZE + max_state_size)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4369:5:4372:24": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "trans\n        + starts\n        + states\n        + states_to_sid",
          "lhs": "trans\n        + starts\n        + states",
          "rhs": "states_to_sid",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4333:8:4333:31": [
    {
      "Bool": {
        "Other": "starts_for_each_pattern"
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4334:19:4334:53": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(Start::len() * nfa.pattern_len())",
          "lhs": "Start::len()",
          "rhs": "nfa.pattern_len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4359:26:4359:31": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "5 + 4",
          "lhs": "5",
          "rhs": "4",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4329:19:4329:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "2 * states_len",
          "lhs": "2",
          "rhs": "states_len",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4365:25:4365:75": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(MIN_STATES * STATE_SIZE) + (MIN_STATES * ID_SIZE)",
          "lhs": "(MIN_STATES * STATE_SIZE)",
          "rhs": "(MIN_STATES * ID_SIZE)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4365:25:4365:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(MIN_STATES * STATE_SIZE)",
          "lhs": "MIN_STATES",
          "rhs": "STATE_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4360:18:4361:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(SENTINEL_STATES * (STATE_SIZE + dead_state_size))\n        + (non_sentinel * (STATE_SIZE + max_state_size))",
          "lhs": "(SENTINEL_STATES * (STATE_SIZE + dead_state_size))",
          "rhs": "(non_sentinel * (STATE_SIZE + max_state_size))",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4365:53:4365:75": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(MIN_STATES * ID_SIZE)",
          "lhs": "MIN_STATES",
          "rhs": "ID_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4359:34:4359:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(nfa.pattern_len() * 4)",
          "lhs": "nfa.pattern_len()",
          "rhs": "4",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4330:17:4330:36": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "MIN_STATES * stride",
          "lhs": "MIN_STATES",
          "rhs": "stride",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4330:17:4330:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "MIN_STATES * stride * ID_SIZE",
          "lhs": "MIN_STATES * stride",
          "rhs": "ID_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4327:18:4327:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "1 << classes.stride2()",
          "lhs": "1",
          "rhs": "classes.stride2()",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4359:26:4359:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "5 + 4 + (nfa.pattern_len() * 4)",
          "lhs": "5 + 4",
          "rhs": "(nfa.pattern_len() * 4)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4334:19:4334:63": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(Start::len() * nfa.pattern_len()) * ID_SIZE",
          "lhs": "(Start::len() * nfa.pattern_len())",
          "rhs": "ID_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4369:5:4374:16": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "trans\n        + starts\n        + states\n        + states_to_sid\n        + sparses\n        + stack",
          "lhs": "trans\n        + starts\n        + states\n        + states_to_sid\n        + sparses",
          "rhs": "stack",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4329:19:4329:52": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "2 * states_len * NFAStateID::SIZE",
          "lhs": "2 * states_len",
          "rhs": "NFAStateID::SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4360:18:4360:68": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(SENTINEL_STATES * (STATE_SIZE + dead_state_size))",
          "lhs": "SENTINEL_STATES",
          "rhs": "(STATE_SIZE + dead_state_size)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:4343:13:4343:28": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "MIN_STATES >= 5",
          "lhs": "MIN_STATES",
          "rhs": "5",
          "cmp_with_int": true
        }
      }
    }
  ]
}