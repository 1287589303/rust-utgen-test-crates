bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:228:26-228:55)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:228:26-228:46)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:228:26-228:46)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:228:26-228:37)
  4: _5 = &((*_1).0: A)
    SourceInfo(regex-automata/src/dfa/accel.rs:228:26-228:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:228:26-228:46)
      kind: _4 = <A as core::convert::AsRef<[u32]>>::as_ref(move _5) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _3 = &(*_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:228:26-228:46)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:228:45-228:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:228:26-228:55)
      kind: _2 = std::slice::<impl [u32]>::to_vec(move _3) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:228:54-228:55)
  1: _0 = dfa::accel::Accels::<std::vec::Vec<u32>> { accels: move _2 }
    SourceInfo(regex-automata/src/dfa/accel.rs:228:9-228:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:228:56-228:57)
      kind: drop(_2) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:228:56-228:57)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:229:5-229:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:229:6-229:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:227:5-229:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

