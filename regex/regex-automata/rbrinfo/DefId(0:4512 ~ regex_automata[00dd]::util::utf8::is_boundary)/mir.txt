bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/utf8.rs:124:11-124:23)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/utf8.rs:124:11-124:16)
  2: _4 = &(*_1)
    SourceInfo(regex-automata/src/util/utf8.rs:124:11-124:16)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/util/utf8.rs:124:21-124:22)
  4: _5 = _2
    SourceInfo(regex-automata/src/util/utf8.rs:124:21-124:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:124:11-124:23)
      kind: _3 = core::slice::<impl [u8]>::get::<usize>(move _4, move _5) -> [return: bb1, unwind: bb11]
  }
  preds []
  succs [bb1, bb11]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/utf8.rs:124:22-124:23)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/utf8.rs:124:22-124:23)
  2: PlaceMention(_3)
    SourceInfo(regex-automata/src/util/utf8.rs:124:11-124:23)
  3: _6 = discriminant(_3)
    SourceInfo(regex-automata/src/util/utf8.rs:124:11-124:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:124:5-124:23)
      kind: switchInt(move _6) -> [0: bb3, 1: bb4, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3, bb4]

bb2
  0: FakeRead(ForMatchedPlace(None), _3)
    SourceInfo(regex-automata/src/util/utf8.rs:124:11-124:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:124:11-124:23)
      kind: unreachable
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:128:9-128:13)
      kind: falseEdge -> [real: bb5, imaginary: bb4]
  }
  preds [bb1]
  succs [bb4, bb5]

bb4
  0: StorageLive(_10)
    SourceInfo(regex-automata/src/util/utf8.rs:135:15-135:16)
  1: _10 = (*((_3 as Some).0: &u8))
    SourceInfo(regex-automata/src/util/utf8.rs:135:15-135:16)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/util/utf8.rs:135:21-135:37)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/util/utf8.rs:135:21-135:22)
  4: _12 = _10
    SourceInfo(regex-automata/src/util/utf8.rs:135:21-135:22)
  5: _11 = Le(move _12, const 127_u8)
    SourceInfo(regex-automata/src/util/utf8.rs:135:21-135:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:135:21-135:37)
      kind: switchInt(move _11) -> [0: bb8, otherwise: bb7]
  }
  preds [bb1, bb3]
  succs [bb7, bb8]

bb5
  0: StorageLive(_7)
    SourceInfo(regex-automata/src/util/utf8.rs:128:17-128:18)
  1: _7 = _2
    SourceInfo(regex-automata/src/util/utf8.rs:128:17-128:18)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/util/utf8.rs:128:22-128:33)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/util/utf8.rs:128:22-128:27)
  4: _9 = &(*_1)
    SourceInfo(regex-automata/src/util/utf8.rs:128:22-128:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:128:22-128:33)
      kind: _8 = core::slice::<impl [u8]>::len(move _9) -> [return: bb6, unwind: bb11]
  }
  preds [bb3]
  succs [bb6, bb11]

bb6
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/utf8.rs:128:32-128:33)
  1: _0 = Eq(move _7, move _8)
    SourceInfo(regex-automata/src/util/utf8.rs:128:17-128:33)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/util/utf8.rs:128:32-128:33)
  3: StorageDead(_7)
    SourceInfo(regex-automata/src/util/utf8.rs:128:32-128:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:128:32-128:33)
      kind: goto -> bb10
  }
  preds [bb5]
  succs [bb10]

bb7
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/utf8.rs:135:36-135:37)
  1: _0 = const true
    SourceInfo(regex-automata/src/util/utf8.rs:135:21-135:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:135:21-135:57)
      kind: goto -> bb9
  }
  preds [bb4]
  succs [bb9]

bb8
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/utf8.rs:135:36-135:37)
  1: StorageLive(_13)
    SourceInfo(regex-automata/src/util/utf8.rs:135:41-135:42)
  2: _13 = _10
    SourceInfo(regex-automata/src/util/utf8.rs:135:41-135:42)
  3: _0 = Ge(move _13, const 192_u8)
    SourceInfo(regex-automata/src/util/utf8.rs:135:41-135:57)
  4: StorageDead(_13)
    SourceInfo(regex-automata/src/util/utf8.rs:135:56-135:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:135:21-135:57)
      kind: goto -> bb9
  }
  preds [bb4]
  succs [bb9]

bb9
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/utf8.rs:135:56-135:57)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/utf8.rs:135:56-135:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:135:56-135:57)
      kind: goto -> bb10
  }
  preds [bb7, bb8]
  succs [bb10]

bb10
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/utf8.rs:137:1-137:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:137:2-137:2)
      kind: return
  }
  preds [bb6, bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:123:1-137:2)
      kind: resume
  }
  preds [bb0, bb5]
  succs []

