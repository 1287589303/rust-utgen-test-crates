{
  "regex-automata/src/util/utf8.rs:128:17:128:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "i == bytes.len()",
          "lhs": "i",
          "rhs": "bytes.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/utf8.rs:135:21:135:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "b <= 0b0111_1111",
          "lhs": "b",
          "rhs": "0b0111_1111",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/utf8.rs:124:11:124:23": [
    {
      "Match": {
        "match_source": "regex-automata/src/util/utf8.rs:124:11:124:23",
        "match_str": "bytes.get(i)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/util/utf8.rs:135:9:135:17": {
            "pat": {
              "pat_str": "Some(&b)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/util/utf8.rs:135:21:135:57"
          },
          "regex-automata/src/util/utf8.rs:128:9:128:13": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/util/utf8.rs:128:17:128:33"
          }
        }
      }
    }
  ],
  "regex-automata/src/util/utf8.rs:135:41:135:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "b >= 0b1100_0000",
          "lhs": "b",
          "rhs": "0b1100_0000",
          "cmp_with_int": true
        }
      }
    }
  ]
}