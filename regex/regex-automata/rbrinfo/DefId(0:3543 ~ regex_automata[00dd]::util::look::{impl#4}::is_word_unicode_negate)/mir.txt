bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:1078:13-1078:24)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:1078:27-1078:33)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:1078:27-1078:29)
  3: _6 = _3
    SourceInfo(regex-automata/src/util/look.rs:1078:27-1078:29)
  4: _5 = Gt(move _6, const 0_usize)
    SourceInfo(regex-automata/src/util/look.rs:1078:27-1078:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1078:27-1078:33)
      kind: switchInt(move _5) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1078:32-1078:33)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:1079:22-1079:56)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:1079:40-1079:55)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:1079:40-1079:55)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/util/look.rs:1079:49-1079:55)
  5: StorageLive(_11)
    SourceInfo(regex-automata/src/util/look.rs:1079:41-1079:49)
  6: _11 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1079:41-1079:49)
  7: StorageLive(_12)
    SourceInfo(regex-automata/src/util/look.rs:1079:50-1079:54)
  8: StorageLive(_13)
    SourceInfo(regex-automata/src/util/look.rs:1079:52-1079:54)
  9: _13 = _3
    SourceInfo(regex-automata/src/util/look.rs:1079:52-1079:54)
  10: _12 = core::ops::RangeTo::<usize> { end: move _13 }
    SourceInfo(regex-automata/src/util/look.rs:1079:50-1079:54)
  11: StorageDead(_13)
    SourceInfo(regex-automata/src/util/look.rs:1079:53-1079:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1079:49-1079:55)
      kind: _10 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _11, move _12) -> [return: bb3, unwind: bb40]
  }
  preds [bb0]
  succs [bb3, bb40]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1078:32-1078:33)
  1: _4 = const false
    SourceInfo(regex-automata/src/util/look.rs:1078:27-1082:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1078:27-1082:14)
      kind: goto -> bb17
  }
  preds [bb0]
  succs [bb17]

bb3
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/look.rs:1079:54-1079:55)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/look.rs:1079:54-1079:55)
  2: _9 = &(*_10)
    SourceInfo(regex-automata/src/util/look.rs:1079:40-1079:55)
  3: _8 = &(*_9)
    SourceInfo(regex-automata/src/util/look.rs:1079:40-1079:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1079:22-1079:56)
      kind: _7 = util::utf8::decode_last(move _8) -> [return: bb4, unwind: bb40]
  }
  preds [bb1]
  succs [bb4, bb40]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:1079:55-1079:56)
  1: PlaceMention(_7)
    SourceInfo(regex-automata/src/util/look.rs:1079:22-1079:56)
  2: _15 = discriminant(_7)
    SourceInfo(regex-automata/src/util/look.rs:1079:22-1079:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1079:16-1079:56)
      kind: switchInt(move _15) -> [0: bb8, 1: bb6, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6, bb8]

bb5
  0: FakeRead(ForMatchedPlace(None), _7)
    SourceInfo(regex-automata/src/util/look.rs:1079:22-1079:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1079:22-1079:56)
      kind: unreachable
  }
  preds [bb4, bb6]
  succs []

bb6
  0: _14 = discriminant(((_7 as Some).0: core::result::Result<char, u8>))
    SourceInfo(regex-automata/src/util/look.rs:1079:22-1079:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1079:16-1079:56)
      kind: switchInt(move _14) -> [0: bb7, 1: bb8, otherwise: bb5]
  }
  preds [bb4]
  succs [bb5, bb7, bb8]

bb7
  0: StorageLive(_17)
    SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:64)
  1: StorageLive(_18)
    SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:63)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/util/look.rs:1081:50-1081:58)
  3: _19 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1081:50-1081:58)
  4: StorageLive(_20)
    SourceInfo(regex-automata/src/util/look.rs:1081:60-1081:62)
  5: _20 = _3
    SourceInfo(regex-automata/src/util/look.rs:1081:60-1081:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:63)
      kind: _18 = util::look::is_word_char::rev(move _19, move _20) -> [return: bb10, unwind: bb40]
  }
  preds [bb6, bb8]
  succs [bb10, bb40]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1080:17-1080:36)
      kind: falseEdge -> [real: bb9, imaginary: bb7]
  }
  preds [bb4, bb6]
  succs [bb7, bb9]

bb9
  0: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::Ok(const false)
    SourceInfo(regex-automata/src/util/look.rs:1080:47-1080:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1080:40-1080:56)
      kind: goto -> bb37
  }
  preds [bb8]
  succs [bb37]

bb10
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/look.rs:1081:62-1081:63)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/util/look.rs:1081:62-1081:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:64)
      kind: _17 = <core::result::Result<bool, util::look::UnicodeWordBoundaryError> as core::ops::Try>::branch(move _18) -> [return: bb11, unwind: bb40]
  }
  preds [bb7]
  succs [bb11, bb40]

bb11
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/util/look.rs:1081:63-1081:64)
  1: PlaceMention(_17)
    SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:64)
  2: _21 = discriminant(_17)
    SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:64)
      kind: switchInt(move _21) -> [0: bb14, 1: bb13, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb13, bb14]

bb12
  0: FakeRead(ForMatchedPlace(None), _17)
    SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:64)
      kind: unreachable
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1081:63-1081:64)
      kind: falseEdge -> [real: bb15, imaginary: bb14]
  }
  preds [bb11]
  succs [bb14, bb15]

bb14
  0: StorageLive(_25)
    SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:64)
  1: _25 = ((_17 as Continue).0: bool)
    SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:64)
  2: _4 = _25
    SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:64)
  3: StorageDead(_25)
    SourceInfo(regex-automata/src/util/look.rs:1081:63-1081:64)
  4: StorageDead(_17)
    SourceInfo(regex-automata/src/util/look.rs:1081:63-1081:64)
  5: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:1082:13-1082:14)
  6: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:1082:13-1082:14)
  7: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1082:13-1082:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1078:27-1082:14)
      kind: goto -> bb17
  }
  preds [bb11, bb13]
  succs [bb17]

bb15
  0: StorageLive(_22)
    SourceInfo(regex-automata/src/util/look.rs:1081:63-1081:64)
  1: _22 = move ((_17 as Break).0: core::result::Result<core::convert::Infallible, util::look::UnicodeWordBoundaryError>)
    SourceInfo(regex-automata/src/util/look.rs:1081:63-1081:64)
  2: StorageLive(_24)
    SourceInfo(regex-automata/src/util/look.rs:1081:63-1081:64)
  3: _24 = move _22
    SourceInfo(regex-automata/src/util/look.rs:1081:63-1081:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1081:32-1081:64)
      kind: _0 = <core::result::Result<bool, util::look::UnicodeWordBoundaryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::look::UnicodeWordBoundaryError>>>::from_residual(move _24) -> [return: bb16, unwind: bb40]
  }
  preds [bb13]
  succs [bb16, bb40]

bb16
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/look.rs:1081:63-1081:64)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/util/look.rs:1081:63-1081:64)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/util/look.rs:1081:63-1081:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb37
  }
  preds [bb15]
  succs [bb37]

bb17
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1082:13-1082:14)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/look.rs:1078:13-1078:24)
  2: StorageLive(_26)
    SourceInfo(regex-automata/src/util/look.rs:1083:13-1083:23)
  3: StorageLive(_27)
    SourceInfo(regex-automata/src/util/look.rs:1083:26-1083:45)
  4: StorageLive(_28)
    SourceInfo(regex-automata/src/util/look.rs:1083:26-1083:28)
  5: _28 = _3
    SourceInfo(regex-automata/src/util/look.rs:1083:26-1083:28)
  6: StorageLive(_29)
    SourceInfo(regex-automata/src/util/look.rs:1083:31-1083:45)
  7: StorageLive(_30)
    SourceInfo(regex-automata/src/util/look.rs:1083:31-1083:39)
  8: _30 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1083:31-1083:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1083:31-1083:45)
      kind: _29 = core::slice::<impl [u8]>::len(move _30) -> [return: bb18, unwind: bb40]
  }
  preds [bb2, bb14]
  succs [bb18, bb40]

bb18
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/util/look.rs:1083:44-1083:45)
  1: _27 = Lt(move _28, move _29)
    SourceInfo(regex-automata/src/util/look.rs:1083:26-1083:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1083:26-1083:45)
      kind: switchInt(move _27) -> [0: bb20, otherwise: bb19]
  }
  preds [bb17]
  succs [bb19, bb20]

bb19
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/util/look.rs:1083:44-1083:45)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/util/look.rs:1083:44-1083:45)
  2: StorageLive(_31)
    SourceInfo(regex-automata/src/util/look.rs:1084:22-1084:51)
  3: StorageLive(_32)
    SourceInfo(regex-automata/src/util/look.rs:1084:35-1084:50)
  4: StorageLive(_33)
    SourceInfo(regex-automata/src/util/look.rs:1084:35-1084:50)
  5: StorageLive(_34)
    SourceInfo(regex-automata/src/util/look.rs:1084:44-1084:50)
  6: StorageLive(_35)
    SourceInfo(regex-automata/src/util/look.rs:1084:36-1084:44)
  7: _35 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1084:36-1084:44)
  8: StorageLive(_36)
    SourceInfo(regex-automata/src/util/look.rs:1084:45-1084:49)
  9: StorageLive(_37)
    SourceInfo(regex-automata/src/util/look.rs:1084:45-1084:47)
  10: _37 = _3
    SourceInfo(regex-automata/src/util/look.rs:1084:45-1084:47)
  11: _36 = core::ops::RangeFrom::<usize> { start: move _37 }
    SourceInfo(regex-automata/src/util/look.rs:1084:45-1084:49)
  12: StorageDead(_37)
    SourceInfo(regex-automata/src/util/look.rs:1084:48-1084:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1084:44-1084:50)
      kind: _34 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _35, move _36) -> [return: bb21, unwind: bb40]
  }
  preds [bb18]
  succs [bb21, bb40]

bb20
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/util/look.rs:1083:44-1083:45)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/util/look.rs:1083:44-1083:45)
  2: _26 = const false
    SourceInfo(regex-automata/src/util/look.rs:1083:26-1087:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1083:26-1087:14)
      kind: goto -> bb35
  }
  preds [bb18]
  succs [bb35]

bb21
  0: StorageDead(_36)
    SourceInfo(regex-automata/src/util/look.rs:1084:49-1084:50)
  1: StorageDead(_35)
    SourceInfo(regex-automata/src/util/look.rs:1084:49-1084:50)
  2: _33 = &(*_34)
    SourceInfo(regex-automata/src/util/look.rs:1084:35-1084:50)
  3: _32 = &(*_33)
    SourceInfo(regex-automata/src/util/look.rs:1084:35-1084:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1084:22-1084:51)
      kind: _31 = util::utf8::decode(move _32) -> [return: bb22, unwind: bb40]
  }
  preds [bb19]
  succs [bb22, bb40]

bb22
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/util/look.rs:1084:50-1084:51)
  1: PlaceMention(_31)
    SourceInfo(regex-automata/src/util/look.rs:1084:22-1084:51)
  2: _39 = discriminant(_31)
    SourceInfo(regex-automata/src/util/look.rs:1084:22-1084:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1084:16-1084:51)
      kind: switchInt(move _39) -> [0: bb26, 1: bb24, otherwise: bb23]
  }
  preds [bb21]
  succs [bb23, bb24, bb26]

bb23
  0: FakeRead(ForMatchedPlace(None), _31)
    SourceInfo(regex-automata/src/util/look.rs:1084:22-1084:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1084:22-1084:51)
      kind: unreachable
  }
  preds [bb22, bb24]
  succs []

bb24
  0: _38 = discriminant(((_31 as Some).0: core::result::Result<char, u8>))
    SourceInfo(regex-automata/src/util/look.rs:1084:22-1084:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1084:16-1084:51)
      kind: switchInt(move _38) -> [0: bb25, 1: bb26, otherwise: bb23]
  }
  preds [bb22]
  succs [bb23, bb25, bb26]

bb25
  0: StorageLive(_41)
    SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:64)
  1: StorageLive(_42)
    SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:63)
  2: StorageLive(_43)
    SourceInfo(regex-automata/src/util/look.rs:1086:50-1086:58)
  3: _43 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1086:50-1086:58)
  4: StorageLive(_44)
    SourceInfo(regex-automata/src/util/look.rs:1086:60-1086:62)
  5: _44 = _3
    SourceInfo(regex-automata/src/util/look.rs:1086:60-1086:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:63)
      kind: _42 = util::look::is_word_char::fwd(move _43, move _44) -> [return: bb28, unwind: bb40]
  }
  preds [bb24, bb26]
  succs [bb28, bb40]

bb26
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1085:17-1085:36)
      kind: falseEdge -> [real: bb27, imaginary: bb25]
  }
  preds [bb22, bb24]
  succs [bb25, bb27]

bb27
  0: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::Ok(const false)
    SourceInfo(regex-automata/src/util/look.rs:1085:47-1085:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1085:40-1085:56)
      kind: goto -> bb36
  }
  preds [bb26]
  succs [bb36]

bb28
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/util/look.rs:1086:62-1086:63)
  1: StorageDead(_43)
    SourceInfo(regex-automata/src/util/look.rs:1086:62-1086:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:64)
      kind: _41 = <core::result::Result<bool, util::look::UnicodeWordBoundaryError> as core::ops::Try>::branch(move _42) -> [return: bb29, unwind: bb40]
  }
  preds [bb25]
  succs [bb29, bb40]

bb29
  0: StorageDead(_42)
    SourceInfo(regex-automata/src/util/look.rs:1086:63-1086:64)
  1: PlaceMention(_41)
    SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:64)
  2: _45 = discriminant(_41)
    SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:64)
      kind: switchInt(move _45) -> [0: bb32, 1: bb31, otherwise: bb30]
  }
  preds [bb28]
  succs [bb30, bb31, bb32]

bb30
  0: FakeRead(ForMatchedPlace(None), _41)
    SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:64)
      kind: unreachable
  }
  preds [bb29]
  succs []

bb31
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1086:63-1086:64)
      kind: falseEdge -> [real: bb33, imaginary: bb32]
  }
  preds [bb29]
  succs [bb32, bb33]

bb32
  0: StorageLive(_49)
    SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:64)
  1: _49 = ((_41 as Continue).0: bool)
    SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:64)
  2: _26 = _49
    SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:64)
  3: StorageDead(_49)
    SourceInfo(regex-automata/src/util/look.rs:1086:63-1086:64)
  4: StorageDead(_41)
    SourceInfo(regex-automata/src/util/look.rs:1086:63-1086:64)
  5: StorageDead(_34)
    SourceInfo(regex-automata/src/util/look.rs:1087:13-1087:14)
  6: StorageDead(_33)
    SourceInfo(regex-automata/src/util/look.rs:1087:13-1087:14)
  7: StorageDead(_31)
    SourceInfo(regex-automata/src/util/look.rs:1087:13-1087:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1083:26-1087:14)
      kind: goto -> bb35
  }
  preds [bb29, bb31]
  succs [bb35]

bb33
  0: StorageLive(_46)
    SourceInfo(regex-automata/src/util/look.rs:1086:63-1086:64)
  1: _46 = move ((_41 as Break).0: core::result::Result<core::convert::Infallible, util::look::UnicodeWordBoundaryError>)
    SourceInfo(regex-automata/src/util/look.rs:1086:63-1086:64)
  2: StorageLive(_48)
    SourceInfo(regex-automata/src/util/look.rs:1086:63-1086:64)
  3: _48 = move _46
    SourceInfo(regex-automata/src/util/look.rs:1086:63-1086:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1086:32-1086:64)
      kind: _0 = <core::result::Result<bool, util::look::UnicodeWordBoundaryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::look::UnicodeWordBoundaryError>>>::from_residual(move _48) -> [return: bb34, unwind: bb40]
  }
  preds [bb31]
  succs [bb34, bb40]

bb34
  0: StorageDead(_48)
    SourceInfo(regex-automata/src/util/look.rs:1086:63-1086:64)
  1: StorageDead(_46)
    SourceInfo(regex-automata/src/util/look.rs:1086:63-1086:64)
  2: StorageDead(_41)
    SourceInfo(regex-automata/src/util/look.rs:1086:63-1086:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb36
  }
  preds [bb33]
  succs [bb36]

bb35
  0: StorageDead(_27)
    SourceInfo(regex-automata/src/util/look.rs:1087:13-1087:14)
  1: FakeRead(ForLet(None), _26)
    SourceInfo(regex-automata/src/util/look.rs:1083:13-1083:23)
  2: StorageLive(_50)
    SourceInfo(regex-automata/src/util/look.rs:1088:12-1088:37)
  3: StorageLive(_51)
    SourceInfo(regex-automata/src/util/look.rs:1088:12-1088:23)
  4: _51 = _4
    SourceInfo(regex-automata/src/util/look.rs:1088:12-1088:23)
  5: StorageLive(_52)
    SourceInfo(regex-automata/src/util/look.rs:1088:27-1088:37)
  6: _52 = _26
    SourceInfo(regex-automata/src/util/look.rs:1088:27-1088:37)
  7: _50 = Eq(move _51, move _52)
    SourceInfo(regex-automata/src/util/look.rs:1088:12-1088:37)
  8: StorageDead(_52)
    SourceInfo(regex-automata/src/util/look.rs:1088:36-1088:37)
  9: StorageDead(_51)
    SourceInfo(regex-automata/src/util/look.rs:1088:36-1088:37)
  10: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::Ok(move _50)
    SourceInfo(regex-automata/src/util/look.rs:1088:9-1088:38)
  11: StorageDead(_50)
    SourceInfo(regex-automata/src/util/look.rs:1088:37-1088:38)
  12: StorageDead(_26)
    SourceInfo(regex-automata/src/util/look.rs:1089:5-1089:6)
  13: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1089:5-1089:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1089:6-1089:6)
      kind: goto -> bb39
  }
  preds [bb20, bb32]
  succs [bb39]

bb36
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/util/look.rs:1087:13-1087:14)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/util/look.rs:1087:13-1087:14)
  2: StorageDead(_31)
    SourceInfo(regex-automata/src/util/look.rs:1087:13-1087:14)
  3: StorageDead(_27)
    SourceInfo(regex-automata/src/util/look.rs:1087:13-1087:14)
  4: StorageDead(_26)
    SourceInfo(regex-automata/src/util/look.rs:1089:5-1089:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb38
  }
  preds [bb27, bb34]
  succs [bb38]

bb37
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:1082:13-1082:14)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:1082:13-1082:14)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1082:13-1082:14)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1082:13-1082:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb38
  }
  preds [bb9, bb16]
  succs [bb38]

bb38
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1089:5-1089:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1089:6-1089:6)
      kind: goto -> bb39
  }
  preds [bb36, bb37]
  succs [bb39]

bb39
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1089:6-1089:6)
      kind: return
  }
  preds [bb35, bb38]
  succs []

bb40
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1042:5-1089:6)
      kind: resume
  }
  preds [bb1, bb3, bb7, bb10, bb15, bb17, bb19, bb21, bb25, bb28, bb33]
  succs []

