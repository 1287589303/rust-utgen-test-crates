bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:159:13-159:18)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:159:30-159:36)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:159:22-159:30)
  3: _6 = &((*_1).2: std::vec::Vec<nfa::thompson::map::Utf8BoundedEntry>)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:159:22-159:30)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:159:31-159:35)
  5: _7 = _3
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:159:31-159:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:159:30-159:36)
      kind: _5 = <std::vec::Vec<nfa::thompson::map::Utf8BoundedEntry> as core::ops::Index<usize>>::index(move _6, move _7) -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:159:35-159:36)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:159:35-159:36)
  2: _4 = &(*_5)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:159:21-159:36)
  3: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:159:13-159:18)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:160:9-162:10)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:160:12-160:41)
  6: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:160:12-160:25)
  7: _10 = ((*_4).0: u16)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:160:12-160:25)
  8: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:160:29-160:41)
  9: _11 = ((*_1).0: u16)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:160:29-160:41)
  10: _9 = Ne(move _10, move _11)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:160:12-160:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:160:12-160:41)
      kind: switchInt(move _9) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:160:40-160:41)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:160:40-160:41)
  2: _0 = core::option::Option::<util::primitives::StateID>::None
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:161:20-161:24)
  3: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:162:9-162:10)
  4: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:162:9-162:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb7
  }
  preds [bb1]
  succs [bb7]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:160:40-160:41)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:160:40-160:41)
  2: _8 = const ()
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:162:10-162:10)
  3: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:162:9-162:10)
  4: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:162:9-162:10)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:164:9-166:10)
  6: StorageLive(_14)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:164:12-164:28)
  7: StorageLive(_15)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:164:12-164:21)
  8: _15 = &((*_4).1: std::vec::Vec<nfa::thompson::nfa::Transition>)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:164:12-164:21)
  9: StorageLive(_16)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:164:25-164:28)
  10: _16 = &_2
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:164:25-164:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:164:12-164:28)
      kind: _14 = <std::vec::Vec<nfa::thompson::nfa::Transition> as core::cmp::PartialEq<&[nfa::thompson::nfa::Transition]>>::ne(move _15, move _16) -> [return: bb4, unwind: bb9]
  }
  preds [bb1]
  succs [bb4, bb9]

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:164:12-164:28)
      kind: switchInt(move _14) -> [0: bb6, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:164:27-164:28)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:164:27-164:28)
  2: _0 = core::option::Option::<util::primitives::StateID>::None
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:165:20-165:24)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:166:9-166:10)
  4: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:166:9-166:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb7
  }
  preds [bb4]
  succs [bb7]

bb6
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:164:27-164:28)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:164:27-164:28)
  2: _13 = const ()
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:166:10-166:10)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:166:9-166:10)
  4: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:166:9-166:10)
  5: StorageLive(_18)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:167:14-167:23)
  6: _18 = ((*_4).2: util::primitives::StateID)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:167:14-167:23)
  7: _0 = core::option::Option::<util::primitives::StateID>::Some(move _18)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:167:9-167:24)
  8: StorageDead(_18)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:167:23-167:24)
  9: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:168:5-168:6)
  10: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:168:5-168:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:168:6-168:6)
      kind: goto -> bb8
  }
  preds [bb4]
  succs [bb8]

bb7
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:168:5-168:6)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:168:5-168:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:168:6-168:6)
      kind: goto -> bb8
  }
  preds [bb2, bb5]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:168:6-168:6)
      kind: return
  }
  preds [bb6, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:158:5-168:6)
      kind: resume
  }
  preds [bb0, bb3]
  succs []

