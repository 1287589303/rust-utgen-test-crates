{
  "regex-automata/src/dfa/minimize.rs:267:20:267:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "new_id > new.max_start",
          "lhs": "new_id",
          "rhs": "new.max_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:187:19:187:61": [
    {
      "For": {
        "iter_var": "id",
        "iter_range": "(0..self.dfa.state_len()).map(as_state_id)"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:264:20:264:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "new_id < new.min_start",
          "lhs": "new_id",
          "rhs": "new.min_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:190:16:190:49": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "state_to_part[as_index(id)] != id",
          "lhs": "state_to_part[as_index(id)]",
          "rhs": "id",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:209:53:209:59": [
    {
      "For": {
        "iter_var": "(old_start_id, anchored, start_type)",
        "iter_range": "starts"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:250:20:250:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "new_id > new.max_match",
          "lhs": "new_id",
          "rhs": "new.max_match",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:259:22:259:71": [
    {
      "For": {
        "iter_var": "i",
        "iter_range": "as_index(old.min_start)..=as_index(old.max_start)"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:113:20:113:39": [
    {
      "Bool": {
        "Other": "incoming.is_empty()"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:173:16:173:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "state_to_part[as_index(state.id())] == state.id()",
          "lhs": "state_to_part[as_index(state.id())]",
          "rhs": "state.id()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:134:27:134:65": [
    {
      "Match": {
        "match_source": "regex-automata/src/dfa/minimize.rs:134:27:134:65",
        "match_str": "self.find_waiting(&self.partitions[p])",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/dfa/minimize.rs:135:25:135:32": {
            "pat": {
              "pat_str": "Some(i)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/minimize.rs:135:36:138:26"
          },
          "regex-automata/src/dfa/minimize.rs:139:25:139:29": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/minimize.rs:139:33:145:26"
          }
        }
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:222:40:222:62": [
    {
      "For": {
        "iter_var": "(match_id, pattern_ids)",
        "iter_range": "self.dfa.pattern_map()"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:271:16:271:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "new.max_start == DEAD",
          "lhs": "new.max_start",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:101:15:101:49": [
    {
      "Bool": {
        "Other": "let Some(set) = self.waiting.pop()"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:242:12:242:25": [
    {
      "Bool": {
        "Other": "old.matches()"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:261:20:261:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "new_id == DEAD",
          "lhs": "new_id",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:245:22:245:71": [
    {
      "For": {
        "iter_var": "i",
        "iter_range": "as_index(old.min_match)..=as_index(old.max_match)"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:117:26:117:50": [
    {
      "For": {
        "iter_var": "p",
        "iter_range": "0..self.partitions.len()"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:172:22:172:39": [
    {
      "For": {
        "iter_var": "state",
        "iter_range": "self.dfa.states()"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:119:24:119:43": [
    {
      "Bool": {
        "Other": "scratch1.is_empty()"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:256:12:256:24": [
    {
      "Bool": {
        "Other": "old.starts()"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:247:20:247:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "new_id < new.min_match",
          "lhs": "new_id",
          "rhs": "new.min_match",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:140:32:140:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "x.len() <= y.len()",
          "lhs": "x.len()",
          "rhs": "y.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:125:24:125:43": [
    {
      "Bool": {
        "Other": "scratch2.is_empty()"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:162:18:162:34": [
    {
      "For": {
        "iter_var": "p",
        "iter_range": "&self.partitions"
      }
    }
  ],
  "regex-automata/src/dfa/minimize.rs:102:22:102:52": [
    {
      "For": {
        "iter_var": "b",
        "iter_range": "self.dfa.byte_classes().iter()"
      }
    }
  ]
}