{
  "regex-automata/src/nfa/thompson/compiler.rs:1443:21:1443:47": [
    {
      "Try": "utf8c.add(seq.as_slice())?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1442:28:1442:70": [
    {
      "For": {
        "iter_var": "seq",
        "iter_range": "Utf8Sequences::new(rng.start(), rng.end())"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1395:17:1395:41": [
    {
      "Bool": {
        "Other": "self.config.get_shrink()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1425:21:1425:72": [
    {
      "Try": "Utf8Compiler::new(&mut *builder, &mut *utf8_state)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1383:22:1383:32": [
    {
      "For": {
        "iter_var": "r",
        "iter_range": "cls.iter()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1380:12:1380:26": [
    {
      "Bool": {
        "Other": "cls.is_ascii()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1394:19:1394:36": [
    {
      "Bool": {
        "Other": "self.is_reverse()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1426:17:1429:20": [
    {
      "Try": "trie.iter(|seq| {\n                    utf8c.add(&seq)?;\n                    Ok(())\n                })?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1417:36:1417:78": [
    {
      "For": {
        "iter_var": "mut seq",
        "iter_range": "Utf8Sequences::new(rng.start(), rng.end())"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1416:28:1416:38": [
    {
      "For": {
        "iter_var": "rng",
        "iter_range": "cls.iter()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1441:24:1441:34": [
    {
      "For": {
        "iter_var": "rng",
        "iter_range": "cls.iter()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1381:23:1381:40": [
    {
      "Try": "self.add_empty()?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1440:17:1440:68": [
    {
      "Try": "Utf8Compiler::new(&mut *builder, &mut *utf8_state)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1393:37:1393:60": [
    {
      "Try": "self.add_sparse(trans)?"
    }
  ]
}