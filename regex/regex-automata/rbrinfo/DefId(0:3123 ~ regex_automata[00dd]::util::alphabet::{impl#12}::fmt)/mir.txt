bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:858:13-858:21)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:858:24-858:25)
  2: _4 = &mut (*_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:858:24-858:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:858:24-858:37)
      kind: _3 = core::fmt::Formatter::<'_>::debug_set(move _4) -> [return: bb1, unwind: bb17]
  }
  preds []
  succs [bb1, bb17]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:858:36-858:37)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/util/alphabet.rs:858:13-858:21)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:9-863:10)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
      kind: _7 = core::ops::RangeInclusive::<u8>::new(const 0_u8, const u8::MAX) -> [return: bb2, unwind: bb17]
  }
  preds [bb0]
  succs [bb2, bb17]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
      kind: _6 = <core::ops::RangeInclusive<u8> as core::iter::IntoIterator>::into_iter(move _7) -> [return: bb3, unwind: bb17]
  }
  preds [bb1]
  succs [bb3, bb17]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:26-859:27)
  1: PlaceMention(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  3: _8 = move _6
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:859:9-863:10)
      kind: goto -> bb4
  }
  preds [bb2]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:859:9-863:10)
      kind: falseUnwind -> [real: bb5, unwind: bb17]
  }
  preds [bb3, bb15]
  succs [bb5, bb17]

bb5
  0: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  1: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  4: _13 = &mut _8
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  5: _12 = &mut (*_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
      kind: _11 = <core::ops::RangeInclusive<u8> as core::iter::Iterator>::next(move _12) -> [return: bb6, unwind: bb17]
  }
  preds [bb4]
  succs [bb6, bb17]

bb6
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:26-859:27)
  1: PlaceMention(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  2: _14 = discriminant(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
      kind: switchInt(move _14) -> [0: bb8, 1: bb9, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8, bb9]

bb7
  0: FakeRead(ForMatchedPlace(None), _11)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:859:18-859:27)
      kind: unreachable
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:859:9-863:10)
      kind: falseEdge -> [real: bb10, imaginary: bb9]
  }
  preds [bb6]
  succs [bb9, bb10]

bb9
  0: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:13-859:14)
  1: _16 = ((_11 as Some).0: u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:859:13-859:14)
  2: StorageLive(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:16-860:53)
  3: StorageLive(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:16-860:41)
  4: StorageLive(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:16-860:41)
  5: StorageLive(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:33-860:38)
  6: _20 = (*_1)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:33-860:38)
  7: _19 = util::alphabet::ByteSet { bits: move _20 }
    SourceInfo(regex-automata/src/util/alphabet.rs:860:16-860:41)
  8: _18 = &_19
    SourceInfo(regex-automata/src/util/alphabet.rs:860:16-860:41)
  9: StorageDead(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:40-860:41)
  10: StorageLive(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:51-860:52)
  11: _21 = _16
    SourceInfo(regex-automata/src/util/alphabet.rs:860:51-860:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:860:16-860:53)
      kind: _17 = util::alphabet::ByteSet::contains(move _18, move _21) -> [return: bb11, unwind: bb17]
  }
  preds [bb6, bb8]
  succs [bb11, bb17]

bb10
  0: _5 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:859:9-863:10)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:863:9-863:10)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:863:9-863:10)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:863:9-863:10)
  4: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:863:9-863:10)
  5: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:863:9-863:10)
  6: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:863:9-863:10)
  7: StorageLive(_27)
    SourceInfo(regex-automata/src/util/alphabet.rs:864:9-864:13)
  8: _27 = &mut _3
    SourceInfo(regex-automata/src/util/alphabet.rs:864:9-864:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:864:9-864:22)
      kind: _0 = core::fmt::DebugSet::<'_, '_>::finish(move _27) -> [return: bb16, unwind: bb17]
  }
  preds [bb8]
  succs [bb16, bb17]

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:860:16-860:53)
      kind: switchInt(move _17) -> [0: bb14, otherwise: bb12]
  }
  preds [bb9]
  succs [bb12, bb14]

bb12
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:52-860:53)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:52-860:53)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:52-860:53)
  3: StorageLive(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:861:17-861:31)
  4: StorageLive(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:861:17-861:21)
  5: _23 = &mut _3
    SourceInfo(regex-automata/src/util/alphabet.rs:861:17-861:21)
  6: StorageLive(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:861:28-861:30)
  7: StorageLive(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:861:28-861:30)
  8: StorageLive(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:861:28-861:30)
  9: _26 = &_16
    SourceInfo(regex-automata/src/util/alphabet.rs:861:28-861:30)
  10: _25 = &(*_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:861:28-861:30)
  11: _24 = move _25 as &dyn core::fmt::Debug (PointerCoercion(Unsize))
    SourceInfo(regex-automata/src/util/alphabet.rs:861:28-861:30)
  12: StorageDead(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:861:29-861:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:861:17-861:31)
      kind: _22 = core::fmt::DebugSet::<'_, '_>::entry(move _23, move _24) -> [return: bb13, unwind: bb17]
  }
  preds [bb11]
  succs [bb13, bb17]

bb13
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:861:30-861:31)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:861:30-861:31)
  2: StorageDead(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:861:31-861:32)
  3: StorageDead(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:861:31-861:32)
  4: _10 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:860:54-862:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:860:13-862:14)
      kind: goto -> bb15
  }
  preds [bb12]
  succs [bb15]

bb14
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:52-860:53)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:52-860:53)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:860:52-860:53)
  3: _10 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:862:14-862:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:860:13-862:14)
      kind: goto -> bb15
  }
  preds [bb11]
  succs [bb15]

bb15
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:862:13-862:14)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:863:9-863:10)
  2: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:863:9-863:10)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:863:9-863:10)
  4: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:863:9-863:10)
  5: _9 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:859:9-863:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:859:9-863:10)
      kind: goto -> bb4
  }
  preds [bb13, bb14]
  succs [bb4]

bb16
  0: StorageDead(_27)
    SourceInfo(regex-automata/src/util/alphabet.rs:864:21-864:22)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:865:5-865:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:865:6-865:6)
      kind: return
  }
  preds [bb10]
  succs []

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:857:5-865:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb4, bb5, bb9, bb10, bb12]
  succs []

