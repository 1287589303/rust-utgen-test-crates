bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/meta/regex.rs:2393:13-2393:22)
  1: _2 = const 0_usize
    SourceInfo(regex-automata/src/meta/regex.rs:2393:25-2393:26)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/meta/regex.rs:2393:13-2393:22)
  3: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:2394:18-2394:44)
  4: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/regex.rs:2394:18-2394:29)
  5: _4 = &((*_1).1: meta::wrappers::PikeVMCache)
    SourceInfo(regex-automata/src/meta/regex.rs:2394:18-2394:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2394:18-2394:44)
      kind: _3 = meta::wrappers::PikeVMCache::memory_usage(move _4) -> [return: bb1, unwind: bb11]
  }
  preds []
  succs [bb1, bb11]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/regex.rs:2394:43-2394:44)
  1: _5 = AddWithOverflow(_2, _3)
    SourceInfo(regex-automata/src/meta/regex.rs:2394:9-2394:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2394:9-2394:44)
      kind: assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _3) -> [success: bb2, unwind: bb11]
  }
  preds [bb0]
  succs [bb2, bb11]

bb2
  0: _2 = move (_5.0: usize)
    SourceInfo(regex-automata/src/meta/regex.rs:2394:9-2394:44)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:2394:43-2394:44)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/regex.rs:2395:18-2395:47)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/regex.rs:2395:18-2395:32)
  4: _7 = &((*_1).2: meta::wrappers::BoundedBacktrackerCache)
    SourceInfo(regex-automata/src/meta/regex.rs:2395:18-2395:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2395:18-2395:47)
      kind: _6 = meta::wrappers::BoundedBacktrackerCache::memory_usage(move _7) -> [return: bb3, unwind: bb11]
  }
  preds [bb1]
  succs [bb3, bb11]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/regex.rs:2395:46-2395:47)
  1: _8 = AddWithOverflow(_2, _6)
    SourceInfo(regex-automata/src/meta/regex.rs:2395:9-2395:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2395:9-2395:47)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _6) -> [success: bb4, unwind: bb11]
  }
  preds [bb2]
  succs [bb4, bb11]

bb4
  0: _2 = move (_8.0: usize)
    SourceInfo(regex-automata/src/meta/regex.rs:2395:9-2395:47)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/regex.rs:2395:46-2395:47)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/regex.rs:2396:18-2396:45)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/regex.rs:2396:18-2396:30)
  4: _10 = &((*_1).3: meta::wrappers::OnePassCache)
    SourceInfo(regex-automata/src/meta/regex.rs:2396:18-2396:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2396:18-2396:45)
      kind: _9 = meta::wrappers::OnePassCache::memory_usage(move _10) -> [return: bb5, unwind: bb11]
  }
  preds [bb3]
  succs [bb5, bb11]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/regex.rs:2396:44-2396:45)
  1: _11 = AddWithOverflow(_2, _9)
    SourceInfo(regex-automata/src/meta/regex.rs:2396:9-2396:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2396:9-2396:45)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _9) -> [success: bb6, unwind: bb11]
  }
  preds [bb4]
  succs [bb6, bb11]

bb6
  0: _2 = move (_11.0: usize)
    SourceInfo(regex-automata/src/meta/regex.rs:2396:9-2396:45)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/regex.rs:2396:44-2396:45)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/regex.rs:2397:18-2397:44)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/regex.rs:2397:18-2397:29)
  4: _13 = &((*_1).4: meta::wrappers::HybridCache)
    SourceInfo(regex-automata/src/meta/regex.rs:2397:18-2397:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2397:18-2397:44)
      kind: _12 = meta::wrappers::HybridCache::memory_usage(move _13) -> [return: bb7, unwind: bb11]
  }
  preds [bb5]
  succs [bb7, bb11]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/regex.rs:2397:43-2397:44)
  1: _14 = AddWithOverflow(_2, _12)
    SourceInfo(regex-automata/src/meta/regex.rs:2397:9-2397:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2397:9-2397:44)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _12) -> [success: bb8, unwind: bb11]
  }
  preds [bb6]
  succs [bb8, bb11]

bb8
  0: _2 = move (_14.0: usize)
    SourceInfo(regex-automata/src/meta/regex.rs:2397:9-2397:44)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/regex.rs:2397:43-2397:44)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/regex.rs:2398:18-2398:47)
  3: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/regex.rs:2398:18-2398:32)
  4: _16 = &((*_1).5: meta::wrappers::ReverseHybridCache)
    SourceInfo(regex-automata/src/meta/regex.rs:2398:18-2398:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2398:18-2398:47)
      kind: _15 = meta::wrappers::ReverseHybridCache::memory_usage(move _16) -> [return: bb9, unwind: bb11]
  }
  preds [bb7]
  succs [bb9, bb11]

bb9
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/regex.rs:2398:46-2398:47)
  1: _17 = AddWithOverflow(_2, _15)
    SourceInfo(regex-automata/src/meta/regex.rs:2398:9-2398:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2398:9-2398:47)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _15) -> [success: bb10, unwind: bb11]
  }
  preds [bb8]
  succs [bb10, bb11]

bb10
  0: _2 = move (_17.0: usize)
    SourceInfo(regex-automata/src/meta/regex.rs:2398:9-2398:47)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/regex.rs:2398:46-2398:47)
  2: _0 = _2
    SourceInfo(regex-automata/src/meta/regex.rs:2399:9-2399:14)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/meta/regex.rs:2400:5-2400:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2400:6-2400:6)
      kind: return
  }
  preds [bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2392:5-2400:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9]
  succs []

