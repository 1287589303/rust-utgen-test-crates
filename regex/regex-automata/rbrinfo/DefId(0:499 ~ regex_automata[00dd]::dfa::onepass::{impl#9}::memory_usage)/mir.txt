bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2570:9-2570:34)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2570:9-2570:28)
  2: _3 = &((*_1).0: std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>>)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2570:9-2570:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:2570:9-2570:34)
      kind: _2 = std::vec::Vec::<core::option::Option<util::primitives::NonMaxUsize>>::len(move _3) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2570:33-2570:34)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2570:37-2570:80)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:2570:37-2570:80)
      kind: _4 = core::mem::size_of::<core::option::Option<util::primitives::NonMaxUsize>>() -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: _5 = MulWithOverflow(_2, _4)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2570:9-2570:80)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:2570:9-2570:80)
      kind: assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, move _4) -> [success: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: _0 = move (_5.0: usize)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2570:9-2570:80)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2570:79-2570:80)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2570:79-2570:80)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:2571:6-2571:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:2569:5-2571:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

