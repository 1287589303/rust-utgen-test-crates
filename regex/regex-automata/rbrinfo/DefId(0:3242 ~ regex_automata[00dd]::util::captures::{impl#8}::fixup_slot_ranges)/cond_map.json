{
  "regex-automata/src/util/captures.rs:2288:38:2288:63": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "start.as_usize() + offset",
          "lhs": "start.as_usize()",
          "rhs": "offset",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2284:20:2286:16": [
    {
      "Try": "SmallIndex::new(new_end).map_err(|_| {\n                GroupInfoError::too_many_groups(pid, group_len)\n            })?"
    }
  ],
  "regex-automata/src/util/captures.rs:2275:33:2275:74": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "((end.as_usize() - start.as_usize()) / 2)",
          "lhs": "(end.as_usize() - start.as_usize())",
          "rhs": "2",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2276:33:2276:67": [
    {
      "Match": {
        "match_source": "regex-automata/src/util/captures.rs:2276:33:2276:67",
        "match_str": "end.as_usize().checked_add(offset)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/util/captures.rs:2277:17:2277:30": {
            "pat": {
              "pat_str": "Some(new_end)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/util/captures.rs:2277:34:2277:41"
          },
          "regex-automata/src/util/captures.rs:2278:17:2278:21": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/util/captures.rs:2278:25:2282:18"
          }
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2275:29:2275:74": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "1 + ((end.as_usize() - start.as_usize()) / 2)",
          "lhs": "1",
          "rhs": "((end.as_usize() - start.as_usize()) / 2)",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2273:13:2273:59": [
    {
      "For": {
        "iter_var": "(pid, &mut (ref mut start, ref mut end))",
        "iter_range": "self.slot_ranges.iter_mut().with_pattern_ids()"
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2275:34:2275:69": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(end.as_usize() - start.as_usize())",
          "lhs": "end.as_usize()",
          "rhs": "start.as_usize()",
          "cmp_with_int": false
        }
      }
    }
  ]
}