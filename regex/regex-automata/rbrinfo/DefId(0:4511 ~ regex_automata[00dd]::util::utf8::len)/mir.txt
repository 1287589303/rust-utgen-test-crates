bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/utf8.rs:102:8-102:20)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/utf8.rs:102:8-102:12)
  2: _3 = _1
    SourceInfo(regex-automata/src/util/utf8.rs:102:8-102:12)
  3: _2 = Le(move _3, const 127_u8)
    SourceInfo(regex-automata/src/util/utf8.rs:102:8-102:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:102:8-102:20)
      kind: switchInt(move _2) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/utf8.rs:102:19-102:20)
  1: _0 = core::option::Option::<usize>::Some(const 1_usize)
    SourceInfo(regex-automata/src/util/utf8.rs:103:16-103:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:103:9-103:23)
      kind: goto -> bb14
  }
  preds [bb0]
  succs [bb14]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/utf8.rs:102:19-102:20)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/utf8.rs:104:15-104:48)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/utf8.rs:104:15-104:33)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/utf8.rs:104:15-104:19)
  4: _7 = _1
    SourceInfo(regex-automata/src/util/utf8.rs:104:15-104:19)
  5: _6 = BitAnd(move _7, const 192_u8)
    SourceInfo(regex-automata/src/util/utf8.rs:104:15-104:33)
  6: StorageDead(_7)
    SourceInfo(regex-automata/src/util/utf8.rs:104:32-104:33)
  7: _5 = Eq(move _6, const 128_u8)
    SourceInfo(regex-automata/src/util/utf8.rs:104:15-104:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:104:15-104:48)
      kind: switchInt(move _5) -> [0: bb4, otherwise: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/utf8.rs:104:47-104:48)
  1: _0 = core::option::Option::<usize>::None
    SourceInfo(regex-automata/src/util/utf8.rs:105:16-105:20)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/utf8.rs:114:5-114:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb14
  }
  preds [bb2]
  succs [bb14]

bb4
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/utf8.rs:104:47-104:48)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/util/utf8.rs:106:15-106:34)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/util/utf8.rs:106:15-106:19)
  3: _10 = _1
    SourceInfo(regex-automata/src/util/utf8.rs:106:15-106:19)
  4: _9 = Le(move _10, const 223_u8)
    SourceInfo(regex-automata/src/util/utf8.rs:106:15-106:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:106:15-106:34)
      kind: switchInt(move _9) -> [0: bb6, otherwise: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/utf8.rs:106:33-106:34)
  1: _0 = core::option::Option::<usize>::Some(const 2_usize)
    SourceInfo(regex-automata/src/util/utf8.rs:107:9-107:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:106:12-114:6)
      kind: goto -> bb13
  }
  preds [bb4]
  succs [bb13]

bb6
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/utf8.rs:106:33-106:34)
  1: StorageLive(_11)
    SourceInfo(regex-automata/src/util/utf8.rs:108:15-108:34)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/util/utf8.rs:108:15-108:19)
  3: _12 = _1
    SourceInfo(regex-automata/src/util/utf8.rs:108:15-108:19)
  4: _11 = Le(move _12, const 239_u8)
    SourceInfo(regex-automata/src/util/utf8.rs:108:15-108:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:108:15-108:34)
      kind: switchInt(move _11) -> [0: bb8, otherwise: bb7]
  }
  preds [bb4]
  succs [bb7, bb8]

bb7
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/utf8.rs:108:33-108:34)
  1: _0 = core::option::Option::<usize>::Some(const 3_usize)
    SourceInfo(regex-automata/src/util/utf8.rs:109:9-109:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:108:12-114:6)
      kind: goto -> bb12
  }
  preds [bb6]
  succs [bb12]

bb8
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/utf8.rs:108:33-108:34)
  1: StorageLive(_13)
    SourceInfo(regex-automata/src/util/utf8.rs:110:15-110:34)
  2: StorageLive(_14)
    SourceInfo(regex-automata/src/util/utf8.rs:110:15-110:19)
  3: _14 = _1
    SourceInfo(regex-automata/src/util/utf8.rs:110:15-110:19)
  4: _13 = Le(move _14, const 247_u8)
    SourceInfo(regex-automata/src/util/utf8.rs:110:15-110:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:110:15-110:34)
      kind: switchInt(move _13) -> [0: bb10, otherwise: bb9]
  }
  preds [bb6]
  succs [bb9, bb10]

bb9
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/utf8.rs:110:33-110:34)
  1: _0 = core::option::Option::<usize>::Some(const 4_usize)
    SourceInfo(regex-automata/src/util/utf8.rs:111:9-111:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:110:12-114:6)
      kind: goto -> bb11
  }
  preds [bb8]
  succs [bb11]

bb10
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/utf8.rs:110:33-110:34)
  1: _0 = core::option::Option::<usize>::None
    SourceInfo(regex-automata/src/util/utf8.rs:113:9-113:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:110:12-114:6)
      kind: goto -> bb11
  }
  preds [bb8]
  succs [bb11]

bb11
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/utf8.rs:114:5-114:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:108:12-114:6)
      kind: goto -> bb12
  }
  preds [bb9, bb10]
  succs [bb12]

bb12
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/utf8.rs:114:5-114:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:106:12-114:6)
      kind: goto -> bb13
  }
  preds [bb7, bb11]
  succs [bb13]

bb13
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/utf8.rs:114:5-114:6)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/util/utf8.rs:114:5-114:6)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/util/utf8.rs:114:5-114:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:115:2-115:2)
      kind: goto -> bb15
  }
  preds [bb5, bb12]
  succs [bb15]

bb14
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/util/utf8.rs:114:5-114:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:115:2-115:2)
      kind: goto -> bb15
  }
  preds [bb1, bb3]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:115:2-115:2)
      kind: return
  }
  preds [bb13, bb14]
  succs []

