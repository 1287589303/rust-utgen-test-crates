bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:201:9-201:42)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:200:13-200:23)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:200:26-200:58)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:200:41-200:57)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:200:42-200:56)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:200:43-200:55)
  6: _7 = core::option::Option::<&str>::None
    SourceInfo(regex-automata/src/meta/strategy.rs:200:43-200:55)
  7: _6 = [move _7]
    SourceInfo(regex-automata/src/meta/strategy.rs:200:42-200:56)
  8: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:200:55-200:56)
  9: _5 = [move _6]
    SourceInfo(regex-automata/src/meta/strategy.rs:200:41-200:57)
  10: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:200:56-200:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:200:26-200:58)
      kind: _4 = util::captures::GroupInfo::new::<[[core::option::Option<&str>; 1]; 1], [core::option::Option<&str>; 1], &str>(move _5) -> [return: bb1, unwind: bb14]
  }
  preds []
  succs [bb1, bb14]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:200:57-200:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:200:26-200:67)
      kind: _3 = core::result::Result::<util::captures::GroupInfo, util::captures::GroupInfoError>::unwrap(move _4) -> [return: bb2, unwind: bb13]
  }
  preds [bb0]
  succs [bb2, bb13]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:200:66-200:67)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/meta/strategy.rs:200:13-200:23)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:201:9-201:42)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:201:18-201:41)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:201:24-201:27)
  5: _10 = move _1
    SourceInfo(regex-automata/src/meta/strategy.rs:201:24-201:27)
  6: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:201:29-201:39)
  7: _11 = move _3
    SourceInfo(regex-automata/src/meta/strategy.rs:201:29-201:39)
  8: _9 = meta::strategy::Pre::<P> { pre: move _10, group_info: move _11 }
    SourceInfo(regex-automata/src/meta/strategy.rs:201:18-201:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:201:40-201:41)
      kind: drop(_11) -> [return: bb3, unwind: bb10]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:201:40-201:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:201:40-201:41)
      kind: drop(_10) -> [return: bb4, unwind: bb11]
  }
  preds [bb2]
  succs [bb4, bb11]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:201:40-201:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:201:9-201:42)
      kind: _8 = std::sync::Arc::<meta::strategy::Pre<P>>::new(move _9) -> [return: bb5, unwind: bb11]
  }
  preds [bb3]
  succs [bb5, bb11]

bb5
  0: _2 = move _8 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize))
    SourceInfo(regex-automata/src/meta/strategy.rs:201:9-201:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:201:41-201:42)
      kind: drop(_8) -> [return: bb6, unwind: bb11]
  }
  preds [bb4]
  succs [bb6, bb11]

bb6
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:201:41-201:42)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:201:41-201:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:202:5-202:6)
      kind: drop(_3) -> [return: bb7, unwind: bb14]
  }
  preds [bb5]
  succs [bb7, bb14]

bb7
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:202:5-202:6)
  1: _0 = move _2 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize))
    SourceInfo(regex-automata/src/meta/strategy.rs:201:9-201:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:202:5-202:6)
      kind: drop(_2) -> [return: bb8, unwind: bb14]
  }
  preds [bb6]
  succs [bb8, bb14]

bb8
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:202:5-202:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:202:5-202:6)
      kind: drop(_1) -> [return: bb9, unwind: bb15]
  }
  preds [bb7]
  succs [bb9, bb15]

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:202:6-202:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:201:40-201:41)
      kind: drop(_10) -> [return: bb11, unwind terminate(cleanup)]
  }
  preds [bb2]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:201:41-201:42)
      kind: drop(_9) -> [return: bb12, unwind terminate(cleanup)]
  }
  preds [bb3, bb4, bb5, bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:202:5-202:6)
      kind: drop(_3) -> [return: bb14, unwind terminate(cleanup)]
  }
  preds [bb11]
  succs [bb14]

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:200:66-200:67)
      kind: drop(_4) -> [return: bb14, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:202:5-202:6)
      kind: drop(_1) -> [return: bb15, unwind terminate(cleanup)]
  }
  preds [bb0, bb6, bb7, bb12, bb13]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:195:5-202:6)
      kind: resume
  }
  preds [bb8, bb14]
  succs []

