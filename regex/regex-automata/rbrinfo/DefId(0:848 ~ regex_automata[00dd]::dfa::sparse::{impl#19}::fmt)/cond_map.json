{
  "regex-automata/src/dfa/sparse.rs:2397:21:2397:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(self.ntrans - 1)",
          "lhs": "self.ntrans",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2425:13:2425:54": [
    {
      "Try": "write!(f, \"EOI => {:?}\", eoi.as_usize())?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2403:16:2403:23": [
    {
      "Bool": {
        "Other": "printed"
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2422:16:2422:23": [
    {
      "Bool": {
        "Other": "printed"
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2399:16:2399:28": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "next == DEAD",
          "lhs": "next",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2397:18:2397:38": [
    {
      "For": {
        "iter_var": "i",
        "iter_range": "0..(self.ntrans - 1)"
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2420:32:2420:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.ntrans - 1",
          "lhs": "self.ntrans",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2407:16:2407:28": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "start == end",
          "lhs": "start",
          "rhs": "end",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2421:12:2421:23": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "eoi != DEAD",
          "lhs": "eoi",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2423:17:2423:33": [
    {
      "Try": "write!(f, \", \")?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2408:17:2408:78": [
    {
      "Try": "write!(f, \"{:?} => {:?}\", DebugByte(start), next.as_usize())?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2410:17:2416:19": [
    {
      "Try": "write!(\n                    f,\n                    \"{:?}-{:?} => {:?}\",\n                    DebugByte(start),\n                    DebugByte(end),\n                    next.as_usize(),\n                )?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2404:17:2404:33": [
    {
      "Try": "write!(f, \", \")?"
    }
  ]
}