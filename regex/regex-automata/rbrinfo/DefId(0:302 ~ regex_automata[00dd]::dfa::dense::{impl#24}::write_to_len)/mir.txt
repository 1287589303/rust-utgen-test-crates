bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4514:27)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4513:27)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4512:50)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4511:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4511:25)
      kind: _5 = core::mem::size_of::<u32>() -> [return: bb1, unwind: bb14]
  }
  preds []
  succs [bb1, bb14]

bb1
  0: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:11-4512:50)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:12-4512:31)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:12-4512:25)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:12-4512:25)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:12-4512:16)
  5: _10 = &(*_1)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:12-4512:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4512:12-4512:25)
      kind: _9 = dfa::dense::MatchStates::<T>::slices(move _10) -> [return: bb2, unwind: bb14]
  }
  preds [bb0]
  succs [bb2, bb14]

bb2
  0: _8 = &(*_9)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:12-4512:25)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:24-4512:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4512:12-4512:31)
      kind: _7 = core::slice::<impl [util::primitives::PatternID]>::len(move _8) -> [return: bb3, unwind: bb14]
  }
  preds [bb1]
  succs [bb3, bb14]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:30-4512:31)
  1: _11 = MulWithOverflow(_7, const util::primitives::PatternID::SIZE)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:11-4512:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4512:11-4512:50)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} * {}`, which would overflow", move _7, const util::primitives::PatternID::SIZE) -> [success: bb4, unwind: bb14]
  }
  preds [bb2]
  succs [bb4, bb14]

bb4
  0: _6 = move (_11.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:11-4512:50)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:49-4512:50)
  2: _12 = AddWithOverflow(_5, _6)
    SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4512:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4512:50)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _6) -> [success: bb5, unwind: bb14]
  }
  preds [bb3]
  succs [bb5, bb14]

bb5
  0: _4 = move (_12.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4512:50)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:49-4512:50)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:4512:49-4512:50)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/dense.rs:4513:11-4513:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4513:11-4513:27)
      kind: _13 = core::mem::size_of::<u32>() -> [return: bb6, unwind: bb14]
  }
  preds [bb4]
  succs [bb6, bb14]

bb6
  0: _14 = AddWithOverflow(_4, _13)
    SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4513:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4513:27)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _13) -> [success: bb7, unwind: bb14]
  }
  preds [bb5]
  succs [bb7, bb14]

bb7
  0: _3 = move (_14.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4513:27)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/dense.rs:4513:26-4513:27)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:4513:26-4513:27)
  3: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/dense.rs:4514:11-4514:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4514:11-4514:27)
      kind: _15 = core::mem::size_of::<u32>() -> [return: bb8, unwind: bb14]
  }
  preds [bb6]
  succs [bb8, bb14]

bb8
  0: _16 = AddWithOverflow(_3, _15)
    SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4514:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4514:27)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _15) -> [success: bb9, unwind: bb14]
  }
  preds [bb7]
  succs [bb9, bb14]

bb9
  0: _2 = move (_16.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4514:27)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/dense.rs:4514:26-4514:27)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:4514:26-4514:27)
  3: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:11-4515:55)
  4: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:12-4515:36)
  5: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:12-4515:30)
  6: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:12-4515:30)
  7: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:12-4515:16)
  8: _21 = &(*_1)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:12-4515:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4515:12-4515:30)
      kind: _20 = dfa::dense::MatchStates::<T>::pattern_ids(move _21) -> [return: bb10, unwind: bb14]
  }
  preds [bb8]
  succs [bb10, bb14]

bb10
  0: _19 = &(*_20)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:12-4515:30)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:29-4515:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4515:12-4515:36)
      kind: _18 = core::slice::<impl [util::primitives::PatternID]>::len(move _19) -> [return: bb11, unwind: bb14]
  }
  preds [bb9]
  succs [bb11, bb14]

bb11
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:35-4515:36)
  1: _22 = MulWithOverflow(_18, const util::primitives::PatternID::SIZE)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:11-4515:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4515:11-4515:55)
      kind: assert(!move (_22.1: bool), "attempt to compute `{} * {}`, which would overflow", move _18, const util::primitives::PatternID::SIZE) -> [success: bb12, unwind: bb14]
  }
  preds [bb10]
  succs [bb12, bb14]

bb12
  0: _17 = move (_22.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:11-4515:55)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:54-4515:55)
  2: _23 = AddWithOverflow(_2, _17)
    SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4515:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4515:55)
      kind: assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _17) -> [success: bb13, unwind: bb14]
  }
  preds [bb11]
  succs [bb13, bb14]

bb13
  0: _0 = move (_23.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:4511:9-4515:55)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:54-4515:55)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/dense.rs:4515:54-4515:55)
  3: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/dense.rs:4516:5-4516:6)
  4: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/dense.rs:4516:5-4516:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4516:6-4516:6)
      kind: return
  }
  preds [bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4510:5-4516:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12]
  succs []

