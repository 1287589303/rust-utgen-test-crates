bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2791:33)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2790:21)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2789:36)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2789:26)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2789:17)
  5: _7 = &(*((*_1).0: &hybrid::dfa::DFA))
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2789:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2789:26)
      kind: _6 = hybrid::dfa::DFA::stride(move _7) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:25-2789:26)
  1: _8 = MulWithOverflow(_6, const hybrid::dfa::LazyRef::<'i, 'c>::memory_usage_for_one_more_state::ID_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2789:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2789:36)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", move _6, const hybrid::dfa::LazyRef::<'i, 'c>::memory_usage_for_one_more_state::ID_SIZE) -> [success: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: _5 = move (_8.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2789:36)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:35-2789:36)
  2: _9 = AddWithOverflow(_5, const hybrid::dfa::LazyRef::<'i, 'c>::memory_usage_for_one_more_state::STATE_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2790:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2790:21)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, const hybrid::dfa::LazyRef::<'i, 'c>::memory_usage_for_one_more_state::STATE_SIZE) -> [success: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: _4 = move (_9.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2790:21)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2790:20-2790:21)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2791:11-2791:33)
  3: _11 = AddWithOverflow(const hybrid::dfa::LazyRef::<'i, 'c>::memory_usage_for_one_more_state::STATE_SIZE, const hybrid::dfa::LazyRef::<'i, 'c>::memory_usage_for_one_more_state::ID_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2791:11-2791:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2791:11-2791:33)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", const hybrid::dfa::LazyRef::<'i, 'c>::memory_usage_for_one_more_state::STATE_SIZE, const hybrid::dfa::LazyRef::<'i, 'c>::memory_usage_for_one_more_state::ID_SIZE) -> [success: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: _10 = move (_11.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2791:11-2791:33)
  1: _12 = AddWithOverflow(_4, _10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2791:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2791:33)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _10) -> [success: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: _3 = move (_12.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2791:33)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2791:32-2791:33)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2791:32-2791:33)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2792:11-2792:26)
  4: _13 = _2
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2792:11-2792:26)
  5: _14 = AddWithOverflow(_3, _13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2792:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2792:26)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _13) -> [success: bb6, unwind: bb7]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: _0 = move (_14.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2789:9-2792:26)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2792:25-2792:26)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2792:25-2792:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2793:6-2793:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2782:5-2793:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5]
  succs []

