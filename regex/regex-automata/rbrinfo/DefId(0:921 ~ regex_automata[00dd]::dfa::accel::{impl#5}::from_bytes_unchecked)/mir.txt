bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:24-440:76)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:25-440:33)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:31-440:32)
  3: _4 = const 0_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:440:31-440:32)
  4: _5 = Len(_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:25-440:33)
  5: _6 = Lt(_4, _5)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:25-440:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:440:25-440:33)
      kind: assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: _3 = _1[_4]
    SourceInfo(regex-automata/src/dfa/accel.rs:440:25-440:33)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:35-440:43)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:41-440:42)
  3: _8 = const 1_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:440:41-440:42)
  4: _9 = Len(_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:35-440:43)
  5: _10 = Lt(_8, _9)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:35-440:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:440:35-440:43)
      kind: assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _7 = _1[_8]
    SourceInfo(regex-automata/src/dfa/accel.rs:440:35-440:43)
  1: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:45-440:53)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:51-440:52)
  3: _12 = const 2_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:440:51-440:52)
  4: _13 = Len(_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:45-440:53)
  5: _14 = Lt(_12, _13)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:45-440:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:440:45-440:53)
      kind: assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _11 = _1[_12]
    SourceInfo(regex-automata/src/dfa/accel.rs:440:45-440:53)
  1: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:55-440:63)
  2: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:61-440:62)
  3: _16 = const 3_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:440:61-440:62)
  4: _17 = Len(_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:55-440:63)
  5: _18 = Lt(_16, _17)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:55-440:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:440:55-440:63)
      kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: _15 = _1[_16]
    SourceInfo(regex-automata/src/dfa/accel.rs:440:55-440:63)
  1: _2 = [move _3, move _7, move _11, move _15, const 0_u8, const 0_u8, const 0_u8, const 0_u8]
    SourceInfo(regex-automata/src/dfa/accel.rs:440:24-440:76)
  2: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:75-440:76)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:75-440:76)
  4: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:75-440:76)
  5: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:75-440:76)
  6: _0 = dfa::accel::Accel { bytes: move _2 }
    SourceInfo(regex-automata/src/dfa/accel.rs:440:9-440:78)
  7: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:440:77-440:78)
  8: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/accel.rs:441:5-441:6)
  9: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/accel.rs:441:5-441:6)
  10: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:441:5-441:6)
  11: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:441:5-441:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:441:6-441:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:439:5-441:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

