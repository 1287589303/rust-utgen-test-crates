{
  "regex-automata/src/hybrid/search.rs:641:31:641:47": [
    {
      "Bool": {
        "Other": "sid.is_unknown()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:589:16:589:62": [
    {
      "Bool": {
        "Other": "let Some(match_index) = state.next_match_index"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:623:16:623:30": [
    {
      "Bool": {
        "Other": "sid.is_start()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:574:8:574:23": [
    {
      "Bool": {
        "Other": "input.is_done()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:628:58:628:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "state.at + 1",
          "lhs": "state.at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:581:16:581:44": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "input.start() == input.end()",
          "lhs": "input.start()",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:634:23:634:36": [
    {
      "Bool": {
        "Other": "sid.is_quit()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:655:8:655:27": [
    {
      "Bool": {
        "Other": "state.mat.is_some()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:617:12:617:25": [
    {
      "Bool": {
        "Other": "state.rev_eoi"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:604:23:604:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "state.at == input.start()",
          "lhs": "state.at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:625:23:625:37": [
    {
      "Bool": {
        "Other": "sid.is_match()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:592:51:592:66": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "match_index + 1",
          "lhs": "match_index",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:591:20:591:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "match_index < match_len",
          "lhs": "match_index",
          "rhs": "match_len",
          "cmp_with_int": false
        }
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12:316:42": [
    {
      "Bool": {
        "Other": "$crate::cfg!(debug_assertions)"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:579:23:579:51": [
    {
      "Try": "init_rev(dfa, cache, input)?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:577:25:577:33": [
    {
      "Match": {
        "match_source": "regex-automata/src/hybrid/search.rs:577:25:577:33",
        "match_str": "state.id",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/hybrid/search.rs:578:9:578:13": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/search.rs:578:17:587:10"
          },
          "regex-automata/src/hybrid/search.rs:588:9:588:18": {
            "pat": {
              "pat_str": "Some(sid)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/search.rs:588:22:614:10"
          }
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:618:15:620:45": [
    {
      "Try": "dfa\n            .next_state(cache, sid, input.haystack()[state.at])\n            .map_err(|_| gave_up(state.at))?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:621:12:621:27": [
    {
      "Bool": {
        "Other": "sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:631:23:631:36": [
    {
      "Bool": {
        "Other": "sid.is_dead()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:602:16:602:29": [
    {
      "Bool": {
        "Other": "state.rev_eoi"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:645:12:645:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "state.at == input.start()",
          "lhs": "state.at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:584:28:584:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input.end() - 1",
          "lhs": "input.end()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ]
}