bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1165:9-1165:26)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1165:9-1165:26)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1165:9-1165:16)
  3: _5 = &((*_1).0: dfa::sparse::Transitions<T>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1165:9-1165:16)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1165:23-1165:25)
  5: _6 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1165:23-1165:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1165:9-1165:26)
      kind: _4 = dfa::sparse::Transitions::<T>::state(move _5, move _6) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _3 = &_4
    SourceInfo(regex-automata/src/dfa/sparse.rs:1165:9-1165:26)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1165:25-1165:26)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1165:25-1165:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1165:9-1165:40)
      kind: _0 = dfa::sparse::State::<'_>::pattern_len(move _3) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1165:39-1165:40)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1166:5-1166:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1166:6-1166:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1164:5-1166:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

