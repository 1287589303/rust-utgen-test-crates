bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:325:9-325:37)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:325:9-325:33)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:325:21-325:32)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:325:28-325:31)
  4: _5 = const 255_usize
    SourceInfo(regex-automata/src/util/alphabet.rs:325:28-325:31)
  5: _6 = Len(((*_1).0: [u8; 256]))
    SourceInfo(regex-automata/src/util/alphabet.rs:325:21-325:32)
  6: _7 = Lt(_5, _6)
    SourceInfo(regex-automata/src/util/alphabet.rs:325:21-325:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:325:21-325:32)
      kind: assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: _4 = ((*_1).0: [u8; 256])[_5]
    SourceInfo(regex-automata/src/util/alphabet.rs:325:21-325:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:325:9-325:33)
      kind: _3 = <usize as core::convert::From<u8>>::from(move _4) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:325:32-325:33)
  1: _8 = AddWithOverflow(_3, const 1_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:325:9-325:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:325:9-325:37)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_usize) -> [success: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _2 = move (_8.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:325:9-325:37)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:325:36-325:37)
  2: _9 = AddWithOverflow(_2, const 1_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:325:9-325:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:325:9-325:41)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, const 1_usize) -> [success: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: _0 = move (_9.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:325:9-325:41)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:325:40-325:41)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:326:5-326:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:326:6-326:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:321:5-326:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

