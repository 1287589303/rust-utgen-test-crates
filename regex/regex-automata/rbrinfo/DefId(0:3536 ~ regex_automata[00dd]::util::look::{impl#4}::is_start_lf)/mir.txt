bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:932:9-932:36)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:932:9-932:13)
  2: _5 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:932:9-932:13)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:932:23-932:31)
  4: _6 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:932:23-932:31)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:932:33-932:35)
  6: _7 = _3
    SourceInfo(regex-automata/src/util/look.rs:932:33-932:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:932:9-932:36)
      kind: _4 = util::look::LookMatcher::is_start(move _5, move _6, move _7) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:932:9-932:36)
      kind: switchInt(move _4) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:932:35-932:36)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:932:35-932:36)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:932:35-932:36)
  3: _0 = const true
    SourceInfo(regex-automata/src/util/look.rs:932:9-932:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:932:9-932:75)
      kind: goto -> bb6
  }
  preds [bb1]
  succs [bb6]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:932:35-932:36)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:932:35-932:36)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:932:35-932:36)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:932:40-932:56)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:932:49-932:55)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/util/look.rs:932:49-932:51)
  6: _10 = _3
    SourceInfo(regex-automata/src/util/look.rs:932:49-932:51)
  7: _11 = SubWithOverflow(_10, const 1_usize)
    SourceInfo(regex-automata/src/util/look.rs:932:49-932:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:932:49-932:55)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} - {}`, which would overflow", move _10, const 1_usize) -> [success: bb4, unwind: bb7]
  }
  preds [bb1]
  succs [bb4, bb7]

bb4
  0: _9 = move (_11.0: usize)
    SourceInfo(regex-automata/src/util/look.rs:932:49-932:55)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:932:54-932:55)
  2: _12 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:932:40-932:56)
  3: _13 = Lt(_9, _12)
    SourceInfo(regex-automata/src/util/look.rs:932:40-932:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:932:40-932:56)
      kind: assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _9) -> [success: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: _8 = (*_2)[_9]
    SourceInfo(regex-automata/src/util/look.rs:932:40-932:56)
  1: StorageLive(_14)
    SourceInfo(regex-automata/src/util/look.rs:932:60-932:75)
  2: _14 = (((*_1).0: util::escape::DebugByte).0: u8)
    SourceInfo(regex-automata/src/util/look.rs:932:60-932:75)
  3: _0 = Eq(move _8, move _14)
    SourceInfo(regex-automata/src/util/look.rs:932:40-932:75)
  4: StorageDead(_14)
    SourceInfo(regex-automata/src/util/look.rs:932:74-932:75)
  5: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:932:74-932:75)
  6: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:932:74-932:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:932:9-932:75)
      kind: goto -> bb6
  }
  preds [bb4]
  succs [bb6]

bb6
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:932:74-932:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:933:6-933:6)
      kind: return
  }
  preds [bb2, bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:931:5-933:6)
      kind: resume
  }
  preds [bb0, bb3, bb4]
  succs []

