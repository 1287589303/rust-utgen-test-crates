bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:260:13-260:18)
  1: _3 = const nfa::thompson::map::Utf8SuffixMap::hash::INIT
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:260:21-260:25)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:260:13-260:18)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:13-261:56)
  4: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:13-261:36)
  5: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:14-261:15)
  6: _6 = _3
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:14-261:15)
  7: StorageLive(_7)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:18-261:35)
  8: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:18-261:26)
  9: _8 = &((*_2).0: util::primitives::StateID)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:18-261:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:18-261:35)
      kind: _7 = util::primitives::StateID::as_u64(move _8) -> [return: bb1, unwind: bb11]
  }
  preds []
  succs [bb1, bb11]

bb1
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:34-261:35)
  1: _5 = BitXor(move _6, move _7)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:13-261:36)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:35-261:36)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:35-261:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:13-261:56)
      kind: _4 = core::num::<impl u64>::wrapping_mul(move _5, const nfa::thompson::map::Utf8SuffixMap::hash::PRIME) -> [return: bb2, unwind: bb11]
  }
  preds [bb0]
  succs [bb2, bb11]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:55-261:56)
  1: _3 = move _4
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:9-261:56)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:261:55-261:56)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:13-262:59)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:13-262:39)
  5: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:14-262:15)
  6: _11 = _3
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:14-262:15)
  7: StorageLive(_12)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:18-262:38)
  8: StorageLive(_13)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:28-262:37)
  9: _13 = ((*_2).1: u8)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:28-262:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:18-262:38)
      kind: _12 = <u64 as core::convert::From<u8>>::from(move _13) -> [return: bb3, unwind: bb11]
  }
  preds [bb1]
  succs [bb3, bb11]

bb3
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:37-262:38)
  1: _10 = BitXor(move _11, move _12)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:13-262:39)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:38-262:39)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:38-262:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:13-262:59)
      kind: _9 = core::num::<impl u64>::wrapping_mul(move _10, const nfa::thompson::map::Utf8SuffixMap::hash::PRIME) -> [return: bb4, unwind: bb11]
  }
  preds [bb2]
  succs [bb4, bb11]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:58-262:59)
  1: _3 = move _9
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:9-262:59)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:262:58-262:59)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:13-263:57)
  4: StorageLive(_15)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:13-263:37)
  5: StorageLive(_16)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:14-263:15)
  6: _16 = _3
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:14-263:15)
  7: StorageLive(_17)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:18-263:36)
  8: StorageLive(_18)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:28-263:35)
  9: _18 = ((*_2).2: u8)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:28-263:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:18-263:36)
      kind: _17 = <u64 as core::convert::From<u8>>::from(move _18) -> [return: bb5, unwind: bb11]
  }
  preds [bb3]
  succs [bb5, bb11]

bb5
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:35-263:36)
  1: _15 = BitXor(move _16, move _17)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:13-263:37)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:36-263:37)
  3: StorageDead(_16)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:36-263:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:13-263:57)
      kind: _14 = core::num::<impl u64>::wrapping_mul(move _15, const nfa::thompson::map::Utf8SuffixMap::hash::PRIME) -> [return: bb6, unwind: bb11]
  }
  preds [bb4]
  succs [bb6, bb11]

bb6
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:56-263:57)
  1: _3 = move _14
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:9-263:57)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:263:56-263:57)
  3: StorageLive(_19)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:9-264:38)
  4: StorageLive(_20)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:10-264:11)
  5: _20 = _3
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:10-264:11)
  6: StorageLive(_21)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:14-264:37)
  7: StorageLive(_22)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:14-264:28)
  8: StorageLive(_23)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:14-264:22)
  9: _23 = &((*_1).2: std::vec::Vec<nfa::thompson::map::Utf8SuffixEntry>)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:14-264:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:14-264:28)
      kind: _22 = std::vec::Vec::<nfa::thompson::map::Utf8SuffixEntry>::len(move _23) -> [return: bb7, unwind: bb11]
  }
  preds [bb5]
  succs [bb7, bb11]

bb7
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:27-264:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:14-264:37)
      kind: _21 = <usize as util::int::Usize>::as_u64(move _22) -> [return: bb8, unwind: bb11]
  }
  preds [bb6]
  succs [bb8, bb11]

bb8
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:36-264:37)
  1: _24 = Eq(_21, const 0_u64)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:9-264:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:9-264:38)
      kind: assert(!move _24, "attempt to calculate the remainder of `{}` with a divisor of zero", _20) -> [success: bb9, unwind: bb11]
  }
  preds [bb7]
  succs [bb9, bb11]

bb9
  0: _19 = Rem(move _20, move _21)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:9-264:38)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:37-264:38)
  2: StorageDead(_20)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:37-264:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:9-264:49)
      kind: _0 = <u64 as util::int::U64>::as_usize(move _19) -> [return: bb10, unwind: bb11]
  }
  preds [bb8]
  succs [bb10, bb11]

bb10
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:264:48-264:49)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:265:5-265:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:265:6-265:6)
      kind: return
  }
  preds [bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:254:5-265:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9]
  succs []

