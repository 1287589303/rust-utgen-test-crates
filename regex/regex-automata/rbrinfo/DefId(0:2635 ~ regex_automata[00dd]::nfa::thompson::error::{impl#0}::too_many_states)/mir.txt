bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:114:13-114:18)
  1: _2 = const util::primitives::StateID::LIMIT
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:114:21-114:35)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:114:13-114:18)
  3: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:115:28-115:74)
  4: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:115:60-115:65)
  5: _4 = _1
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:115:60-115:65)
  6: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:115:67-115:72)
  7: _5 = _2
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:115:67-115:72)
  8: _3 = nfa::thompson::error::BuildErrorKind::TooManyStates { given: move _4, limit: move _5 }
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:115:28-115:74)
  9: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:115:73-115:74)
  10: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:115:73-115:74)
  11: _0 = nfa::thompson::error::BuildError { kind: move _3 }
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:115:9-115:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/error.rs:115:75-115:76)
      kind: drop(_3) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:115:75-115:76)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:116:5-116:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/error.rs:116:6-116:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/error.rs:113:5-116:6)
      kind: resume
  }
  preds [bb0]
  succs []

