bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:119:9-119:11)
  1: _4 = _1
    SourceInfo(regex-automata/src/dfa/accel.rs:119:14-119:21)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/dfa/accel.rs:119:9-119:11)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:120:11-120:24)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:120:11-120:18)
  5: _6 = &(*_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:120:11-120:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:120:11-120:24)
      kind: _5 = core::slice::<impl [u8]>::len(move _6) -> [return: bb1, unwind: bb27]
  }
  preds []
  succs [bb1, bb27]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:120:23-120:24)
  1: PlaceMention(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:120:11-120:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:120:5-120:24)
      kind: switchInt(_5) -> [1: bb3, 2: bb4, 3: bb5, 0: bb6, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3, bb4, bb5, bb6]

bb2
  0: StorageLive(_55)
    SourceInfo(regex-automata/src/dfa/accel.rs:125:9-125:10)
  1: _55 = _5
    SourceInfo(regex-automata/src/dfa/accel.rs:125:9-125:10)
  2: StorageLive(_57)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
  3: StorageLive(_58)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  4: StorageLive(_59)
    SourceInfo(regex-automata/src/dfa/accel.rs:125:21-125:49)
  5: StorageLive(_60)
    SourceInfo(regex-automata/src/dfa/accel.rs:125:21-125:49)
  6: StorageLive(_61)
    SourceInfo(regex-automata/src/dfa/accel.rs:125:21-125:49)
  7: _61 = [const "invalid needles length: "]
    SourceInfo(regex-automata/src/dfa/accel.rs:125:21-125:49)
  8: _60 = &_61
    SourceInfo(regex-automata/src/dfa/accel.rs:125:21-125:49)
  9: _59 = &(*_60)
    SourceInfo(regex-automata/src/dfa/accel.rs:125:21-125:49)
  10: StorageLive(_62)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  11: StorageLive(_63)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  12: StorageLive(_64)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  13: StorageLive(_65)
    SourceInfo(regex-automata/src/dfa/accel.rs:125:46-125:48)
  14: StorageLive(_66)
    SourceInfo(regex-automata/src/dfa/accel.rs:125:51-125:52)
  15: StorageLive(_67)
    SourceInfo(regex-automata/src/dfa/accel.rs:125:51-125:52)
  16: _67 = &_55
    SourceInfo(regex-automata/src/dfa/accel.rs:125:51-125:52)
  17: _66 = &(*_67)
    SourceInfo(regex-automata/src/dfa/accel.rs:125:51-125:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:125:46-125:48)
      kind: _65 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _66) -> [return: bb24, unwind: bb27]
  }
  preds [bb1, bb6]
  succs [bb24, bb27]

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:121:9-121:10)
      kind: falseEdge -> [real: bb7, imaginary: bb4]
  }
  preds [bb1]
  succs [bb4, bb7]

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:122:9-122:10)
      kind: falseEdge -> [real: bb11, imaginary: bb5]
  }
  preds [bb1, bb3]
  succs [bb5, bb11]

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:123:9-123:10)
      kind: falseEdge -> [real: bb16, imaginary: bb6]
  }
  preds [bb1, bb4]
  succs [bb6, bb16]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:124:9-124:10)
      kind: falseEdge -> [real: bb22, imaginary: bb2]
  }
  preds [bb1, bb5]
  succs [bb2, bb22]

bb7
  0: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:30-121:35)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:33-121:34)
  2: _8 = const 0_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:121:33-121:34)
  3: _9 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/accel.rs:121:30-121:35)
  4: _10 = Lt(_8, _9)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:30-121:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:121:30-121:35)
      kind: assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb8, unwind: bb27]
  }
  preds [bb3]
  succs [bb8, bb27]

bb8
  0: _7 = (*_4)[_8]
    SourceInfo(regex-automata/src/dfa/accel.rs:121:30-121:35)
  1: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:37-121:52)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:37-121:52)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:46-121:52)
  4: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:38-121:46)
  5: _14 = &(*_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:38-121:46)
  6: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:47-121:51)
  7: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:49-121:51)
  8: _16 = _3
    SourceInfo(regex-automata/src/dfa/accel.rs:121:49-121:51)
  9: _15 = core::ops::RangeTo::<usize> { end: move _16 }
    SourceInfo(regex-automata/src/dfa/accel.rs:121:47-121:51)
  10: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:50-121:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:121:46-121:52)
      kind: _13 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _14, move _15) -> [return: bb9, unwind: bb27]
  }
  preds [bb7]
  succs [bb9, bb27]

bb9
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:51-121:52)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:51-121:52)
  2: _12 = &(*_13)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:37-121:52)
  3: _11 = &(*_12)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:37-121:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:121:14-121:53)
      kind: _0 = util::memchr::inner::memrchr(move _7, move _11) -> [return: bb10, unwind: bb27]
  }
  preds [bb8]
  succs [bb10, bb27]

bb10
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:52-121:53)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:52-121:53)
  2: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:52-121:53)
  3: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:52-121:53)
  4: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:121:52-121:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:121:52-121:53)
      kind: goto -> bb26
  }
  preds [bb9]
  succs [bb26]

bb11
  0: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:31-122:36)
  1: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:34-122:35)
  2: _18 = const 0_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:122:34-122:35)
  3: _19 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/accel.rs:122:31-122:36)
  4: _20 = Lt(_18, _19)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:31-122:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:122:31-122:36)
      kind: assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb12, unwind: bb27]
  }
  preds [bb4]
  succs [bb12, bb27]

bb12
  0: _17 = (*_4)[_18]
    SourceInfo(regex-automata/src/dfa/accel.rs:122:31-122:36)
  1: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:38-122:43)
  2: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:41-122:42)
  3: _22 = const 1_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:122:41-122:42)
  4: _23 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/accel.rs:122:38-122:43)
  5: _24 = Lt(_22, _23)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:38-122:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:122:38-122:43)
      kind: assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> [success: bb13, unwind: bb27]
  }
  preds [bb11]
  succs [bb13, bb27]

bb13
  0: _21 = (*_4)[_22]
    SourceInfo(regex-automata/src/dfa/accel.rs:122:38-122:43)
  1: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:45-122:60)
  2: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:45-122:60)
  3: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:54-122:60)
  4: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:46-122:54)
  5: _28 = &(*_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:46-122:54)
  6: StorageLive(_29)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:55-122:59)
  7: StorageLive(_30)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:57-122:59)
  8: _30 = _3
    SourceInfo(regex-automata/src/dfa/accel.rs:122:57-122:59)
  9: _29 = core::ops::RangeTo::<usize> { end: move _30 }
    SourceInfo(regex-automata/src/dfa/accel.rs:122:55-122:59)
  10: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:58-122:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:122:54-122:60)
      kind: _27 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _28, move _29) -> [return: bb14, unwind: bb27]
  }
  preds [bb12]
  succs [bb14, bb27]

bb14
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:59-122:60)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:59-122:60)
  2: _26 = &(*_27)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:45-122:60)
  3: _25 = &(*_26)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:45-122:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:122:14-122:61)
      kind: _0 = util::memchr::inner::memrchr2(move _17, move _21, move _25) -> [return: bb15, unwind: bb27]
  }
  preds [bb13]
  succs [bb15, bb27]

bb15
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:60-122:61)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:60-122:61)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:60-122:61)
  3: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:60-122:61)
  4: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:60-122:61)
  5: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:60-122:61)
  6: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/accel.rs:122:60-122:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:122:60-122:61)
      kind: goto -> bb26
  }
  preds [bb14]
  succs [bb26]

bb16
  0: StorageLive(_31)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:31-123:36)
  1: StorageLive(_32)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:34-123:35)
  2: _32 = const 0_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:123:34-123:35)
  3: _33 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/accel.rs:123:31-123:36)
  4: _34 = Lt(_32, _33)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:31-123:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:123:31-123:36)
      kind: assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> [success: bb17, unwind: bb27]
  }
  preds [bb5]
  succs [bb17, bb27]

bb17
  0: _31 = (*_4)[_32]
    SourceInfo(regex-automata/src/dfa/accel.rs:123:31-123:36)
  1: StorageLive(_35)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:38-123:43)
  2: StorageLive(_36)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:41-123:42)
  3: _36 = const 1_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:123:41-123:42)
  4: _37 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/accel.rs:123:38-123:43)
  5: _38 = Lt(_36, _37)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:38-123:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:123:38-123:43)
      kind: assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> [success: bb18, unwind: bb27]
  }
  preds [bb16]
  succs [bb18, bb27]

bb18
  0: _35 = (*_4)[_36]
    SourceInfo(regex-automata/src/dfa/accel.rs:123:38-123:43)
  1: StorageLive(_39)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:45-123:50)
  2: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:48-123:49)
  3: _40 = const 2_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:123:48-123:49)
  4: _41 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/accel.rs:123:45-123:50)
  5: _42 = Lt(_40, _41)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:45-123:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:123:45-123:50)
      kind: assert(move _42, "index out of bounds: the length is {} but the index is {}", move _41, _40) -> [success: bb19, unwind: bb27]
  }
  preds [bb17]
  succs [bb19, bb27]

bb19
  0: _39 = (*_4)[_40]
    SourceInfo(regex-automata/src/dfa/accel.rs:123:45-123:50)
  1: StorageLive(_43)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:52-123:67)
  2: StorageLive(_44)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:52-123:67)
  3: StorageLive(_45)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:61-123:67)
  4: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:53-123:61)
  5: _46 = &(*_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:53-123:61)
  6: StorageLive(_47)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:62-123:66)
  7: StorageLive(_48)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:64-123:66)
  8: _48 = _3
    SourceInfo(regex-automata/src/dfa/accel.rs:123:64-123:66)
  9: _47 = core::ops::RangeTo::<usize> { end: move _48 }
    SourceInfo(regex-automata/src/dfa/accel.rs:123:62-123:66)
  10: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:65-123:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:123:61-123:67)
      kind: _45 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _46, move _47) -> [return: bb20, unwind: bb27]
  }
  preds [bb18]
  succs [bb20, bb27]

bb20
  0: StorageDead(_47)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:66-123:67)
  1: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:66-123:67)
  2: _44 = &(*_45)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:52-123:67)
  3: _43 = &(*_44)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:52-123:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:123:14-123:68)
      kind: _0 = util::memchr::inner::memrchr3(move _31, move _35, move _39, move _43) -> [return: bb21, unwind: bb27]
  }
  preds [bb19]
  succs [bb21, bb27]

bb21
  0: StorageDead(_43)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:67-123:68)
  1: StorageDead(_39)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:67-123:68)
  2: StorageDead(_35)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:67-123:68)
  3: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:67-123:68)
  4: StorageDead(_45)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:67-123:68)
  5: StorageDead(_44)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:67-123:68)
  6: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:67-123:68)
  7: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:67-123:68)
  8: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/accel.rs:123:67-123:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:123:67-123:68)
      kind: goto -> bb26
  }
  preds [bb20]
  succs [bb26]

bb22
  0: StorageLive(_50)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
  1: StorageLive(_51)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  2: StorageLive(_52)
    SourceInfo(regex-automata/src/dfa/accel.rs:124:21-124:53)
  3: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/accel.rs:124:21-124:53)
  4: StorageLive(_54)
    SourceInfo(regex-automata/src/dfa/accel.rs:124:21-124:53)
  5: _54 = [const "cannot find with empty needles"]
    SourceInfo(regex-automata/src/dfa/accel.rs:124:21-124:53)
  6: _53 = &_54
    SourceInfo(regex-automata/src/dfa/accel.rs:124:21-124:53)
  7: _52 = &(*_53)
    SourceInfo(regex-automata/src/dfa/accel.rs:124:21-124:53)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
      kind: _51 = core::fmt::Arguments::<'_>::new_const::<1>(move _52) -> [return: bb23, unwind: bb27]
  }
  preds [bb6]
  succs [bb23, bb27]

bb23
  0: StorageDead(_52)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
      kind: _50 = core::panicking::panic_fmt(move _51) -> bb27
  }
  preds [bb22]
  succs [bb27]

bb24
  0: StorageDead(_66)
    SourceInfo(regex-automata/src/dfa/accel.rs:125:47-125:48)
  1: _64 = [move _65]
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  2: StorageDead(_65)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  3: _63 = &_64
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  4: _62 = &(*_63)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
      kind: _58 = core::fmt::Arguments::<'_>::new_v1::<1, 1>(move _59, move _62) -> [return: bb25, unwind: bb27]
  }
  preds [bb2]
  succs [bb25, bb27]

bb25
  0: StorageDead(_62)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  1: StorageDead(_59)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
      kind: _57 = core::panicking::panic_fmt(move _58) -> bb27
  }
  preds [bb24]
  succs [bb27]

bb26
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:127:1-127:2)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:127:1-127:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:127:2-127:2)
      kind: return
  }
  preds [bb10, bb15, bb21]
  succs []

bb27
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:114:1-127:2)
      kind: resume
  }
  preds [bb0, bb2, bb7, bb8, bb9, bb11, bb12, bb13, bb14, bb16, bb17, bb18, bb19, bb20, bb22, bb23, bb24, bb25]
  succs []

