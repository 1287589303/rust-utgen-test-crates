bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2297:9-2297:13)
  1: _2 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2297:9-2297:13)
  2: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2297:22-2297:37)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2297:22-2297:33)
  4: _4 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2297:22-2297:33)
  5: _5 = SubWithOverflow(_4, const 1_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2297:22-2297:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2297:22-2297:37)
      kind: assert(!move (_5.1: bool), "attempt to compute `{} - {}`, which would overflow", move _4, const 1_usize) -> [success: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _3 = move (_5.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2297:22-2297:37)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2297:36-2297:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2297:9-2297:38)
      kind: _0 = dfa::sparse::State::<'_>::next_at(move _2, move _3) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2297:37-2297:38)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2297:37-2297:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2298:6-2298:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2296:5-2298:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

