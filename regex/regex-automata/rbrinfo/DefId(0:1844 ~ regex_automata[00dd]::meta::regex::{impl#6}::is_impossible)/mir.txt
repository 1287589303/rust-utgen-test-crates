bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:9-2003:10)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:12-2001:29)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:12-2001:25)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:12-2001:17)
  4: _6 = &(*_2)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:12-2001:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2001:12-2001:25)
      kind: _5 = util::search::Input::<'_>::start(move _6) -> [return: bb1, unwind: bb48]
  }
  preds []
  succs [bb1, bb48]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:24-2001:25)
  1: _4 = Gt(move _5, const 0_usize)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:12-2001:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2001:12-2001:29)
      kind: switchInt(move _4) -> [0: bb6, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:28-2001:29)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:33-2001:64)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:33-2001:37)
  3: _8 = &(*_1)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:33-2001:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2001:33-2001:64)
      kind: _7 = meta::regex::RegexInfo::is_always_anchored_start(move _8) -> [return: bb3, unwind: bb48]
  }
  preds [bb1]
  succs [bb3, bb48]

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2001:33-2001:64)
      kind: switchInt(move _7) -> [0: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:63-2001:64)
  1: _0 = const true
    SourceInfo(regex-automata/src/meta/regex.rs:2002:20-2002:24)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/regex.rs:2003:9-2003:10)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/regex.rs:2003:9-2003:10)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:2003:9-2003:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb47
  }
  preds [bb3]
  succs [bb47]

bb5
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:63-2001:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb7
  }
  preds [bb3]
  succs [bb7]

bb6
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/regex.rs:2001:28-2001:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb7
  }
  preds [bb1]
  succs [bb7]

bb7
  0: _3 = const ()
    SourceInfo(regex-automata/src/meta/regex.rs:2003:10-2003:10)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/regex.rs:2003:9-2003:10)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/regex.rs:2003:9-2003:10)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:2003:9-2003:10)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:9-2009:10)
  5: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:12-2005:48)
  6: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:12-2005:23)
  7: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:12-2005:17)
  8: _13 = &(*_2)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:12-2005:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2005:12-2005:23)
      kind: _12 = util::search::Input::<'_>::end(move _13) -> [return: bb8, unwind: bb48]
  }
  preds [bb5, bb6]
  succs [bb8, bb48]

bb8
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:22-2005:23)
  1: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:26-2005:48)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:26-2005:42)
  3: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:26-2005:42)
  4: StorageLive(_17)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:26-2005:31)
  5: _17 = &(*_2)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:26-2005:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2005:26-2005:42)
      kind: _16 = util::search::Input::<'_>::haystack(move _17) -> [return: bb9, unwind: bb48]
  }
  preds [bb7]
  succs [bb9, bb48]

bb9
  0: _15 = &(*_16)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:26-2005:42)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:41-2005:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2005:26-2005:48)
      kind: _14 = core::slice::<impl [u8]>::len(move _15) -> [return: bb10, unwind: bb48]
  }
  preds [bb8]
  succs [bb10, bb48]

bb10
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:47-2005:48)
  1: _11 = Lt(move _12, move _14)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:12-2005:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2005:12-2005:48)
      kind: switchInt(move _11) -> [0: bb15, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb15]

bb11
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:47-2005:48)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:47-2005:48)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:47-2005:48)
  3: StorageLive(_18)
    SourceInfo(regex-automata/src/meta/regex.rs:2006:16-2006:45)
  4: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/regex.rs:2006:16-2006:20)
  5: _19 = &(*_1)
    SourceInfo(regex-automata/src/meta/regex.rs:2006:16-2006:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2006:16-2006:45)
      kind: _18 = meta::regex::RegexInfo::is_always_anchored_end(move _19) -> [return: bb12, unwind: bb48]
  }
  preds [bb10]
  succs [bb12, bb48]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2006:16-2006:45)
      kind: switchInt(move _18) -> [0: bb14, otherwise: bb13]
  }
  preds [bb11]
  succs [bb13, bb14]

bb13
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/regex.rs:2006:44-2006:45)
  1: _0 = const true
    SourceInfo(regex-automata/src/meta/regex.rs:2008:20-2008:24)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/regex.rs:2009:9-2009:10)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/regex.rs:2009:9-2009:10)
  4: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/regex.rs:2009:9-2009:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb47
  }
  preds [bb12]
  succs [bb47]

bb14
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/regex.rs:2006:44-2006:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb16
  }
  preds [bb12]
  succs [bb16]

bb15
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:47-2005:48)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:47-2005:48)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/regex.rs:2005:47-2005:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb16
  }
  preds [bb10]
  succs [bb16]

bb16
  0: _10 = const ()
    SourceInfo(regex-automata/src/meta/regex.rs:2009:10-2009:10)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/regex.rs:2009:9-2009:10)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/regex.rs:2009:9-2009:10)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/regex.rs:2009:9-2009:10)
  4: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:13-2012:19)
  5: StorageLive(_22)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:28-2012:60)
  6: StorageLive(_23)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:28-2012:46)
  7: StorageLive(_24)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:28-2012:46)
  8: StorageLive(_25)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:28-2012:32)
  9: _25 = &(*_1)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:28-2012:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2012:28-2012:46)
      kind: _24 = meta::regex::RegexInfo::props_union(move _25) -> [return: bb17, unwind: bb48]
  }
  preds [bb14, bb15]
  succs [bb17, bb48]

bb17
  0: _23 = &(*_24)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:28-2012:46)
  1: StorageDead(_25)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:45-2012:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2012:28-2012:60)
      kind: _22 = regex_syntax::hir::Properties::minimum_len(move _23) -> [return: bb18, unwind: bb48]
  }
  preds [bb16]
  succs [bb18, bb48]

bb18
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:59-2012:60)
  1: PlaceMention(_22)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:28-2012:60)
  2: _26 = discriminant(_22)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:28-2012:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2012:22-2012:60)
      kind: switchInt(move _26) -> [0: bb20, 1: bb21, otherwise: bb19]
  }
  preds [bb17]
  succs [bb19, bb20, bb21]

bb19
  0: FakeRead(ForMatchedPlace(None), _22)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:28-2012:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2012:28-2012:60)
      kind: unreachable
  }
  preds [bb18]
  succs []

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2013:13-2013:17)
      kind: falseEdge -> [real: bb22, imaginary: bb21]
  }
  preds [bb18]
  succs [bb21, bb22]

bb21
  0: StorageLive(_28)
    SourceInfo(regex-automata/src/meta/regex.rs:2014:18-2014:24)
  1: _28 = ((_22 as Some).0: usize)
    SourceInfo(regex-automata/src/meta/regex.rs:2014:18-2014:24)
  2: _21 = _28
    SourceInfo(regex-automata/src/meta/regex.rs:2014:29-2014:35)
  3: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/regex.rs:2014:34-2014:35)
  4: FakeRead(ForLet(None), _21)
    SourceInfo(regex-automata/src/meta/regex.rs:2012:13-2012:19)
  5: StorageDead(_24)
    SourceInfo(regex-automata/src/meta/regex.rs:2015:10-2015:11)
  6: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/regex.rs:2015:10-2015:11)
  7: StorageLive(_29)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:9-2018:10)
  8: StorageLive(_30)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:12-2016:43)
  9: StorageLive(_31)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:12-2016:34)
  10: StorageLive(_32)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:12-2016:28)
  11: StorageLive(_33)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:12-2016:28)
  12: StorageLive(_34)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:12-2016:17)
  13: _34 = &(*_2)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:12-2016:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2016:12-2016:28)
      kind: _33 = util::search::Input::<'_>::get_span(move _34) -> [return: bb23, unwind: bb48]
  }
  preds [bb18, bb20]
  succs [bb23, bb48]

bb22
  0: _0 = const false
    SourceInfo(regex-automata/src/meta/regex.rs:2013:28-2013:33)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/meta/regex.rs:2015:10-2015:11)
  2: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/regex.rs:2015:10-2015:11)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb46
  }
  preds [bb20]
  succs [bb46]

bb23
  0: _32 = &_33
    SourceInfo(regex-automata/src/meta/regex.rs:2016:12-2016:28)
  1: StorageDead(_34)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:27-2016:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2016:12-2016:34)
      kind: _31 = util::search::Span::len(move _32) -> [return: bb24, unwind: bb48]
  }
  preds [bb21]
  succs [bb24, bb48]

bb24
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:33-2016:34)
  1: StorageLive(_35)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:37-2016:43)
  2: _35 = _21
    SourceInfo(regex-automata/src/meta/regex.rs:2016:37-2016:43)
  3: _30 = Lt(move _31, move _35)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:12-2016:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2016:12-2016:43)
      kind: switchInt(move _30) -> [0: bb26, otherwise: bb25]
  }
  preds [bb23]
  succs [bb25, bb26]

bb25
  0: StorageDead(_35)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:42-2016:43)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:42-2016:43)
  2: StorageDead(_31)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:42-2016:43)
  3: _0 = const true
    SourceInfo(regex-automata/src/meta/regex.rs:2017:20-2017:24)
  4: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/regex.rs:2018:9-2018:10)
  5: StorageDead(_29)
    SourceInfo(regex-automata/src/meta/regex.rs:2018:9-2018:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb46
  }
  preds [bb24]
  succs [bb46]

bb26
  0: StorageDead(_35)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:42-2016:43)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:42-2016:43)
  2: StorageDead(_31)
    SourceInfo(regex-automata/src/meta/regex.rs:2016:42-2016:43)
  3: _29 = const ()
    SourceInfo(regex-automata/src/meta/regex.rs:2018:10-2018:10)
  4: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/regex.rs:2018:9-2018:10)
  5: StorageDead(_29)
    SourceInfo(regex-automata/src/meta/regex.rs:2018:9-2018:10)
  6: StorageLive(_37)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:9-2034:10)
  7: StorageLive(_38)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:12-2026:41)
  8: StorageLive(_39)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:12-2026:16)
  9: _39 = &(*_1)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:12-2026:16)
  10: StorageLive(_40)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:35-2026:40)
  11: _40 = &(*_2)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:35-2026:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2026:12-2026:41)
      kind: _38 = meta::regex::RegexInfo::is_anchored_start(move _39, move _40) -> [return: bb27, unwind: bb48]
  }
  preds [bb24]
  succs [bb27, bb48]

bb27
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2026:12-2026:41)
      kind: switchInt(move _38) -> [0: bb42, otherwise: bb28]
  }
  preds [bb26]
  succs [bb28, bb42]

bb28
  0: StorageDead(_40)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:40-2026:41)
  1: StorageDead(_39)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:40-2026:41)
  2: StorageLive(_41)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:45-2026:74)
  3: StorageLive(_42)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:45-2026:49)
  4: _42 = &(*_1)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:45-2026:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2026:45-2026:74)
      kind: _41 = meta::regex::RegexInfo::is_always_anchored_end(move _42) -> [return: bb29, unwind: bb48]
  }
  preds [bb27]
  succs [bb29, bb48]

bb29
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2026:45-2026:74)
      kind: switchInt(move _41) -> [0: bb41, otherwise: bb30]
  }
  preds [bb28]
  succs [bb30, bb41]

bb30
  0: StorageDead(_42)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:73-2026:74)
  1: StorageLive(_43)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:17-2027:23)
  2: StorageLive(_44)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:32-2027:64)
  3: StorageLive(_45)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:32-2027:50)
  4: StorageLive(_46)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:32-2027:50)
  5: StorageLive(_47)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:32-2027:36)
  6: _47 = &(*_1)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:32-2027:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2027:32-2027:50)
      kind: _46 = meta::regex::RegexInfo::props_union(move _47) -> [return: bb31, unwind: bb48]
  }
  preds [bb29]
  succs [bb31, bb48]

bb31
  0: _45 = &(*_46)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:32-2027:50)
  1: StorageDead(_47)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:49-2027:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2027:32-2027:64)
      kind: _44 = regex_syntax::hir::Properties::maximum_len(move _45) -> [return: bb32, unwind: bb48]
  }
  preds [bb30]
  succs [bb32, bb48]

bb32
  0: StorageDead(_45)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:63-2027:64)
  1: PlaceMention(_44)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:32-2027:64)
  2: _48 = discriminant(_44)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:32-2027:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2027:26-2027:64)
      kind: switchInt(move _48) -> [0: bb34, 1: bb35, otherwise: bb33]
  }
  preds [bb31]
  succs [bb33, bb34, bb35]

bb33
  0: FakeRead(ForMatchedPlace(None), _44)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:32-2027:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2027:32-2027:64)
      kind: unreachable
  }
  preds [bb32]
  succs []

bb34
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2028:17-2028:21)
      kind: falseEdge -> [real: bb36, imaginary: bb35]
  }
  preds [bb32]
  succs [bb35, bb36]

bb35
  0: StorageLive(_50)
    SourceInfo(regex-automata/src/meta/regex.rs:2029:22-2029:28)
  1: _50 = ((_44 as Some).0: usize)
    SourceInfo(regex-automata/src/meta/regex.rs:2029:22-2029:28)
  2: _43 = _50
    SourceInfo(regex-automata/src/meta/regex.rs:2029:33-2029:39)
  3: StorageDead(_50)
    SourceInfo(regex-automata/src/meta/regex.rs:2029:38-2029:39)
  4: FakeRead(ForLet(None), _43)
    SourceInfo(regex-automata/src/meta/regex.rs:2027:17-2027:23)
  5: StorageDead(_46)
    SourceInfo(regex-automata/src/meta/regex.rs:2030:14-2030:15)
  6: StorageDead(_44)
    SourceInfo(regex-automata/src/meta/regex.rs:2030:14-2030:15)
  7: StorageLive(_51)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:16-2031:47)
  8: StorageLive(_52)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:16-2031:38)
  9: StorageLive(_53)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:16-2031:32)
  10: StorageLive(_54)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:16-2031:32)
  11: StorageLive(_55)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:16-2031:21)
  12: _55 = &(*_2)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:16-2031:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2031:16-2031:32)
      kind: _54 = util::search::Input::<'_>::get_span(move _55) -> [return: bb37, unwind: bb48]
  }
  preds [bb32, bb34]
  succs [bb37, bb48]

bb36
  0: _0 = const false
    SourceInfo(regex-automata/src/meta/regex.rs:2028:32-2028:37)
  1: StorageDead(_46)
    SourceInfo(regex-automata/src/meta/regex.rs:2030:14-2030:15)
  2: StorageDead(_44)
    SourceInfo(regex-automata/src/meta/regex.rs:2030:14-2030:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb45
  }
  preds [bb34]
  succs [bb45]

bb37
  0: _53 = &_54
    SourceInfo(regex-automata/src/meta/regex.rs:2031:16-2031:32)
  1: StorageDead(_55)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:31-2031:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2031:16-2031:38)
      kind: _52 = util::search::Span::len(move _53) -> [return: bb38, unwind: bb48]
  }
  preds [bb35]
  succs [bb38, bb48]

bb38
  0: StorageDead(_53)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:37-2031:38)
  1: StorageLive(_56)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:41-2031:47)
  2: _56 = _43
    SourceInfo(regex-automata/src/meta/regex.rs:2031:41-2031:47)
  3: _51 = Gt(move _52, move _56)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:16-2031:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2031:16-2031:47)
      kind: switchInt(move _51) -> [0: bb40, otherwise: bb39]
  }
  preds [bb37]
  succs [bb39, bb40]

bb39
  0: StorageDead(_56)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:46-2031:47)
  1: StorageDead(_54)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:46-2031:47)
  2: StorageDead(_52)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:46-2031:47)
  3: _0 = const true
    SourceInfo(regex-automata/src/meta/regex.rs:2032:24-2032:28)
  4: StorageDead(_51)
    SourceInfo(regex-automata/src/meta/regex.rs:2033:13-2033:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb45
  }
  preds [bb38]
  succs [bb45]

bb40
  0: StorageDead(_56)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:46-2031:47)
  1: StorageDead(_54)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:46-2031:47)
  2: StorageDead(_52)
    SourceInfo(regex-automata/src/meta/regex.rs:2031:46-2031:47)
  3: _37 = const ()
    SourceInfo(regex-automata/src/meta/regex.rs:2033:14-2033:14)
  4: StorageDead(_51)
    SourceInfo(regex-automata/src/meta/regex.rs:2033:13-2033:14)
  5: StorageDead(_43)
    SourceInfo(regex-automata/src/meta/regex.rs:2034:9-2034:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2026:9-2034:10)
      kind: goto -> bb44
  }
  preds [bb38]
  succs [bb44]

bb41
  0: StorageDead(_42)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:73-2026:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb43
  }
  preds [bb29]
  succs [bb43]

bb42
  0: StorageDead(_40)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:40-2026:41)
  1: StorageDead(_39)
    SourceInfo(regex-automata/src/meta/regex.rs:2026:40-2026:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb43
  }
  preds [bb27]
  succs [bb43]

bb43
  0: _37 = const ()
    SourceInfo(regex-automata/src/meta/regex.rs:2034:10-2034:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2026:9-2034:10)
      kind: goto -> bb44
  }
  preds [bb41, bb42]
  succs [bb44]

bb44
  0: StorageDead(_41)
    SourceInfo(regex-automata/src/meta/regex.rs:2034:9-2034:10)
  1: StorageDead(_38)
    SourceInfo(regex-automata/src/meta/regex.rs:2034:9-2034:10)
  2: StorageDead(_37)
    SourceInfo(regex-automata/src/meta/regex.rs:2034:9-2034:10)
  3: _0 = const false
    SourceInfo(regex-automata/src/meta/regex.rs:2035:9-2035:14)
  4: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/regex.rs:2036:5-2036:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2036:6-2036:6)
      kind: goto -> bb47
  }
  preds [bb40, bb43]
  succs [bb47]

bb45
  0: StorageDead(_43)
    SourceInfo(regex-automata/src/meta/regex.rs:2034:9-2034:10)
  1: StorageDead(_41)
    SourceInfo(regex-automata/src/meta/regex.rs:2034:9-2034:10)
  2: StorageDead(_38)
    SourceInfo(regex-automata/src/meta/regex.rs:2034:9-2034:10)
  3: StorageDead(_37)
    SourceInfo(regex-automata/src/meta/regex.rs:2034:9-2034:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb46
  }
  preds [bb36, bb39]
  succs [bb46]

bb46
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/regex.rs:2036:5-2036:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb47
  }
  preds [bb22, bb25, bb45]
  succs [bb47]

bb47
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:2036:6-2036:6)
      kind: return
  }
  preds [bb4, bb13, bb44, bb46]
  succs []

bb48
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1997:5-2036:6)
      kind: resume
  }
  preds [bb0, bb2, bb7, bb8, bb9, bb11, bb16, bb17, bb21, bb23, bb26, bb28, bb30, bb31, bb35, bb37]
  succs []

