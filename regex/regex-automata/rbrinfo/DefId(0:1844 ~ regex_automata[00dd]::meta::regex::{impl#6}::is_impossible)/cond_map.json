{
  "regex-automata/src/meta/regex.rs:2001:12:2001:29": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "input.start() > 0",
          "lhs": "input.start()",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/meta/regex.rs:2012:28:2012:60": [
    {
      "Match": {
        "match_source": "regex-automata/src/meta/regex.rs:2012:28:2012:60",
        "match_str": "self.props_union().minimum_len()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/meta/regex.rs:2014:13:2014:25": {
            "pat": {
              "pat_str": "Some(minlen)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/regex.rs:2014:29:2014:35"
          },
          "regex-automata/src/meta/regex.rs:2013:13:2013:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/regex.rs:2013:21:2013:33"
          }
        }
      }
    }
  ],
  "regex-automata/src/meta/regex.rs:2026:45:2026:74": [
    {
      "Bool": {
        "Other": "self.is_always_anchored_end()"
      }
    }
  ],
  "regex-automata/src/meta/regex.rs:2006:16:2006:45": [
    {
      "Bool": {
        "Other": "self.is_always_anchored_end()"
      }
    }
  ],
  "regex-automata/src/meta/regex.rs:2001:33:2001:64": [
    {
      "Bool": {
        "Other": "self.is_always_anchored_start()"
      }
    }
  ],
  "regex-automata/src/meta/regex.rs:2016:12:2016:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "input.get_span().len() < minlen",
          "lhs": "input.get_span().len()",
          "rhs": "minlen",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/meta/regex.rs:2027:32:2027:64": [
    {
      "Match": {
        "match_source": "regex-automata/src/meta/regex.rs:2027:32:2027:64",
        "match_str": "self.props_union().maximum_len()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/meta/regex.rs:2029:17:2029:29": {
            "pat": {
              "pat_str": "Some(maxlen)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/regex.rs:2029:33:2029:39"
          },
          "regex-automata/src/meta/regex.rs:2028:17:2028:21": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/regex.rs:2028:25:2028:37"
          }
        }
      }
    }
  ],
  "regex-automata/src/meta/regex.rs:2026:12:2026:41": [
    {
      "Bool": {
        "Other": "self.is_anchored_start(input)"
      }
    }
  ],
  "regex-automata/src/meta/regex.rs:2031:16:2031:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "input.get_span().len() > maxlen",
          "lhs": "input.get_span().len()",
          "rhs": "maxlen",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/meta/regex.rs:2005:12:2005:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "input.end() < input.haystack().len()",
          "lhs": "input.end()",
          "rhs": "input.haystack().len()",
          "cmp_with_int": false
        }
      }
    }
  ]
}