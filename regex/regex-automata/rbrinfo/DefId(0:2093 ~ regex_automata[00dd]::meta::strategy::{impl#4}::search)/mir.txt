bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:709:33-709:52)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:709:33-709:41)
  2: _6 = &((*_1).8: meta::wrappers::DFA)
    SourceInfo(regex-automata/src/meta/strategy.rs:709:33-709:41)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:709:46-709:51)
  4: _7 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:709:46-709:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:709:33-709:52)
      kind: _5 = meta::wrappers::DFA::get(move _6, move _7) -> [return: bb1, unwind: bb26]
  }
  preds []
  succs [bb1, bb26]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:709:51-709:52)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:709:51-709:52)
  2: PlaceMention(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:709:33-709:52)
  3: _8 = discriminant(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:709:33-709:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:709:23-709:30)
      kind: switchInt(move _8) -> [1: bb2, otherwise: bb11]
  }
  preds [bb0]
  succs [bb2, bb11]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:709:23-709:30)
      kind: falseEdge -> [real: bb3, imaginary: bb11]
  }
  preds [bb1]
  succs [bb3, bb11]

bb3
  0: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:709:28-709:29)
  1: _9 = ((_5 as Some).0: &meta::wrappers::DFAEngine)
    SourceInfo(regex-automata/src/meta/strategy.rs:709:28-709:29)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:711:19-711:38)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:711:19-711:20)
  4: _11 = &(*_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:711:19-711:20)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:711:32-711:37)
  6: _12 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:711:32-711:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:711:19-711:38)
      kind: _10 = meta::wrappers::DFAEngine::try_search(move _11, move _12) -> [return: bb4, unwind: bb26]
  }
  preds [bb2]
  succs [bb4, bb26]

bb4
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:711:37-711:38)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:711:37-711:38)
  2: PlaceMention(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:711:19-711:38)
  3: _13 = discriminant(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:711:19-711:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:711:13-711:38)
      kind: switchInt(move _13) -> [0: bb6, 1: bb7, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6, bb7]

bb5
  0: FakeRead(ForMatchedPlace(None), _10)
    SourceInfo(regex-automata/src/meta/strategy.rs:711:19-711:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:711:19-711:38)
      kind: unreachable
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:712:17-712:22)
      kind: falseEdge -> [real: bb8, imaginary: bb7]
  }
  preds [bb4]
  succs [bb7, bb8]

bb7
  0: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:713:21-713:25)
  1: _15 = move ((_10 as Err).0: meta::error::RetryFailError)
    SourceInfo(regex-automata/src/meta/strategy.rs:713:21-713:25)
  2: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:715:21-715:25)
  3: _16 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:715:21-715:25)
  4: StorageLive(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:715:40-715:45)
  5: _17 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:715:40-715:45)
  6: StorageLive(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:715:47-715:52)
  7: _18 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:715:47-715:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:715:21-715:53)
      kind: _0 = meta::strategy::Core::search_nofail(move _16, move _17, move _18) -> [return: bb9, unwind: bb26]
  }
  preds [bb4, bb6]
  succs [bb9, bb26]

bb8
  0: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:712:20-712:21)
  1: _14 = ((_10 as Ok).0: core::option::Option<util::search::Match>)
    SourceInfo(regex-automata/src/meta/strategy.rs:712:20-712:21)
  2: _0 = _14
    SourceInfo(regex-automata/src/meta/strategy.rs:712:26-712:27)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:712:26-712:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:712:26-712:27)
      kind: goto -> bb10
  }
  preds [bb6]
  succs [bb10]

bb9
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:715:52-715:53)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:715:52-715:53)
  2: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:715:52-715:53)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:716:17-716:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:716:17-716:18)
      kind: goto -> bb10
  }
  preds [bb7]
  succs [bb10]

bb10
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:9-718:10)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:9-718:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:709:16-729:10)
      kind: goto -> bb25
  }
  preds [bb8, bb9]
  succs [bb25]

bb11
  0: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:33-718:55)
  1: StorageLive(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:33-718:44)
  2: _20 = &((*_1).7: meta::wrappers::Hybrid)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:33-718:44)
  3: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:49-718:54)
  4: _21 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:49-718:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:718:33-718:55)
      kind: _19 = meta::wrappers::Hybrid::get(move _20, move _21) -> [return: bb12, unwind: bb26]
  }
  preds [bb1, bb2]
  succs [bb12, bb26]

bb12
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:54-718:55)
  1: StorageDead(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:54-718:55)
  2: PlaceMention(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:33-718:55)
  3: _22 = discriminant(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:33-718:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:718:23-718:30)
      kind: switchInt(move _22) -> [1: bb13, otherwise: bb22]
  }
  preds [bb11]
  succs [bb13, bb22]

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:718:23-718:30)
      kind: falseEdge -> [real: bb14, imaginary: bb22]
  }
  preds [bb12]
  succs [bb14, bb22]

bb14
  0: StorageLive(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:28-718:29)
  1: _23 = ((_19 as Some).0: &meta::wrappers::HybridEngine)
    SourceInfo(regex-automata/src/meta/strategy.rs:718:28-718:29)
  2: StorageLive(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:19-720:57)
  3: StorageLive(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:19-720:20)
  4: _25 = &(*_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:19-720:20)
  5: StorageLive(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:32-720:49)
  6: StorageLive(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:32-720:49)
  7: _27 = &mut ((*_2).4: meta::wrappers::HybridCache)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:32-720:49)
  8: _26 = &mut (*_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:32-720:49)
  9: StorageLive(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:51-720:56)
  10: _28 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:51-720:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:720:19-720:57)
      kind: _24 = meta::wrappers::HybridEngine::try_search(move _25, move _26, move _28) -> [return: bb15, unwind: bb26]
  }
  preds [bb13]
  succs [bb15, bb26]

bb15
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:56-720:57)
  1: StorageDead(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:56-720:57)
  2: StorageDead(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:56-720:57)
  3: PlaceMention(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:19-720:57)
  4: _29 = discriminant(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:19-720:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:720:13-720:57)
      kind: switchInt(move _29) -> [0: bb17, 1: bb18, otherwise: bb16]
  }
  preds [bb14]
  succs [bb16, bb17, bb18]

bb16
  0: FakeRead(ForMatchedPlace(None), _24)
    SourceInfo(regex-automata/src/meta/strategy.rs:720:19-720:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:720:19-720:57)
      kind: unreachable
  }
  preds [bb15]
  succs []

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:721:17-721:22)
      kind: falseEdge -> [real: bb19, imaginary: bb18]
  }
  preds [bb15]
  succs [bb18, bb19]

bb18
  0: StorageLive(_31)
    SourceInfo(regex-automata/src/meta/strategy.rs:722:21-722:25)
  1: _31 = move ((_24 as Err).0: meta::error::RetryFailError)
    SourceInfo(regex-automata/src/meta/strategy.rs:722:21-722:25)
  2: StorageLive(_32)
    SourceInfo(regex-automata/src/meta/strategy.rs:724:21-724:25)
  3: _32 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:724:21-724:25)
  4: StorageLive(_33)
    SourceInfo(regex-automata/src/meta/strategy.rs:724:40-724:45)
  5: _33 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:724:40-724:45)
  6: StorageLive(_34)
    SourceInfo(regex-automata/src/meta/strategy.rs:724:47-724:52)
  7: _34 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:724:47-724:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:724:21-724:53)
      kind: _0 = meta::strategy::Core::search_nofail(move _32, move _33, move _34) -> [return: bb20, unwind: bb26]
  }
  preds [bb15, bb17]
  succs [bb20, bb26]

bb19
  0: StorageLive(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:721:20-721:21)
  1: _30 = ((_24 as Ok).0: core::option::Option<util::search::Match>)
    SourceInfo(regex-automata/src/meta/strategy.rs:721:20-721:21)
  2: _0 = _30
    SourceInfo(regex-automata/src/meta/strategy.rs:721:26-721:27)
  3: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:721:26-721:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:721:26-721:27)
      kind: goto -> bb21
  }
  preds [bb17]
  succs [bb21]

bb20
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/meta/strategy.rs:724:52-724:53)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/meta/strategy.rs:724:52-724:53)
  2: StorageDead(_32)
    SourceInfo(regex-automata/src/meta/strategy.rs:724:52-724:53)
  3: StorageDead(_31)
    SourceInfo(regex-automata/src/meta/strategy.rs:725:17-725:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:725:17-725:18)
      kind: goto -> bb21
  }
  preds [bb18]
  succs [bb21]

bb21
  0: StorageDead(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:727:9-727:10)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:727:9-727:10)
  2: StorageDead(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:727:9-727:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:718:16-729:10)
      kind: goto -> bb24
  }
  preds [bb19, bb20]
  succs [bb24]

bb22
  0: StorageLive(_35)
    SourceInfo(regex-automata/src/meta/strategy.rs:728:13-728:17)
  1: _35 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:728:13-728:17)
  2: StorageLive(_36)
    SourceInfo(regex-automata/src/meta/strategy.rs:728:32-728:37)
  3: _36 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:728:32-728:37)
  4: StorageLive(_37)
    SourceInfo(regex-automata/src/meta/strategy.rs:728:39-728:44)
  5: _37 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:728:39-728:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:728:13-728:45)
      kind: _0 = meta::strategy::Core::search_nofail(move _35, move _36, move _37) -> [return: bb23, unwind: bb26]
  }
  preds [bb12, bb13]
  succs [bb23, bb26]

bb23
  0: StorageDead(_37)
    SourceInfo(regex-automata/src/meta/strategy.rs:728:44-728:45)
  1: StorageDead(_36)
    SourceInfo(regex-automata/src/meta/strategy.rs:728:44-728:45)
  2: StorageDead(_35)
    SourceInfo(regex-automata/src/meta/strategy.rs:728:44-728:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:718:16-729:10)
      kind: goto -> bb24
  }
  preds [bb22]
  succs [bb24]

bb24
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:729:9-729:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:709:16-729:10)
      kind: goto -> bb25
  }
  preds [bb21, bb23]
  succs [bb25]

bb25
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:729:10-729:11)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:730:6-730:6)
      kind: return
  }
  preds [bb10, bb24]
  succs []

bb26
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:706:5-730:6)
      kind: resume
  }
  preds [bb0, bb3, bb7, bb11, bb14, bb18, bb22]
  succs []

