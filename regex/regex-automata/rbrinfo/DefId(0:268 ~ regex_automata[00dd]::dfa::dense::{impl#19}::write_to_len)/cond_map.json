{
  "regex-automata/src/dfa/dense.rs:4125:9:4129:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>() // # patterns\n        + size_of::<u32>()",
          "lhs": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>()",
          "rhs": "size_of::<u32>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:4131:11:4131:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(self.table().len() * StateID::SIZE)",
          "lhs": "self.table().len()",
          "rhs": "StateID::SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:4125:9:4127:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>()",
          "lhs": "self.kind.write_to_len()\n        + self.start_map.write_to_len()",
          "rhs": "size_of::<u32>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:4125:9:4128:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>()",
          "lhs": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>()",
          "rhs": "size_of::<u32>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:4125:9:4130:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>() // # patterns\n        + size_of::<u32>() // universal unanchored start\n        + size_of::<u32>()",
          "lhs": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>() // # patterns\n        + size_of::<u32>()",
          "rhs": "size_of::<u32>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:4125:9:4126:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.kind.write_to_len()\n        + self.start_map.write_to_len()",
          "lhs": "self.kind.write_to_len()",
          "rhs": "self.start_map.write_to_len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:4125:9:4131:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>() // # patterns\n        + size_of::<u32>() // universal unanchored start\n        + size_of::<u32>() // universal anchored start\n        + (self.table().len() * StateID::SIZE)",
          "lhs": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>() // # patterns\n        + size_of::<u32>() // universal unanchored start\n        + size_of::<u32>()",
          "rhs": "(self.table().len() * StateID::SIZE)",
          "cmp_with_int": false
        }
      }
    }
  ]
}