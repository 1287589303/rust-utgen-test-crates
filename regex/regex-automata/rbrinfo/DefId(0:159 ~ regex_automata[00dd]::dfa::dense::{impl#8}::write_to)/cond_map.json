{
  "regex-automata/src/dfa/dense.rs:2462:15:2462:53": [
    {
      "Try": "self.tt.write_to::<E>(&mut dst[nw..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2466:15:2466:57": [
    {
      "Try": "self.accels.write_to::<E>(&mut dst[nw..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2453:15:2453:56": [
    {
      "Try": "wire::write_label(LABEL, &mut dst[nw..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2454:15:2454:65": [
    {
      "Try": "wire::write_endianness_check::<E>(&mut dst[nw..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2461:15:2461:56": [
    {
      "Try": "self.flags.write_to::<E>(&mut dst[nw..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2465:15:2465:58": [
    {
      "Try": "self.special.write_to::<E>(&mut dst[nw..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2464:15:2464:53": [
    {
      "Try": "self.ms.write_to::<E>(&mut dst[nw..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2447:12:2447:30": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "dst.len() < nwrite",
          "lhs": "dst.len()",
          "rhs": "nwrite",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:2467:15:2467:58": [
    {
      "Try": "self.quitset.write_to::<E>(&mut dst[nw..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2455:15:2455:65": [
    {
      "Try": "wire::write_version::<E>(VERSION, &mut dst[nw..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2463:15:2463:53": [
    {
      "Try": "self.st.write_to::<E>(&mut dst[nw..])?"
    }
  ]
}