bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/iter.rs:677:9-677:30)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/iter.rs:677:17-677:29)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/iter.rs:677:17-677:18)
  3: _6 = &_2
    SourceInfo(regex-automata/src/util/iter.rs:677:17-677:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/iter.rs:677:17-677:29)
      kind: _5 = util::search::Match::is_empty(move _6) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/iter.rs:677:17-677:29)
      kind: switchInt(move _5) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/iter.rs:677:28-677:29)
  1: _4 = const ()
    SourceInfo(regex-automata/src/util/iter.rs:677:30-677:30)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/iter.rs:677:29-677:30)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/util/iter.rs:677:29-677:30)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/util/iter.rs:678:9-678:73)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/util/iter.rs:678:9-678:19)
  6: _9 = &mut ((*_1).0: util::search::Input<'_>)
    SourceInfo(regex-automata/src/util/iter.rs:678:9-678:19)
  7: StorageLive(_10)
    SourceInfo(regex-automata/src/util/iter.rs:678:30-678:72)
  8: StorageLive(_11)
    SourceInfo(regex-automata/src/util/iter.rs:678:30-678:63)
  9: StorageLive(_12)
    SourceInfo(regex-automata/src/util/iter.rs:678:30-678:48)
  10: StorageLive(_13)
    SourceInfo(regex-automata/src/util/iter.rs:678:30-678:40)
  11: _13 = &((*_1).0: util::search::Input<'_>)
    SourceInfo(regex-automata/src/util/iter.rs:678:30-678:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/iter.rs:678:30-678:48)
      kind: _12 = util::search::Input::<'_>::start(move _13) -> [return: bb4, unwind: bb10]
  }
  preds [bb1]
  succs [bb4, bb10]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/iter.rs:677:28-677:29)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/util/iter.rs:677:9-677:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/iter.rs:677:9-677:30)
      kind: _7 = core::panicking::panic(const "assertion failed: m.is_empty()") -> bb10
  }
  preds [bb1]
  succs [bb10]

bb4
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/iter.rs:678:47-678:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/iter.rs:678:30-678:63)
      kind: _11 = core::num::<impl usize>::checked_add(move _12, const 1_usize) -> [return: bb5, unwind: bb10]
  }
  preds [bb2]
  succs [bb5, bb10]

bb5
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/iter.rs:678:62-678:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/iter.rs:678:30-678:72)
      kind: _10 = core::option::Option::<usize>::unwrap(move _11) -> [return: bb6, unwind: bb10]
  }
  preds [bb4]
  succs [bb6, bb10]

bb6
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/iter.rs:678:71-678:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/iter.rs:678:9-678:73)
      kind: _8 = util::search::Input::<'_>::set_start(move _9, move _10) -> [return: bb7, unwind: bb10]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/iter.rs:678:72-678:73)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/iter.rs:678:72-678:73)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/util/iter.rs:678:73-678:74)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/util/iter.rs:679:9-679:15)
  4: _14 = &mut _3
    SourceInfo(regex-automata/src/util/iter.rs:679:9-679:15)
  5: StorageLive(_15)
    SourceInfo(regex-automata/src/util/iter.rs:679:9-679:28)
  6: StorageLive(_16)
    SourceInfo(regex-automata/src/util/iter.rs:679:16-679:27)
  7: StorageLive(_17)
    SourceInfo(regex-automata/src/util/iter.rs:679:16-679:27)
  8: _17 = &((*_1).0: util::search::Input<'_>)
    SourceInfo(regex-automata/src/util/iter.rs:679:16-679:27)
  9: _16 = &(*_17)
    SourceInfo(regex-automata/src/util/iter.rs:679:16-679:27)
  10: _15 = (move _16,)
    SourceInfo(regex-automata/src/util/iter.rs:679:9-679:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/iter.rs:679:9-679:28)
      kind: _0 = <F as core::ops::FnMut<(&util::search::Input<'_>,)>>::call_mut(move _14, move _15) -> [return: bb8, unwind: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/iter.rs:679:27-679:28)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/util/iter.rs:679:27-679:28)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/util/iter.rs:679:27-679:28)
  3: StorageDead(_17)
    SourceInfo(regex-automata/src/util/iter.rs:680:5-680:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/iter.rs:680:5-680:6)
      kind: drop(_3) -> [return: bb9, unwind: bb11]
  }
  preds [bb7]
  succs [bb9, bb11]

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/iter.rs:680:6-680:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/iter.rs:680:5-680:6)
      kind: drop(_3) -> [return: bb11, unwind terminate(cleanup)]
  }
  preds [bb0, bb2, bb3, bb4, bb5, bb6, bb7]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/iter.rs:669:5-680:6)
      kind: resume
  }
  preds [bb8, bb10]
  succs []

