bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/util/captures.rs:2303:28-2306:10)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/util/captures.rs:2303:34-2303:70)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/util/captures.rs:2303:34-2303:50)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/util/captures.rs:2303:34-2303:70)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/util/captures.rs:2303:34-2303:50)
  5: _9 = &((*_1).0: std::vec::Vec<(util::primitives::SmallIndex, util::primitives::SmallIndex)>)
    SourceInfo(regex-automata/src/util/captures.rs:2303:34-2303:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2303:34-2303:70)
      kind: _8 = <std::vec::Vec<(util::primitives::SmallIndex, util::primitives::SmallIndex)> as core::ops::Deref>::deref(move _9) -> [return: bb1, unwind: bb14]
  }
  preds []
  succs [bb1, bb14]

bb1
  0: _7 = &(*_8)
    SourceInfo(regex-automata/src/util/captures.rs:2303:34-2303:50)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/captures.rs:2303:49-2303:50)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/util/captures.rs:2303:55-2303:69)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/util/captures.rs:2303:55-2303:58)
  4: _11 = &_2
    SourceInfo(regex-automata/src/util/captures.rs:2303:55-2303:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2303:55-2303:69)
      kind: _10 = util::primitives::PatternID::as_usize(move _11) -> [return: bb2, unwind: bb14]
  }
  preds [bb0]
  succs [bb2, bb14]

bb2
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/captures.rs:2303:68-2303:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2303:34-2303:70)
      kind: _6 = core::slice::<impl [(util::primitives::SmallIndex, util::primitives::SmallIndex)]>::get::<usize>(move _7, move _10) -> [return: bb3, unwind: bb14]
  }
  preds [bb1]
  succs [bb3, bb14]

bb3
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/captures.rs:2303:69-2303:70)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/captures.rs:2303:69-2303:70)
  2: PlaceMention(_6)
    SourceInfo(regex-automata/src/util/captures.rs:2303:34-2303:70)
  3: _12 = discriminant(_6)
    SourceInfo(regex-automata/src/util/captures.rs:2303:34-2303:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2303:28-2303:70)
      kind: switchInt(move _12) -> [0: bb5, 1: bb6, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5, bb6]

bb4
  0: FakeRead(ForMatchedPlace(None), _6)
    SourceInfo(regex-automata/src/util/captures.rs:2303:34-2303:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2303:34-2303:70)
      kind: unreachable
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2304:13-2304:17)
      kind: falseEdge -> [real: bb7, imaginary: bb6]
  }
  preds [bb3]
  succs [bb6, bb7]

bb6
  0: StorageLive(_14)
    SourceInfo(regex-automata/src/util/captures.rs:2305:18-2305:23)
  1: _14 = ((_6 as Some).0: &(util::primitives::SmallIndex, util::primitives::SmallIndex))
    SourceInfo(regex-automata/src/util/captures.rs:2305:18-2305:23)
  2: _5 = _14
    SourceInfo(regex-automata/src/util/captures.rs:2305:28-2305:33)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/util/captures.rs:2305:32-2305:33)
  4: PlaceMention(_5)
    SourceInfo(regex-automata/src/util/captures.rs:2303:28-2306:10)
  5: StorageLive(_3)
    SourceInfo(regex-automata/src/util/captures.rs:2303:14-2303:19)
  6: _3 = &((*_5).0: util::primitives::SmallIndex)
    SourceInfo(regex-automata/src/util/captures.rs:2303:14-2303:19)
  7: StorageLive(_4)
    SourceInfo(regex-automata/src/util/captures.rs:2303:21-2303:24)
  8: _4 = &((*_5).1: util::primitives::SmallIndex)
    SourceInfo(regex-automata/src/util/captures.rs:2303:21-2303:24)
  9: StorageDead(_8)
    SourceInfo(regex-automata/src/util/captures.rs:2306:10-2306:11)
  10: StorageDead(_6)
    SourceInfo(regex-automata/src/util/captures.rs:2306:10-2306:11)
  11: StorageDead(_5)
    SourceInfo(regex-automata/src/util/captures.rs:2306:10-2306:11)
  12: StorageLive(_15)
    SourceInfo(regex-automata/src/util/captures.rs:2311:13-2311:54)
  13: StorageLive(_16)
    SourceInfo(regex-automata/src/util/captures.rs:2311:14-2311:49)
  14: StorageLive(_17)
    SourceInfo(regex-automata/src/util/captures.rs:2311:15-2311:29)
  15: StorageLive(_18)
    SourceInfo(regex-automata/src/util/captures.rs:2311:15-2311:18)
  16: _18 = &(*_4)
    SourceInfo(regex-automata/src/util/captures.rs:2311:15-2311:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2311:15-2311:29)
      kind: _17 = util::primitives::SmallIndex::as_usize(move _18) -> [return: bb8, unwind: bb14]
  }
  preds [bb3, bb5]
  succs [bb8, bb14]

bb7
  0: _0 = const 0_usize
    SourceInfo(regex-automata/src/util/captures.rs:2304:28-2304:29)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/captures.rs:2306:10-2306:11)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/util/captures.rs:2306:10-2306:11)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/util/captures.rs:2306:10-2306:11)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2312:6-2312:6)
      kind: goto -> bb13
  }
  preds [bb5]
  succs [bb13]

bb8
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/util/captures.rs:2311:28-2311:29)
  1: StorageLive(_19)
    SourceInfo(regex-automata/src/util/captures.rs:2311:32-2311:48)
  2: StorageLive(_20)
    SourceInfo(regex-automata/src/util/captures.rs:2311:32-2311:37)
  3: _20 = &(*_3)
    SourceInfo(regex-automata/src/util/captures.rs:2311:32-2311:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2311:32-2311:48)
      kind: _19 = util::primitives::SmallIndex::as_usize(move _20) -> [return: bb9, unwind: bb14]
  }
  preds [bb6]
  succs [bb9, bb14]

bb9
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/captures.rs:2311:47-2311:48)
  1: _21 = SubWithOverflow(_17, _19)
    SourceInfo(regex-automata/src/util/captures.rs:2311:14-2311:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2311:14-2311:49)
      kind: assert(!move (_21.1: bool), "attempt to compute `{} - {}`, which would overflow", move _17, move _19) -> [success: bb10, unwind: bb14]
  }
  preds [bb8]
  succs [bb10, bb14]

bb10
  0: _16 = move (_21.0: usize)
    SourceInfo(regex-automata/src/util/captures.rs:2311:14-2311:49)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/util/captures.rs:2311:48-2311:49)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/util/captures.rs:2311:48-2311:49)
  3: _22 = Eq(const 2_usize, const 0_usize)
    SourceInfo(regex-automata/src/util/captures.rs:2311:13-2311:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2311:13-2311:54)
      kind: assert(!move _22, "attempt to divide `{}` by zero", _16) -> [success: bb11, unwind: bb14]
  }
  preds [bb9]
  succs [bb11, bb14]

bb11
  0: _15 = Div(move _16, const 2_usize)
    SourceInfo(regex-automata/src/util/captures.rs:2311:13-2311:54)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/captures.rs:2311:53-2311:54)
  2: _23 = AddWithOverflow(const 1_usize, _15)
    SourceInfo(regex-automata/src/util/captures.rs:2311:9-2311:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2311:9-2311:54)
      kind: assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, move _15) -> [success: bb12, unwind: bb14]
  }
  preds [bb10]
  succs [bb12, bb14]

bb12
  0: _0 = move (_23.0: usize)
    SourceInfo(regex-automata/src/util/captures.rs:2311:9-2311:54)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/util/captures.rs:2311:53-2311:54)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/captures.rs:2312:5-2312:6)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/util/captures.rs:2312:5-2312:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2312:6-2312:6)
      kind: goto -> bb13
  }
  preds [bb11]
  succs [bb13]

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2312:6-2312:6)
      kind: return
  }
  preds [bb7, bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2302:5-2312:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb6, bb8, bb9, bb10, bb11]
  succs []

