{
  "regex-automata/src/util/captures.rs:2311:14:2311:49": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(end.as_usize() - start.as_usize())",
          "lhs": "end.as_usize()",
          "rhs": "start.as_usize()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2303:34:2303:70": [
    {
      "Match": {
        "match_source": "regex-automata/src/util/captures.rs:2303:34:2303:70",
        "match_str": "self.slot_ranges.get(pid.as_usize())",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/util/captures.rs:2304:13:2304:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/util/captures.rs:2304:21:2304:29"
          },
          "regex-automata/src/util/captures.rs:2305:13:2305:24": {
            "pat": {
              "pat_str": "Some(range)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/util/captures.rs:2305:28:2305:33"
          }
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2311:13:2311:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "((end.as_usize() - start.as_usize()) / 2)",
          "lhs": "(end.as_usize() - start.as_usize())",
          "rhs": "2",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2311:9:2311:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "1 + ((end.as_usize() - start.as_usize()) / 2)",
          "lhs": "1",
          "rhs": "((end.as_usize() - start.as_usize()) / 2)",
          "cmp_with_int": true
        }
      }
    }
  ]
}