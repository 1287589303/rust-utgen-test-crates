bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1511:13-1511:16)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1511:19-1511:37)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1511:19-1511:31)
  3: _6 = &((*_1).4: util::alphabet::ByteClasses)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1511:19-1511:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1511:19-1511:37)
      kind: _5 = util::alphabet::ByteClasses::eoi(move _6) -> [return: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1511:36-1511:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1511:19-1511:48)
      kind: _4 = util::alphabet::Unit::as_usize(move _5) -> [return: bb2, unwind: bb13]
  }
  preds [bb0]
  succs [bb2, bb13]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1511:47-1511:48)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1511:13-1511:16)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:13-1512:19)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:22-1512:49)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:22-1512:29)
  5: _9 = &_3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:22-1512:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:22-1512:49)
      kind: _8 = hybrid::id::LazyStateID::as_usize_untagged(move _9) -> [return: bb3, unwind: bb13]
  }
  preds [bb1]
  succs [bb3, bb13]

bb3
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:48-1512:49)
  1: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:52-1512:55)
  2: _10 = _4
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:52-1512:55)
  3: _11 = AddWithOverflow(_8, _10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:22-1512:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:22-1512:55)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _10) -> [success: bb4, unwind: bb13]
  }
  preds [bb2]
  succs [bb4, bb13]

bb4
  0: _7 = move (_11.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:22-1512:55)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:54-1512:55)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:54-1512:55)
  3: FakeRead(ForLet(None), _7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1512:13-1512:19)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1513:13-1513:16)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1513:30-1513:38)
  6: StorageLive(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1513:19-1513:30)
  7: _14 = &((*_2).0: std::vec::Vec<hybrid::id::LazyStateID>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1513:19-1513:30)
  8: StorageLive(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1513:31-1513:37)
  9: _15 = _7
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1513:31-1513:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1513:30-1513:38)
      kind: _13 = <std::vec::Vec<hybrid::id::LazyStateID> as core::ops::Index<usize>>::index(move _14, move _15) -> [return: bb5, unwind: bb13]
  }
  preds [bb3]
  succs [bb5, bb13]

bb5
  0: _12 = (*_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1513:19-1513:38)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1513:37-1513:38)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1513:37-1513:38)
  3: FakeRead(ForLet(None), _12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1513:13-1513:16)
  4: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1513:38-1513:39)
  5: StorageLive(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1514:9-1516:10)
  6: StorageLive(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1514:13-1514:29)
  7: StorageLive(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1514:13-1514:16)
  8: _18 = &_12
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1514:13-1514:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1514:13-1514:29)
      kind: _17 = hybrid::id::LazyStateID::is_unknown(move _18) -> [return: bb6, unwind: bb13]
  }
  preds [bb4]
  succs [bb6, bb13]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1514:13-1514:29)
      kind: switchInt(move _17) -> [0: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1514:28-1514:29)
  1: _16 = const ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1516:10-1516:10)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1516:9-1516:10)
  3: StorageDead(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1516:9-1516:10)
  4: StorageLive(_21)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1517:13-1517:17)
  5: StorageLive(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1517:20-1517:32)
  6: _22 = &((*_1).4: util::alphabet::ByteClasses)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1517:20-1517:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1517:20-1517:38)
      kind: _21 = util::alphabet::ByteClasses::eoi(move _22) -> [return: bb9, unwind: bb13]
  }
  preds [bb6]
  succs [bb9, bb13]

bb8
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1514:28-1514:29)
  1: StorageLive(_20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1515:23-1515:26)
  2: _20 = _12
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1515:23-1515:26)
  3: _0 = core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::Ok(move _20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1515:20-1515:27)
  4: StorageDead(_20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1515:26-1515:27)
  5: StorageDead(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1516:9-1516:10)
  6: StorageDead(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1516:9-1516:10)
  7: StorageDead(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1519:5-1519:6)
  8: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1519:5-1519:6)
  9: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1519:5-1519:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1519:6-1519:6)
      kind: goto -> bb12
  }
  preds [bb6]
  succs [bb12]

bb9
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1517:37-1517:38)
  1: FakeRead(ForLet(None), _21)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1517:13-1517:17)
  2: StorageLive(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:9-1518:31)
  3: StorageLive(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:9-1518:31)
  4: StorageLive(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:19-1518:23)
  5: _25 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:19-1518:23)
  6: StorageLive(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:25-1518:30)
  7: _26 = &mut (*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:25-1518:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:9-1518:31)
      kind: _24 = hybrid::dfa::Lazy::<'_, '_>::new(move _25, move _26) -> [return: bb10, unwind: bb13]
  }
  preds [bb7]
  succs [bb10, bb13]

bb10
  0: _23 = &mut _24
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:9-1518:31)
  1: StorageDead(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:30-1518:31)
  2: StorageDead(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:30-1518:31)
  3: StorageLive(_27)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:49-1518:56)
  4: _27 = _3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:49-1518:56)
  5: StorageLive(_28)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:58-1518:62)
  6: _28 = _21
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:58-1518:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:9-1518:63)
      kind: _0 = hybrid::dfa::Lazy::<'_, '_>::cache_next_state(move _23, move _27, move _28) -> [return: bb11, unwind: bb13]
  }
  preds [bb9]
  succs [bb11, bb13]

bb11
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:62-1518:63)
  1: StorageDead(_27)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:62-1518:63)
  2: StorageDead(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1518:62-1518:63)
  3: StorageDead(_21)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1519:5-1519:6)
  4: StorageDead(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1519:5-1519:6)
  5: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1519:5-1519:6)
  6: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1519:5-1519:6)
  7: StorageDead(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1519:5-1519:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1519:6-1519:6)
      kind: goto -> bb12
  }
  preds [bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1519:6-1519:6)
      kind: return
  }
  preds [bb8, bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1506:5-1519:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb7, bb9, bb10]
  succs []

