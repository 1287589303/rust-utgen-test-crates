bb0
  0: PlaceMention((*_1))
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1671:15-1671:20)
  1: _2 = discriminant((*_1))
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1671:15-1671:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1671:9-1671:20)
      kind: switchInt(move _2) -> [0: bb5, 1: bb2, 2: bb3, 3: bb5, 4: bb4, 5: bb5, 6: bb5, 7: bb5, 8: bb5, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb4, bb5, bb5, bb5, bb5, bb5, bb5]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1671:15-1671:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1671:15-1671:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1678:13-1678:65)
      kind: falseEdge -> [real: bb7, imaginary: bb3]
  }
  preds [bb0, bb5]
  succs [bb3, bb7]

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1681:13-1681:32)
      kind: falseEdge -> [real: bb11, imaginary: bb4]
  }
  preds [bb0, bb2]
  succs [bb4, bb11]

bb4
  0: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1682:28-1682:42)
  1: _10 = &(((*_1) as Union).0: std::boxed::Box<[util::primitives::StateID]>)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1682:28-1682:42)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1683:17-1683:33)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1683:17-1683:27)
  4: _12 = &(*(*_10))
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1683:17-1683:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1683:17-1683:33)
      kind: _11 = core::slice::<impl [util::primitives::StateID]>::len(move _12) -> [return: bb14, unwind: bb18]
  }
  preds [bb0, bb3]
  succs [bb14, bb18]

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1672:13-1677:26)
      kind: falseEdge -> [real: bb6, imaginary: bb2]
  }
  preds [bb0, bb0, bb0, bb0, bb0, bb0]
  succs [bb2, bb6]

bb6
  0: _0 = const 0_usize
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1677:30-1677:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1677:30-1677:31)
      kind: goto -> bb17
  }
  preds [bb5]
  succs [bb17]

bb7
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1678:47-1678:62)
  1: _3 = &((((*_1) as Sparse).0: nfa::thompson::nfa::SparseTransitions).0: std::boxed::Box<[nfa::thompson::nfa::Transition]>)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1678:47-1678:62)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1679:17-1679:34)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1679:17-1679:28)
  4: _5 = &(*(*_3))
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1679:17-1679:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1679:17-1679:34)
      kind: _4 = core::slice::<impl [nfa::thompson::nfa::Transition]>::len(move _5) -> [return: bb8, unwind: bb18]
  }
  preds [bb2]
  succs [bb8, bb18]

bb8
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1679:33-1679:34)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1679:37-1679:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1679:37-1679:65)
      kind: _6 = core::mem::size_of::<nfa::thompson::nfa::Transition>() -> [return: bb9, unwind: bb18]
  }
  preds [bb7]
  succs [bb9, bb18]

bb9
  0: _7 = MulWithOverflow(_4, _6)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1679:17-1679:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1679:17-1679:65)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _6) -> [success: bb10, unwind: bb18]
  }
  preds [bb8]
  succs [bb10, bb18]

bb10
  0: _0 = move (_7.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1679:17-1679:65)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1679:64-1679:65)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1679:64-1679:65)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1680:13-1680:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1680:13-1680:14)
      kind: goto -> bb17
  }
  preds [bb9]
  succs [bb17]

bb11
  0: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1681:42-1681:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1681:42-1681:67)
      kind: _8 = core::mem::size_of::<util::primitives::StateID>() -> [return: bb12, unwind: bb18]
  }
  preds [bb3]
  succs [bb12, bb18]

bb12
  0: _9 = MulWithOverflow(const 256_usize, _8)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1681:36-1681:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1681:36-1681:67)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", const 256_usize, move _8) -> [success: bb13, unwind: bb18]
  }
  preds [bb11]
  succs [bb13, bb18]

bb13
  0: _0 = move (_9.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1681:36-1681:67)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1681:66-1681:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1681:66-1681:67)
      kind: goto -> bb17
  }
  preds [bb12]
  succs [bb17]

bb14
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1683:32-1683:33)
  1: StorageLive(_13)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1683:36-1683:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1683:36-1683:61)
      kind: _13 = core::mem::size_of::<util::primitives::StateID>() -> [return: bb15, unwind: bb18]
  }
  preds [bb4]
  succs [bb15, bb18]

bb15
  0: _14 = MulWithOverflow(_11, _13)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1683:17-1683:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1683:17-1683:61)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", move _11, move _13) -> [success: bb16, unwind: bb18]
  }
  preds [bb14]
  succs [bb16, bb18]

bb16
  0: _0 = move (_14.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1683:17-1683:61)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1683:60-1683:61)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1683:60-1683:61)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1684:13-1684:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1684:13-1684:14)
      kind: goto -> bb17
  }
  preds [bb15]
  succs [bb17]

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1686:6-1686:6)
      kind: return
  }
  preds [bb6, bb10, bb13, bb16]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1670:5-1686:6)
      kind: resume
  }
  preds [bb4, bb7, bb8, bb9, bb11, bb12, bb14, bb15]
  succs []

