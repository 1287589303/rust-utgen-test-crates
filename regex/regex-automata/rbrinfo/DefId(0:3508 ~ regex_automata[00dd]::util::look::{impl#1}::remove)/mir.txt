bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/look.rs:401:25-401:52)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:401:25-401:34)
  2: _4 = (_1.0: u32)
    SourceInfo(regex-automata/src/util/look.rs:401:25-401:34)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:401:37-401:52)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:401:38-401:52)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:401:38-401:42)
  6: _7 = _2
    SourceInfo(regex-automata/src/util/look.rs:401:38-401:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:401:38-401:52)
      kind: _6 = util::look::Look::as_repr(move _7) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:401:51-401:52)
  1: _5 = Not(move _6)
    SourceInfo(regex-automata/src/util/look.rs:401:37-401:52)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:401:51-401:52)
  3: _3 = BitAnd(move _4, move _5)
    SourceInfo(regex-automata/src/util/look.rs:401:25-401:52)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:401:51-401:52)
  5: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:401:51-401:52)
  6: _0 = util::look::LookSet { bits: move _3 }
    SourceInfo(regex-automata/src/util/look.rs:401:9-401:54)
  7: StorageDead(_3)
    SourceInfo(regex-automata/src/util/look.rs:401:53-401:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:402:6-402:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:400:5-402:6)
      kind: resume
  }
  preds [bb0]
  succs []

