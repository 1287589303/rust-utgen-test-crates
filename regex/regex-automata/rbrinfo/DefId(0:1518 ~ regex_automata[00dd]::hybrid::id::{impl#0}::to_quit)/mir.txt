bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/hybrid/id.rs:244:13-244:63)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/id.rs:244:13-244:38)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/id.rs:244:13-244:17)
  3: _4 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/id.rs:244:13-244:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/id.rs:244:13-244:38)
      kind: _3 = hybrid::id::LazyStateID::as_usize_unchecked(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/id.rs:244:37-244:38)
  1: _2 = BitOr(move _3, const hybrid::id::LazyStateID::MASK_QUIT)
    SourceInfo(regex-automata/src/hybrid/id.rs:244:13-244:63)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/id.rs:244:62-244:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/id.rs:243:9-245:10)
      kind: _0 = hybrid::id::LazyStateID::new_unchecked(move _2) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/hybrid/id.rs:245:9-245:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/id.rs:246:6-246:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/id.rs:242:5-246:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

