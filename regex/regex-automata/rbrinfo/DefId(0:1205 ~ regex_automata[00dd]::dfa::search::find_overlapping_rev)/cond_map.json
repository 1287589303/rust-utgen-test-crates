{
  "regex-automata/src/dfa/search.rs:493:12:493:25": [
    {
      "Bool": {
        "Other": "state.rev_eoi"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:498:20:498:43": [
    {
      "Bool": {
        "Other": "dfa.is_accel_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:497:16:497:39": [
    {
      "Bool": {
        "Other": "dfa.is_start_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:466:16:466:62": [
    {
      "Bool": {
        "Other": "let Some(match_index) = state.next_match_index"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:468:20:468:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "match_index < match_len",
          "lhs": "match_index",
          "rhs": "match_len",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:456:23:456:44": [
    {
      "Try": "init_rev(dfa, input)?"
    }
  ],
  "regex-automata/src/dfa/search.rs:523:23:523:45": [
    {
      "Bool": {
        "Other": "dfa.is_dead_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:510:23:510:46": [
    {
      "Bool": {
        "Other": "dfa.is_accel_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:495:12:495:37": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:505:23:505:46": [
    {
      "Bool": {
        "Other": "dfa.is_match_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:479:16:479:29": [
    {
      "Bool": {
        "Other": "state.rev_eoi"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:541:8:541:27": [
    {
      "Bool": {
        "Other": "state.mat.is_some()"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:458:16:458:44": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "input.start() == input.end()",
          "lhs": "input.start()",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:461:28:461:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input.end() - 1",
          "lhs": "input.end()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:481:23:481:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "state.at == input.start()",
          "lhs": "state.at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:454:25:454:33": [
    {
      "Match": {
        "match_source": "regex-automata/src/dfa/search.rs:454:25:454:33",
        "match_str": "state.id",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/dfa/search.rs:455:9:455:13": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/search.rs:455:17:464:10"
          },
          "regex-automata/src/dfa/search.rs:465:9:465:18": {
            "pat": {
              "pat_str": "Some(sid)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/search.rs:465:22:491:10"
          }
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:451:8:451:23": [
    {
      "Bool": {
        "Other": "input.is_done()"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:532:12:532:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "state.at == input.start()",
          "lhs": "state.at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:508:58:508:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "state.at + 1",
          "lhs": "state.at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:469:51:469:66": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "match_index + 1",
          "lhs": "match_index",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ]
}