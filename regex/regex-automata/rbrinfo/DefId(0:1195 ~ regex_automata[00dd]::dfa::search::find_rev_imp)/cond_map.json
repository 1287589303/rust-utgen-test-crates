{
  "regex-automata/src/dfa/search.rs:235:20:235:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "at <= input.start().saturating_add(3)",
          "lhs": "at",
          "rhs": "input.start().saturating_add(3)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:217:8:217:36": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "input.start() == input.end()",
          "lhs": "input.start()",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:302:12:302:31": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == input.start()",
          "lhs": "at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:243:16:243:41": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:256:16:256:41": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:210:19:210:40": [
    {
      "Try": "init_rev(dfa, input)?"
    }
  ],
  "regex-automata/src/dfa/search.rs:234:16:234:46": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(prev_sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:274:52:274:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at + 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:284:23:284:46": [
    {
      "Bool": {
        "Other": "dfa.is_accel_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:249:16:249:46": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(prev_sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:261:12:261:37": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:262:16:262:39": [
    {
      "Bool": {
        "Other": "dfa.is_start_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:275:20:275:28": [
    {
      "Bool": {
        "Other": "earliest"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:263:20:263:43": [
    {
      "Bool": {
        "Other": "dfa.is_accel_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:218:9:218:49": [
    {
      "Try": "eoi_rev(dfa, input, &mut sid, &mut mat)?"
    }
  ],
  "regex-automata/src/dfa/search.rs:307:5:307:45": [
    {
      "Try": "eoi_rev(dfa, input, &mut sid, &mut mat)?"
    }
  ],
  "regex-automata/src/dfa/search.rs:222:18:222:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input.end() - 1",
          "lhs": "input.end()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:278:20:278:43": [
    {
      "Bool": {
        "Other": "dfa.is_accel_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:269:23:269:46": [
    {
      "Bool": {
        "Other": "dfa.is_match_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:232:15:232:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "at >= input.start()",
          "lhs": "at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:296:23:296:45": [
    {
      "Bool": {
        "Other": "dfa.is_dead_state(sid)"
      }
    }
  ]
}