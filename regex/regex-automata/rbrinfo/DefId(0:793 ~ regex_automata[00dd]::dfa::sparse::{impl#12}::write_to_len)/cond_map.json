{
  "regex-automata/src/dfa/sparse.rs:2004:9:2007:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>()",
          "lhs": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>()",
          "rhs": "size_of::<u32>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2004:9:2010:29": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>() // # patterns\n        + size_of::<u32>() // universal unanchored start\n        + size_of::<u32>() // universal anchored start\n        + self.table().len()",
          "lhs": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>() // # patterns\n        + size_of::<u32>() // universal unanchored start\n        + size_of::<u32>()",
          "rhs": "self.table().len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2004:9:2006:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>()",
          "lhs": "self.kind.write_to_len()\n        + self.start_map.write_to_len()",
          "rhs": "size_of::<u32>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2004:9:2008:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>() // # patterns\n        + size_of::<u32>()",
          "lhs": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>()",
          "rhs": "size_of::<u32>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2004:9:2005:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.kind.write_to_len()\n        + self.start_map.write_to_len()",
          "lhs": "self.kind.write_to_len()",
          "rhs": "self.start_map.write_to_len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:2004:9:2009:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>() // # patterns\n        + size_of::<u32>() // universal unanchored start\n        + size_of::<u32>()",
          "lhs": "self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>() // # patterns\n        + size_of::<u32>()",
          "rhs": "size_of::<u32>()",
          "cmp_with_int": false
        }
      }
    }
  ]
}