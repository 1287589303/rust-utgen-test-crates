{
  "regex-automata/src/nfa/thompson/backtrack.rs:1523:33:1523:50": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/backtrack.rs:1523:33:1523:50",
        "match_str": "alternates.get(0)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/backtrack.rs:1525:25:1525:35": {
            "pat": {
              "pat_str": "Some(&sid)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1525:39:1525:42"
          },
          "regex-automata/src/nfa/thompson/backtrack.rs:1524:25:1524:29": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1524:33:1524:44"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1513:25:1517:22": [
    {
      "Bool": {
        "Other": "self.nfa.look_matcher().matches_inline(\n                        look,\n                        input.haystack(),\n                        at,\n                    )"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1503:24:1503:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "at >= input.end()",
          "lhs": "at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1499:27:1499:64": [
    {
      "Try": "sparse.matches(input.haystack(), at)?"
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1489:25:1489:60": [
    {
      "Bool": {
        "Other": "trans.matches(input.haystack(), at)"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1496:24:1496:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "at >= input.end()",
          "lhs": "at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1486:24:1486:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "at >= input.end()",
          "lhs": "at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1470:43:1470:61": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - input.start()",
          "lhs": "at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1540:24:1540:53": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "slot.as_usize() < slots.len()",
          "lhs": "slot.as_usize()",
          "rhs": "slots.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1470:17:1470:62": [
    {
      "Bool": {
        "Other": "cache.visited.insert(sid, at - input.start())"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1506:27:1506:63": [
    {
      "Try": "dense.matches(input.haystack(), at)?"
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1473:19:1473:39": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/backtrack.rs:1473:19:1473:39",
        "match_str": "*self.nfa.state(sid)",
        "match_kind": {
          "Enum": [
            "ByteRange",
            "Sparse",
            "Dense",
            "Look",
            "Union",
            "BinaryUnion",
            "Capture",
            "Fail",
            "Match"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/backtrack.rs:1502:17:1502:40": {
            "pat": {
              "pat_str": "State::Dense(ref dense)",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1502:44:1508:18"
          },
          "regex-automata/src/nfa/thompson/backtrack.rs:1549:17:1549:28": {
            "pat": {
              "pat_str": "State::Fail",
              "kind": {
                "Enum": 7
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1549:32:1549:43"
          },
          "regex-automata/src/nfa/thompson/backtrack.rs:1509:17:1509:43": {
            "pat": {
              "pat_str": "State::Look { look, next }",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1509:47:1521:18"
          },
          "regex-automata/src/nfa/thompson/backtrack.rs:1550:17:1550:44": {
            "pat": {
              "pat_str": "State::Match { pattern_id }",
              "kind": {
                "Enum": 8
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1550:48:1552:18"
          },
          "regex-automata/src/nfa/thompson/backtrack.rs:1495:17:1495:42": {
            "pat": {
              "pat_str": "State::Sparse(ref sparse)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1495:46:1501:18"
          },
          "regex-automata/src/nfa/thompson/backtrack.rs:1535:17:1535:50": {
            "pat": {
              "pat_str": "State::BinaryUnion { alt1, alt2 }",
              "kind": {
                "Enum": 5
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1535:54:1538:18"
          },
          "regex-automata/src/nfa/thompson/backtrack.rs:1539:17:1539:50": {
            "pat": {
              "pat_str": "State::Capture { next, slot, .. }",
              "kind": {
                "Enum": 6
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1539:54:1548:18"
          },
          "regex-automata/src/nfa/thompson/backtrack.rs:1522:17:1522:48": {
            "pat": {
              "pat_str": "State::Union { ref alternates }",
              "kind": {
                "Enum": 4
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1522:52:1534:18"
          },
          "regex-automata/src/nfa/thompson/backtrack.rs:1474:17:1474:47": {
            "pat": {
              "pat_str": "State::ByteRange { ref trans }",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1474:51:1494:18"
          }
        }
      }
    }
  ]
}