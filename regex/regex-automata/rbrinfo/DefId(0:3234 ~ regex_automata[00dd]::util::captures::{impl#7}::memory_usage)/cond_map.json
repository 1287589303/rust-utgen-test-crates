{
  "regex-automata/src/util/captures.rs:2150:15:2150:72": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.0.index_to_name.len() * s::<Vec<Option<Arc<str>>>>()",
          "lhs": "self.0.index_to_name.len()",
          "rhs": "s::<Vec<Option<Arc<str>>>>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2147:9:2148:73": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "s::<GroupInfoInner>()\n            + self.0.slot_ranges.len() * s::<(SmallIndex, SmallIndex)>()",
          "lhs": "s::<GroupInfoInner>()",
          "rhs": "self.0.slot_ranges.len() * s::<(SmallIndex, SmallIndex)>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2149:15:2149:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.0.name_to_index.len() * s::<CaptureNameMap>()",
          "lhs": "self.0.name_to_index.len()",
          "rhs": "s::<CaptureNameMap>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2148:15:2148:73": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.0.slot_ranges.len() * s::<(SmallIndex, SmallIndex)>()",
          "lhs": "self.0.slot_ranges.len()",
          "rhs": "s::<(SmallIndex, SmallIndex)>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2147:9:2151:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "s::<GroupInfoInner>()\n            + self.0.slot_ranges.len() * s::<(SmallIndex, SmallIndex)>()\n            + self.0.name_to_index.len() * s::<CaptureNameMap>()\n            + self.0.index_to_name.len() * s::<Vec<Option<Arc<str>>>>()\n            + self.0.memory_extra",
          "lhs": "s::<GroupInfoInner>()\n            + self.0.slot_ranges.len() * s::<(SmallIndex, SmallIndex)>()\n            + self.0.name_to_index.len() * s::<CaptureNameMap>()\n            + self.0.index_to_name.len() * s::<Vec<Option<Arc<str>>>>()",
          "rhs": "self.0.memory_extra",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2147:9:2149:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "s::<GroupInfoInner>()\n            + self.0.slot_ranges.len() * s::<(SmallIndex, SmallIndex)>()\n            + self.0.name_to_index.len() * s::<CaptureNameMap>()",
          "lhs": "s::<GroupInfoInner>()\n            + self.0.slot_ranges.len() * s::<(SmallIndex, SmallIndex)>()",
          "rhs": "self.0.name_to_index.len() * s::<CaptureNameMap>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:2147:9:2150:72": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "s::<GroupInfoInner>()\n            + self.0.slot_ranges.len() * s::<(SmallIndex, SmallIndex)>()\n            + self.0.name_to_index.len() * s::<CaptureNameMap>()\n            + self.0.index_to_name.len() * s::<Vec<Option<Arc<str>>>>()",
          "lhs": "s::<GroupInfoInner>()\n            + self.0.slot_ranges.len() * s::<(SmallIndex, SmallIndex)>()\n            + self.0.name_to_index.len() * s::<CaptureNameMap>()",
          "rhs": "self.0.index_to_name.len() * s::<Vec<Option<Arc<str>>>>()",
          "cmp_with_int": false
        }
      }
    }
  ]
}