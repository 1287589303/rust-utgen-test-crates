bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:9-2033:10)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:31)
  4: _7 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
      kind: _6 = dfa::sparse::StartTable::<T>::iter(move _7) -> [return: bb1, unwind: bb20]
  }
  preds []
  succs [bb1, bb20]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:37-2022:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
      kind: _5 = <dfa::sparse::StartStateIter<'_, T> as core::iter::IntoIterator>::into_iter(move _6) -> [return: bb2, unwind: bb20]
  }
  preds [bb0]
  succs [bb2, bb20]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:37-2022:38)
  1: PlaceMention(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  3: _8 = move _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2022:9-2033:10)
      kind: goto -> bb3
  }
  preds [bb1]
  succs [bb3]

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2022:9-2033:10)
      kind: falseUnwind -> [real: bb4, unwind: bb20]
  }
  preds [bb2, bb17]
  succs [bb4, bb20]

bb4
  0: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  1: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  4: _13 = &mut _8
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  5: _12 = &mut (*_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
      kind: _11 = <dfa::sparse::StartStateIter<'_, T> as core::iter::Iterator>::next(move _12) -> [return: bb5, unwind: bb20]
  }
  preds [bb3]
  succs [bb5, bb20]

bb5
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:37-2022:38)
  1: PlaceMention(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  2: _14 = discriminant(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
      kind: switchInt(move _14) -> [0: bb7, 1: bb8, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb7, bb8]

bb6
  0: FakeRead(ForMatchedPlace(None), _11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2022:27-2022:38)
      kind: unreachable
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2022:9-2033:10)
      kind: falseEdge -> [real: bb9, imaginary: bb8]
  }
  preds [bb5]
  succs [bb8, bb9]

bb8
  0: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:14-2022:16)
  1: _16 = (((_11 as Some).0: (util::primitives::StateID, util::search::Anchored, util::start::Start)).0: util::primitives::StateID)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:14-2022:16)
  2: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:13-2027:14)
  3: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:17-2023:35)
  4: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:17-2023:21)
  5: _19 = &(*_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:17-2023:21)
  6: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:31-2023:34)
  7: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:31-2023:34)
  8: _21 = &_16
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:31-2023:34)
  9: _20 = &(*_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:31-2023:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2023:17-2023:35)
      kind: _18 = dfa::sparse::Seen::contains(move _19, move _20) -> [return: bb10, unwind: bb20]
  }
  preds [bb5, bb7]
  succs [bb10, bb20]

bb9
  0: _4 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:9-2033:10)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  4: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  6: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  7: StorageLive(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2034:12-2034:14)
  8: _29 = ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2034:12-2034:14)
  9: _0 = core::result::Result::<(), util::wire::DeserializeError>::Ok(move _29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2034:9-2034:15)
  10: StorageDead(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2034:14-2034:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2035:6-2035:6)
      kind: goto -> bb19
  }
  preds [bb7]
  succs [bb19]

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2023:17-2023:35)
      kind: switchInt(move _18) -> [0: bb12, otherwise: bb11]
  }
  preds [bb8]
  succs [bb11, bb12]

bb11
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:34-2023:35)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:34-2023:35)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:34-2023:35)
  3: _17 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2027:14-2027:14)
  4: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2027:13-2027:14)
  5: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2027:13-2027:14)
  6: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2028:16-2028:37)
  7: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2028:16-2028:18)
  8: _25 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2028:16-2028:18)
  9: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2028:34-2028:36)
  10: _26 = _16
    SourceInfo(regex-automata/src/dfa/sparse.rs:2028:34-2028:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2028:16-2028:37)
      kind: _24 = dfa::special::Special::is_match_state(move _25, move _26) -> [return: bb14, unwind: bb20]
  }
  preds [bb10]
  succs [bb14, bb20]

bb12
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:34-2023:35)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:34-2023:35)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2023:34-2023:35)
  3: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2024:28-2026:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2024:28-2026:18)
      kind: _23 = util::wire::DeserializeError::generic(const "found invalid start state ID") -> [return: bb13, unwind: bb20]
  }
  preds [bb10]
  succs [bb13, bb20]

bb13
  0: _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2024:24-2026:19)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2026:18-2026:19)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2027:13-2027:14)
  3: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2027:13-2027:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb18
  }
  preds [bb12]
  succs [bb18]

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2028:16-2028:37)
      kind: switchInt(move _24) -> [0: bb17, otherwise: bb15]
  }
  preds [bb11]
  succs [bb15, bb17]

bb15
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2028:36-2028:37)
  1: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2028:36-2028:37)
  2: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2029:28-2031:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2029:28-2031:18)
      kind: _28 = util::wire::DeserializeError::generic(const "start states cannot be match states") -> [return: bb16, unwind: bb20]
  }
  preds [bb14]
  succs [bb16, bb20]

bb16
  0: _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2029:24-2031:19)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2031:18-2031:19)
  2: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2032:13-2032:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb18
  }
  preds [bb15]
  succs [bb18]

bb17
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2028:36-2028:37)
  1: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2028:36-2028:37)
  2: _10 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2032:14-2032:14)
  3: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2032:13-2032:14)
  4: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  5: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  6: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  7: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  8: _9 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2022:9-2033:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2022:9-2033:10)
      kind: goto -> bb3
  }
  preds [bb14]
  succs [bb3]

bb18
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  4: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  6: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2033:9-2033:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2035:6-2035:6)
      kind: goto -> bb19
  }
  preds [bb13, bb16]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2035:6-2035:6)
      kind: return
  }
  preds [bb9, bb18]
  succs []

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2017:5-2035:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb4, bb8, bb11, bb12, bb15]
  succs []

