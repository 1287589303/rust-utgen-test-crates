bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:13-1720:22)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:47-1720:64)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:30-1720:47)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:30-1720:47)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:30-1720:34)
  5: _7 = &mut (*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:30-1720:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1720:30-1720:47)
      kind: _6 = dfa::sparse::Transitions::<T>::sparse_mut(move _7) -> [return: bb1, unwind: bb26]
  }
  preds []
  succs [bb1, bb26]

bb1
  0: _5 = &mut (*_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:30-1720:47)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:46-1720:47)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:48-1720:63)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:48-1720:61)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:48-1720:50)
  5: _10 = &_2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:48-1720:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1720:48-1720:61)
      kind: _9 = util::primitives::StateID::as_usize(move _10) -> [return: bb2, unwind: bb26]
  }
  preds [bb0]
  succs [bb2, bb26]

bb2
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:60-1720:61)
  1: _8 = core::ops::RangeFrom::<usize> { start: move _9 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:48-1720:63)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:62-1720:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1720:47-1720:64)
      kind: _4 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _5, move _8) -> [return: bb3, unwind: bb26]
  }
  preds [bb1]
  succs [bb3, bb26]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:63-1720:64)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:63-1720:64)
  2: _3 = &mut (*_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:25-1720:64)
  3: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1720:13-1720:22)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1721:13-1721:23)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1721:26-1721:48)
  6: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1721:41-1721:47)
  7: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1721:41-1721:47)
  8: _14 = &_3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1721:41-1721:47)
  9: _13 = &(*(*_14))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1721:41-1721:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1721:26-1721:48)
      kind: _12 = util::wire::read_u16(move _13) -> [return: bb4, unwind: bb26]
  }
  preds [bb2]
  succs [bb4, bb26]

bb4
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1721:47-1721:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1721:26-1721:59)
      kind: _11 = <u16 as util::int::U16>::as_usize(move _12) -> [return: bb5, unwind: bb26]
  }
  preds [bb3]
  succs [bb5, bb26]

bb5
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1721:58-1721:59)
  1: FakeRead(ForLet(None), _11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1721:13-1721:23)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1721:59-1721:60)
  3: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:13-1722:21)
  4: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:24-1722:42)
  5: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:24-1722:33)
  6: _18 = const 15_i32 as u32 (IntToInt)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:24-1722:33)
  7: _19 = Lt(move _18, const 64_u32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:24-1722:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1722:24-1722:33)
      kind: assert(move _19, "attempt to shift left by `{}`, which would overflow", const 15_i32) -> [success: bb6, unwind: bb26]
  }
  preds [bb4]
  succs [bb6, bb26]

bb6
  0: _17 = Shl(const 1_usize, const 15_i32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:24-1722:33)
  1: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:36-1722:42)
  2: _20 = _11
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:36-1722:42)
  3: _16 = BitAnd(move _17, move _20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:24-1722:42)
  4: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:41-1722:42)
  5: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:41-1722:42)
  6: _15 = Ne(move _16, const 0_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:24-1722:47)
  7: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:46-1722:47)
  8: FakeRead(ForLet(None), _15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1722:13-1722:21)
  9: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1723:19-1723:29)
  10: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1723:20-1723:29)
  11: _23 = const 15_i32 as u32 (IntToInt)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1723:20-1723:29)
  12: _24 = Lt(move _23, const 64_u32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1723:20-1723:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1723:20-1723:29)
      kind: assert(move _24, "attempt to shift left by `{}`, which would overflow", const 15_i32) -> [success: bb7, unwind: bb26]
  }
  preds [bb5]
  succs [bb7, bb26]

bb7
  0: _22 = Shl(const 1_usize, const 15_i32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1723:20-1723:29)
  1: _21 = Not(move _22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1723:19-1723:29)
  2: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1723:28-1723:29)
  3: _11 = BitAnd(_11, move _21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1723:9-1723:29)
  4: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1723:28-1723:29)
  5: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:17-1724:32)
  6: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:17-1724:32)
  7: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:27-1724:32)
  8: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:22-1724:27)
  9: _28 = &mut (*_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:22-1724:27)
  10: StorageLive(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:28-1724:31)
  11: _29 = core::ops::RangeFrom::<usize> { start: const 2_usize }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:28-1724:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1724:27-1724:32)
      kind: _27 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _28, move _29) -> [return: bb8, unwind: bb26]
  }
  preds [bb6]
  succs [bb8, bb26]

bb8
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:31-1724:32)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:31-1724:32)
  2: _26 = &mut (*_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:17-1724:32)
  3: _25 = &mut (*_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:17-1724:32)
  4: _3 = move _25
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:9-1724:32)
  5: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:31-1724:32)
  6: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:32-1724:33)
  7: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1724:32-1724:33)
  8: StorageLive(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:37-1726:67)
  9: StorageLive(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:37-1726:42)
  10: _33 = &mut (*_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:37-1726:42)
  11: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:56-1726:66)
  12: StorageLive(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:56-1726:62)
  13: _35 = _11
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:56-1726:62)
  14: _36 = MulWithOverflow(_35, const 2_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:56-1726:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1726:56-1726:66)
      kind: assert(!move (_36.1: bool), "attempt to compute `{} * {}`, which would overflow", move _35, const 2_usize) -> [success: bb9, unwind: bb26]
  }
  preds [bb7]
  succs [bb9, bb26]

bb9
  0: _34 = move (_36.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:56-1726:66)
  1: StorageDead(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:65-1726:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1726:37-1726:67)
      kind: _32 = core::slice::<impl [u8]>::split_at_mut(move _33, move _34) -> [return: bb10, unwind: bb26]
  }
  preds [bb8]
  succs [bb10, bb26]

bb10
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:66-1726:67)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:66-1726:67)
  2: PlaceMention(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:37-1726:67)
  3: StorageLive(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:14-1726:26)
  4: _30 = move (_32.0: &mut [u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:14-1726:26)
  5: StorageLive(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:28-1726:33)
  6: _31 = move (_32.1: &mut [u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:28-1726:33)
  7: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1726:67-1726:68)
  8: StorageLive(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:29-1727:71)
  9: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:29-1727:34)
  10: _40 = &mut (*_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:29-1727:34)
  11: StorageLive(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:48-1727:70)
  12: StorageLive(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:48-1727:54)
  13: _42 = _11
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:48-1727:54)
  14: _43 = MulWithOverflow(_42, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:48-1727:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1727:48-1727:70)
      kind: assert(!move (_43.1: bool), "attempt to compute `{} * {}`, which would overflow", move _42, const util::primitives::StateID::SIZE) -> [success: bb11, unwind: bb26]
  }
  preds [bb9]
  succs [bb11, bb26]

bb11
  0: _41 = move (_43.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:48-1727:70)
  1: StorageDead(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:69-1727:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1727:29-1727:71)
      kind: _39 = core::slice::<impl [u8]>::split_at_mut(move _40, move _41) -> [return: bb12, unwind: bb26]
  }
  preds [bb10]
  succs [bb12, bb26]

bb12
  0: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:70-1727:71)
  1: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:70-1727:71)
  2: PlaceMention(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:29-1727:71)
  3: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:14-1727:18)
  4: _37 = move (_39.0: &mut [u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:14-1727:18)
  5: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:20-1727:25)
  6: _38 = move (_39.1: &mut [u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:20-1727:25)
  7: StorageDead(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1727:71-1727:72)
  8: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1728:36-1733:10)
  9: StorageLive(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1728:39-1728:47)
  10: _47 = _15
    SourceInfo(regex-automata/src/dfa/sparse.rs:1728:39-1728:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1728:39-1728:47)
      kind: switchInt(move _47) -> [0: bb19, otherwise: bb13]
  }
  preds [bb11]
  succs [bb13, bb19]

bb13
  0: StorageLive(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1729:17-1729:22)
  1: StorageLive(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1729:25-1729:47)
  2: StorageLive(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1729:40-1729:46)
  3: StorageLive(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1729:40-1729:46)
  4: _51 = &_38
    SourceInfo(regex-automata/src/dfa/sparse.rs:1729:40-1729:46)
  5: _50 = &(*(*_51))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1729:40-1729:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1729:25-1729:47)
      kind: _49 = util::wire::read_u32(move _50) -> [return: bb14, unwind: bb26]
  }
  preds [bb12]
  succs [bb14, bb26]

bb14
  0: StorageDead(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1729:46-1729:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1729:25-1729:58)
      kind: _48 = <u32 as util::int::U32>::as_usize(move _49) -> [return: bb15, unwind: bb26]
  }
  preds [bb13]
  succs [bb15, bb26]

bb15
  0: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1729:57-1729:58)
  1: FakeRead(ForLet(None), _48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1729:17-1729:22)
  2: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1729:58-1729:59)
  3: StorageLive(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:13-1730:23)
  4: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:18-1730:23)
  5: StorageLive(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:13-1730:18)
  6: _54 = &mut (*_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:13-1730:18)
  7: StorageLive(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:19-1730:22)
  8: _55 = core::ops::RangeFrom::<usize> { start: const 4_usize }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:19-1730:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1730:18-1730:23)
      kind: _53 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _54, move _55) -> [return: bb16, unwind: bb26]
  }
  preds [bb14]
  succs [bb16, bb26]

bb16
  0: _52 = &mut (*_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:13-1730:23)
  1: StorageDead(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:22-1730:23)
  2: StorageDead(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:22-1730:23)
  3: StorageLive(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:37-1730:46)
  4: StorageLive(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:37-1730:42)
  5: _57 = _48
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:37-1730:42)
  6: _58 = MulWithOverflow(_57, const 4_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:37-1730:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1730:37-1730:46)
      kind: assert(!move (_58.1: bool), "attempt to compute `{} * {}`, which would overflow", move _57, const 4_usize) -> [success: bb17, unwind: bb26]
  }
  preds [bb15]
  succs [bb17, bb26]

bb17
  0: _56 = move (_58.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:37-1730:46)
  1: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:45-1730:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1730:13-1730:47)
      kind: _46 = core::slice::<impl [u8]>::split_at_mut(move _52, move _56) -> [return: bb18, unwind: bb26]
  }
  preds [bb16]
  succs [bb18, bb26]

bb18
  0: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:46-1730:47)
  1: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1730:46-1730:47)
  2: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1731:9-1731:10)
  3: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1731:9-1731:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1728:36-1733:10)
      kind: goto -> bb21
  }
  preds [bb17]
  succs [bb21]

bb19
  0: StorageLive(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:14-1732:25)
  1: StorageLive(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:21-1732:25)
  2: StorageLive(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:19-1732:21)
  3: StorageLive(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:19-1732:21)
  4: _62 = []
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:19-1732:21)
  5: _61 = &mut _62
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:19-1732:21)
  6: StorageLive(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:22-1732:24)
  7: _63 = core::ops::RangeFull
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:22-1732:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1732:21-1732:25)
      kind: _60 = <[u8; 0] as core::ops::IndexMut<core::ops::RangeFull>>::index_mut(move _61, move _63) -> [return: bb20, unwind: bb26]
  }
  preds [bb12]
  succs [bb20, bb26]

bb20
  0: StorageDead(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:24-1732:25)
  1: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:24-1732:25)
  2: _59 = &mut (*_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:14-1732:25)
  3: StorageLive(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:27-1732:32)
  4: _64 = move _38
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:27-1732:32)
  5: _46 = (move _59, move _64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:13-1732:33)
  6: StorageDead(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:32-1732:33)
  7: StorageDead(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1732:32-1732:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1728:36-1733:10)
      kind: goto -> bb21
  }
  preds [bb19]
  succs [bb21]

bb21
  0: StorageDead(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1733:9-1733:10)
  1: PlaceMention(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1728:36-1733:10)
  2: StorageLive(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1728:14-1728:25)
  3: _44 = move (_46.0: &mut [u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1728:14-1728:25)
  4: StorageLive(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1728:27-1728:32)
  5: _45 = move (_46.1: &mut [u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1728:27-1728:32)
  6: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1733:10-1733:11)
  7: StorageLive(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1735:13-1735:22)
  8: StorageLive(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1735:37-1735:45)
  9: StorageLive(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1735:43-1735:44)
  10: _67 = const 0_usize
    SourceInfo(regex-automata/src/dfa/sparse.rs:1735:43-1735:44)
  11: _68 = Len((*_45))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1735:37-1735:45)
  12: _69 = Lt(_67, _68)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1735:37-1735:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1735:37-1735:45)
      kind: assert(move _69, "index out of bounds: the length is {} but the index is {}", move _68, _67) -> [success: bb22, unwind: bb26]
  }
  preds [bb18, bb20]
  succs [bb22, bb26]

bb22
  0: _66 = (*_45)[_67]
    SourceInfo(regex-automata/src/dfa/sparse.rs:1735:37-1735:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1735:25-1735:46)
      kind: _65 = <usize as core::convert::From<u8>>::from(move _66) -> [return: bb23, unwind: bb26]
  }
  preds [bb21]
  succs [bb23, bb26]

bb23
  0: StorageDead(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1735:45-1735:46)
  1: FakeRead(ForLet(None), _65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1735:13-1735:22)
  2: StorageDead(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1735:46-1735:47)
  3: StorageLive(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:13-1736:18)
  4: StorageLive(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:31-1736:49)
  5: StorageLive(_72)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:26-1736:31)
  6: _72 = &mut (*_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:26-1736:31)
  7: StorageLive(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:32-1736:48)
  8: StorageLive(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:35-1736:48)
  9: StorageLive(_75)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:35-1736:44)
  10: _75 = _65
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:35-1736:44)
  11: _76 = AddWithOverflow(_75, const 1_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:35-1736:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1736:35-1736:48)
      kind: assert(!move (_76.1: bool), "attempt to compute `{} + {}`, which would overflow", move _75, const 1_usize) -> [success: bb24, unwind: bb26]
  }
  preds [bb22]
  succs [bb24, bb26]

bb24
  0: _74 = move (_76.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:35-1736:48)
  1: StorageDead(_75)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:47-1736:48)
  2: _73 = core::ops::Range::<usize> { start: const 1_usize, end: move _74 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:32-1736:48)
  3: StorageDead(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:47-1736:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1736:31-1736:49)
      kind: _71 = <[u8] as core::ops::IndexMut<core::ops::Range<usize>>>::index_mut(move _72, move _73) -> [return: bb25, unwind: bb26]
  }
  preds [bb23]
  succs [bb25, bb26]

bb25
  0: StorageDead(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:48-1736:49)
  1: StorageDead(_72)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:48-1736:49)
  2: _70 = &mut (*_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:21-1736:49)
  3: FakeRead(ForLet(None), _70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1736:13-1736:18)
  4: StorageLive(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1738:13-1738:15)
  5: _77 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1738:13-1738:15)
  6: StorageLive(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1739:13-1739:21)
  7: _78 = _15
    SourceInfo(regex-automata/src/dfa/sparse.rs:1739:13-1739:21)
  8: StorageLive(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1740:13-1740:19)
  9: _79 = _11
    SourceInfo(regex-automata/src/dfa/sparse.rs:1740:13-1740:19)
  10: StorageLive(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1741:13-1741:25)
  11: _80 = &mut (*_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1741:13-1741:25)
  12: StorageLive(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1742:13-1742:17)
  13: _81 = &mut (*_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1742:13-1742:17)
  14: StorageLive(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1743:13-1743:24)
  15: _82 = &(*_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1743:13-1743:24)
  16: StorageLive(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1744:13-1744:18)
  17: _83 = &mut (*_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1744:13-1744:18)
  18: _0 = dfa::sparse::StateMut::<'_> { id: move _77, is_match: move _78, ntrans: move _79, input_ranges: move _80, next: move _81, pattern_ids: move _82, accel: move _83 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1737:9-1745:10)
  19: StorageDead(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1745:9-1745:10)
  20: StorageDead(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1745:9-1745:10)
  21: StorageDead(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1745:9-1745:10)
  22: StorageDead(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1745:9-1745:10)
  23: StorageDead(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1745:9-1745:10)
  24: StorageDead(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1745:9-1745:10)
  25: StorageDead(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1745:9-1745:10)
  26: StorageDead(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  27: StorageDead(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  28: StorageDead(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  29: StorageDead(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  30: StorageDead(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  31: StorageDead(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  32: StorageDead(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  33: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  34: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  35: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  36: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  37: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  38: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  39: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  40: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  41: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1746:5-1746:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1746:6-1746:6)
      kind: return
  }
  preds [bb24]
  succs []

bb26
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1719:5-1746:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb13, bb14, bb15, bb16, bb17, bb19, bb21, bb22, bb23, bb24]
  succs []

