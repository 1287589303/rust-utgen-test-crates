bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2177:13-2177:14)
  1: _2 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2177:17-2177:23)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2177:13-2177:14)
  3: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:9-2180:10)
  4: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:12-2178:30)
  5: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:12-2178:13)
  6: _5 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:12-2178:13)
  7: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:17-2178:30)
  8: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:17-2178:24)
  9: _7 = &(*((*_1).0: &dfa::sparse::StartTable<T>))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:17-2178:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2178:17-2178:30)
      kind: _6 = dfa::sparse::StartTable::<T>::len(move _7) -> [return: bb1, unwind: bb28]
  }
  preds []
  succs [bb1, bb28]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:29-2178:30)
  1: _4 = Ge(move _5, move _6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:12-2178:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2178:12-2178:30)
      kind: switchInt(move _4) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:29-2178:30)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:29-2178:30)
  2: _0 = core::option::Option::<(util::primitives::StateID, util::search::Anchored, util::start::Start)>::None
    SourceInfo(regex-automata/src/dfa/sparse.rs:2179:20-2179:24)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2180:9-2180:10)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2180:9-2180:10)
  5: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2201:5-2201:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2201:6-2201:6)
      kind: goto -> bb27
  }
  preds [bb1]
  succs [bb27]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:29-2178:30)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2178:29-2178:30)
  2: _3 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2180:10-2180:10)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2180:9-2180:10)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2180:9-2180:10)
  5: _9 = AddWithOverflow(((*_1).1: usize), const 1_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2181:9-2181:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2181:9-2181:20)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb4, unwind: bb28]
  }
  preds [bb1]
  succs [bb4, bb28]

bb4
  0: ((*_1).1: usize) = move (_9.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2181:9-2181:20)
  1: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:13-2185:23)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:26-2185:63)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:44-2185:62)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:44-2185:45)
  5: _13 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:44-2185:45)
  6: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:48-2185:62)
  7: _14 = ((*((*_1).0: &dfa::sparse::StartTable<T>)).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:48-2185:62)
  8: _15 = Eq(_14, const 0_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:44-2185:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2185:44-2185:62)
      kind: assert(!move _15, "attempt to calculate the remainder of `{}` with a divisor of zero", _13) -> [success: bb5, unwind: bb28]
  }
  preds [bb3]
  succs [bb5, bb28]

bb5
  0: _12 = Rem(move _13, move _14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:44-2185:62)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:61-2185:62)
  2: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:61-2185:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2185:26-2185:63)
      kind: _11 = util::start::Start::from_usize(move _12) -> [return: bb6, unwind: bb28]
  }
  preds [bb4]
  succs [bb6, bb28]

bb6
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:62-2185:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2185:26-2185:72)
      kind: _10 = core::option::Option::<util::start::Start>::unwrap(move _11) -> [return: bb7, unwind: bb28]
  }
  preds [bb5]
  succs [bb7, bb28]

bb7
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:71-2185:72)
  1: FakeRead(ForLet(None), _10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2185:13-2185:23)
  2: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2186:13-2186:21)
  3: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2186:27-2186:45)
  4: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2186:27-2186:28)
  5: _18 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2186:27-2186:28)
  6: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2186:31-2186:45)
  7: _19 = ((*((*_1).0: &dfa::sparse::StartTable<T>)).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2186:31-2186:45)
  8: _17 = Lt(move _18, move _19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2186:27-2186:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2186:27-2186:45)
      kind: switchInt(move _17) -> [0: bb9, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9]

bb8
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2186:44-2186:45)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2186:44-2186:45)
  2: _16 = util::search::Anchored::No
    SourceInfo(regex-automata/src/dfa/sparse.rs:2187:13-2187:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2186:24-2193:10)
      kind: goto -> bb19
  }
  preds [bb7]
  succs [bb19]

bb9
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2186:44-2186:45)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2186:44-2186:45)
  2: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:19-2188:43)
  3: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:19-2188:20)
  4: _21 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:19-2188:20)
  5: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:23-2188:43)
  6: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:28-2188:42)
  7: _23 = ((*((*_1).0: &dfa::sparse::StartTable<T>)).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:28-2188:42)
  8: _24 = MulWithOverflow(const 2_usize, _23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:23-2188:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2188:23-2188:43)
      kind: assert(!move (_24.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _23) -> [success: bb10, unwind: bb28]
  }
  preds [bb7]
  succs [bb10, bb28]

bb10
  0: _22 = move (_24.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:23-2188:43)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:42-2188:43)
  2: _20 = Lt(move _21, move _22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:19-2188:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2188:19-2188:43)
      kind: switchInt(move _20) -> [0: bb12, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb12]

bb11
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:42-2188:43)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:42-2188:43)
  2: _16 = util::search::Anchored::Yes
    SourceInfo(regex-automata/src/dfa/sparse.rs:2189:13-2189:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2188:16-2193:10)
      kind: goto -> bb18
  }
  preds [bb10]
  succs [bb18]

bb12
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:42-2188:43)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2188:42-2188:43)
  2: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:17-2191:20)
  3: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:23-2191:49)
  4: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:24-2191:25)
  5: _27 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:24-2191:25)
  6: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:28-2191:48)
  7: StorageLive(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:33-2191:47)
  8: _29 = ((*((*_1).0: &dfa::sparse::StartTable<T>)).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:33-2191:47)
  9: _30 = MulWithOverflow(const 2_usize, _29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:28-2191:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2191:28-2191:48)
      kind: assert(!move (_30.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _29) -> [success: bb13, unwind: bb28]
  }
  preds [bb10]
  succs [bb13, bb28]

bb13
  0: _28 = move (_30.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:28-2191:48)
  1: StorageDead(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:47-2191:48)
  2: _31 = SubWithOverflow(_27, _28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:23-2191:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2191:23-2191:49)
      kind: assert(!move (_31.1: bool), "attempt to compute `{} - {}`, which would overflow", move _27, move _28) -> [success: bb14, unwind: bb28]
  }
  preds [bb12]
  succs [bb14, bb28]

bb14
  0: _26 = move (_31.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:23-2191:49)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:48-2191:49)
  2: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:48-2191:49)
  3: StorageLive(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:52-2191:66)
  4: _32 = ((*((*_1).0: &dfa::sparse::StartTable<T>)).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:52-2191:66)
  5: _33 = Eq(_32, const 0_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:23-2191:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2191:23-2191:66)
      kind: assert(!move _33, "attempt to divide `{}` by zero", _26) -> [success: bb15, unwind: bb28]
  }
  preds [bb13]
  succs [bb15, bb28]

bb15
  0: _25 = Div(move _26, move _32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:23-2191:66)
  1: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:65-2191:66)
  2: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:65-2191:66)
  3: FakeRead(ForLet(None), _25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2191:17-2191:20)
  4: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2192:31-2192:59)
  5: StorageLive(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2192:31-2192:50)
  6: StorageLive(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2192:46-2192:49)
  7: _36 = _25
    SourceInfo(regex-automata/src/dfa/sparse.rs:2192:46-2192:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2192:31-2192:50)
      kind: _35 = util::primitives::PatternID::new(move _36) -> [return: bb16, unwind: bb28]
  }
  preds [bb14]
  succs [bb16, bb28]

bb16
  0: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2192:49-2192:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2192:31-2192:59)
      kind: _34 = core::result::Result::<util::primitives::PatternID, util::primitives::PatternIDError>::unwrap(move _35) -> [return: bb17, unwind: bb28]
  }
  preds [bb15]
  succs [bb17, bb28]

bb17
  0: StorageDead(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2192:58-2192:59)
  1: _16 = util::search::Anchored::Pattern(move _34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2192:13-2192:60)
  2: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2192:59-2192:60)
  3: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2193:9-2193:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2188:16-2193:10)
      kind: goto -> bb18
  }
  preds [bb16]
  succs [bb18]

bb18
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2193:9-2193:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2186:24-2193:10)
      kind: goto -> bb19
  }
  preds [bb11, bb17]
  succs [bb19]

bb19
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2193:9-2193:10)
  1: FakeRead(ForLet(None), _16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2186:13-2186:21)
  2: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2194:13-2194:18)
  3: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2194:21-2194:22)
  4: _38 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2194:21-2194:22)
  5: _39 = MulWithOverflow(_38, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2194:21-2194:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2194:21-2194:38)
      kind: assert(!move (_39.1: bool), "attempt to compute `{} * {}`, which would overflow", move _38, const util::primitives::StateID::SIZE) -> [success: bb20, unwind: bb28]
  }
  preds [bb8, bb18]
  succs [bb20, bb28]

bb20
  0: _37 = move (_39.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2194:21-2194:38)
  1: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2194:37-2194:38)
  2: FakeRead(ForLet(None), _37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2194:13-2194:18)
  3: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2195:13-2195:16)
  4: StorageLive(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2195:19-2195:24)
  5: _41 = _37
    SourceInfo(regex-automata/src/dfa/sparse.rs:2195:19-2195:24)
  6: _42 = AddWithOverflow(_41, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2195:19-2195:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2195:19-2195:40)
      kind: assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", move _41, const util::primitives::StateID::SIZE) -> [success: bb21, unwind: bb28]
  }
  preds [bb19]
  succs [bb21, bb28]

bb21
  0: _40 = move (_42.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2195:19-2195:40)
  1: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2195:39-2195:40)
  2: FakeRead(ForLet(None), _40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2195:13-2195:16)
  3: StorageLive(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:13-2196:18)
  4: StorageLive(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:21-2196:59)
  5: StorageLive(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:21-2196:48)
  6: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:36-2196:48)
  7: StorageLive(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:21-2196:36)
  8: StorageLive(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:21-2196:36)
  9: StorageLive(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:21-2196:28)
  10: _49 = &(*((*_1).0: &dfa::sparse::StartTable<T>))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:21-2196:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2196:21-2196:36)
      kind: _48 = dfa::sparse::StartTable::<T>::table(move _49) -> [return: bb22, unwind: bb28]
  }
  preds [bb20]
  succs [bb22, bb28]

bb22
  0: _47 = &(*_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:21-2196:36)
  1: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:35-2196:36)
  2: StorageLive(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:37-2196:47)
  3: StorageLive(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:37-2196:42)
  4: _51 = _37
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:37-2196:42)
  5: StorageLive(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:44-2196:47)
  6: _52 = _40
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:44-2196:47)
  7: _50 = core::ops::Range::<usize> { start: move _51, end: move _52 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:37-2196:47)
  8: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:46-2196:47)
  9: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:46-2196:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2196:36-2196:48)
      kind: _46 = <[u8] as core::ops::Index<core::ops::Range<usize>>>::index(move _47, move _50) -> [return: bb23, unwind: bb28]
  }
  preds [bb21]
  succs [bb23, bb28]

bb23
  0: _45 = &(*_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:21-2196:48)
  1: StorageDead(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:47-2196:48)
  2: StorageDead(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:47-2196:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2196:21-2196:59)
      kind: _44 = <&[u8] as core::convert::TryInto<[u8; 4]>>::try_into(move _45) -> [return: bb24, unwind: bb28]
  }
  preds [bb22]
  succs [bb24, bb28]

bb24
  0: StorageDead(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:58-2196:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2196:21-2196:68)
      kind: _43 = core::result::Result::<[u8; 4], core::array::TryFromSliceError>::unwrap(move _44) -> [return: bb25, unwind: bb28]
  }
  preds [bb23]
  succs [bb25, bb28]

bb25
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:67-2196:68)
  1: FakeRead(ForLet(None), _43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:13-2196:18)
  2: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:68-2196:69)
  3: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2196:68-2196:69)
  4: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2199:13-2199:15)
  5: StorageLive(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2199:51-2199:56)
  6: _54 = _43
    SourceInfo(regex-automata/src/dfa/sparse.rs:2199:51-2199:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2199:18-2199:57)
      kind: _53 = util::primitives::StateID::from_ne_bytes_unchecked(move _54) -> [return: bb26, unwind: bb28]
  }
  preds [bb24]
  succs [bb26, bb28]

bb26
  0: StorageDead(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2199:56-2199:57)
  1: FakeRead(ForLet(None), _53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2199:13-2199:15)
  2: StorageLive(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:14-2200:40)
  3: StorageLive(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:15-2200:17)
  4: _56 = _53
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:15-2200:17)
  5: StorageLive(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:19-2200:27)
  6: _57 = _16
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:19-2200:27)
  7: StorageLive(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:29-2200:39)
  8: _58 = _10
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:29-2200:39)
  9: _55 = (move _56, move _57, move _58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:14-2200:40)
  10: StorageDead(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:39-2200:40)
  11: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:39-2200:40)
  12: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:39-2200:40)
  13: _0 = core::option::Option::<(util::primitives::StateID, util::search::Anchored, util::start::Start)>::Some(move _55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:9-2200:41)
  14: StorageDead(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2200:40-2200:41)
  15: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2201:5-2201:6)
  16: StorageDead(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2201:5-2201:6)
  17: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2201:5-2201:6)
  18: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2201:5-2201:6)
  19: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2201:5-2201:6)
  20: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2201:5-2201:6)
  21: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2201:5-2201:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2201:6-2201:6)
      kind: goto -> bb27
  }
  preds [bb25]
  succs [bb27]

bb27
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2201:6-2201:6)
      kind: return
  }
  preds [bb2, bb26]
  succs []

bb28
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2176:5-2201:6)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb5, bb6, bb9, bb12, bb13, bb14, bb15, bb16, bb19, bb20, bb21, bb22, bb23, bb24, bb25]
  succs []

