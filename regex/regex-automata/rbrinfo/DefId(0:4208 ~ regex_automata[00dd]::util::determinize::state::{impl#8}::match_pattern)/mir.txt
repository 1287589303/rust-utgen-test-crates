bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/determinize/state.rs:477:13-477:35)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/determinize/state.rs:477:13-477:17)
  2: _4 = &(*_1)
    SourceInfo(regex-automata/src/util/determinize/state.rs:477:13-477:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/determinize/state.rs:477:13-477:35)
      kind: _3 = util::determinize::state::Repr::<'_>::has_pattern_ids(move _4) -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/determinize/state.rs:477:13-477:35)
      kind: switchInt(move _3) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/determinize/state.rs:477:34-477:35)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/determinize/state.rs:480:17-480:23)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/determinize/state.rs:480:31-480:54)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/determinize/state.rs:480:31-480:36)
  4: _7 = _2
    SourceInfo(regex-automata/src/util/determinize/state.rs:480:31-480:36)
  5: _8 = MulWithOverflow(_7, const util::primitives::PatternID::SIZE)
    SourceInfo(regex-automata/src/util/determinize/state.rs:480:31-480:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/determinize/state.rs:480:31-480:54)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", move _7, const util::primitives::PatternID::SIZE) -> [success: bb4, unwind: bb9]
  }
  preds [bb1]
  succs [bb4, bb9]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/determinize/state.rs:477:34-477:35)
  1: _0 = const util::primitives::PatternID::ZERO
    SourceInfo(regex-automata/src/util/determinize/state.rs:478:13-478:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/determinize/state.rs:477:9-484:10)
      kind: goto -> bb8
  }
  preds [bb1]
  succs [bb8]

bb4
  0: _6 = move (_8.0: usize)
    SourceInfo(regex-automata/src/util/determinize/state.rs:480:31-480:54)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/determinize/state.rs:480:53-480:54)
  2: _9 = AddWithOverflow(const 13_usize, _6)
    SourceInfo(regex-automata/src/util/determinize/state.rs:480:26-480:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/determinize/state.rs:480:26-480:54)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", const 13_usize, move _6) -> [success: bb5, unwind: bb9]
  }
  preds [bb2]
  succs [bb5, bb9]

bb5
  0: _5 = move (_9.0: usize)
    SourceInfo(regex-automata/src/util/determinize/state.rs:480:26-480:54)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/determinize/state.rs:480:53-480:54)
  2: FakeRead(ForLet(None), _5)
    SourceInfo(regex-automata/src/util/determinize/state.rs:480:17-480:23)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:13-483:63)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:45-483:62)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:45-483:62)
  6: StorageLive(_13)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:52-483:62)
  7: StorageLive(_14)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:46-483:52)
  8: _14 = &(*((*_1).0: &[u8]))
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:46-483:52)
  9: StorageLive(_15)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:53-483:61)
  10: StorageLive(_16)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:53-483:59)
  11: _16 = _5
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:53-483:59)
  12: _15 = core::ops::RangeFrom::<usize> { start: move _16 }
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:53-483:61)
  13: StorageDead(_16)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:60-483:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/determinize/state.rs:483:52-483:62)
      kind: _13 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _14, move _15) -> [return: bb6, unwind: bb9]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:61-483:62)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:61-483:62)
  2: _12 = &(*_13)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:45-483:62)
  3: _11 = &(*_12)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:45-483:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/determinize/state.rs:483:13-483:63)
      kind: _10 = util::wire::read_pattern_id_unchecked(move _11) -> [return: bb7, unwind: bb9]
  }
  preds [bb5]
  succs [bb7, bb9]

bb7
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:62-483:63)
  1: _0 = (_10.0: util::primitives::PatternID)
    SourceInfo(regex-automata/src/util/determinize/state.rs:483:13-483:65)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/determinize/state.rs:484:9-484:10)
  3: StorageDead(_13)
    SourceInfo(regex-automata/src/util/determinize/state.rs:484:9-484:10)
  4: StorageDead(_12)
    SourceInfo(regex-automata/src/util/determinize/state.rs:484:9-484:10)
  5: StorageDead(_10)
    SourceInfo(regex-automata/src/util/determinize/state.rs:484:9-484:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/determinize/state.rs:477:9-484:10)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/determinize/state.rs:484:9-484:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/determinize/state.rs:485:6-485:6)
      kind: return
  }
  preds [bb3, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/determinize/state.rs:476:5-485:6)
      kind: resume
  }
  preds [bb0, bb2, bb4, bb5, bb6]
  succs []

