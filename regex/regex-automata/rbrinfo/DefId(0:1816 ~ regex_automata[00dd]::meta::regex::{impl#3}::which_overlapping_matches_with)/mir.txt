bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:9-1491:10)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:12-1489:46)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:12-1489:25)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:12-1489:25)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:12-1489:20)
  5: _9 = &((*_1).0: std::sync::Arc<meta::regex::RegexI>)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:12-1489:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1489:12-1489:25)
      kind: _8 = <std::sync::Arc<meta::regex::RegexI> as core::ops::Deref>::deref(move _9) -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:19-1489:20)
  1: _7 = &((*_8).1: meta::regex::RegexInfo)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:12-1489:25)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:40-1489:45)
  3: _10 = &(*_3)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:40-1489:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1489:12-1489:46)
      kind: _6 = meta::regex::RegexInfo::is_impossible(move _7, move _10) -> [return: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1489:12-1489:46)
      kind: switchInt(move _6) -> [0: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:45-1489:46)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:45-1489:46)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:45-1489:46)
  3: _0 = const ()
    SourceInfo(regex-automata/src/meta/regex.rs:1490:13-1490:19)
  4: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/regex.rs:1491:9-1491:10)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/regex.rs:1491:9-1491:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1493:6-1493:6)
      kind: goto -> bb8
  }
  preds [bb2]
  succs [bb8]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:45-1489:46)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:45-1489:46)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/regex.rs:1489:45-1489:46)
  3: _5 = const ()
    SourceInfo(regex-automata/src/meta/regex.rs:1491:10-1491:10)
  4: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/regex.rs:1491:9-1491:10)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/regex.rs:1491:9-1491:10)
  6: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:9-1492:23)
  7: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:9-1492:71)
  8: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:9-1492:23)
  9: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:9-1492:23)
  10: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:9-1492:17)
  11: _16 = &((*_1).0: std::sync::Arc<meta::regex::RegexI>)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:9-1492:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1492:9-1492:23)
      kind: _15 = <std::sync::Arc<meta::regex::RegexI> as core::ops::Deref>::deref(move _16) -> [return: bb5, unwind: bb9]
  }
  preds [bb2]
  succs [bb5, bb9]

bb5
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:16-1492:17)
  1: _14 = &((*_15).0: std::sync::Arc<dyn meta::strategy::Strategy>)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:9-1492:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1492:9-1492:71)
      kind: _13 = <std::sync::Arc<dyn meta::strategy::Strategy> as core::ops::Deref>::deref(move _14) -> [return: bb6, unwind: bb9]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: _12 = &(*_13)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:9-1492:23)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:22-1492:23)
  2: StorageLive(_17)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:50-1492:55)
  3: _17 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:50-1492:55)
  4: StorageLive(_18)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:57-1492:62)
  5: _18 = &(*_3)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:57-1492:62)
  6: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:64-1492:70)
  7: _19 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:64-1492:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1492:9-1492:71)
      kind: _0 = <dyn meta::strategy::Strategy as meta::strategy::Strategy>::which_overlapping_matches(move _12, move _17, move _18, move _19) -> [return: bb7, unwind: bb9]
  }
  preds [bb5]
  succs [bb7, bb9]

bb7
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:70-1492:71)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:70-1492:71)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:70-1492:71)
  3: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/regex.rs:1492:70-1492:71)
  4: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/regex.rs:1493:5-1493:6)
  5: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/regex.rs:1493:5-1493:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1493:6-1493:6)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1493:6-1493:6)
      kind: return
  }
  preds [bb3, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:1483:5-1493:6)
      kind: resume
  }
  preds [bb0, bb1, bb4, bb5, bb6]
  succs []

