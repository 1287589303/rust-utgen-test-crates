bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:9-484:39)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:20-484:39)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:10-484:20)
  3: _4 = &((*_1).0: [u8; 8])
    SourceInfo(regex-automata/src/dfa/accel.rs:484:10-484:20)
  4: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:21-484:38)
  5: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:24-484:38)
  6: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:28-484:38)
  7: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:28-484:32)
  8: _8 = &(*_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:28-484:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:484:28-484:38)
      kind: _7 = dfa::accel::Accel::len(move _8) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:37-484:38)
  1: _9 = AddWithOverflow(const 1_usize, _7)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:24-484:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:484:24-484:38)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, move _7) -> [success: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: _6 = move (_9.0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:24-484:38)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:37-484:38)
  2: _5 = core::ops::Range::<usize> { start: const 1_usize, end: move _6 }
    SourceInfo(regex-automata/src/dfa/accel.rs:484:21-484:38)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:37-484:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:484:20-484:39)
      kind: _3 = <[u8; 8] as core::ops::Index<core::ops::Range<usize>>>::index(move _4, move _5) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:38-484:39)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:38-484:39)
  2: _2 = &(*_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:9-484:39)
  3: _0 = &(*_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:484:9-484:39)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:485:5-485:6)
  5: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:485:5-485:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:485:6-485:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:483:5-485:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

