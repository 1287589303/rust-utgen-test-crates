bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/wire.rs:653:9-653:12)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/wire.rs:654:9-654:51)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/wire.rs:654:9-654:42)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/util/wire.rs:654:9-654:31)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/util/wire.rs:654:14-654:31)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/util/wire.rs:654:9-654:14)
  6: _7 = &(*_1)
    SourceInfo(regex-automata/src/util/wire.rs:654:9-654:14)
  7: StorageLive(_8)
    SourceInfo(regex-automata/src/util/wire.rs:654:15-654:30)
  8: _8 = core::ops::RangeTo::<usize> { end: const util::primitives::StateID::SIZE }
    SourceInfo(regex-automata/src/util/wire.rs:654:15-654:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:654:14-654:31)
      kind: _6 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _7, move _8) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: _5 = &(*_6)
    SourceInfo(regex-automata/src/util/wire.rs:654:9-654:31)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/wire.rs:654:30-654:31)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/util/wire.rs:654:30-654:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:654:9-654:42)
      kind: _4 = <&[u8] as core::convert::TryInto<[u8; 4]>>::try_into(move _5) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/wire.rs:654:41-654:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:654:9-654:51)
      kind: _3 = core::result::Result::<[u8; 4], core::array::TryFromSliceError>::unwrap(move _4) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/wire.rs:654:50-654:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:653:15-655:6)
      kind: _2 = util::primitives::StateID::from_ne_bytes_unchecked(move _3) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/wire.rs:655:5-655:6)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/util/wire.rs:653:9-653:12)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/util/wire.rs:655:6-655:7)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/util/wire.rs:656:6-656:9)
  4: _9 = _2
    SourceInfo(regex-automata/src/util/wire.rs:656:6-656:9)
  5: _0 = (move _9, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/util/wire.rs:656:5-656:25)
  6: StorageDead(_9)
    SourceInfo(regex-automata/src/util/wire.rs:656:24-656:25)
  7: StorageDead(_2)
    SourceInfo(regex-automata/src/util/wire.rs:657:1-657:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:657:2-657:2)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:652:1-657:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

