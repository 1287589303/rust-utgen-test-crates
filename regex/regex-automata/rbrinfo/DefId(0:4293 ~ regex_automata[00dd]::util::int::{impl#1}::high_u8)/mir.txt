bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/int.rs:74:9-74:20)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/int.rs:74:10-74:14)
  2: _3 = _1
    SourceInfo(regex-automata/src/util/int.rs:74:10-74:14)
  3: _4 = const 8_i32 as u32 (IntToInt)
    SourceInfo(regex-automata/src/util/int.rs:74:9-74:20)
  4: _5 = Lt(move _4, const 16_u32)
    SourceInfo(regex-automata/src/util/int.rs:74:9-74:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/int.rs:74:9-74:20)
      kind: assert(move _5, "attempt to shift right by `{}`, which would overflow", const 8_i32) -> [success: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _2 = Shr(move _3, const 8_i32)
    SourceInfo(regex-automata/src/util/int.rs:74:9-74:20)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/int.rs:74:19-74:20)
  2: _0 = move _2 as u8 (IntToInt)
    SourceInfo(regex-automata/src/util/int.rs:74:9-74:26)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/util/int.rs:74:25-74:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/int.rs:75:6-75:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/int.rs:73:5-75:6)
      kind: resume
  }
  preds [bb0]
  succs []

