bb0
  0: StorageLive(_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
  1: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
  2: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:34)
      kind: _4 = dfa::dense::DFA::<std::vec::Vec<u32>>::never_match() -> [return: bb1, unwind: bb20]
  }
  preds []
  succs [bb1, bb20]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
      kind: _3 = <core::result::Result<dfa::dense::DFA<std::vec::Vec<u32>>, dfa::dense::BuildError> as core::ops::Try>::branch(move _4) -> [return: bb2, unwind: bb19]
  }
  preds [bb0]
  succs [bb2, bb19]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
  1: PlaceMention(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
  2: _5 = discriminant(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
      kind: switchInt(move _5) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
  1: _9 = move ((_3 as Continue).0: dfa::dense::DFA<std::vec::Vec<u32>>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
  2: _2 = move _9
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
      kind: drop(_9) -> [return: bb8, unwind: bb18]
  }
  preds [bb2, bb4]
  succs [bb8, bb18]

bb6
  0: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
  1: _6 = move ((_3 as Break).0: core::result::Result<core::convert::Infallible, dfa::dense::BuildError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
  3: _8 = move _6
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
      kind: _0 = <core::result::Result<dfa::sparse::DFA<std::vec::Vec<u8>>, dfa::dense::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, dfa::dense::BuildError>>>::from_residual(move _8) -> [return: bb7, unwind: bb16]
  }
  preds [bb4]
  succs [bb7, bb16]

bb7
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
      kind: drop(_6) -> [return: bb12, unwind: bb18]
  }
  preds [bb6]
  succs [bb12, bb18]

bb8
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
  1: _1 = &_2
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:222:9-222:47)
      kind: _0 = dfa::dense::DFA::<std::vec::Vec<u32>>::to_sparse(move _1) -> [return: bb9, unwind: bb15]
  }
  preds [bb5]
  succs [bb9, bb15]

bb9
  0: StorageDead(_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:46-222:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:223:5-223:6)
      kind: drop(_2) -> [return: bb10, unwind: bb18]
  }
  preds [bb8]
  succs [bb10, bb18]

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:223:5-223:6)
      kind: drop(_3) -> [return: bb11, unwind: bb20]
  }
  preds [bb9]
  succs [bb11, bb20]

bb11
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:223:5-223:6)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:223:5-223:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:223:6-223:6)
      kind: goto -> bb14
  }
  preds [bb10]
  succs [bb14]

bb12
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
  1: StorageDead(_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:222:46-222:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:223:5-223:6)
      kind: drop(_3) -> [return: bb13, unwind: bb20]
  }
  preds [bb7]
  succs [bb13, bb20]

bb13
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:223:5-223:6)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:223:5-223:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:223:6-223:6)
      kind: goto -> bb14
  }
  preds [bb12]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:223:6-223:6)
      kind: return
  }
  preds [bb11, bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:223:5-223:6)
      kind: drop(_2) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb8]
  succs [bb18]

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
      kind: drop(_8) -> [return: bb17, unwind terminate(cleanup)]
  }
  preds [bb6]
  succs [bb17]

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
      kind: drop(_6) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb16]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:223:5-223:6)
      kind: drop(_3) -> [return: bb20, unwind terminate(cleanup)]
  }
  preds [bb5, bb7, bb9, bb15, bb17]
  succs [bb20]

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:222:34-222:35)
      kind: drop(_4) -> [return: bb20, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb20]

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:221:5-223:6)
      kind: resume
  }
  preds [bb0, bb10, bb12, bb18, bb19]
  succs []

