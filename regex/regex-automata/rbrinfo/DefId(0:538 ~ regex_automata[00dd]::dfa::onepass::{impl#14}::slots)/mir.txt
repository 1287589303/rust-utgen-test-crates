bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2805:15-2805:57)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2805:15-2805:47)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2805:16-2805:22)
  3: _4 = (_1.0: u64)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2805:16-2805:22)
  4: _5 = Lt(const dfa::onepass::Epsilons::SLOT_SHIFT, const 64_u64)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2805:15-2805:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:2805:15-2805:47)
      kind: assert(move _5, "attempt to shift right by `{}`, which would overflow", const dfa::onepass::Epsilons::SLOT_SHIFT) -> [success: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _3 = Shr(move _4, const dfa::onepass::Epsilons::SLOT_SHIFT)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2805:15-2805:47)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2805:46-2805:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:2805:15-2805:57)
      kind: _2 = <u64 as util::int::U64>::low_u32(move _3) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2805:56-2805:57)
  1: _0 = dfa::onepass::Slots(move _2)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2805:9-2805:58)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/onepass.rs:2805:57-2805:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:2806:6-2806:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:2804:5-2806:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

