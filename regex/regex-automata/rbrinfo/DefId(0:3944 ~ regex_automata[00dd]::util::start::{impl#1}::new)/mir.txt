bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/start.rs:217:13-217:20)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/start.rs:217:24-217:42)
  2: _3 = util::start::Start::NonWordByte
    SourceInfo(regex-automata/src/util/start.rs:217:24-217:42)
  3: _2 = [move _3; 256]
    SourceInfo(regex-automata/src/util/start.rs:217:23-217:48)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/util/start.rs:217:47-217:48)
  5: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/util/start.rs:217:13-217:20)
  6: StorageLive(_4)
    SourceInfo(regex-automata/src/util/start.rs:218:35-218:48)
  7: _4 = util::start::Start::LineLF
    SourceInfo(regex-automata/src/util/start.rs:218:35-218:48)
  8: StorageLive(_5)
    SourceInfo(regex-automata/src/util/start.rs:218:13-218:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:218:13-218:31)
      kind: _5 = <usize as core::convert::From<u8>>::from(const 10_u8) -> [return: bb1, unwind: bb37]
  }
  preds []
  succs [bb1, bb37]

bb1
  0: _6 = Len(_2)
    SourceInfo(regex-automata/src/util/start.rs:218:9-218:32)
  1: _7 = Lt(_5, _6)
    SourceInfo(regex-automata/src/util/start.rs:218:9-218:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:218:9-218:32)
      kind: assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb2, unwind: bb37]
  }
  preds [bb0]
  succs [bb2, bb37]

bb2
  0: _2[_5] = move _4
    SourceInfo(regex-automata/src/util/start.rs:218:9-218:48)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/start.rs:218:47-218:48)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/start.rs:218:48-218:49)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/util/start.rs:219:35-219:48)
  4: _8 = util::start::Start::LineCR
    SourceInfo(regex-automata/src/util/start.rs:219:35-219:48)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/util/start.rs:219:13-219:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:219:13-219:31)
      kind: _9 = <usize as core::convert::From<u8>>::from(const 13_u8) -> [return: bb3, unwind: bb37]
  }
  preds [bb1]
  succs [bb3, bb37]

bb3
  0: _10 = Len(_2)
    SourceInfo(regex-automata/src/util/start.rs:219:9-219:32)
  1: _11 = Lt(_9, _10)
    SourceInfo(regex-automata/src/util/start.rs:219:9-219:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:219:9-219:32)
      kind: assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb4, unwind: bb37]
  }
  preds [bb2]
  succs [bb4, bb37]

bb4
  0: _2[_9] = move _8
    SourceInfo(regex-automata/src/util/start.rs:219:9-219:48)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/start.rs:219:47-219:48)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/start.rs:219:48-219:49)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/util/start.rs:220:34-220:49)
  4: _12 = util::start::Start::WordByte
    SourceInfo(regex-automata/src/util/start.rs:220:34-220:49)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/util/start.rs:220:13-220:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:220:13-220:30)
      kind: _13 = <usize as core::convert::From<u8>>::from(const 95_u8) -> [return: bb5, unwind: bb37]
  }
  preds [bb3]
  succs [bb5, bb37]

bb5
  0: _14 = Len(_2)
    SourceInfo(regex-automata/src/util/start.rs:220:9-220:31)
  1: _15 = Lt(_13, _14)
    SourceInfo(regex-automata/src/util/start.rs:220:9-220:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:220:9-220:31)
      kind: assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb6, unwind: bb37]
  }
  preds [bb4]
  succs [bb6, bb37]

bb6
  0: _2[_13] = move _12
    SourceInfo(regex-automata/src/util/start.rs:220:9-220:49)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/start.rs:220:48-220:49)
  2: StorageDead(_13)
    SourceInfo(regex-automata/src/util/start.rs:220:49-220:50)
  3: StorageLive(_16)
    SourceInfo(regex-automata/src/util/start.rs:222:13-222:21)
  4: _16 = const 48_u8
    SourceInfo(regex-automata/src/util/start.rs:222:24-222:28)
  5: FakeRead(ForLet(None), _16)
    SourceInfo(regex-automata/src/util/start.rs:222:13-222:21)
  6: StorageLive(_17)
    SourceInfo(regex-automata/src/util/start.rs:223:9-226:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:223:9-226:10)
      kind: goto -> bb7
  }
  preds [bb5]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:223:9-226:10)
      kind: falseUnwind -> [real: bb8, unwind: bb37]
  }
  preds [bb6, bb12]
  succs [bb8, bb37]

bb8
  0: StorageLive(_19)
    SourceInfo(regex-automata/src/util/start.rs:223:15-223:27)
  1: StorageLive(_20)
    SourceInfo(regex-automata/src/util/start.rs:223:15-223:19)
  2: _20 = _16
    SourceInfo(regex-automata/src/util/start.rs:223:15-223:19)
  3: _19 = Le(move _20, const 57_u8)
    SourceInfo(regex-automata/src/util/start.rs:223:15-223:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:223:15-223:27)
      kind: switchInt(move _19) -> [0: bb13, otherwise: bb9]
  }
  preds [bb7]
  succs [bb9, bb13]

bb9
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/start.rs:223:26-223:27)
  1: StorageLive(_21)
    SourceInfo(regex-automata/src/util/start.rs:224:38-224:53)
  2: _21 = util::start::Start::WordByte
    SourceInfo(regex-automata/src/util/start.rs:224:38-224:53)
  3: StorageLive(_22)
    SourceInfo(regex-automata/src/util/start.rs:224:17-224:34)
  4: StorageLive(_23)
    SourceInfo(regex-automata/src/util/start.rs:224:29-224:33)
  5: _23 = _16
    SourceInfo(regex-automata/src/util/start.rs:224:29-224:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:224:17-224:34)
      kind: _22 = <usize as core::convert::From<u8>>::from(move _23) -> [return: bb10, unwind: bb37]
  }
  preds [bb8]
  succs [bb10, bb37]

bb10
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/util/start.rs:224:33-224:34)
  1: _24 = Len(_2)
    SourceInfo(regex-automata/src/util/start.rs:224:13-224:35)
  2: _25 = Lt(_22, _24)
    SourceInfo(regex-automata/src/util/start.rs:224:13-224:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:224:13-224:35)
      kind: assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _22) -> [success: bb11, unwind: bb37]
  }
  preds [bb9]
  succs [bb11, bb37]

bb11
  0: _2[_22] = move _21
    SourceInfo(regex-automata/src/util/start.rs:224:13-224:53)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/util/start.rs:224:52-224:53)
  2: StorageDead(_22)
    SourceInfo(regex-automata/src/util/start.rs:224:53-224:54)
  3: _26 = AddWithOverflow(_16, const 1_u8)
    SourceInfo(regex-automata/src/util/start.rs:225:13-225:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:225:13-225:22)
      kind: assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", _16, const 1_u8) -> [success: bb12, unwind: bb37]
  }
  preds [bb10]
  succs [bb12, bb37]

bb12
  0: _16 = move (_26.0: u8)
    SourceInfo(regex-automata/src/util/start.rs:225:13-225:22)
  1: _18 = const ()
    SourceInfo(regex-automata/src/util/start.rs:223:28-226:10)
  2: StorageDead(_19)
    SourceInfo(regex-automata/src/util/start.rs:226:9-226:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:223:9-226:10)
      kind: goto -> bb7
  }
  preds [bb11]
  succs [bb7]

bb13
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/start.rs:223:26-223:27)
  1: StorageLive(_28)
    SourceInfo(regex-automata/src/util/start.rs:223:9-226:10)
  2: _17 = const ()
    SourceInfo(regex-automata/src/util/start.rs:223:9-226:10)
  3: StorageDead(_28)
    SourceInfo(regex-automata/src/util/start.rs:226:9-226:10)
  4: StorageDead(_19)
    SourceInfo(regex-automata/src/util/start.rs:226:9-226:10)
  5: StorageDead(_17)
    SourceInfo(regex-automata/src/util/start.rs:226:9-226:10)
  6: _16 = const 65_u8
    SourceInfo(regex-automata/src/util/start.rs:227:9-227:20)
  7: StorageLive(_30)
    SourceInfo(regex-automata/src/util/start.rs:228:9-231:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:228:9-231:10)
      kind: goto -> bb14
  }
  preds [bb8]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:228:9-231:10)
      kind: falseUnwind -> [real: bb15, unwind: bb37]
  }
  preds [bb13, bb19]
  succs [bb15, bb37]

bb15
  0: StorageLive(_31)
    SourceInfo(regex-automata/src/util/start.rs:228:15-228:27)
  1: StorageLive(_32)
    SourceInfo(regex-automata/src/util/start.rs:228:15-228:19)
  2: _32 = _16
    SourceInfo(regex-automata/src/util/start.rs:228:15-228:19)
  3: _31 = Le(move _32, const 90_u8)
    SourceInfo(regex-automata/src/util/start.rs:228:15-228:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:228:15-228:27)
      kind: switchInt(move _31) -> [0: bb20, otherwise: bb16]
  }
  preds [bb14]
  succs [bb16, bb20]

bb16
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/util/start.rs:228:26-228:27)
  1: StorageLive(_33)
    SourceInfo(regex-automata/src/util/start.rs:229:38-229:53)
  2: _33 = util::start::Start::WordByte
    SourceInfo(regex-automata/src/util/start.rs:229:38-229:53)
  3: StorageLive(_34)
    SourceInfo(regex-automata/src/util/start.rs:229:17-229:34)
  4: StorageLive(_35)
    SourceInfo(regex-automata/src/util/start.rs:229:29-229:33)
  5: _35 = _16
    SourceInfo(regex-automata/src/util/start.rs:229:29-229:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:229:17-229:34)
      kind: _34 = <usize as core::convert::From<u8>>::from(move _35) -> [return: bb17, unwind: bb37]
  }
  preds [bb15]
  succs [bb17, bb37]

bb17
  0: StorageDead(_35)
    SourceInfo(regex-automata/src/util/start.rs:229:33-229:34)
  1: _36 = Len(_2)
    SourceInfo(regex-automata/src/util/start.rs:229:13-229:35)
  2: _37 = Lt(_34, _36)
    SourceInfo(regex-automata/src/util/start.rs:229:13-229:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:229:13-229:35)
      kind: assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _34) -> [success: bb18, unwind: bb37]
  }
  preds [bb16]
  succs [bb18, bb37]

bb18
  0: _2[_34] = move _33
    SourceInfo(regex-automata/src/util/start.rs:229:13-229:53)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/util/start.rs:229:52-229:53)
  2: StorageDead(_34)
    SourceInfo(regex-automata/src/util/start.rs:229:53-229:54)
  3: _38 = AddWithOverflow(_16, const 1_u8)
    SourceInfo(regex-automata/src/util/start.rs:230:13-230:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:230:13-230:22)
      kind: assert(!move (_38.1: bool), "attempt to compute `{} + {}`, which would overflow", _16, const 1_u8) -> [success: bb19, unwind: bb37]
  }
  preds [bb17]
  succs [bb19, bb37]

bb19
  0: _16 = move (_38.0: u8)
    SourceInfo(regex-automata/src/util/start.rs:230:13-230:22)
  1: _18 = const ()
    SourceInfo(regex-automata/src/util/start.rs:228:28-231:10)
  2: StorageDead(_31)
    SourceInfo(regex-automata/src/util/start.rs:231:9-231:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:228:9-231:10)
      kind: goto -> bb14
  }
  preds [bb18]
  succs [bb14]

bb20
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/util/start.rs:228:26-228:27)
  1: StorageLive(_40)
    SourceInfo(regex-automata/src/util/start.rs:228:9-231:10)
  2: _30 = const ()
    SourceInfo(regex-automata/src/util/start.rs:228:9-231:10)
  3: StorageDead(_40)
    SourceInfo(regex-automata/src/util/start.rs:231:9-231:10)
  4: StorageDead(_31)
    SourceInfo(regex-automata/src/util/start.rs:231:9-231:10)
  5: StorageDead(_30)
    SourceInfo(regex-automata/src/util/start.rs:231:9-231:10)
  6: _16 = const 97_u8
    SourceInfo(regex-automata/src/util/start.rs:232:9-232:20)
  7: StorageLive(_42)
    SourceInfo(regex-automata/src/util/start.rs:233:9-236:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:233:9-236:10)
      kind: goto -> bb21
  }
  preds [bb15]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:233:9-236:10)
      kind: falseUnwind -> [real: bb22, unwind: bb37]
  }
  preds [bb20, bb26]
  succs [bb22, bb37]

bb22
  0: StorageLive(_43)
    SourceInfo(regex-automata/src/util/start.rs:233:15-233:27)
  1: StorageLive(_44)
    SourceInfo(regex-automata/src/util/start.rs:233:15-233:19)
  2: _44 = _16
    SourceInfo(regex-automata/src/util/start.rs:233:15-233:19)
  3: _43 = Le(move _44, const 122_u8)
    SourceInfo(regex-automata/src/util/start.rs:233:15-233:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:233:15-233:27)
      kind: switchInt(move _43) -> [0: bb27, otherwise: bb23]
  }
  preds [bb21]
  succs [bb23, bb27]

bb23
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/util/start.rs:233:26-233:27)
  1: StorageLive(_45)
    SourceInfo(regex-automata/src/util/start.rs:234:38-234:53)
  2: _45 = util::start::Start::WordByte
    SourceInfo(regex-automata/src/util/start.rs:234:38-234:53)
  3: StorageLive(_46)
    SourceInfo(regex-automata/src/util/start.rs:234:17-234:34)
  4: StorageLive(_47)
    SourceInfo(regex-automata/src/util/start.rs:234:29-234:33)
  5: _47 = _16
    SourceInfo(regex-automata/src/util/start.rs:234:29-234:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:234:17-234:34)
      kind: _46 = <usize as core::convert::From<u8>>::from(move _47) -> [return: bb24, unwind: bb37]
  }
  preds [bb22]
  succs [bb24, bb37]

bb24
  0: StorageDead(_47)
    SourceInfo(regex-automata/src/util/start.rs:234:33-234:34)
  1: _48 = Len(_2)
    SourceInfo(regex-automata/src/util/start.rs:234:13-234:35)
  2: _49 = Lt(_46, _48)
    SourceInfo(regex-automata/src/util/start.rs:234:13-234:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:234:13-234:35)
      kind: assert(move _49, "index out of bounds: the length is {} but the index is {}", move _48, _46) -> [success: bb25, unwind: bb37]
  }
  preds [bb23]
  succs [bb25, bb37]

bb25
  0: _2[_46] = move _45
    SourceInfo(regex-automata/src/util/start.rs:234:13-234:53)
  1: StorageDead(_45)
    SourceInfo(regex-automata/src/util/start.rs:234:52-234:53)
  2: StorageDead(_46)
    SourceInfo(regex-automata/src/util/start.rs:234:53-234:54)
  3: _50 = AddWithOverflow(_16, const 1_u8)
    SourceInfo(regex-automata/src/util/start.rs:235:13-235:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:235:13-235:22)
      kind: assert(!move (_50.1: bool), "attempt to compute `{} + {}`, which would overflow", _16, const 1_u8) -> [success: bb26, unwind: bb37]
  }
  preds [bb24]
  succs [bb26, bb37]

bb26
  0: _16 = move (_50.0: u8)
    SourceInfo(regex-automata/src/util/start.rs:235:13-235:22)
  1: _18 = const ()
    SourceInfo(regex-automata/src/util/start.rs:233:28-236:10)
  2: StorageDead(_43)
    SourceInfo(regex-automata/src/util/start.rs:236:9-236:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:233:9-236:10)
      kind: goto -> bb21
  }
  preds [bb25]
  succs [bb21]

bb27
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/util/start.rs:233:26-233:27)
  1: StorageLive(_52)
    SourceInfo(regex-automata/src/util/start.rs:233:9-236:10)
  2: _42 = const ()
    SourceInfo(regex-automata/src/util/start.rs:233:9-236:10)
  3: StorageDead(_52)
    SourceInfo(regex-automata/src/util/start.rs:236:9-236:10)
  4: StorageDead(_43)
    SourceInfo(regex-automata/src/util/start.rs:236:9-236:10)
  5: StorageDead(_42)
    SourceInfo(regex-automata/src/util/start.rs:236:9-236:10)
  6: StorageLive(_54)
    SourceInfo(regex-automata/src/util/start.rs:238:13-238:21)
  7: StorageLive(_55)
    SourceInfo(regex-automata/src/util/start.rs:238:24-238:29)
  8: _55 = &(*_1)
    SourceInfo(regex-automata/src/util/start.rs:238:24-238:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:238:24-238:51)
      kind: _54 = util::look::LookMatcher::get_line_terminator(move _55) -> [return: bb28, unwind: bb37]
  }
  preds [bb22]
  succs [bb28, bb37]

bb28
  0: StorageDead(_55)
    SourceInfo(regex-automata/src/util/start.rs:238:50-238:51)
  1: FakeRead(ForLet(None), _54)
    SourceInfo(regex-automata/src/util/start.rs:238:13-238:21)
  2: StorageLive(_56)
    SourceInfo(regex-automata/src/util/start.rs:246:9-248:10)
  3: StorageLive(_57)
    SourceInfo(regex-automata/src/util/start.rs:246:12-246:29)
  4: StorageLive(_58)
    SourceInfo(regex-automata/src/util/start.rs:246:12-246:20)
  5: _58 = _54
    SourceInfo(regex-automata/src/util/start.rs:246:12-246:20)
  6: _57 = Ne(move _58, const 13_u8)
    SourceInfo(regex-automata/src/util/start.rs:246:12-246:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:246:12-246:29)
      kind: switchInt(move _57) -> [0: bb34, otherwise: bb29]
  }
  preds [bb27]
  succs [bb29, bb34]

bb29
  0: StorageDead(_58)
    SourceInfo(regex-automata/src/util/start.rs:246:28-246:29)
  1: StorageLive(_59)
    SourceInfo(regex-automata/src/util/start.rs:246:33-246:50)
  2: StorageLive(_60)
    SourceInfo(regex-automata/src/util/start.rs:246:33-246:41)
  3: _60 = _54
    SourceInfo(regex-automata/src/util/start.rs:246:33-246:41)
  4: _59 = Ne(move _60, const 10_u8)
    SourceInfo(regex-automata/src/util/start.rs:246:33-246:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:246:33-246:50)
      kind: switchInt(move _59) -> [0: bb33, otherwise: bb30]
  }
  preds [bb28]
  succs [bb30, bb33]

bb30
  0: StorageDead(_60)
    SourceInfo(regex-automata/src/util/start.rs:246:49-246:50)
  1: StorageLive(_61)
    SourceInfo(regex-automata/src/util/start.rs:247:42-247:69)
  2: _61 = util::start::Start::CustomLineTerminator
    SourceInfo(regex-automata/src/util/start.rs:247:42-247:69)
  3: StorageLive(_62)
    SourceInfo(regex-automata/src/util/start.rs:247:17-247:38)
  4: StorageLive(_63)
    SourceInfo(regex-automata/src/util/start.rs:247:29-247:37)
  5: _63 = _54
    SourceInfo(regex-automata/src/util/start.rs:247:29-247:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:247:17-247:38)
      kind: _62 = <usize as core::convert::From<u8>>::from(move _63) -> [return: bb31, unwind: bb37]
  }
  preds [bb29]
  succs [bb31, bb37]

bb31
  0: StorageDead(_63)
    SourceInfo(regex-automata/src/util/start.rs:247:37-247:38)
  1: _64 = Len(_2)
    SourceInfo(regex-automata/src/util/start.rs:247:13-247:39)
  2: _65 = Lt(_62, _64)
    SourceInfo(regex-automata/src/util/start.rs:247:13-247:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:247:13-247:39)
      kind: assert(move _65, "index out of bounds: the length is {} but the index is {}", move _64, _62) -> [success: bb32, unwind: bb37]
  }
  preds [bb30]
  succs [bb32, bb37]

bb32
  0: _2[_62] = move _61
    SourceInfo(regex-automata/src/util/start.rs:247:13-247:69)
  1: StorageDead(_61)
    SourceInfo(regex-automata/src/util/start.rs:247:68-247:69)
  2: StorageDead(_62)
    SourceInfo(regex-automata/src/util/start.rs:247:69-247:70)
  3: _56 = const ()
    SourceInfo(regex-automata/src/util/start.rs:246:51-248:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:246:9-248:10)
      kind: goto -> bb36
  }
  preds [bb31]
  succs [bb36]

bb33
  0: StorageDead(_60)
    SourceInfo(regex-automata/src/util/start.rs:246:49-246:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb35
  }
  preds [bb29]
  succs [bb35]

bb34
  0: StorageDead(_58)
    SourceInfo(regex-automata/src/util/start.rs:246:28-246:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb35
  }
  preds [bb28]
  succs [bb35]

bb35
  0: _56 = const ()
    SourceInfo(regex-automata/src/util/start.rs:248:10-248:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:246:9-248:10)
      kind: goto -> bb36
  }
  preds [bb33, bb34]
  succs [bb36]

bb36
  0: StorageDead(_59)
    SourceInfo(regex-automata/src/util/start.rs:248:9-248:10)
  1: StorageDead(_57)
    SourceInfo(regex-automata/src/util/start.rs:248:9-248:10)
  2: StorageDead(_56)
    SourceInfo(regex-automata/src/util/start.rs:248:9-248:10)
  3: StorageLive(_66)
    SourceInfo(regex-automata/src/util/start.rs:249:24-249:27)
  4: _66 = _2
    SourceInfo(regex-automata/src/util/start.rs:249:24-249:27)
  5: _0 = util::start::StartByteMap { map: move _66 }
    SourceInfo(regex-automata/src/util/start.rs:249:9-249:29)
  6: StorageDead(_66)
    SourceInfo(regex-automata/src/util/start.rs:249:28-249:29)
  7: StorageDead(_54)
    SourceInfo(regex-automata/src/util/start.rs:250:5-250:6)
  8: StorageDead(_16)
    SourceInfo(regex-automata/src/util/start.rs:250:5-250:6)
  9: StorageDead(_2)
    SourceInfo(regex-automata/src/util/start.rs:250:5-250:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:250:6-250:6)
      kind: return
  }
  preds [bb32, bb35]
  succs []

bb37
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/start.rs:216:5-250:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb7, bb9, bb10, bb11, bb14, bb16, bb17, bb18, bb21, bb23, bb24, bb25, bb27, bb30, bb31]
  succs []

