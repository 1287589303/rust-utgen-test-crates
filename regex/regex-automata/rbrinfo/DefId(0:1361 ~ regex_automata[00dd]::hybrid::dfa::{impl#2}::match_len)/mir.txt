bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:9-1717:31)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:17-1717:30)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:17-1717:19)
  3: _6 = &_3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:17-1717:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:17-1717:30)
      kind: _5 = hybrid::id::LazyStateID::is_match(move _6) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:17-1717:30)
      kind: switchInt(move _5) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:29-1717:30)
  1: _4 = const ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:31-1717:31)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:30-1717:31)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:30-1717:31)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:9-1718:55)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:9-1718:55)
  6: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:9-1718:34)
  7: StorageLive(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:9-1718:34)
  8: StorageLive(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:22-1718:26)
  9: _12 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:22-1718:26)
  10: StorageLive(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:28-1718:33)
  11: _13 = &(*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:28-1718:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:9-1718:34)
      kind: _11 = hybrid::dfa::LazyRef::<'_, '_>::new(move _12, move _13) -> [return: bb4, unwind: bb7]
  }
  preds [bb1]
  succs [bb4, bb7]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:29-1717:30)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:9-1717:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1717:9-1717:31)
      kind: _7 = core::panicking::panic(const "assertion failed: id.is_match()") -> bb7
  }
  preds [bb1]
  succs [bb7]

bb4
  0: _10 = &_11
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:9-1718:34)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:33-1718:34)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:33-1718:34)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:52-1718:54)
  4: _14 = _3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:52-1718:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:9-1718:55)
      kind: _9 = hybrid::dfa::LazyRef::<'_, '_>::get_cached_state(move _10, move _14) -> [return: bb5, unwind: bb7]
  }
  preds [bb2]
  succs [bb5, bb7]

bb5
  0: _8 = &(*_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:9-1718:55)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:54-1718:55)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:54-1718:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:9-1718:67)
      kind: _0 = util::determinize::state::State::match_len(move _8) -> [return: bb6, unwind: bb7]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1718:66-1718:67)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1719:5-1719:6)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1719:5-1719:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1719:6-1719:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1716:5-1719:6)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb4, bb5]
  succs []

