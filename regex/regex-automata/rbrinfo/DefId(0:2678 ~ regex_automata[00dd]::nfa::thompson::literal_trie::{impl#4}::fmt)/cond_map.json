{
  "regex-automata/src/nfa/thompson/literal_trie.rs:432:17:432:38": [
    {
      "Try": "write!(f, \"{:?}\", t)?"
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:422:17:422:47": [
    {
      "Try": "write!(f, \"{}MATCH\", spacing)?"
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:420:27:420:52": [
    {
      "For": {
        "iter_var": "(i, chunk)",
        "iter_range": "self.chunks().enumerate()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:427:20:427:26": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "j == 0",
          "lhs": "j",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:428:21:428:36": [
    {
      "Try": "write!(f, \" \")?"
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:425:27:425:51": [
    {
      "For": {
        "iter_var": "(j, t)",
        "iter_range": "chunk.iter().enumerate()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:429:27:429:32": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "j > 0",
          "lhs": "j",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:430:21:430:37": [
    {
      "Try": "write!(f, \", \")?"
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:427:30:427:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "i > 0",
          "lhs": "i",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:421:16:421:21": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "i > 0",
          "lhs": "i",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ]
}