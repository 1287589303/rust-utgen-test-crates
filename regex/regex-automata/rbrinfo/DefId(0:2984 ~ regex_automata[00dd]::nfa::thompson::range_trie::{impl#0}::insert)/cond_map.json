{
  "regex-automata/src/nfa/thompson/range_trie.rs:318:16:318:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "i == self.state(state_id).transitions.len()",
          "lhs": "i",
          "rhs": "self.state(state_id).transitions.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:411:33:411:48": [
    {
      "Bool": {
        "Other": "rest.is_empty()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:370:27:370:33": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/range_trie.rs:370:27:370:33",
        "match_str": "srange",
        "match_kind": {
          "Enum": [
            "Old",
            "New",
            "Both"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/range_trie.rs:407:25:407:44": {
            "pat": {
              "pat_str": "SplitRange::Both(r)",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/range_trie.rs:407:48:415:26"
          },
          "regex-automata/src/nfa/thompson/range_trie.rs:371:25:371:43": {
            "pat": {
              "pat_str": "SplitRange::Old(r)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/range_trie.rs:371:47:381:26"
          },
          "regex-automata/src/nfa/thompson/range_trie.rs:382:25:382:43": {
            "pat": {
              "pat_str": "SplitRange::New(r)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/range_trie.rs:382:47:406:26"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:346:25:346:40": [
    {
      "Bool": {
        "Other": "rest.is_empty()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:305:22:305:39": [
    {
      "Bool": {
        "Other": "ranges.is_empty()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:369:37:369:62": [
    {
      "For": {
        "iter_var": "(j, &srange)",
        "iter_range": "splits.iter().enumerate()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:391:36:391:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "j + 1",
          "lhs": "j",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:391:36:391:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "j + 1 == splits.len()",
          "lhs": "j + 1",
          "rhs": "splits.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:296:18:296:35": [
    {
      "Bool": {
        "Other": "ranges.is_empty()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:303:15:303:43": [
    {
      "Bool": {
        "Other": "let Some(next) = stack.pop()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:393:40:393:69": [
    {
      "Bool": {
        "Other": "intersects(r, trans[i].range)"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:297:17:297:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "ranges.len() <= 4",
          "lhs": "ranges.len()",
          "rhs": "4",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:332:35:332:61": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/range_trie.rs:332:35:332:61",
        "match_str": "Split::new(old.range, new)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/range_trie.rs:333:21:333:32": {
            "pat": {
              "pat_str": "Some(split)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/range_trie.rs:333:36:333:41"
          },
          "regex-automata/src/nfa/thompson/range_trie.rs:334:21:334:25": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/range_trie.rs:334:29:338:22"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:392:40:392:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "i < trans.len()",
          "lhs": "i",
          "rhs": "trans.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:344:20:344:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "splits.len() == 1",
          "lhs": "splits.len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ]
}