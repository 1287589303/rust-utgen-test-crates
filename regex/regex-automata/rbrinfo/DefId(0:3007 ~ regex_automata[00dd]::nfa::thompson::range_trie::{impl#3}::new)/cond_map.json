{
  "regex-automata/src/nfa/thompson/range_trie.rs:826:65:826:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "b + 1",
          "lhs": "b",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:815:19:815:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "y == b",
          "lhs": "y",
          "rhs": "b",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:823:65:823:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "y + 1",
          "lhs": "y",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:833:19:833:24": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "y > a",
          "lhs": "y",
          "rhs": "a",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:832:40:832:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "x - 1",
          "lhs": "x",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:803:29:803:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "b == y",
          "lhs": "b",
          "rhs": "y",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:821:28:821:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "y < b",
          "lhs": "y",
          "rhs": "b",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:830:19:830:24": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "b > x",
          "lhs": "b",
          "rhs": "x",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:835:65:835:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "y + 1",
          "lhs": "y",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:809:29:809:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "a > x",
          "lhs": "a",
          "rhs": "x",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:823:40:823:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "x - 1",
          "lhs": "x",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:811:40:811:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "a - 1",
          "lhs": "a",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:824:29:824:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "a < y",
          "lhs": "a",
          "rhs": "y",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:820:40:820:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "a - 1",
          "lhs": "a",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:827:29:827:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "x < b",
          "lhs": "x",
          "rhs": "b",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:812:29:812:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "y < b",
          "lhs": "y",
          "rhs": "b",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:814:49:814:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "y + 1",
          "lhs": "y",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:833:28:833:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "y < b",
          "lhs": "y",
          "rhs": "b",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:824:19:824:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "b == x",
          "lhs": "b",
          "rhs": "x",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:830:28:830:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "b < y",
          "lhs": "b",
          "rhs": "y",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:800:21:800:26": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "y < a",
          "lhs": "y",
          "rhs": "a",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:803:19:803:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "a == x",
          "lhs": "a",
          "rhs": "x",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:835:40:835:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "a - 1",
          "lhs": "a",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:832:65:832:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "b + 1",
          "lhs": "b",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:817:40:817:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "x - 1",
          "lhs": "x",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:818:19:818:24": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "a > x",
          "lhs": "a",
          "rhs": "x",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:818:28:818:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "b < y",
          "lhs": "b",
          "rhs": "y",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:806:29:806:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "b < y",
          "lhs": "b",
          "rhs": "y",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:809:19:809:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "b == y",
          "lhs": "b",
          "rhs": "y",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:812:19:812:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "x == a",
          "lhs": "x",
          "rhs": "a",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:808:49:808:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "b + 1",
          "lhs": "b",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:829:65:829:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "y + 1",
          "lhs": "y",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:815:29:815:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "x > a",
          "lhs": "x",
          "rhs": "a",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:829:40:829:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "y - 1",
          "lhs": "y",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:806:19:806:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "a == x",
          "lhs": "a",
          "rhs": "x",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:821:19:821:24": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "x > a",
          "lhs": "x",
          "rhs": "a",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:820:65:820:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "b + 1",
          "lhs": "b",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:826:40:826:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "b - 1",
          "lhs": "b",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:800:12:800:17": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "b < x",
          "lhs": "b",
          "rhs": "x",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:827:19:827:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "y == a",
          "lhs": "y",
          "rhs": "a",
          "cmp_with_int": false
        }
      }
    }
  ]
}