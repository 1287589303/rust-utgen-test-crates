bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:645:13-645:16)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:645:19-645:25)
  2: _4 = &(*_2)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:645:19-645:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:645:19-645:31)
      kind: _3 = core::slice::<impl [regex_syntax::utf8::Utf8Range]>::len(move _4) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:645:30-645:31)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:645:13-645:16)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:9-646:25)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:17-646:24)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:17-646:20)
  5: _7 = _3
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:17-646:20)
  6: _6 = Gt(move _7, const 0_usize)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:17-646:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:17-646:24)
      kind: switchInt(move _6) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:23-646:24)
  1: _5 = const ()
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:25-646:25)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:24-646:25)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:24-646:25)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:9-647:26)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:17-647:25)
  6: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:17-647:20)
  7: _11 = _3
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:17-647:20)
  8: _10 = Le(move _11, const 4_usize)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:17-647:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:17-647:25)
      kind: switchInt(move _10) -> [0: bb5, otherwise: bb4]
  }
  preds [bb1]
  succs [bb4, bb5]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:23-646:24)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:9-646:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:646:9-646:25)
      kind: _8 = core::panicking::panic(const "assertion failed: len > 0") -> bb10
  }
  preds [bb1]
  succs [bb10]

bb4
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:24-647:25)
  1: _9 = const ()
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:26-647:26)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:25-647:26)
  3: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:25-647:26)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:649:13-649:20)
  5: StorageLive(_14)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:649:24-649:54)
  6: _14 = regex_syntax::utf8::Utf8Range { start: const 0_u8, end: const 0_u8 }
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:649:24-649:54)
  7: _13 = [move _14; 4]
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:649:23-649:58)
  8: StorageDead(_14)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:649:57-649:58)
  9: FakeRead(ForLet(None), _13)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:649:13-649:20)
  10: StorageLive(_15)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:9-650:43)
  11: StorageLive(_16)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:9-650:19)
  12: StorageLive(_17)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:12-650:19)
  13: StorageLive(_18)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:9-650:12)
  14: _18 = &mut _13
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:9-650:12)
  15: StorageLive(_19)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:13-650:18)
  16: StorageLive(_20)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:15-650:18)
  17: _20 = _3
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:15-650:18)
  18: _19 = core::ops::RangeTo::<usize> { end: move _20 }
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:13-650:18)
  19: StorageDead(_20)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:17-650:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:12-650:19)
      kind: _17 = <[regex_syntax::utf8::Utf8Range; 4] as core::ops::IndexMut<core::ops::RangeTo<usize>>>::index_mut(move _18, move _19) -> [return: bb6, unwind: bb10]
  }
  preds [bb2]
  succs [bb6, bb10]

bb5
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:24-647:25)
  1: StorageLive(_12)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:9-647:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:647:9-647:26)
      kind: _12 = core::panicking::panic(const "assertion failed: len <= 4") -> bb10
  }
  preds [bb2]
  succs [bb10]

bb6
  0: _16 = &mut (*_17)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:9-650:19)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:18-650:19)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:18-650:19)
  3: StorageLive(_21)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:36-650:42)
  4: _21 = &(*_2)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:36-650:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:9-650:43)
      kind: _15 = core::slice::<impl [regex_syntax::utf8::Utf8Range]>::copy_from_slice(move _16, move _21) -> [return: bb7, unwind: bb10]
  }
  preds [bb4]
  succs [bb7, bb10]

bb7
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:42-650:43)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:42-650:43)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:43-650:44)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:650:43-650:44)
  4: StorageLive(_22)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:22-651:30)
  5: _22 = _1
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:22-651:30)
  6: StorageLive(_23)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:40-651:43)
  7: _23 = _13
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:40-651:43)
  8: StorageLive(_24)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:50-651:76)
  9: StorageLive(_25)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:50-651:67)
  10: StorageLive(_26)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:63-651:66)
  11: _26 = _3
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:63-651:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:50-651:67)
      kind: _25 = <u8 as core::convert::TryFrom<usize>>::try_from(move _26) -> [return: bb8, unwind: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:66-651:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:50-651:76)
      kind: _24 = core::result::Result::<u8, core::num::TryFromIntError>::unwrap(move _25) -> [return: bb9, unwind: bb10]
  }
  preds [bb7]
  succs [bb9, bb10]

bb9
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:75-651:76)
  1: _0 = nfa::thompson::range_trie::NextInsert { state_id: move _22, ranges: move _23, len: move _24 }
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:9-651:78)
  2: StorageDead(_24)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:77-651:78)
  3: StorageDead(_23)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:77-651:78)
  4: StorageDead(_22)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:651:77-651:78)
  5: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:652:5-652:6)
  6: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:652:5-652:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:652:6-652:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:644:5-652:6)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb5, bb6, bb7, bb8]
  succs []

