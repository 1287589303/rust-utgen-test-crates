{
  "regex-automata/src/nfa/thompson/backtrack.rs:1885:9:1885:20": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(lhs / rhs)",
          "lhs": "lhs",
          "rhs": "rhs",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1882:8:1882:17": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "lhs % rhs",
          "lhs": "lhs",
          "rhs": "rhs",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1885:9:1885:24": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(lhs / rhs) + 1",
          "lhs": "(lhs / rhs)",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1883:9:1883:18": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "lhs / rhs",
          "lhs": "lhs",
          "rhs": "rhs",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1882:8:1882:22": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "lhs % rhs == 0",
          "lhs": "lhs % rhs",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ]
}