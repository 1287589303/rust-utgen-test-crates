bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:8-1882:22)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:8-1882:17)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:8-1882:11)
  3: _5 = _1
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:8-1882:11)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:14-1882:17)
  5: _6 = _2
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:14-1882:17)
  6: _7 = Eq(_6, const 0_usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:8-1882:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:8-1882:17)
      kind: assert(!move _7, "attempt to calculate the remainder of `{}` with a divisor of zero", _5) -> [success: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: _4 = Rem(move _5, move _6)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:8-1882:17)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:16-1882:17)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:16-1882:17)
  3: _3 = Eq(move _4, const 0_usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:8-1882:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:8-1882:22)
      kind: switchInt(move _3) -> [0: bb4, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:21-1882:22)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1883:9-1883:12)
  2: _8 = _1
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1883:9-1883:12)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1883:15-1883:18)
  4: _9 = _2
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1883:15-1883:18)
  5: _10 = Eq(_9, const 0_usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1883:9-1883:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1883:9-1883:18)
      kind: assert(!move _10, "attempt to divide `{}` by zero", _8) -> [success: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: _0 = Div(move _8, move _9)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1883:9-1883:18)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1883:17-1883:18)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1883:17-1883:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:5-1886:6)
      kind: goto -> bb7
  }
  preds [bb2]
  succs [bb7]

bb4
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:21-1882:22)
  1: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:9-1885:20)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:10-1885:13)
  3: _12 = _1
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:10-1885:13)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:16-1885:19)
  5: _13 = _2
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:16-1885:19)
  6: _14 = Eq(_13, const 0_usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:9-1885:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:9-1885:20)
      kind: assert(!move _14, "attempt to divide `{}` by zero", _12) -> [success: bb5, unwind: bb8]
  }
  preds [bb1]
  succs [bb5, bb8]

bb5
  0: _11 = Div(move _12, move _13)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:9-1885:20)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:19-1885:20)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:19-1885:20)
  3: _15 = AddWithOverflow(_11, const 1_usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:9-1885:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:9-1885:24)
      kind: assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb6, unwind: bb8]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: _0 = move (_15.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:9-1885:24)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1885:23-1885:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1882:5-1886:6)
      kind: goto -> bb7
  }
  preds [bb5]
  succs [bb7]

bb7
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1886:5-1886:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1887:2-1887:2)
      kind: return
  }
  preds [bb3, bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1881:1-1887:2)
      kind: resume
  }
  preds [bb0, bb2, bb4, bb5]
  succs []

