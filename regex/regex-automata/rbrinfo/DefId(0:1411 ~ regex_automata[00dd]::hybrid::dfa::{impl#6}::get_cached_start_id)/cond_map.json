{
  "regex-automata/src/hybrid/dfa.rs:2697:17:2699:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(2 * Start::len())\n                    + (Start::len() * pid.as_usize())\n                    + start_index",
          "lhs": "(2 * Start::len())\n                    + (Start::len() * pid.as_usize())",
          "rhs": "start_index",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2694:20:2694:60": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "pid.as_usize() >= self.dfa.pattern_len()",
          "lhs": "pid.as_usize()",
          "rhs": "self.dfa.pattern_len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2697:17:2698:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(2 * Start::len())\n                    + (Start::len() * pid.as_usize())",
          "lhs": "(2 * Start::len())",
          "rhs": "(Start::len() * pid.as_usize())",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2697:17:2697:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(2 * Start::len())",
          "lhs": "2",
          "rhs": "Start::len()",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2687:27:2687:35": [
    {
      "Match": {
        "match_source": "regex-automata/src/hybrid/dfa.rs:2687:27:2687:35",
        "match_str": "anchored",
        "match_kind": {
          "Enum": [
            "No",
            "Yes",
            "Pattern"
          ]
        },
        "arms": {
          "regex-automata/src/hybrid/dfa.rs:2689:13:2689:26": {
            "pat": {
              "pat_str": "Anchored::Yes",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/dfa.rs:2689:30:2689:56"
          },
          "regex-automata/src/hybrid/dfa.rs:2690:13:2690:35": {
            "pat": {
              "pat_str": "Anchored::Pattern(pid)",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/dfa.rs:2690:39:2700:14"
          },
          "regex-automata/src/hybrid/dfa.rs:2688:13:2688:25": {
            "pat": {
              "pat_str": "Anchored::No",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/dfa.rs:2688:29:2688:40"
          }
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2689:30:2689:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "Start::len() + start_index",
          "lhs": "Start::len()",
          "rhs": "start_index",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2698:23:2698:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(Start::len() * pid.as_usize())",
          "lhs": "Start::len()",
          "rhs": "pid.as_usize()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2691:21:2691:72": [
    {
      "Bool": {
        "Other": "self.dfa.get_config().get_starts_for_each_pattern()"
      }
    }
  ]
}