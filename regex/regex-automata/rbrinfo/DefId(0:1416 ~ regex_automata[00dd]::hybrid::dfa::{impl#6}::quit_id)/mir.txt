bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:9-2747:59)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:9-2747:59)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:9-2747:50)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:26-2747:49)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:31-2747:49)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:31-2747:39)
  6: _7 = &(*((*_1).0: &hybrid::dfa::DFA))
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:31-2747:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:31-2747:49)
      kind: _6 = hybrid::dfa::DFA::stride2(move _7) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:48-2747:49)
  1: _8 = Lt(_6, const 64_usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:26-2747:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:26-2747:49)
      kind: assert(move _8, "attempt to shift left by `{}`, which would overflow", _6) -> [success: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _5 = Shl(const 2_usize, move _6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:26-2747:49)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:48-2747:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:9-2747:50)
      kind: _4 = hybrid::id::LazyStateID::new(move _5) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:49-2747:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:9-2747:59)
      kind: _3 = core::result::Result::<hybrid::id::LazyStateID, hybrid::id::LazyStateIDError>::unwrap(move _4) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: _2 = &_3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:9-2747:59)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:58-2747:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:9-2747:69)
      kind: _0 = hybrid::id::LazyStateID::to_quit(move _2) -> [return: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2747:68-2747:69)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2748:5-2748:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2748:6-2748:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2742:5-2748:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

