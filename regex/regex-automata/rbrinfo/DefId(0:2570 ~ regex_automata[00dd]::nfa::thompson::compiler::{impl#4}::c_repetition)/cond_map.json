{
  "regex-automata/src/nfa/thompson/compiler.rs:1148:15:1148:33": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/compiler.rs:1148:15:1148:33",
        "match_str": "(rep.min, rep.max)",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "regex-automata/src/nfa/thompson/compiler.rs:1150:13:1150:24": {
            "pat": {
              "pat_str": "(min, None)",
              "kind": {
                "StructLike": {
                  "1": [
                    null,
                    "regex-automata/src/nfa/thompson/compiler.rs:1150:19:1150:23"
                  ],
                  "0": [
                    null,
                    "regex-automata/src/nfa/thompson/compiler.rs:1150:14:1150:17"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/compiler.rs:1150:28:1150:70"
          },
          "regex-automata/src/nfa/thompson/compiler.rs:1152:13:1152:29": {
            "pat": {
              "pat_str": "(min, Some(max))",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "regex-automata/src/nfa/thompson/compiler.rs:1152:14:1152:17"
                  ],
                  "1": [
                    null,
                    "regex-automata/src/nfa/thompson/compiler.rs:1152:19:1152:28"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/compiler.rs:1152:33:1152:79"
          },
          "regex-automata/src/nfa/thompson/compiler.rs:1149:13:1149:25": {
            "pat": {
              "pat_str": "(0, Some(1))",
              "kind": {
                "StructLike": {
                  "0": [
                    0,
                    "regex-automata/src/nfa/thompson/compiler.rs:1149:14:1149:15"
                  ],
                  "1": [
                    null,
                    "regex-automata/src/nfa/thompson/compiler.rs:1149:17:1149:24"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/compiler.rs:1149:29:1149:69"
          },
          "regex-automata/src/nfa/thompson/compiler.rs:1151:13:1151:29": {
            "pat": {
              "pat_str": "(min, Some(max))",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "regex-automata/src/nfa/thompson/compiler.rs:1151:14:1151:17"
                  ],
                  "1": [
                    null,
                    "regex-automata/src/nfa/thompson/compiler.rs:1151:19:1151:28"
                  ]
                }
              }
            },
            "guard": {
              "regex-automata/src/nfa/thompson/compiler.rs:1151:33:1151:43": [
                {
                  "Bool": {
                    "Binary": {
                      "kind": "Eq",
                      "expr": "min == max",
                      "lhs": "min",
                      "rhs": "max",
                      "cmp_with_int": false
                    }
                  }
                }
              ]
            },
            "body_source": "regex-automata/src/nfa/thompson/compiler.rs:1151:47:1151:76"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1151:33:1151:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "min == max",
          "lhs": "min",
          "rhs": "max",
          "cmp_with_int": false
        }
      }
    }
  ]
}