{
  "regex-automata/src/meta/limited.rs:53:19:53:50": [
    {
      "Try": "dfa.start_state_reverse(input)?"
    }
  ],
  "regex-automata/src/meta/limited.rs:89:5:89:49": [
    {
      "Try": "dfa_eoi_rev(dfa, input, &mut sid, &mut mat)?"
    }
  ],
  "regex-automata/src/meta/limited.rs:114:13:114:21": [
    {
      "Bool": {
        "Other": "was_dead"
      }
    }
  ],
  "regex-automata/src/meta/limited.rs:79:12:79:26": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "at < min_start",
          "lhs": "at",
          "rhs": "min_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/meta/limited.rs:62:16:62:39": [
    {
      "Bool": {
        "Other": "dfa.is_match_state(sid)"
      }
    }
  ],
  "regex-automata/src/meta/limited.rs:113:12:113:61": [
    {
      "Bool": {
        "Other": "mat.map_or(false, |m| m.offset() > input.start())"
      }
    }
  ],
  "regex-automata/src/meta/limited.rs:71:23:71:45": [
    {
      "Bool": {
        "Other": "dfa.is_quit_state(sid)"
      }
    }
  ],
  "regex-automata/src/meta/limited.rs:61:12:61:37": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(sid)"
      }
    }
  ],
  "regex-automata/src/meta/limited.rs:112:8:112:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == input.start()",
          "lhs": "at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/meta/limited.rs:58:18:58:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input.end() - 1",
          "lhs": "input.end()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/meta/limited.rs:69:23:69:45": [
    {
      "Bool": {
        "Other": "dfa.is_dead_state(sid)"
      }
    }
  ],
  "regex-automata/src/meta/limited.rs:55:9:55:53": [
    {
      "Try": "dfa_eoi_rev(dfa, input, &mut sid, &mut mat)?"
    }
  ],
  "regex-automata/src/meta/limited.rs:54:8:54:36": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "input.start() == input.end()",
          "lhs": "input.start()",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/meta/limited.rs:68:52:68:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at + 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/meta/limited.rs:75:12:75:31": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == input.start()",
          "lhs": "at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ]
}