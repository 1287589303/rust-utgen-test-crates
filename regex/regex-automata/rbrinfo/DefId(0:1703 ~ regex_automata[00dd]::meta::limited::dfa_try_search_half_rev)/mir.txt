bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/limited.rs:52:9-52:16)
  1: _4 = core::option::Option::<util::search::HalfMatch>::None
    SourceInfo(regex-automata/src/meta/limited.rs:52:19-52:23)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/meta/limited.rs:52:9-52:16)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/limited.rs:53:9-53:16)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:50)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:49)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:22)
  7: _8 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:22)
  8: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/limited.rs:53:43-53:48)
  9: _9 = &(*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:53:43-53:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:49)
      kind: _7 = <dfa::dense::DFA<std::vec::Vec<u32>> as dfa::automaton::Automaton>::start_state_reverse(move _8, move _9) -> [return: bb1, unwind: bb100]
  }
  preds []
  succs [bb1, bb100]

bb1
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/limited.rs:53:48-53:49)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/limited.rs:53:48-53:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:50)
      kind: _6 = <core::result::Result<util::primitives::StateID, util::search::MatchError> as core::ops::Try>::branch(move _7) -> [return: bb2, unwind: bb99]
  }
  preds [bb0]
  succs [bb2, bb99]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
  1: PlaceMention(_6)
    SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:50)
  2: _10 = discriminant(_6)
    SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:50)
      kind: switchInt(move _10) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _6)
    SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:50)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:50)
  1: _14 = ((_6 as Continue).0: util::primitives::StateID)
    SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:50)
  2: _5 = _14
    SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:50)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
  4: FakeRead(ForLet(None), _5)
    SourceInfo(regex-automata/src/meta/limited.rs:53:9-53:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:50-53:51)
      kind: drop(_6) -> [return: bb8, unwind: bb100]
  }
  preds [bb2, bb4]
  succs [bb8, bb100]

bb6
  0: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
  1: _11 = move ((_6 as Break).0: core::result::Result<core::convert::Infallible, util::search::MatchError>)
    SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
  3: _13 = move _11
    SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:19-53:50)
      kind: _0 = <core::result::Result<core::option::Option<util::search::HalfMatch>, meta::error::RetryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual(move _13) -> [return: bb7, unwind: bb96]
  }
  preds [bb4]
  succs [bb7, bb96]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
      kind: drop(_11) -> [return: bb83, unwind: bb98]
  }
  preds [bb6]
  succs [bb83, bb98]

bb8
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/limited.rs:53:50-53:51)
  1: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/limited.rs:54:5-57:6)
  2: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/limited.rs:54:8-54:36)
  3: StorageLive(_17)
    SourceInfo(regex-automata/src/meta/limited.rs:54:8-54:21)
  4: StorageLive(_18)
    SourceInfo(regex-automata/src/meta/limited.rs:54:8-54:13)
  5: _18 = &(*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:54:8-54:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:54:8-54:21)
      kind: _17 = util::search::Input::<'_>::start(move _18) -> [return: bb9, unwind: bb100]
  }
  preds [bb5]
  succs [bb9, bb100]

bb9
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/limited.rs:54:20-54:21)
  1: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/limited.rs:54:25-54:36)
  2: StorageLive(_20)
    SourceInfo(regex-automata/src/meta/limited.rs:54:25-54:30)
  3: _20 = &(*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:54:25-54:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:54:25-54:36)
      kind: _19 = util::search::Input::<'_>::end(move _20) -> [return: bb10, unwind: bb100]
  }
  preds [bb8]
  succs [bb10, bb100]

bb10
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/meta/limited.rs:54:35-54:36)
  1: _16 = Eq(move _17, move _19)
    SourceInfo(regex-automata/src/meta/limited.rs:54:8-54:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:54:8-54:36)
      kind: switchInt(move _16) -> [0: bb20, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb20]

bb11
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/limited.rs:54:35-54:36)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/limited.rs:54:35-54:36)
  2: StorageLive(_22)
    SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:53)
  3: StorageLive(_23)
    SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:53)
  4: StorageLive(_24)
    SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:52)
  5: StorageLive(_25)
    SourceInfo(regex-automata/src/meta/limited.rs:55:21-55:24)
  6: _25 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:55:21-55:24)
  7: StorageLive(_26)
    SourceInfo(regex-automata/src/meta/limited.rs:55:26-55:31)
  8: _26 = &(*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:55:26-55:31)
  9: StorageLive(_27)
    SourceInfo(regex-automata/src/meta/limited.rs:55:33-55:41)
  10: StorageLive(_28)
    SourceInfo(regex-automata/src/meta/limited.rs:55:33-55:41)
  11: _28 = &mut _5
    SourceInfo(regex-automata/src/meta/limited.rs:55:33-55:41)
  12: _27 = &mut (*_28)
    SourceInfo(regex-automata/src/meta/limited.rs:55:33-55:41)
  13: StorageLive(_29)
    SourceInfo(regex-automata/src/meta/limited.rs:55:43-55:51)
  14: StorageLive(_30)
    SourceInfo(regex-automata/src/meta/limited.rs:55:43-55:51)
  15: _30 = &mut _4
    SourceInfo(regex-automata/src/meta/limited.rs:55:43-55:51)
  16: _29 = &mut (*_30)
    SourceInfo(regex-automata/src/meta/limited.rs:55:43-55:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:52)
      kind: _24 = meta::limited::dfa_eoi_rev(move _25, move _26, move _27, move _29) -> [return: bb12, unwind: bb100]
  }
  preds [bb10]
  succs [bb12, bb100]

bb12
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/meta/limited.rs:55:51-55:52)
  1: StorageDead(_27)
    SourceInfo(regex-automata/src/meta/limited.rs:55:51-55:52)
  2: StorageDead(_26)
    SourceInfo(regex-automata/src/meta/limited.rs:55:51-55:52)
  3: StorageDead(_25)
    SourceInfo(regex-automata/src/meta/limited.rs:55:51-55:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:53)
      kind: _23 = <core::result::Result<(), util::search::MatchError> as core::ops::Try>::branch(move _24) -> [return: bb13, unwind: bb95]
  }
  preds [bb11]
  succs [bb13, bb95]

bb13
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
  1: PlaceMention(_23)
    SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:53)
  2: _31 = discriminant(_23)
    SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:53)
      kind: switchInt(move _31) -> [0: bb16, 1: bb15, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb15, bb16]

bb14
  0: FakeRead(ForMatchedPlace(None), _23)
    SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:53)
      kind: unreachable
  }
  preds [bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
      kind: falseEdge -> [real: bb17, imaginary: bb16]
  }
  preds [bb13]
  succs [bb16, bb17]

bb16
  0: StorageLive(_35)
    SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:53)
  1: _35 = ((_23 as Continue).0: ())
    SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:53)
  2: _22 = _35
    SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:53)
  3: StorageDead(_35)
    SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:53-55:54)
      kind: drop(_23) -> [return: bb19, unwind: bb100]
  }
  preds [bb13, bb15]
  succs [bb19, bb100]

bb17
  0: StorageLive(_32)
    SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
  1: _32 = move ((_23 as Break).0: core::result::Result<core::convert::Infallible, util::search::MatchError>)
    SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
  2: StorageLive(_34)
    SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
  3: _34 = move _32
    SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:9-55:53)
      kind: _0 = <core::result::Result<core::option::Option<util::search::HalfMatch>, meta::error::RetryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual(move _34) -> [return: bb18, unwind: bb92]
  }
  preds [bb15]
  succs [bb18, bb92]

bb18
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
      kind: drop(_32) -> [return: bb80, unwind: bb94]
  }
  preds [bb17]
  succs [bb80, bb94]

bb19
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/limited.rs:55:53-55:54)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/limited.rs:55:53-55:54)
  2: StorageDead(_23)
    SourceInfo(regex-automata/src/meta/limited.rs:55:53-55:54)
  3: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/limited.rs:55:53-55:54)
  4: StorageLive(_36)
    SourceInfo(regex-automata/src/meta/limited.rs:56:19-56:22)
  5: _36 = _4
    SourceInfo(regex-automata/src/meta/limited.rs:56:19-56:22)
  6: _0 = core::result::Result::<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>::Ok(move _36)
    SourceInfo(regex-automata/src/meta/limited.rs:56:16-56:23)
  7: StorageDead(_36)
    SourceInfo(regex-automata/src/meta/limited.rs:56:22-56:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:56:9-56:23)
      kind: goto -> bb82
  }
  preds [bb16]
  succs [bb82]

bb20
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/limited.rs:54:35-54:36)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/limited.rs:54:35-54:36)
  2: _15 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:57:6-57:6)
  3: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/limited.rs:57:5-57:6)
  4: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/limited.rs:57:5-57:6)
  5: StorageLive(_37)
    SourceInfo(regex-automata/src/meta/limited.rs:58:9-58:15)
  6: StorageLive(_38)
    SourceInfo(regex-automata/src/meta/limited.rs:58:18-58:29)
  7: StorageLive(_39)
    SourceInfo(regex-automata/src/meta/limited.rs:58:18-58:23)
  8: _39 = &(*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:58:18-58:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:58:18-58:29)
      kind: _38 = util::search::Input::<'_>::end(move _39) -> [return: bb21, unwind: bb100]
  }
  preds [bb10]
  succs [bb21, bb100]

bb21
  0: StorageDead(_39)
    SourceInfo(regex-automata/src/meta/limited.rs:58:28-58:29)
  1: _40 = SubWithOverflow(_38, const 1_usize)
    SourceInfo(regex-automata/src/meta/limited.rs:58:18-58:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:58:18-58:33)
      kind: assert(!move (_40.1: bool), "attempt to compute `{} - {}`, which would overflow", move _38, const 1_usize) -> [success: bb22, unwind: bb100]
  }
  preds [bb20]
  succs [bb22, bb100]

bb22
  0: _37 = move (_40.0: usize)
    SourceInfo(regex-automata/src/meta/limited.rs:58:18-58:33)
  1: StorageDead(_38)
    SourceInfo(regex-automata/src/meta/limited.rs:58:32-58:33)
  2: FakeRead(ForLet(None), _37)
    SourceInfo(regex-automata/src/meta/limited.rs:58:9-58:15)
  3: StorageLive(_41)
    SourceInfo(regex-automata/src/meta/limited.rs:59:5-87:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:59:5-87:6)
      kind: goto -> bb23
  }
  preds [bb21]
  succs [bb23]

bb23
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:59:5-87:6)
      kind: falseUnwind -> [real: bb24, unwind: bb100]
  }
  preds [bb22, bb55]
  succs [bb24, bb100]

bb24
  0: StorageLive(_43)
    SourceInfo(regex-automata/src/meta/limited.rs:60:15-60:56)
  1: StorageLive(_44)
    SourceInfo(regex-automata/src/meta/limited.rs:60:15-60:18)
  2: _44 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:60:15-60:18)
  3: StorageLive(_45)
    SourceInfo(regex-automata/src/meta/limited.rs:60:30-60:33)
  4: _45 = _5
    SourceInfo(regex-automata/src/meta/limited.rs:60:30-60:33)
  5: StorageLive(_46)
    SourceInfo(regex-automata/src/meta/limited.rs:60:35-60:55)
  6: StorageLive(_47)
    SourceInfo(regex-automata/src/meta/limited.rs:60:35-60:51)
  7: StorageLive(_48)
    SourceInfo(regex-automata/src/meta/limited.rs:60:35-60:40)
  8: _48 = &(*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:60:35-60:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:60:35-60:51)
      kind: _47 = util::search::Input::<'_>::haystack(move _48) -> [return: bb25, unwind: bb100]
  }
  preds [bb23]
  succs [bb25, bb100]

bb25
  0: StorageDead(_48)
    SourceInfo(regex-automata/src/meta/limited.rs:60:50-60:51)
  1: StorageLive(_49)
    SourceInfo(regex-automata/src/meta/limited.rs:60:52-60:54)
  2: _49 = _37
    SourceInfo(regex-automata/src/meta/limited.rs:60:52-60:54)
  3: _50 = Len((*_47))
    SourceInfo(regex-automata/src/meta/limited.rs:60:35-60:55)
  4: _51 = Lt(_49, _50)
    SourceInfo(regex-automata/src/meta/limited.rs:60:35-60:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:60:35-60:55)
      kind: assert(move _51, "index out of bounds: the length is {} but the index is {}", move _50, _49) -> [success: bb26, unwind: bb100]
  }
  preds [bb24]
  succs [bb26, bb100]

bb26
  0: _46 = (*_47)[_49]
    SourceInfo(regex-automata/src/meta/limited.rs:60:35-60:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:60:15-60:56)
      kind: _43 = <dfa::dense::DFA<std::vec::Vec<u32>> as dfa::automaton::Automaton>::next_state(move _44, move _45, move _46) -> [return: bb27, unwind: bb100]
  }
  preds [bb25]
  succs [bb27, bb100]

bb27
  0: StorageDead(_46)
    SourceInfo(regex-automata/src/meta/limited.rs:60:55-60:56)
  1: StorageDead(_45)
    SourceInfo(regex-automata/src/meta/limited.rs:60:55-60:56)
  2: StorageDead(_44)
    SourceInfo(regex-automata/src/meta/limited.rs:60:55-60:56)
  3: _5 = move _43
    SourceInfo(regex-automata/src/meta/limited.rs:60:9-60:56)
  4: StorageDead(_43)
    SourceInfo(regex-automata/src/meta/limited.rs:60:55-60:56)
  5: StorageDead(_49)
    SourceInfo(regex-automata/src/meta/limited.rs:60:56-60:57)
  6: StorageDead(_47)
    SourceInfo(regex-automata/src/meta/limited.rs:60:56-60:57)
  7: StorageLive(_52)
    SourceInfo(regex-automata/src/meta/limited.rs:61:9-74:10)
  8: StorageLive(_53)
    SourceInfo(regex-automata/src/meta/limited.rs:61:12-61:37)
  9: StorageLive(_54)
    SourceInfo(regex-automata/src/meta/limited.rs:61:12-61:15)
  10: _54 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:61:12-61:15)
  11: StorageLive(_55)
    SourceInfo(regex-automata/src/meta/limited.rs:61:33-61:36)
  12: _55 = _5
    SourceInfo(regex-automata/src/meta/limited.rs:61:33-61:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:61:12-61:37)
      kind: _53 = <dfa::dense::DFA<std::vec::Vec<u32>> as dfa::automaton::Automaton>::is_special_state(move _54, move _55) -> [return: bb28, unwind: bb100]
  }
  preds [bb26]
  succs [bb28, bb100]

bb28
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:61:12-61:37)
      kind: switchInt(move _53) -> [0: bb47, otherwise: bb29]
  }
  preds [bb27]
  succs [bb29, bb47]

bb29
  0: StorageDead(_55)
    SourceInfo(regex-automata/src/meta/limited.rs:61:36-61:37)
  1: StorageDead(_54)
    SourceInfo(regex-automata/src/meta/limited.rs:61:36-61:37)
  2: StorageLive(_56)
    SourceInfo(regex-automata/src/meta/limited.rs:62:16-62:39)
  3: StorageLive(_57)
    SourceInfo(regex-automata/src/meta/limited.rs:62:16-62:19)
  4: _57 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:62:16-62:19)
  5: StorageLive(_58)
    SourceInfo(regex-automata/src/meta/limited.rs:62:35-62:38)
  6: _58 = _5
    SourceInfo(regex-automata/src/meta/limited.rs:62:35-62:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:62:16-62:39)
      kind: _56 = <dfa::dense::DFA<std::vec::Vec<u32>> as dfa::automaton::Automaton>::is_match_state(move _57, move _58) -> [return: bb30, unwind: bb100]
  }
  preds [bb28]
  succs [bb30, bb100]

bb30
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:62:16-62:39)
      kind: switchInt(move _56) -> [0: bb35, otherwise: bb31]
  }
  preds [bb29]
  succs [bb31, bb35]

bb31
  0: StorageDead(_58)
    SourceInfo(regex-automata/src/meta/limited.rs:62:38-62:39)
  1: StorageDead(_57)
    SourceInfo(regex-automata/src/meta/limited.rs:62:38-62:39)
  2: StorageLive(_59)
    SourceInfo(regex-automata/src/meta/limited.rs:63:21-63:28)
  3: StorageLive(_60)
    SourceInfo(regex-automata/src/meta/limited.rs:63:31-63:34)
  4: _60 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:63:31-63:34)
  5: StorageLive(_61)
    SourceInfo(regex-automata/src/meta/limited.rs:63:49-63:52)
  6: _61 = _5
    SourceInfo(regex-automata/src/meta/limited.rs:63:49-63:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:63:31-63:56)
      kind: _59 = <dfa::dense::DFA<std::vec::Vec<u32>> as dfa::automaton::Automaton>::match_pattern(move _60, move _61, const 0_usize) -> [return: bb32, unwind: bb100]
  }
  preds [bb30]
  succs [bb32, bb100]

bb32
  0: StorageDead(_61)
    SourceInfo(regex-automata/src/meta/limited.rs:63:55-63:56)
  1: StorageDead(_60)
    SourceInfo(regex-automata/src/meta/limited.rs:63:55-63:56)
  2: FakeRead(ForLet(None), _59)
    SourceInfo(regex-automata/src/meta/limited.rs:63:21-63:28)
  3: StorageLive(_62)
    SourceInfo(regex-automata/src/meta/limited.rs:68:23-68:60)
  4: StorageLive(_63)
    SourceInfo(regex-automata/src/meta/limited.rs:68:28-68:59)
  5: StorageLive(_64)
    SourceInfo(regex-automata/src/meta/limited.rs:68:43-68:50)
  6: _64 = _59
    SourceInfo(regex-automata/src/meta/limited.rs:68:43-68:50)
  7: StorageLive(_65)
    SourceInfo(regex-automata/src/meta/limited.rs:68:52-68:58)
  8: StorageLive(_66)
    SourceInfo(regex-automata/src/meta/limited.rs:68:52-68:54)
  9: _66 = _37
    SourceInfo(regex-automata/src/meta/limited.rs:68:52-68:54)
  10: _67 = AddWithOverflow(_66, const 1_usize)
    SourceInfo(regex-automata/src/meta/limited.rs:68:52-68:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:68:52-68:58)
      kind: assert(!move (_67.1: bool), "attempt to compute `{} + {}`, which would overflow", move _66, const 1_usize) -> [success: bb33, unwind: bb100]
  }
  preds [bb31]
  succs [bb33, bb100]

bb33
  0: _65 = move (_67.0: usize)
    SourceInfo(regex-automata/src/meta/limited.rs:68:52-68:58)
  1: StorageDead(_66)
    SourceInfo(regex-automata/src/meta/limited.rs:68:57-68:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:68:28-68:59)
      kind: _63 = util::search::HalfMatch::new(move _64, move _65) -> [return: bb34, unwind: bb100]
  }
  preds [bb32]
  succs [bb34, bb100]

bb34
  0: StorageDead(_65)
    SourceInfo(regex-automata/src/meta/limited.rs:68:58-68:59)
  1: StorageDead(_64)
    SourceInfo(regex-automata/src/meta/limited.rs:68:58-68:59)
  2: _62 = core::option::Option::<util::search::HalfMatch>::Some(move _63)
    SourceInfo(regex-automata/src/meta/limited.rs:68:23-68:60)
  3: StorageDead(_63)
    SourceInfo(regex-automata/src/meta/limited.rs:68:59-68:60)
  4: _4 = move _62
    SourceInfo(regex-automata/src/meta/limited.rs:68:17-68:60)
  5: StorageDead(_62)
    SourceInfo(regex-automata/src/meta/limited.rs:68:59-68:60)
  6: _52 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:62:40-69:14)
  7: StorageDead(_59)
    SourceInfo(regex-automata/src/meta/limited.rs:69:13-69:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:62:13-73:14)
      kind: goto -> bb46
  }
  preds [bb33]
  succs [bb46]

bb35
  0: StorageDead(_58)
    SourceInfo(regex-automata/src/meta/limited.rs:62:38-62:39)
  1: StorageDead(_57)
    SourceInfo(regex-automata/src/meta/limited.rs:62:38-62:39)
  2: StorageLive(_68)
    SourceInfo(regex-automata/src/meta/limited.rs:69:23-69:45)
  3: StorageLive(_69)
    SourceInfo(regex-automata/src/meta/limited.rs:69:23-69:26)
  4: _69 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:69:23-69:26)
  5: StorageLive(_70)
    SourceInfo(regex-automata/src/meta/limited.rs:69:41-69:44)
  6: _70 = _5
    SourceInfo(regex-automata/src/meta/limited.rs:69:41-69:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:69:23-69:45)
      kind: _68 = <dfa::dense::DFA<std::vec::Vec<u32>> as dfa::automaton::Automaton>::is_dead_state(move _69, move _70) -> [return: bb36, unwind: bb100]
  }
  preds [bb30]
  succs [bb36, bb100]

bb36
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:69:23-69:45)
      kind: switchInt(move _68) -> [0: bb38, otherwise: bb37]
  }
  preds [bb35]
  succs [bb37, bb38]

bb37
  0: StorageDead(_70)
    SourceInfo(regex-automata/src/meta/limited.rs:69:44-69:45)
  1: StorageDead(_69)
    SourceInfo(regex-automata/src/meta/limited.rs:69:44-69:45)
  2: StorageLive(_72)
    SourceInfo(regex-automata/src/meta/limited.rs:70:27-70:30)
  3: _72 = _4
    SourceInfo(regex-automata/src/meta/limited.rs:70:27-70:30)
  4: _0 = core::result::Result::<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>::Ok(move _72)
    SourceInfo(regex-automata/src/meta/limited.rs:70:24-70:31)
  5: StorageDead(_72)
    SourceInfo(regex-automata/src/meta/limited.rs:70:30-70:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:70:17-70:31)
      kind: goto -> bb77
  }
  preds [bb36]
  succs [bb77]

bb38
  0: StorageDead(_70)
    SourceInfo(regex-automata/src/meta/limited.rs:69:44-69:45)
  1: StorageDead(_69)
    SourceInfo(regex-automata/src/meta/limited.rs:69:44-69:45)
  2: StorageLive(_73)
    SourceInfo(regex-automata/src/meta/limited.rs:71:23-71:45)
  3: StorageLive(_74)
    SourceInfo(regex-automata/src/meta/limited.rs:71:23-71:26)
  4: _74 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:71:23-71:26)
  5: StorageLive(_75)
    SourceInfo(regex-automata/src/meta/limited.rs:71:41-71:44)
  6: _75 = _5
    SourceInfo(regex-automata/src/meta/limited.rs:71:41-71:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:71:23-71:45)
      kind: _73 = <dfa::dense::DFA<std::vec::Vec<u32>> as dfa::automaton::Automaton>::is_quit_state(move _74, move _75) -> [return: bb39, unwind: bb100]
  }
  preds [bb36]
  succs [bb39, bb100]

bb39
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:71:23-71:45)
      kind: switchInt(move _73) -> [0: bb45, otherwise: bb40]
  }
  preds [bb38]
  succs [bb40, bb45]

bb40
  0: StorageDead(_75)
    SourceInfo(regex-automata/src/meta/limited.rs:71:44-71:45)
  1: StorageDead(_74)
    SourceInfo(regex-automata/src/meta/limited.rs:71:44-71:45)
  2: StorageLive(_77)
    SourceInfo(regex-automata/src/meta/limited.rs:72:28-72:77)
  3: StorageLive(_78)
    SourceInfo(regex-automata/src/meta/limited.rs:72:28-72:70)
  4: StorageLive(_79)
    SourceInfo(regex-automata/src/meta/limited.rs:72:45-72:65)
  5: StorageLive(_80)
    SourceInfo(regex-automata/src/meta/limited.rs:72:45-72:61)
  6: StorageLive(_81)
    SourceInfo(regex-automata/src/meta/limited.rs:72:45-72:50)
  7: _81 = &(*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:72:45-72:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:72:45-72:61)
      kind: _80 = util::search::Input::<'_>::haystack(move _81) -> [return: bb41, unwind: bb100]
  }
  preds [bb39]
  succs [bb41, bb100]

bb41
  0: StorageDead(_81)
    SourceInfo(regex-automata/src/meta/limited.rs:72:60-72:61)
  1: StorageLive(_82)
    SourceInfo(regex-automata/src/meta/limited.rs:72:62-72:64)
  2: _82 = _37
    SourceInfo(regex-automata/src/meta/limited.rs:72:62-72:64)
  3: _83 = Len((*_80))
    SourceInfo(regex-automata/src/meta/limited.rs:72:45-72:65)
  4: _84 = Lt(_82, _83)
    SourceInfo(regex-automata/src/meta/limited.rs:72:45-72:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:72:45-72:65)
      kind: assert(move _84, "index out of bounds: the length is {} but the index is {}", move _83, _82) -> [success: bb42, unwind: bb100]
  }
  preds [bb40]
  succs [bb42, bb100]

bb42
  0: _79 = (*_80)[_82]
    SourceInfo(regex-automata/src/meta/limited.rs:72:45-72:65)
  1: StorageLive(_85)
    SourceInfo(regex-automata/src/meta/limited.rs:72:67-72:69)
  2: _85 = _37
    SourceInfo(regex-automata/src/meta/limited.rs:72:67-72:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:72:28-72:70)
      kind: _78 = util::search::MatchError::quit(move _79, move _85) -> [return: bb43, unwind: bb100]
  }
  preds [bb41]
  succs [bb43, bb100]

bb43
  0: StorageDead(_85)
    SourceInfo(regex-automata/src/meta/limited.rs:72:69-72:70)
  1: StorageDead(_79)
    SourceInfo(regex-automata/src/meta/limited.rs:72:69-72:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:72:28-72:77)
      kind: _77 = <util::search::MatchError as core::convert::Into<meta::error::RetryError>>::into(move _78) -> [return: bb44, unwind: bb91]
  }
  preds [bb42]
  succs [bb44, bb91]

bb44
  0: StorageDead(_78)
    SourceInfo(regex-automata/src/meta/limited.rs:72:76-72:77)
  1: _0 = core::result::Result::<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>::Err(move _77)
    SourceInfo(regex-automata/src/meta/limited.rs:72:24-72:78)
  2: StorageDead(_77)
    SourceInfo(regex-automata/src/meta/limited.rs:72:77-72:78)
  3: StorageDead(_82)
    SourceInfo(regex-automata/src/meta/limited.rs:72:78-72:79)
  4: StorageDead(_80)
    SourceInfo(regex-automata/src/meta/limited.rs:72:78-72:79)
  5: StorageDead(_73)
    SourceInfo(regex-automata/src/meta/limited.rs:73:13-73:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb77
  }
  preds [bb43]
  succs [bb77]

bb45
  0: StorageDead(_75)
    SourceInfo(regex-automata/src/meta/limited.rs:71:44-71:45)
  1: StorageDead(_74)
    SourceInfo(regex-automata/src/meta/limited.rs:71:44-71:45)
  2: _52 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:73:14-73:14)
  3: StorageDead(_73)
    SourceInfo(regex-automata/src/meta/limited.rs:73:13-73:14)
  4: StorageDead(_68)
    SourceInfo(regex-automata/src/meta/limited.rs:73:13-73:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:62:13-73:14)
      kind: goto -> bb46
  }
  preds [bb39]
  succs [bb46]

bb46
  0: StorageDead(_56)
    SourceInfo(regex-automata/src/meta/limited.rs:73:13-73:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:61:9-74:10)
      kind: goto -> bb48
  }
  preds [bb34, bb45]
  succs [bb48]

bb47
  0: StorageDead(_55)
    SourceInfo(regex-automata/src/meta/limited.rs:61:36-61:37)
  1: StorageDead(_54)
    SourceInfo(regex-automata/src/meta/limited.rs:61:36-61:37)
  2: _52 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:74:10-74:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:61:9-74:10)
      kind: goto -> bb48
  }
  preds [bb28]
  succs [bb48]

bb48
  0: StorageDead(_53)
    SourceInfo(regex-automata/src/meta/limited.rs:74:9-74:10)
  1: StorageDead(_52)
    SourceInfo(regex-automata/src/meta/limited.rs:74:9-74:10)
  2: StorageLive(_86)
    SourceInfo(regex-automata/src/meta/limited.rs:75:9-77:10)
  3: StorageLive(_87)
    SourceInfo(regex-automata/src/meta/limited.rs:75:12-75:31)
  4: StorageLive(_88)
    SourceInfo(regex-automata/src/meta/limited.rs:75:12-75:14)
  5: _88 = _37
    SourceInfo(regex-automata/src/meta/limited.rs:75:12-75:14)
  6: StorageLive(_89)
    SourceInfo(regex-automata/src/meta/limited.rs:75:18-75:31)
  7: StorageLive(_90)
    SourceInfo(regex-automata/src/meta/limited.rs:75:18-75:23)
  8: _90 = &(*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:75:18-75:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:75:18-75:31)
      kind: _89 = util::search::Input::<'_>::start(move _90) -> [return: bb49, unwind: bb100]
  }
  preds [bb46, bb47]
  succs [bb49, bb100]

bb49
  0: StorageDead(_90)
    SourceInfo(regex-automata/src/meta/limited.rs:75:30-75:31)
  1: _87 = Eq(move _88, move _89)
    SourceInfo(regex-automata/src/meta/limited.rs:75:12-75:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:75:12-75:31)
      kind: switchInt(move _87) -> [0: bb51, otherwise: bb50]
  }
  preds [bb48]
  succs [bb50, bb51]

bb50
  0: StorageDead(_89)
    SourceInfo(regex-automata/src/meta/limited.rs:75:30-75:31)
  1: StorageDead(_88)
    SourceInfo(regex-automata/src/meta/limited.rs:75:30-75:31)
  2: _41 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:76:13-76:18)
  3: StorageDead(_87)
    SourceInfo(regex-automata/src/meta/limited.rs:77:9-77:10)
  4: StorageDead(_86)
    SourceInfo(regex-automata/src/meta/limited.rs:77:9-77:10)
  5: StorageDead(_41)
    SourceInfo(regex-automata/src/meta/limited.rs:87:5-87:6)
  6: StorageLive(_99)
    SourceInfo(regex-automata/src/meta/limited.rs:88:9-88:17)
  7: StorageLive(_100)
    SourceInfo(regex-automata/src/meta/limited.rs:88:20-88:23)
  8: _100 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:88:20-88:23)
  9: StorageLive(_101)
    SourceInfo(regex-automata/src/meta/limited.rs:88:38-88:41)
  10: _101 = _5
    SourceInfo(regex-automata/src/meta/limited.rs:88:38-88:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:88:20-88:42)
      kind: _99 = <dfa::dense::DFA<std::vec::Vec<u32>> as dfa::automaton::Automaton>::is_dead_state(move _100, move _101) -> [return: bb56, unwind: bb100]
  }
  preds [bb49]
  succs [bb56, bb100]

bb51
  0: StorageDead(_89)
    SourceInfo(regex-automata/src/meta/limited.rs:75:30-75:31)
  1: StorageDead(_88)
    SourceInfo(regex-automata/src/meta/limited.rs:75:30-75:31)
  2: _86 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:77:10-77:10)
  3: StorageDead(_87)
    SourceInfo(regex-automata/src/meta/limited.rs:77:9-77:10)
  4: StorageDead(_86)
    SourceInfo(regex-automata/src/meta/limited.rs:77:9-77:10)
  5: _92 = SubWithOverflow(_37, const 1_usize)
    SourceInfo(regex-automata/src/meta/limited.rs:78:9-78:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:78:9-78:16)
      kind: assert(!move (_92.1: bool), "attempt to compute `{} - {}`, which would overflow", _37, const 1_usize) -> [success: bb52, unwind: bb100]
  }
  preds [bb49]
  succs [bb52, bb100]

bb52
  0: _37 = move (_92.0: usize)
    SourceInfo(regex-automata/src/meta/limited.rs:78:9-78:16)
  1: StorageLive(_93)
    SourceInfo(regex-automata/src/meta/limited.rs:79:12-79:26)
  2: StorageLive(_94)
    SourceInfo(regex-automata/src/meta/limited.rs:79:12-79:14)
  3: _94 = _37
    SourceInfo(regex-automata/src/meta/limited.rs:79:12-79:14)
  4: StorageLive(_95)
    SourceInfo(regex-automata/src/meta/limited.rs:79:17-79:26)
  5: _95 = _3
    SourceInfo(regex-automata/src/meta/limited.rs:79:17-79:26)
  6: _93 = Lt(move _94, move _95)
    SourceInfo(regex-automata/src/meta/limited.rs:79:12-79:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:79:12-79:26)
      kind: switchInt(move _93) -> [0: bb55, otherwise: bb53]
  }
  preds [bb51]
  succs [bb53, bb55]

bb53
  0: StorageDead(_95)
    SourceInfo(regex-automata/src/meta/limited.rs:79:25-79:26)
  1: StorageDead(_94)
    SourceInfo(regex-automata/src/meta/limited.rs:79:25-79:26)
  2: StorageLive(_97)
    SourceInfo(regex-automata/src/meta/limited.rs:85:24-85:73)
  3: StorageLive(_98)
    SourceInfo(regex-automata/src/meta/limited.rs:85:46-85:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:85:46-85:72)
      kind: _98 = meta::error::RetryQuadraticError::new() -> [return: bb54, unwind: bb100]
  }
  preds [bb52]
  succs [bb54, bb100]

bb54
  0: _97 = meta::error::RetryError::Quadratic(move _98)
    SourceInfo(regex-automata/src/meta/limited.rs:85:24-85:73)
  1: StorageDead(_98)
    SourceInfo(regex-automata/src/meta/limited.rs:85:72-85:73)
  2: _0 = core::result::Result::<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>::Err(move _97)
    SourceInfo(regex-automata/src/meta/limited.rs:85:20-85:74)
  3: StorageDead(_97)
    SourceInfo(regex-automata/src/meta/limited.rs:85:73-85:74)
  4: StorageDead(_93)
    SourceInfo(regex-automata/src/meta/limited.rs:86:9-86:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb78
  }
  preds [bb53]
  succs [bb78]

bb55
  0: StorageDead(_95)
    SourceInfo(regex-automata/src/meta/limited.rs:79:25-79:26)
  1: StorageDead(_94)
    SourceInfo(regex-automata/src/meta/limited.rs:79:25-79:26)
  2: _42 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:86:10-86:10)
  3: StorageDead(_93)
    SourceInfo(regex-automata/src/meta/limited.rs:86:9-86:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:59:5-87:6)
      kind: goto -> bb23
  }
  preds [bb52]
  succs [bb23]

bb56
  0: StorageDead(_101)
    SourceInfo(regex-automata/src/meta/limited.rs:88:41-88:42)
  1: StorageDead(_100)
    SourceInfo(regex-automata/src/meta/limited.rs:88:41-88:42)
  2: FakeRead(ForLet(None), _99)
    SourceInfo(regex-automata/src/meta/limited.rs:88:9-88:17)
  3: StorageLive(_102)
    SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:49)
  4: StorageLive(_103)
    SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:49)
  5: StorageLive(_104)
    SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:48)
  6: StorageLive(_105)
    SourceInfo(regex-automata/src/meta/limited.rs:89:17-89:20)
  7: _105 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:89:17-89:20)
  8: StorageLive(_106)
    SourceInfo(regex-automata/src/meta/limited.rs:89:22-89:27)
  9: _106 = &(*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:89:22-89:27)
  10: StorageLive(_107)
    SourceInfo(regex-automata/src/meta/limited.rs:89:29-89:37)
  11: StorageLive(_108)
    SourceInfo(regex-automata/src/meta/limited.rs:89:29-89:37)
  12: _108 = &mut _5
    SourceInfo(regex-automata/src/meta/limited.rs:89:29-89:37)
  13: _107 = &mut (*_108)
    SourceInfo(regex-automata/src/meta/limited.rs:89:29-89:37)
  14: StorageLive(_109)
    SourceInfo(regex-automata/src/meta/limited.rs:89:39-89:47)
  15: StorageLive(_110)
    SourceInfo(regex-automata/src/meta/limited.rs:89:39-89:47)
  16: _110 = &mut _4
    SourceInfo(regex-automata/src/meta/limited.rs:89:39-89:47)
  17: _109 = &mut (*_110)
    SourceInfo(regex-automata/src/meta/limited.rs:89:39-89:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:48)
      kind: _104 = meta::limited::dfa_eoi_rev(move _105, move _106, move _107, move _109) -> [return: bb57, unwind: bb100]
  }
  preds [bb50]
  succs [bb57, bb100]

bb57
  0: StorageDead(_109)
    SourceInfo(regex-automata/src/meta/limited.rs:89:47-89:48)
  1: StorageDead(_107)
    SourceInfo(regex-automata/src/meta/limited.rs:89:47-89:48)
  2: StorageDead(_106)
    SourceInfo(regex-automata/src/meta/limited.rs:89:47-89:48)
  3: StorageDead(_105)
    SourceInfo(regex-automata/src/meta/limited.rs:89:47-89:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:49)
      kind: _103 = <core::result::Result<(), util::search::MatchError> as core::ops::Try>::branch(move _104) -> [return: bb58, unwind: bb90]
  }
  preds [bb56]
  succs [bb58, bb90]

bb58
  0: StorageDead(_104)
    SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
  1: PlaceMention(_103)
    SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:49)
  2: _111 = discriminant(_103)
    SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:49)
      kind: switchInt(move _111) -> [0: bb61, 1: bb60, otherwise: bb59]
  }
  preds [bb57]
  succs [bb59, bb60, bb61]

bb59
  0: FakeRead(ForMatchedPlace(None), _103)
    SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:49)
      kind: unreachable
  }
  preds [bb58]
  succs []

bb60
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
      kind: falseEdge -> [real: bb62, imaginary: bb61]
  }
  preds [bb58]
  succs [bb61, bb62]

bb61
  0: StorageLive(_115)
    SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:49)
  1: _115 = ((_103 as Continue).0: ())
    SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:49)
  2: _102 = _115
    SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:49)
  3: StorageDead(_115)
    SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:49-89:50)
      kind: drop(_103) -> [return: bb64, unwind: bb100]
  }
  preds [bb58, bb60]
  succs [bb64, bb100]

bb62
  0: StorageLive(_112)
    SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
  1: _112 = move ((_103 as Break).0: core::result::Result<core::convert::Infallible, util::search::MatchError>)
    SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
  2: StorageLive(_114)
    SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
  3: _114 = move _112
    SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:5-89:49)
      kind: _0 = <core::result::Result<core::option::Option<util::search::HalfMatch>, meta::error::RetryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual(move _114) -> [return: bb63, unwind: bb87]
  }
  preds [bb60]
  succs [bb63, bb87]

bb63
  0: StorageDead(_114)
    SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
      kind: drop(_112) -> [return: bb74, unwind: bb89]
  }
  preds [bb62]
  succs [bb74, bb89]

bb64
  0: StorageDead(_110)
    SourceInfo(regex-automata/src/meta/limited.rs:89:49-89:50)
  1: StorageDead(_108)
    SourceInfo(regex-automata/src/meta/limited.rs:89:49-89:50)
  2: StorageDead(_103)
    SourceInfo(regex-automata/src/meta/limited.rs:89:49-89:50)
  3: StorageDead(_102)
    SourceInfo(regex-automata/src/meta/limited.rs:89:49-89:50)
  4: StorageLive(_116)
    SourceInfo(regex-automata/src/meta/limited.rs:112:5-122:6)
  5: StorageLive(_117)
    SourceInfo(regex-automata/src/meta/limited.rs:112:8-112:27)
  6: StorageLive(_118)
    SourceInfo(regex-automata/src/meta/limited.rs:112:8-112:10)
  7: _118 = _37
    SourceInfo(regex-automata/src/meta/limited.rs:112:8-112:10)
  8: StorageLive(_119)
    SourceInfo(regex-automata/src/meta/limited.rs:112:14-112:27)
  9: StorageLive(_120)
    SourceInfo(regex-automata/src/meta/limited.rs:112:14-112:19)
  10: _120 = &(*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:112:14-112:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:112:14-112:27)
      kind: _119 = util::search::Input::<'_>::start(move _120) -> [return: bb65, unwind: bb100]
  }
  preds [bb61]
  succs [bb65, bb100]

bb65
  0: StorageDead(_120)
    SourceInfo(regex-automata/src/meta/limited.rs:112:26-112:27)
  1: _117 = Eq(move _118, move _119)
    SourceInfo(regex-automata/src/meta/limited.rs:112:8-112:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:112:8-112:27)
      kind: switchInt(move _117) -> [0: bb72, otherwise: bb66]
  }
  preds [bb64]
  succs [bb66, bb72]

bb66
  0: StorageDead(_119)
    SourceInfo(regex-automata/src/meta/limited.rs:112:26-112:27)
  1: StorageDead(_118)
    SourceInfo(regex-automata/src/meta/limited.rs:112:26-112:27)
  2: StorageLive(_121)
    SourceInfo(regex-automata/src/meta/limited.rs:113:12-113:61)
  3: StorageLive(_122)
    SourceInfo(regex-automata/src/meta/limited.rs:113:12-113:15)
  4: _122 = _4
    SourceInfo(regex-automata/src/meta/limited.rs:113:12-113:15)
  5: StorageLive(_123)
    SourceInfo(regex-automata/src/meta/limited.rs:113:30-113:60)
  6: StorageLive(_124)
    SourceInfo(regex-automata/src/meta/limited.rs:113:30-113:60)
  7: _124 = &(*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:113:30-113:60)
  8: _123 = {closure@regex-automata/src/meta/limited.rs:113:30: 113:33} { input: move _124 }
    SourceInfo(regex-automata/src/meta/limited.rs:113:30-113:60)
  9: StorageDead(_124)
    SourceInfo(regex-automata/src/meta/limited.rs:113:32-113:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:113:12-113:61)
      kind: _121 = core::option::Option::<util::search::HalfMatch>::map_or::<bool, {closure@regex-automata/src/meta/limited.rs:113:30: 113:33}>(move _122, const false, move _123) -> [return: bb67, unwind: bb100]
  }
  preds [bb65]
  succs [bb67, bb100]

bb67
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:113:12-113:61)
      kind: switchInt(move _121) -> [0: bb71, otherwise: bb68]
  }
  preds [bb66]
  succs [bb68, bb71]

bb68
  0: StorageDead(_123)
    SourceInfo(regex-automata/src/meta/limited.rs:113:60-113:61)
  1: StorageDead(_122)
    SourceInfo(regex-automata/src/meta/limited.rs:113:60-113:61)
  2: StorageLive(_125)
    SourceInfo(regex-automata/src/meta/limited.rs:114:13-114:21)
  3: _125 = _99
    SourceInfo(regex-automata/src/meta/limited.rs:114:13-114:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:114:13-114:21)
      kind: switchInt(move _125) -> [0: bb69, otherwise: bb73]
  }
  preds [bb67]
  succs [bb69, bb73]

bb69
  0: StorageLive(_127)
    SourceInfo(regex-automata/src/meta/limited.rs:121:20-121:69)
  1: StorageLive(_128)
    SourceInfo(regex-automata/src/meta/limited.rs:121:42-121:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:121:42-121:68)
      kind: _128 = meta::error::RetryQuadraticError::new() -> [return: bb70, unwind: bb100]
  }
  preds [bb68]
  succs [bb70, bb100]

bb70
  0: _127 = meta::error::RetryError::Quadratic(move _128)
    SourceInfo(regex-automata/src/meta/limited.rs:121:20-121:69)
  1: StorageDead(_128)
    SourceInfo(regex-automata/src/meta/limited.rs:121:68-121:69)
  2: _0 = core::result::Result::<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>::Err(move _127)
    SourceInfo(regex-automata/src/meta/limited.rs:121:16-121:70)
  3: StorageDead(_127)
    SourceInfo(regex-automata/src/meta/limited.rs:121:69-121:70)
  4: StorageDead(_125)
    SourceInfo(regex-automata/src/meta/limited.rs:122:5-122:6)
  5: StorageDead(_121)
    SourceInfo(regex-automata/src/meta/limited.rs:122:5-122:6)
  6: StorageDead(_117)
    SourceInfo(regex-automata/src/meta/limited.rs:122:5-122:6)
  7: StorageDead(_116)
    SourceInfo(regex-automata/src/meta/limited.rs:122:5-122:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb76
  }
  preds [bb69]
  succs [bb76]

bb71
  0: StorageDead(_123)
    SourceInfo(regex-automata/src/meta/limited.rs:113:60-113:61)
  1: StorageDead(_122)
    SourceInfo(regex-automata/src/meta/limited.rs:113:60-113:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb73
  }
  preds [bb67]
  succs [bb73]

bb72
  0: StorageDead(_119)
    SourceInfo(regex-automata/src/meta/limited.rs:112:26-112:27)
  1: StorageDead(_118)
    SourceInfo(regex-automata/src/meta/limited.rs:112:26-112:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb73
  }
  preds [bb65]
  succs [bb73]

bb73
  0: _116 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:122:6-122:6)
  1: StorageDead(_125)
    SourceInfo(regex-automata/src/meta/limited.rs:122:5-122:6)
  2: StorageDead(_121)
    SourceInfo(regex-automata/src/meta/limited.rs:122:5-122:6)
  3: StorageDead(_117)
    SourceInfo(regex-automata/src/meta/limited.rs:122:5-122:6)
  4: StorageDead(_116)
    SourceInfo(regex-automata/src/meta/limited.rs:122:5-122:6)
  5: StorageLive(_129)
    SourceInfo(regex-automata/src/meta/limited.rs:123:8-123:11)
  6: _129 = _4
    SourceInfo(regex-automata/src/meta/limited.rs:123:8-123:11)
  7: _0 = core::result::Result::<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>::Ok(move _129)
    SourceInfo(regex-automata/src/meta/limited.rs:123:5-123:12)
  8: StorageDead(_129)
    SourceInfo(regex-automata/src/meta/limited.rs:123:11-123:12)
  9: StorageDead(_99)
    SourceInfo(regex-automata/src/meta/limited.rs:124:1-124:2)
  10: StorageDead(_37)
    SourceInfo(regex-automata/src/meta/limited.rs:124:1-124:2)
  11: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/limited.rs:124:1-124:2)
  12: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/limited.rs:124:1-124:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:124:2-124:2)
      kind: goto -> bb86
  }
  preds [bb68, bb71, bb72]
  succs [bb86]

bb74
  0: StorageDead(_112)
    SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:49-89:50)
      kind: drop(_103) -> [return: bb75, unwind: bb100]
  }
  preds [bb63]
  succs [bb75, bb100]

bb75
  0: StorageDead(_110)
    SourceInfo(regex-automata/src/meta/limited.rs:89:49-89:50)
  1: StorageDead(_108)
    SourceInfo(regex-automata/src/meta/limited.rs:89:49-89:50)
  2: StorageDead(_103)
    SourceInfo(regex-automata/src/meta/limited.rs:89:49-89:50)
  3: StorageDead(_102)
    SourceInfo(regex-automata/src/meta/limited.rs:89:49-89:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb76
  }
  preds [bb74]
  succs [bb76]

bb76
  0: StorageDead(_99)
    SourceInfo(regex-automata/src/meta/limited.rs:124:1-124:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb79
  }
  preds [bb70, bb75]
  succs [bb79]

bb77
  0: StorageDead(_68)
    SourceInfo(regex-automata/src/meta/limited.rs:73:13-73:14)
  1: StorageDead(_56)
    SourceInfo(regex-automata/src/meta/limited.rs:73:13-73:14)
  2: StorageDead(_53)
    SourceInfo(regex-automata/src/meta/limited.rs:74:9-74:10)
  3: StorageDead(_52)
    SourceInfo(regex-automata/src/meta/limited.rs:74:9-74:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb78
  }
  preds [bb37, bb44]
  succs [bb78]

bb78
  0: StorageDead(_41)
    SourceInfo(regex-automata/src/meta/limited.rs:87:5-87:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb79
  }
  preds [bb54, bb77]
  succs [bb79]

bb79
  0: StorageDead(_37)
    SourceInfo(regex-automata/src/meta/limited.rs:124:1-124:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb85
  }
  preds [bb76, bb78]
  succs [bb85]

bb80
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:53-55:54)
      kind: drop(_23) -> [return: bb81, unwind: bb100]
  }
  preds [bb18]
  succs [bb81, bb100]

bb81
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/limited.rs:55:53-55:54)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/limited.rs:55:53-55:54)
  2: StorageDead(_23)
    SourceInfo(regex-automata/src/meta/limited.rs:55:53-55:54)
  3: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/limited.rs:55:53-55:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb82
  }
  preds [bb80]
  succs [bb82]

bb82
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/limited.rs:57:5-57:6)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/limited.rs:57:5-57:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb85
  }
  preds [bb19, bb81]
  succs [bb85]

bb83
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:50-53:51)
      kind: drop(_6) -> [return: bb84, unwind: bb100]
  }
  preds [bb7]
  succs [bb84, bb100]

bb84
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/limited.rs:53:50-53:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb85
  }
  preds [bb83]
  succs [bb85]

bb85
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/limited.rs:124:1-124:2)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/limited.rs:124:1-124:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:124:2-124:2)
      kind: goto -> bb86
  }
  preds [bb79, bb82, bb84]
  succs [bb86]

bb86
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:124:2-124:2)
      kind: return
  }
  preds [bb73, bb85]
  succs []

bb87
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
      kind: drop(_114) -> [return: bb88, unwind terminate(cleanup)]
  }
  preds [bb62]
  succs [bb88]

bb88
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
      kind: drop(_112) -> [return: bb89, unwind terminate(cleanup)]
  }
  preds [bb87]
  succs [bb89]

bb89
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:49-89:50)
      kind: drop(_103) -> [return: bb100, unwind terminate(cleanup)]
  }
  preds [bb63, bb88]
  succs [bb100]

bb90
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:89:48-89:49)
      kind: drop(_104) -> [return: bb100, unwind terminate(cleanup)]
  }
  preds [bb57]
  succs [bb100]

bb91
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:72:76-72:77)
      kind: drop(_78) -> [return: bb100, unwind terminate(cleanup)]
  }
  preds [bb43]
  succs [bb100]

bb92
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
      kind: drop(_34) -> [return: bb93, unwind terminate(cleanup)]
  }
  preds [bb17]
  succs [bb93]

bb93
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
      kind: drop(_32) -> [return: bb94, unwind terminate(cleanup)]
  }
  preds [bb92]
  succs [bb94]

bb94
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:53-55:54)
      kind: drop(_23) -> [return: bb100, unwind terminate(cleanup)]
  }
  preds [bb18, bb93]
  succs [bb100]

bb95
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:55:52-55:53)
      kind: drop(_24) -> [return: bb100, unwind terminate(cleanup)]
  }
  preds [bb12]
  succs [bb100]

bb96
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
      kind: drop(_13) -> [return: bb97, unwind terminate(cleanup)]
  }
  preds [bb6]
  succs [bb97]

bb97
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
      kind: drop(_11) -> [return: bb98, unwind terminate(cleanup)]
  }
  preds [bb96]
  succs [bb98]

bb98
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:50-53:51)
      kind: drop(_6) -> [return: bb100, unwind terminate(cleanup)]
  }
  preds [bb7, bb97]
  succs [bb100]

bb99
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:53:49-53:50)
      kind: drop(_7) -> [return: bb100, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb100]

bb100
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:45:1-124:2)
      kind: resume
  }
  preds [bb0, bb5, bb8, bb9, bb11, bb16, bb20, bb21, bb23, bb24, bb25, bb26, bb27, bb29, bb31, bb32, bb33, bb35, bb38, bb40, bb41, bb42, bb48, bb50, bb51, bb53, bb56, bb61, bb64, bb66, bb69, bb74, bb80, bb83, bb89, bb90, bb91, bb94, bb95, bb98, bb99]
  succs []

