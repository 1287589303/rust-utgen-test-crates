bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/wire.rs:585:9-585:14)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/wire.rs:586:9-586:44)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/wire.rs:586:9-586:33)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/wire.rs:586:14-586:33)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/util/wire.rs:586:9-586:14)
  5: _7 = &(*_1)
    SourceInfo(regex-automata/src/util/wire.rs:586:9-586:14)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/util/wire.rs:586:15-586:32)
  7: _8 = core::ops::RangeTo::<usize> { end: const util::primitives::PatternID::SIZE }
    SourceInfo(regex-automata/src/util/wire.rs:586:15-586:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:586:14-586:33)
      kind: _6 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _7, move _8) -> [return: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: _5 = &(*_6)
    SourceInfo(regex-automata/src/util/wire.rs:586:9-586:33)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/wire.rs:586:32-586:33)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/util/wire.rs:586:32-586:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:586:9-586:44)
      kind: _4 = <&[u8] as core::convert::TryInto<[u8; 4]>>::try_into(move _5) -> [return: bb2, unwind: bb13]
  }
  preds [bb0]
  succs [bb2, bb13]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/wire.rs:586:43-586:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:586:9-586:53)
      kind: _3 = core::result::Result::<[u8; 4], core::array::TryFromSliceError>::unwrap(move _4) -> [return: bb3, unwind: bb13]
  }
  preds [bb1]
  succs [bb3, bb13]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/wire.rs:586:52-586:53)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/util/wire.rs:585:9-585:14)
  2: AscribeUserType(_3, o, UserTypeProjection { base: UserType(1), projs: [] })
    SourceInfo(regex-automata/src/util/wire.rs:585:16-585:37)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/util/wire.rs:586:53-586:54)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/util/wire.rs:587:9-587:12)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/util/wire.rs:587:15-588:71)
  6: StorageLive(_11)
    SourceInfo(regex-automata/src/util/wire.rs:587:15-588:70)
  7: StorageLive(_12)
    SourceInfo(regex-automata/src/util/wire.rs:587:15-587:46)
  8: StorageLive(_13)
    SourceInfo(regex-automata/src/util/wire.rs:587:40-587:45)
  9: _13 = _3
    SourceInfo(regex-automata/src/util/wire.rs:587:40-587:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:587:15-587:46)
      kind: _12 = util::primitives::PatternID::from_ne_bytes(move _13) -> [return: bb4, unwind: bb13]
  }
  preds [bb2]
  succs [bb4, bb13]

bb4
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/wire.rs:587:45-587:46)
  1: StorageLive(_14)
    SourceInfo(regex-automata/src/util/wire.rs:588:18-588:69)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/util/wire.rs:588:18-588:69)
  3: _15 = &_2
    SourceInfo(regex-automata/src/util/wire.rs:588:18-588:69)
  4: _14 = {closure@regex-automata/src/util/wire.rs:588:18: 588:23} { what: move _15 }
    SourceInfo(regex-automata/src/util/wire.rs:588:18-588:69)
  5: StorageDead(_15)
    SourceInfo(regex-automata/src/util/wire.rs:588:22-588:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:587:15-588:70)
      kind: _11 = core::result::Result::<util::primitives::PatternID, util::primitives::PatternIDError>::map_err::<util::wire::DeserializeError, {closure@regex-automata/src/util/wire.rs:588:18: 588:23}>(move _12, move _14) -> [return: bb5, unwind: bb13]
  }
  preds [bb3]
  succs [bb5, bb13]

bb5
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/wire.rs:588:69-588:70)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/wire.rs:588:69-588:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:587:15-588:71)
      kind: _10 = <core::result::Result<util::primitives::PatternID, util::wire::DeserializeError> as core::ops::Try>::branch(move _11) -> [return: bb6, unwind: bb13]
  }
  preds [bb4]
  succs [bb6, bb13]

bb6
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/wire.rs:588:70-588:71)
  1: PlaceMention(_10)
    SourceInfo(regex-automata/src/util/wire.rs:587:15-588:71)
  2: _16 = discriminant(_10)
    SourceInfo(regex-automata/src/util/wire.rs:587:15-588:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:587:15-588:71)
      kind: switchInt(move _16) -> [0: bb9, 1: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8, bb9]

bb7
  0: FakeRead(ForMatchedPlace(None), _10)
    SourceInfo(regex-automata/src/util/wire.rs:587:15-588:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:587:15-588:71)
      kind: unreachable
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:588:70-588:71)
      kind: falseEdge -> [real: bb10, imaginary: bb9]
  }
  preds [bb6]
  succs [bb9, bb10]

bb9
  0: StorageLive(_20)
    SourceInfo(regex-automata/src/util/wire.rs:587:15-588:71)
  1: _20 = ((_10 as Continue).0: util::primitives::PatternID)
    SourceInfo(regex-automata/src/util/wire.rs:587:15-588:71)
  2: _9 = _20
    SourceInfo(regex-automata/src/util/wire.rs:587:15-588:71)
  3: StorageDead(_20)
    SourceInfo(regex-automata/src/util/wire.rs:588:70-588:71)
  4: FakeRead(ForLet(None), _9)
    SourceInfo(regex-automata/src/util/wire.rs:587:9-587:12)
  5: StorageDead(_10)
    SourceInfo(regex-automata/src/util/wire.rs:588:71-588:72)
  6: StorageLive(_21)
    SourceInfo(regex-automata/src/util/wire.rs:589:8-589:30)
  7: StorageLive(_22)
    SourceInfo(regex-automata/src/util/wire.rs:589:9-589:12)
  8: _22 = _9
    SourceInfo(regex-automata/src/util/wire.rs:589:9-589:12)
  9: _21 = (move _22, const util::primitives::PatternID::SIZE)
    SourceInfo(regex-automata/src/util/wire.rs:589:8-589:30)
  10: StorageDead(_22)
    SourceInfo(regex-automata/src/util/wire.rs:589:29-589:30)
  11: _0 = core::result::Result::<(util::primitives::PatternID, usize), util::wire::DeserializeError>::Ok(move _21)
    SourceInfo(regex-automata/src/util/wire.rs:589:5-589:31)
  12: StorageDead(_21)
    SourceInfo(regex-automata/src/util/wire.rs:589:30-589:31)
  13: StorageDead(_9)
    SourceInfo(regex-automata/src/util/wire.rs:590:1-590:2)
  14: StorageDead(_3)
    SourceInfo(regex-automata/src/util/wire.rs:590:1-590:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:590:2-590:2)
      kind: goto -> bb12
  }
  preds [bb6, bb8]
  succs [bb12]

bb10
  0: StorageLive(_17)
    SourceInfo(regex-automata/src/util/wire.rs:588:70-588:71)
  1: _17 = move ((_10 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/util/wire.rs:588:70-588:71)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/util/wire.rs:588:70-588:71)
  3: _19 = move _17
    SourceInfo(regex-automata/src/util/wire.rs:588:70-588:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:587:15-588:71)
      kind: _0 = <core::result::Result<(util::primitives::PatternID, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _19) -> [return: bb11, unwind: bb13]
  }
  preds [bb8]
  succs [bb11, bb13]

bb11
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/util/wire.rs:588:70-588:71)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/util/wire.rs:588:70-588:71)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/util/wire.rs:588:71-588:72)
  3: StorageDead(_9)
    SourceInfo(regex-automata/src/util/wire.rs:590:1-590:2)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/util/wire.rs:590:1-590:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:590:2-590:2)
      kind: goto -> bb12
  }
  preds [bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:590:2-590:2)
      kind: return
  }
  preds [bb9, bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:581:1-590:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb10]
  succs []

