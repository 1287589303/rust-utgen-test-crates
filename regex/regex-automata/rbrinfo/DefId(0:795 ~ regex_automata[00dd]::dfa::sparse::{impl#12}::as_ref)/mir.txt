bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2040:20-2040:32)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2040:20-2040:32)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2040:20-2040:24)
  3: _4 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2040:20-2040:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2040:20-2040:32)
      kind: _3 = dfa::sparse::StartTable::<T>::table(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _2 = &(*_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2040:20-2040:32)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2040:31-2040:32)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2041:19-2041:28)
  3: _5 = ((*_1).1: dfa::start::StartKind)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2041:19-2041:28)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2042:24-2042:46)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2042:24-2042:38)
  6: _7 = &((*_1).2: util::start::StartByteMap)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2042:24-2042:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2042:24-2042:46)
      kind: _6 = <util::start::StartByteMap as core::clone::Clone>::clone(move _7) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2042:45-2042:46)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2043:21-2043:32)
  2: _8 = ((*_1).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2043:21-2043:32)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2044:26-2044:42)
  4: _9 = ((*_1).4: core::option::Option<usize>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2044:26-2044:42)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2045:41-2045:72)
  6: _10 = ((*_1).5: core::option::Option<util::primitives::StateID>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2045:41-2045:72)
  7: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2046:39-2046:68)
  8: _11 = ((*_1).6: core::option::Option<util::primitives::StateID>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2046:39-2046:68)
  9: _0 = dfa::sparse::StartTable::<&[u8]> { table: move _2, kind: move _5, start_map: move _6, stride: move _8, pattern_len: move _9, universal_start_unanchored: move _10, universal_start_anchored: move _11 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2039:9-2047:10)
  10: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2047:9-2047:10)
  11: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2047:9-2047:10)
  12: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2047:9-2047:10)
  13: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2047:9-2047:10)
  14: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2047:9-2047:10)
  15: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2047:9-2047:10)
  16: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2047:9-2047:10)
  17: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2048:5-2048:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2048:6-2048:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2038:5-2048:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

