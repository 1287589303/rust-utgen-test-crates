bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:99:9-99:11)
  1: _4 = _1
    SourceInfo(regex-automata/src/dfa/accel.rs:99:14-99:21)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/dfa/accel.rs:99:9-99:11)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:100:9-100:10)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:100:19-100:32)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:100:19-100:26)
  6: _7 = &(*_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:100:19-100:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:100:19-100:32)
      kind: _6 = core::slice::<impl [u8]>::len(move _7) -> [return: bb1, unwind: bb48]
  }
  preds []
  succs [bb1, bb48]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:100:31-100:32)
  1: PlaceMention(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:100:19-100:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:100:13-100:32)
      kind: switchInt(_6) -> [1: bb3, 2: bb4, 3: bb5, 0: bb6, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3, bb4, bb5, bb6]

bb2
  0: StorageLive(_77)
    SourceInfo(regex-automata/src/dfa/accel.rs:105:9-105:10)
  1: _77 = _6
    SourceInfo(regex-automata/src/dfa/accel.rs:105:9-105:10)
  2: StorageLive(_79)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
  3: StorageLive(_80)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  4: StorageLive(_81)
    SourceInfo(regex-automata/src/dfa/accel.rs:105:21-105:49)
  5: StorageLive(_82)
    SourceInfo(regex-automata/src/dfa/accel.rs:105:21-105:49)
  6: StorageLive(_83)
    SourceInfo(regex-automata/src/dfa/accel.rs:105:21-105:49)
  7: _83 = [const "invalid needles length: "]
    SourceInfo(regex-automata/src/dfa/accel.rs:105:21-105:49)
  8: _82 = &_83
    SourceInfo(regex-automata/src/dfa/accel.rs:105:21-105:49)
  9: _81 = &(*_82)
    SourceInfo(regex-automata/src/dfa/accel.rs:105:21-105:49)
  10: StorageLive(_84)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  11: StorageLive(_85)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  12: StorageLive(_86)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  13: StorageLive(_87)
    SourceInfo(regex-automata/src/dfa/accel.rs:105:46-105:48)
  14: StorageLive(_88)
    SourceInfo(regex-automata/src/dfa/accel.rs:105:51-105:52)
  15: StorageLive(_89)
    SourceInfo(regex-automata/src/dfa/accel.rs:105:51-105:52)
  16: _89 = &_77
    SourceInfo(regex-automata/src/dfa/accel.rs:105:51-105:52)
  17: _88 = &(*_89)
    SourceInfo(regex-automata/src/dfa/accel.rs:105:51-105:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:105:46-105:48)
      kind: _87 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _88) -> [return: bb42, unwind: bb48]
  }
  preds [bb1, bb6]
  succs [bb42, bb48]

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:101:9-101:10)
      kind: falseEdge -> [real: bb7, imaginary: bb4]
  }
  preds [bb1]
  succs [bb4, bb7]

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:102:9-102:10)
      kind: falseEdge -> [real: bb17, imaginary: bb5]
  }
  preds [bb1, bb3]
  succs [bb5, bb17]

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:103:9-103:10)
      kind: falseEdge -> [real: bb28, imaginary: bb6]
  }
  preds [bb1, bb4]
  succs [bb6, bb28]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:104:9-104:10)
      kind: falseEdge -> [real: bb40, imaginary: bb2]
  }
  preds [bb1, bb5]
  succs [bb2, bb40]

bb7
  0: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:53)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:52)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:29-101:34)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:32-101:33)
  4: _11 = const 0_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:101:32-101:33)
  5: _12 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/accel.rs:101:29-101:34)
  6: _13 = Lt(_11, _12)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:29-101:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:101:29-101:34)
      kind: assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> [success: bb8, unwind: bb48]
  }
  preds [bb3]
  succs [bb8, bb48]

bb8
  0: _10 = (*_4)[_11]
    SourceInfo(regex-automata/src/dfa/accel.rs:101:29-101:34)
  1: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:36-101:51)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:36-101:51)
  3: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:45-101:51)
  4: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:37-101:45)
  5: _17 = &(*_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:37-101:45)
  6: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:46-101:50)
  7: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:46-101:48)
  8: _19 = _3
    SourceInfo(regex-automata/src/dfa/accel.rs:101:46-101:48)
  9: _18 = core::ops::RangeFrom::<usize> { start: move _19 }
    SourceInfo(regex-automata/src/dfa/accel.rs:101:46-101:50)
  10: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:49-101:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:101:45-101:51)
      kind: _16 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _17, move _18) -> [return: bb9, unwind: bb48]
  }
  preds [bb7]
  succs [bb9, bb48]

bb9
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:50-101:51)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:50-101:51)
  2: _15 = &(*_16)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:36-101:51)
  3: _14 = &(*_15)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:36-101:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:52)
      kind: _9 = util::memchr::inner::memchr(move _10, move _14) -> [return: bb10, unwind: bb48]
  }
  preds [bb8]
  succs [bb10, bb48]

bb10
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:51-101:52)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:51-101:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:53)
      kind: _8 = <core::option::Option<usize> as core::ops::Try>::branch(move _9) -> [return: bb11, unwind: bb48]
  }
  preds [bb9]
  succs [bb11, bb48]

bb11
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  1: PlaceMention(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:53)
  2: _20 = discriminant(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:53)
      kind: switchInt(move _20) -> [0: bb14, 1: bb13, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb13, bb14]

bb12
  0: FakeRead(ForMatchedPlace(None), _8)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:53)
      kind: unreachable
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
      kind: falseEdge -> [real: bb15, imaginary: bb14]
  }
  preds [bb11]
  succs [bb14, bb15]

bb14
  0: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:53)
  1: _24 = ((_8 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:53)
  2: _5 = _24
    SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:53)
  3: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  4: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  5: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  6: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  7: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
      kind: goto -> bb44
  }
  preds [bb11, bb13]
  succs [bb44]

bb15
  0: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  1: _21 = ((_8 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  2: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  3: _23 = _21
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:101:14-101:53)
      kind: _0 = <core::option::Option<usize> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _23) -> [return: bb16, unwind: bb48]
  }
  preds [bb13]
  succs [bb16, bb48]

bb16
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  2: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  4: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  5: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:101:52-101:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb46
  }
  preds [bb15]
  succs [bb46]

bb17
  0: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:61)
  1: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:60)
  2: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:30-102:35)
  3: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:33-102:34)
  4: _28 = const 0_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:102:33-102:34)
  5: _29 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/accel.rs:102:30-102:35)
  6: _30 = Lt(_28, _29)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:30-102:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:102:30-102:35)
      kind: assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> [success: bb18, unwind: bb48]
  }
  preds [bb4]
  succs [bb18, bb48]

bb18
  0: _27 = (*_4)[_28]
    SourceInfo(regex-automata/src/dfa/accel.rs:102:30-102:35)
  1: StorageLive(_31)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:37-102:42)
  2: StorageLive(_32)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:40-102:41)
  3: _32 = const 1_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:102:40-102:41)
  4: _33 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/accel.rs:102:37-102:42)
  5: _34 = Lt(_32, _33)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:37-102:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:102:37-102:42)
      kind: assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> [success: bb19, unwind: bb48]
  }
  preds [bb17]
  succs [bb19, bb48]

bb19
  0: _31 = (*_4)[_32]
    SourceInfo(regex-automata/src/dfa/accel.rs:102:37-102:42)
  1: StorageLive(_35)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:44-102:59)
  2: StorageLive(_36)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:44-102:59)
  3: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:53-102:59)
  4: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:45-102:53)
  5: _38 = &(*_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:45-102:53)
  6: StorageLive(_39)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:54-102:58)
  7: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:54-102:56)
  8: _40 = _3
    SourceInfo(regex-automata/src/dfa/accel.rs:102:54-102:56)
  9: _39 = core::ops::RangeFrom::<usize> { start: move _40 }
    SourceInfo(regex-automata/src/dfa/accel.rs:102:54-102:58)
  10: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:57-102:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:102:53-102:59)
      kind: _37 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _38, move _39) -> [return: bb20, unwind: bb48]
  }
  preds [bb18]
  succs [bb20, bb48]

bb20
  0: StorageDead(_39)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:58-102:59)
  1: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:58-102:59)
  2: _36 = &(*_37)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:44-102:59)
  3: _35 = &(*_36)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:44-102:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:60)
      kind: _26 = util::memchr::inner::memchr2(move _27, move _31, move _35) -> [return: bb21, unwind: bb48]
  }
  preds [bb19]
  succs [bb21, bb48]

bb21
  0: StorageDead(_35)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:59-102:60)
  1: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:59-102:60)
  2: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:59-102:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:61)
      kind: _25 = <core::option::Option<usize> as core::ops::Try>::branch(move _26) -> [return: bb22, unwind: bb48]
  }
  preds [bb20]
  succs [bb22, bb48]

bb22
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  1: PlaceMention(_25)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:61)
  2: _41 = discriminant(_25)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:61)
      kind: switchInt(move _41) -> [0: bb25, 1: bb24, otherwise: bb23]
  }
  preds [bb21]
  succs [bb23, bb24, bb25]

bb23
  0: FakeRead(ForMatchedPlace(None), _25)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:61)
      kind: unreachable
  }
  preds [bb22]
  succs []

bb24
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
      kind: falseEdge -> [real: bb26, imaginary: bb25]
  }
  preds [bb22]
  succs [bb25, bb26]

bb25
  0: StorageLive(_45)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:61)
  1: _45 = ((_25 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:61)
  2: _5 = _45
    SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:61)
  3: StorageDead(_45)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  4: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  5: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  6: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  7: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  8: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
      kind: goto -> bb44
  }
  preds [bb22, bb24]
  succs [bb44]

bb26
  0: StorageLive(_42)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  1: _42 = ((_25 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  2: StorageLive(_44)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  3: _44 = _42
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:102:14-102:61)
      kind: _0 = <core::option::Option<usize> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _44) -> [return: bb27, unwind: bb48]
  }
  preds [bb24]
  succs [bb27, bb48]

bb27
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  1: StorageDead(_42)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  2: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  3: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  4: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  5: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  6: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/accel.rs:102:60-102:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb46
  }
  preds [bb26]
  succs [bb46]

bb28
  0: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:68)
  1: StorageLive(_47)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:67)
  2: StorageLive(_48)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:30-103:35)
  3: StorageLive(_49)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:33-103:34)
  4: _49 = const 0_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:103:33-103:34)
  5: _50 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/accel.rs:103:30-103:35)
  6: _51 = Lt(_49, _50)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:30-103:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:103:30-103:35)
      kind: assert(move _51, "index out of bounds: the length is {} but the index is {}", move _50, _49) -> [success: bb29, unwind: bb48]
  }
  preds [bb5]
  succs [bb29, bb48]

bb29
  0: _48 = (*_4)[_49]
    SourceInfo(regex-automata/src/dfa/accel.rs:103:30-103:35)
  1: StorageLive(_52)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:37-103:42)
  2: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:40-103:41)
  3: _53 = const 1_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:103:40-103:41)
  4: _54 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/accel.rs:103:37-103:42)
  5: _55 = Lt(_53, _54)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:37-103:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:103:37-103:42)
      kind: assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> [success: bb30, unwind: bb48]
  }
  preds [bb28]
  succs [bb30, bb48]

bb30
  0: _52 = (*_4)[_53]
    SourceInfo(regex-automata/src/dfa/accel.rs:103:37-103:42)
  1: StorageLive(_56)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:44-103:49)
  2: StorageLive(_57)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:47-103:48)
  3: _57 = const 2_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:103:47-103:48)
  4: _58 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/accel.rs:103:44-103:49)
  5: _59 = Lt(_57, _58)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:44-103:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:103:44-103:49)
      kind: assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _57) -> [success: bb31, unwind: bb48]
  }
  preds [bb29]
  succs [bb31, bb48]

bb31
  0: _56 = (*_4)[_57]
    SourceInfo(regex-automata/src/dfa/accel.rs:103:44-103:49)
  1: StorageLive(_60)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:51-103:66)
  2: StorageLive(_61)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:51-103:66)
  3: StorageLive(_62)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:60-103:66)
  4: StorageLive(_63)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:52-103:60)
  5: _63 = &(*_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:52-103:60)
  6: StorageLive(_64)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:61-103:65)
  7: StorageLive(_65)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:61-103:63)
  8: _65 = _3
    SourceInfo(regex-automata/src/dfa/accel.rs:103:61-103:63)
  9: _64 = core::ops::RangeFrom::<usize> { start: move _65 }
    SourceInfo(regex-automata/src/dfa/accel.rs:103:61-103:65)
  10: StorageDead(_65)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:64-103:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:103:60-103:66)
      kind: _62 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _63, move _64) -> [return: bb32, unwind: bb48]
  }
  preds [bb30]
  succs [bb32, bb48]

bb32
  0: StorageDead(_64)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:65-103:66)
  1: StorageDead(_63)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:65-103:66)
  2: _61 = &(*_62)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:51-103:66)
  3: _60 = &(*_61)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:51-103:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:67)
      kind: _47 = util::memchr::inner::memchr3(move _48, move _52, move _56, move _60) -> [return: bb33, unwind: bb48]
  }
  preds [bb31]
  succs [bb33, bb48]

bb33
  0: StorageDead(_60)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:66-103:67)
  1: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:66-103:67)
  2: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:66-103:67)
  3: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:66-103:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:68)
      kind: _46 = <core::option::Option<usize> as core::ops::Try>::branch(move _47) -> [return: bb34, unwind: bb48]
  }
  preds [bb32]
  succs [bb34, bb48]

bb34
  0: StorageDead(_47)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  1: PlaceMention(_46)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:68)
  2: _66 = discriminant(_46)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:68)
      kind: switchInt(move _66) -> [0: bb37, 1: bb36, otherwise: bb35]
  }
  preds [bb33]
  succs [bb35, bb36, bb37]

bb35
  0: FakeRead(ForMatchedPlace(None), _46)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:68)
      kind: unreachable
  }
  preds [bb34]
  succs []

bb36
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
      kind: falseEdge -> [real: bb38, imaginary: bb37]
  }
  preds [bb34]
  succs [bb37, bb38]

bb37
  0: StorageLive(_70)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:68)
  1: _70 = ((_46 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:68)
  2: _5 = _70
    SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:68)
  3: StorageDead(_70)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  4: StorageDead(_62)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  5: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  6: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  7: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  8: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  9: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
      kind: goto -> bb44
  }
  preds [bb34, bb36]
  succs [bb44]

bb38
  0: StorageLive(_67)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  1: _67 = ((_46 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  2: StorageLive(_69)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  3: _69 = _67
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:103:14-103:68)
      kind: _0 = <core::option::Option<usize> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _69) -> [return: bb39, unwind: bb48]
  }
  preds [bb36]
  succs [bb39, bb48]

bb39
  0: StorageDead(_69)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  1: StorageDead(_67)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  2: StorageDead(_62)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  3: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  4: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  5: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  6: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  7: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/accel.rs:103:67-103:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb46
  }
  preds [bb38]
  succs [bb46]

bb40
  0: StorageLive(_72)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
  1: StorageLive(_73)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  2: StorageLive(_74)
    SourceInfo(regex-automata/src/dfa/accel.rs:104:21-104:53)
  3: StorageLive(_75)
    SourceInfo(regex-automata/src/dfa/accel.rs:104:21-104:53)
  4: StorageLive(_76)
    SourceInfo(regex-automata/src/dfa/accel.rs:104:21-104:53)
  5: _76 = [const "cannot find with empty needles"]
    SourceInfo(regex-automata/src/dfa/accel.rs:104:21-104:53)
  6: _75 = &_76
    SourceInfo(regex-automata/src/dfa/accel.rs:104:21-104:53)
  7: _74 = &(*_75)
    SourceInfo(regex-automata/src/dfa/accel.rs:104:21-104:53)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
      kind: _73 = core::fmt::Arguments::<'_>::new_const::<1>(move _74) -> [return: bb41, unwind: bb48]
  }
  preds [bb6]
  succs [bb41, bb48]

bb41
  0: StorageDead(_74)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
      kind: _72 = core::panicking::panic_fmt(move _73) -> bb48
  }
  preds [bb40]
  succs [bb48]

bb42
  0: StorageDead(_88)
    SourceInfo(regex-automata/src/dfa/accel.rs:105:47-105:48)
  1: _86 = [move _87]
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  2: StorageDead(_87)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  3: _85 = &_86
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  4: _84 = &(*_85)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
      kind: _80 = core::fmt::Arguments::<'_>::new_v1::<1, 1>(move _81, move _84) -> [return: bb43, unwind: bb48]
  }
  preds [bb2]
  succs [bb43, bb48]

bb43
  0: StorageDead(_84)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  1: StorageDead(_81)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
      kind: _79 = core::panicking::panic_fmt(move _80) -> bb48
  }
  preds [bb42]
  succs [bb48]

bb44
  0: FakeRead(ForLet(None), _5)
    SourceInfo(regex-automata/src/dfa/accel.rs:100:9-100:10)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:106:6-106:7)
  2: StorageLive(_90)
    SourceInfo(regex-automata/src/dfa/accel.rs:107:10-107:16)
  3: StorageLive(_91)
    SourceInfo(regex-automata/src/dfa/accel.rs:107:10-107:12)
  4: _91 = _3
    SourceInfo(regex-automata/src/dfa/accel.rs:107:10-107:12)
  5: StorageLive(_92)
    SourceInfo(regex-automata/src/dfa/accel.rs:107:15-107:16)
  6: _92 = _5
    SourceInfo(regex-automata/src/dfa/accel.rs:107:15-107:16)
  7: _93 = AddWithOverflow(_91, _92)
    SourceInfo(regex-automata/src/dfa/accel.rs:107:10-107:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:107:10-107:16)
      kind: assert(!move (_93.1: bool), "attempt to compute `{} + {}`, which would overflow", move _91, move _92) -> [success: bb45, unwind: bb48]
  }
  preds [bb14, bb25, bb37]
  succs [bb45, bb48]

bb45
  0: _90 = move (_93.0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:107:10-107:16)
  1: StorageDead(_92)
    SourceInfo(regex-automata/src/dfa/accel.rs:107:15-107:16)
  2: StorageDead(_91)
    SourceInfo(regex-automata/src/dfa/accel.rs:107:15-107:16)
  3: _0 = core::option::Option::<usize>::Some(move _90)
    SourceInfo(regex-automata/src/dfa/accel.rs:107:5-107:17)
  4: StorageDead(_90)
    SourceInfo(regex-automata/src/dfa/accel.rs:107:16-107:17)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:108:1-108:2)
  6: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:108:1-108:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:108:2-108:2)
      kind: goto -> bb47
  }
  preds [bb44]
  succs [bb47]

bb46
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:106:6-106:7)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:108:1-108:2)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:108:1-108:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:108:2-108:2)
      kind: goto -> bb47
  }
  preds [bb16, bb27, bb39]
  succs [bb47]

bb47
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:108:2-108:2)
      kind: return
  }
  preds [bb45, bb46]
  succs []

bb48
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:94:1-108:2)
      kind: resume
  }
  preds [bb0, bb2, bb7, bb8, bb9, bb10, bb15, bb17, bb18, bb19, bb20, bb21, bb26, bb28, bb29, bb30, bb31, bb32, bb33, bb38, bb40, bb41, bb42, bb43, bb44]
  succs []

