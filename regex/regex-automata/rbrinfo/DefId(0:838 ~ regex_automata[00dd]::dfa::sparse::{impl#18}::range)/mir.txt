bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:10-2308:34)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:28-2308:33)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:28-2308:29)
  3: _5 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:28-2308:29)
  4: _6 = MulWithOverflow(_5, const 2_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:28-2308:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2308:28-2308:33)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _5, const 2_usize) -> [success: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: _4 = move (_6.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:28-2308:33)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:32-2308:33)
  2: _7 = Len((*((*_1).3: &[u8])))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:10-2308:34)
  3: _8 = Lt(_4, _7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:10-2308:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2308:10-2308:34)
      kind: assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _4) -> [success: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _3 = (*((*_1).3: &[u8]))[_4]
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:10-2308:34)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:36-2308:64)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:54-2308:63)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:54-2308:59)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:54-2308:55)
  5: _12 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:54-2308:55)
  6: _13 = MulWithOverflow(_12, const 2_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:54-2308:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2308:54-2308:59)
      kind: assert(!move (_13.1: bool), "attempt to compute `{} * {}`, which would overflow", move _12, const 2_usize) -> [success: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: _11 = move (_13.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:54-2308:59)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:58-2308:59)
  2: _14 = AddWithOverflow(_11, const 1_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:54-2308:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2308:54-2308:63)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: _10 = move (_14.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:54-2308:63)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:62-2308:63)
  2: _15 = Len((*((*_1).3: &[u8])))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:36-2308:64)
  3: _16 = Lt(_10, _15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:36-2308:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2308:36-2308:64)
      kind: assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _10) -> [success: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: _9 = (*((*_1).3: &[u8]))[_10]
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:36-2308:64)
  1: _0 = (move _3, move _9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:9-2308:65)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:64-2308:65)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2308:64-2308:65)
  4: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2309:5-2309:6)
  5: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2309:5-2309:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2309:6-2309:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2307:5-2309:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

