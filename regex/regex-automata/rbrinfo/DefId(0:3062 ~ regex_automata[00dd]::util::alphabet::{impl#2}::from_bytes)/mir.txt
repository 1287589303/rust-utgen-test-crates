bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:61)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:61)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:60)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:31-244:36)
  4: _5 = &(*_1)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:31-244:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:60)
      kind: _4 = util::wire::check_slice_len::<u8>(move _5, const 256_usize, const "byte class map") -> [return: bb1, unwind: bb38]
  }
  preds []
  succs [bb1, bb38]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:59-244:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:61)
      kind: _3 = <core::result::Result<(), util::wire::DeserializeError> as core::ops::Try>::branch(move _4) -> [return: bb2, unwind: bb38]
  }
  preds [bb0]
  succs [bb2, bb38]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:60-244:61)
  1: PlaceMention(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:61)
  2: _6 = discriminant(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:61)
      kind: switchInt(move _6) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _3)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:61)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:244:60-244:61)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:61)
  1: _10 = ((_3 as Continue).0: ())
    SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:61)
  2: _2 = _10
    SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:61)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:60-244:61)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:61-244:62)
  5: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:61-244:62)
  6: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:245:13-245:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:245:27-245:47)
      kind: _11 = util::alphabet::ByteClasses::empty() -> [return: bb8, unwind: bb38]
  }
  preds [bb2, bb4]
  succs [bb8, bb38]

bb6
  0: StorageLive(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:60-244:61)
  1: _7 = move ((_3 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:60-244:61)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:60-244:61)
  3: _9 = move _7
    SourceInfo(regex-automata/src/util/alphabet.rs:244:60-244:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:244:9-244:61)
      kind: _0 = <core::result::Result<(util::alphabet::ByteClasses, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _9) -> [return: bb7, unwind: bb38]
  }
  preds [bb4]
  succs [bb7, bb38]

bb7
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:60-244:61)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:60-244:61)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:61-244:62)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:244:61-244:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb37
  }
  preds [bb6]
  succs [bb37]

bb8
  0: FakeRead(ForLet(None), _11)
    SourceInfo(regex-automata/src/util/alphabet.rs:245:13-245:24)
  1: StorageLive(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:9-248:10)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  4: StorageLive(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:47)
  5: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:40)
  6: StorageLive(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:33-246:40)
  7: StorageLive(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:33)
  8: _18 = &(*_1)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:33)
  9: StorageLive(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:34-246:39)
  10: _19 = core::ops::RangeTo::<usize> { end: const 256_usize }
    SourceInfo(regex-automata/src/util/alphabet.rs:246:34-246:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:246:33-246:40)
      kind: _17 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _18, move _19) -> [return: bb9, unwind: bb38]
  }
  preds [bb5]
  succs [bb9, bb38]

bb9
  0: _16 = &(*_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:40)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:39-246:40)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:39-246:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:47)
      kind: _15 = core::slice::<impl [u8]>::iter(move _16) -> [return: bb10, unwind: bb38]
  }
  preds [bb8]
  succs [bb10, bb38]

bb10
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:46-246:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
      kind: _14 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::enumerate(move _15) -> [return: bb11, unwind: bb38]
  }
  preds [bb9]
  succs [bb11, bb38]

bb11
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:58-246:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
      kind: _13 = <core::iter::Enumerate<core::slice::Iter<'_, u8>> as core::iter::IntoIterator>::into_iter(move _14) -> [return: bb12, unwind: bb38]
  }
  preds [bb10]
  succs [bb12, bb38]

bb12
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:58-246:59)
  1: PlaceMention(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  2: StorageLive(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  3: _20 = move _13
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:246:9-248:10)
      kind: goto -> bb13
  }
  preds [bb11]
  succs [bb13]

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:246:9-248:10)
      kind: falseUnwind -> [real: bb14, unwind: bb38]
  }
  preds [bb12, bb22]
  succs [bb14, bb38]

bb14
  0: StorageLive(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  1: StorageLive(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  2: StorageLive(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  3: StorageLive(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  4: _25 = &mut _20
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  5: _24 = &mut (*_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
      kind: _23 = <core::iter::Enumerate<core::slice::Iter<'_, u8>> as core::iter::Iterator>::next(move _24) -> [return: bb15, unwind: bb38]
  }
  preds [bb13]
  succs [bb15, bb38]

bb15
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:58-246:59)
  1: PlaceMention(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  2: _26 = discriminant(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
      kind: switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb16]
  }
  preds [bb14]
  succs [bb16, bb17, bb18]

bb16
  0: FakeRead(ForMatchedPlace(None), _23)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:246:28-246:59)
      kind: unreachable
  }
  preds [bb15]
  succs []

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:246:9-248:10)
      kind: falseEdge -> [real: bb19, imaginary: bb18]
  }
  preds [bb15]
  succs [bb18, bb19]

bb18
  0: StorageLive(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:14-246:15)
  1: _28 = (((_23 as Some).0: (usize, &u8)).0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:14-246:15)
  2: StorageLive(_29)
    SourceInfo(regex-automata/src/util/alphabet.rs:246:18-246:23)
  3: _29 = (*(((_23 as Some).0: (usize, &u8)).1: &u8))
    SourceInfo(regex-automata/src/util/alphabet.rs:246:18-246:23)
  4: StorageLive(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:247:13-247:57)
  5: StorageLive(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:247:13-247:20)
  6: _31 = &mut _11
    SourceInfo(regex-automata/src/util/alphabet.rs:247:13-247:20)
  7: StorageLive(_32)
    SourceInfo(regex-automata/src/util/alphabet.rs:247:25-247:49)
  8: StorageLive(_33)
    SourceInfo(regex-automata/src/util/alphabet.rs:247:25-247:40)
  9: StorageLive(_34)
    SourceInfo(regex-automata/src/util/alphabet.rs:247:38-247:39)
  10: _34 = _28
    SourceInfo(regex-automata/src/util/alphabet.rs:247:38-247:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:247:25-247:40)
      kind: _33 = <u8 as core::convert::TryFrom<usize>>::try_from(move _34) -> [return: bb20, unwind: bb38]
  }
  preds [bb15, bb17]
  succs [bb20, bb38]

bb19
  0: _12 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:246:9-248:10)
  1: StorageDead(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:248:9-248:10)
  2: StorageDead(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:248:9-248:10)
  3: StorageDead(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:248:9-248:10)
  4: StorageDead(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:248:9-248:10)
  5: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:248:9-248:10)
  6: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:248:9-248:10)
  7: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:248:9-248:10)
  8: StorageLive(_36)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:9-258:10)
  9: StorageLive(_37)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  10: StorageLive(_38)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  11: StorageLive(_39)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:28)
  12: StorageLive(_40)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:28)
  13: _40 = &(_11.0: [u8; 256])
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:28)
  14: _39 = move _40 as &[u8] (PointerCoercion(Unsize))
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:28)
  15: StorageDead(_40)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:27-252:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
      kind: _38 = core::slice::<impl [u8]>::iter(move _39) -> [return: bb23, unwind: bb38]
  }
  preds [bb17]
  succs [bb23, bb38]

bb20
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/util/alphabet.rs:247:39-247:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:247:25-247:49)
      kind: _32 = core::result::Result::<u8, core::num::TryFromIntError>::unwrap(move _33) -> [return: bb21, unwind: bb38]
  }
  preds [bb18]
  succs [bb21, bb38]

bb21
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/util/alphabet.rs:247:48-247:49)
  1: StorageLive(_35)
    SourceInfo(regex-automata/src/util/alphabet.rs:247:51-247:56)
  2: _35 = _29
    SourceInfo(regex-automata/src/util/alphabet.rs:247:51-247:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:247:13-247:57)
      kind: _30 = util::alphabet::ByteClasses::set(move _31, move _32, move _35) -> [return: bb22, unwind: bb38]
  }
  preds [bb20]
  succs [bb22, bb38]

bb22
  0: StorageDead(_35)
    SourceInfo(regex-automata/src/util/alphabet.rs:247:56-247:57)
  1: StorageDead(_32)
    SourceInfo(regex-automata/src/util/alphabet.rs:247:56-247:57)
  2: StorageDead(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:247:56-247:57)
  3: StorageDead(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:247:57-247:58)
  4: _22 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:246:60-248:10)
  5: StorageDead(_29)
    SourceInfo(regex-automata/src/util/alphabet.rs:248:9-248:10)
  6: StorageDead(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:248:9-248:10)
  7: StorageDead(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:248:9-248:10)
  8: StorageDead(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:248:9-248:10)
  9: StorageDead(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:248:9-248:10)
  10: _21 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:246:9-248:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:246:9-248:10)
      kind: goto -> bb13
  }
  preds [bb21]
  succs [bb13]

bb23
  0: StorageDead(_39)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:34-252:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
      kind: _37 = <core::slice::Iter<'_, u8> as core::iter::IntoIterator>::into_iter(move _38) -> [return: bb24, unwind: bb38]
  }
  preds [bb19]
  succs [bb24, bb38]

bb24
  0: StorageDead(_38)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:34-252:35)
  1: PlaceMention(_37)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  2: StorageLive(_41)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  3: _41 = move _37
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:252:9-258:10)
      kind: goto -> bb25
  }
  preds [bb23]
  succs [bb25]

bb25
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:252:9-258:10)
      kind: falseUnwind -> [real: bb26, unwind: bb38]
  }
  preds [bb24, bb36]
  succs [bb26, bb38]

bb26
  0: StorageLive(_42)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  1: StorageLive(_43)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  2: StorageLive(_44)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  3: StorageLive(_45)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  4: _45 = &mut _41
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  5: _44 = &mut (*_45)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
      kind: _43 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::next(move _44) -> [return: bb27, unwind: bb38]
  }
  preds [bb25]
  succs [bb27, bb38]

bb27
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:34-252:35)
  1: PlaceMention(_43)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  2: _46 = discriminant(_43)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
      kind: switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb28]
  }
  preds [bb26]
  succs [bb28, bb29, bb30]

bb28
  0: FakeRead(ForMatchedPlace(None), _43)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:252:19-252:35)
      kind: unreachable
  }
  preds [bb27]
  succs []

bb29
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:252:9-258:10)
      kind: falseEdge -> [real: bb31, imaginary: bb30]
  }
  preds [bb27]
  succs [bb30, bb31]

bb30
  0: StorageLive(_48)
    SourceInfo(regex-automata/src/util/alphabet.rs:252:14-252:15)
  1: _48 = (*((_43 as Some).0: &u8))
    SourceInfo(regex-automata/src/util/alphabet.rs:252:14-252:15)
  2: StorageLive(_49)
    SourceInfo(regex-automata/src/util/alphabet.rs:253:16-253:56)
  3: StorageLive(_50)
    SourceInfo(regex-automata/src/util/alphabet.rs:253:16-253:30)
  4: StorageLive(_51)
    SourceInfo(regex-automata/src/util/alphabet.rs:253:28-253:29)
  5: _51 = _48
    SourceInfo(regex-automata/src/util/alphabet.rs:253:28-253:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:253:16-253:30)
      kind: _50 = <usize as core::convert::From<u8>>::from(move _51) -> [return: bb32, unwind: bb38]
  }
  preds [bb27, bb29]
  succs [bb32, bb38]

bb31
  0: _36 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:252:9-258:10)
  1: StorageDead(_45)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  2: StorageDead(_43)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  3: StorageDead(_42)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  4: StorageDead(_41)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  5: StorageDead(_37)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  6: StorageDead(_36)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  7: StorageLive(_56)
    SourceInfo(regex-automata/src/util/alphabet.rs:259:12-259:26)
  8: StorageLive(_57)
    SourceInfo(regex-automata/src/util/alphabet.rs:259:13-259:20)
  9: _57 = _11
    SourceInfo(regex-automata/src/util/alphabet.rs:259:13-259:20)
  10: _56 = (move _57, const 256_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:259:12-259:26)
  11: StorageDead(_57)
    SourceInfo(regex-automata/src/util/alphabet.rs:259:25-259:26)
  12: _0 = core::result::Result::<(util::alphabet::ByteClasses, usize), util::wire::DeserializeError>::Ok(move _56)
    SourceInfo(regex-automata/src/util/alphabet.rs:259:9-259:27)
  13: StorageDead(_56)
    SourceInfo(regex-automata/src/util/alphabet.rs:259:26-259:27)
  14: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:260:5-260:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:260:6-260:6)
      kind: goto -> bb37
  }
  preds [bb29]
  succs [bb37]

bb32
  0: StorageDead(_51)
    SourceInfo(regex-automata/src/util/alphabet.rs:253:29-253:30)
  1: StorageLive(_52)
    SourceInfo(regex-automata/src/util/alphabet.rs:253:34-253:56)
  2: StorageLive(_53)
    SourceInfo(regex-automata/src/util/alphabet.rs:253:34-253:41)
  3: _53 = &_11
    SourceInfo(regex-automata/src/util/alphabet.rs:253:34-253:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:253:34-253:56)
      kind: _52 = util::alphabet::ByteClasses::alphabet_len(move _53) -> [return: bb33, unwind: bb38]
  }
  preds [bb30]
  succs [bb33, bb38]

bb33
  0: StorageDead(_53)
    SourceInfo(regex-automata/src/util/alphabet.rs:253:55-253:56)
  1: _49 = Ge(move _50, move _52)
    SourceInfo(regex-automata/src/util/alphabet.rs:253:16-253:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:253:16-253:56)
      kind: switchInt(move _49) -> [0: bb36, otherwise: bb34]
  }
  preds [bb32]
  succs [bb34, bb36]

bb34
  0: StorageDead(_52)
    SourceInfo(regex-automata/src/util/alphabet.rs:253:55-253:56)
  1: StorageDead(_50)
    SourceInfo(regex-automata/src/util/alphabet.rs:253:55-253:56)
  2: StorageLive(_55)
    SourceInfo(regex-automata/src/util/alphabet.rs:254:28-256:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:254:28-256:18)
      kind: _55 = util::wire::DeserializeError::generic(const "found equivalence class greater than alphabet len") -> [return: bb35, unwind: bb38]
  }
  preds [bb33]
  succs [bb35, bb38]

bb35
  0: _0 = core::result::Result::<(util::alphabet::ByteClasses, usize), util::wire::DeserializeError>::Err(move _55)
    SourceInfo(regex-automata/src/util/alphabet.rs:254:24-256:19)
  1: StorageDead(_55)
    SourceInfo(regex-automata/src/util/alphabet.rs:256:18-256:19)
  2: StorageDead(_49)
    SourceInfo(regex-automata/src/util/alphabet.rs:257:13-257:14)
  3: StorageDead(_48)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  4: StorageDead(_45)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  5: StorageDead(_43)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  6: StorageDead(_42)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  7: StorageDead(_41)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  8: StorageDead(_37)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  9: StorageDead(_36)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  10: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:260:5-260:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb37
  }
  preds [bb34]
  succs [bb37]

bb36
  0: StorageDead(_52)
    SourceInfo(regex-automata/src/util/alphabet.rs:253:55-253:56)
  1: StorageDead(_50)
    SourceInfo(regex-automata/src/util/alphabet.rs:253:55-253:56)
  2: _42 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:257:14-257:14)
  3: StorageDead(_49)
    SourceInfo(regex-automata/src/util/alphabet.rs:257:13-257:14)
  4: StorageDead(_48)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  5: StorageDead(_45)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  6: StorageDead(_43)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  7: StorageDead(_42)
    SourceInfo(regex-automata/src/util/alphabet.rs:258:9-258:10)
  8: _21 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:252:9-258:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:252:9-258:10)
      kind: goto -> bb25
  }
  preds [bb33]
  succs [bb25]

bb37
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:260:6-260:6)
      kind: return
  }
  preds [bb7, bb31, bb35]
  succs []

bb38
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:241:5-260:6)
      kind: resume
  }
  preds [bb0, bb1, bb5, bb6, bb8, bb9, bb10, bb11, bb13, bb14, bb18, bb19, bb20, bb21, bb23, bb25, bb26, bb30, bb32, bb34]
  succs []

