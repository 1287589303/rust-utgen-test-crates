{
  "regex-automata/src/util/look.rs:806:12:806:46": [
    {
      "Bool": {
        "Other": "set.contains(Look::WordEndUnicode)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:762:17:762:49": [
    {
      "Bool": {
        "Other": "self.is_start_crlf(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:742:17:742:44": [
    {
      "Bool": {
        "Other": "self.is_start(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:741:12:741:37": [
    {
      "Bool": {
        "Other": "set.contains(Look::Start)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:751:12:751:39": [
    {
      "Bool": {
        "Other": "set.contains(Look::StartLF)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:826:12:826:50": [
    {
      "Bool": {
        "Other": "set.contains(Look::WordEndHalfUnicode)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:791:12:791:46": [
    {
      "Bool": {
        "Other": "set.contains(Look::WordStartAscii)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:797:17:797:53": [
    {
      "Bool": {
        "Other": "self.is_word_end_ascii(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:777:17:777:56": [
    {
      "Bool": {
        "Other": "self.is_word_ascii_negate(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:752:17:752:47": [
    {
      "Bool": {
        "Other": "self.is_start_lf(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:801:12:801:48": [
    {
      "Bool": {
        "Other": "set.contains(Look::WordStartUnicode)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:816:12:816:48": [
    {
      "Bool": {
        "Other": "set.contains(Look::WordEndHalfAscii)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:822:17:822:71": [
    {
      "Bool": {
        "Other": "self.is_word_start_half_unicode(haystack, at).unwrap()"
      }
    }
  ],
  "regex-automata/src/util/look.rs:817:17:817:58": [
    {
      "Bool": {
        "Other": "self.is_word_end_half_ascii(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:792:17:792:55": [
    {
      "Bool": {
        "Other": "self.is_word_start_ascii(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:821:12:821:52": [
    {
      "Bool": {
        "Other": "set.contains(Look::WordStartHalfUnicode)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:767:17:767:47": [
    {
      "Bool": {
        "Other": "self.is_end_crlf(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:772:17:772:49": [
    {
      "Bool": {
        "Other": "self.is_word_ascii(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:776:12:776:47": [
    {
      "Bool": {
        "Other": "set.contains(Look::WordAsciiNegate)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:811:12:811:50": [
    {
      "Bool": {
        "Other": "set.contains(Look::WordStartHalfAscii)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:807:17:807:64": [
    {
      "Bool": {
        "Other": "self.is_word_end_unicode(haystack, at).unwrap()"
      }
    }
  ],
  "regex-automata/src/util/look.rs:787:17:787:67": [
    {
      "Bool": {
        "Other": "self.is_word_unicode_negate(haystack, at).unwrap()"
      }
    }
  ],
  "regex-automata/src/util/look.rs:766:12:766:39": [
    {
      "Bool": {
        "Other": "set.contains(Look::EndCRLF)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:812:17:812:60": [
    {
      "Bool": {
        "Other": "self.is_word_start_half_ascii(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:781:12:781:43": [
    {
      "Bool": {
        "Other": "set.contains(Look::WordUnicode)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:796:12:796:44": [
    {
      "Bool": {
        "Other": "set.contains(Look::WordEndAscii)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:761:12:761:41": [
    {
      "Bool": {
        "Other": "set.contains(Look::StartCRLF)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:756:12:756:37": [
    {
      "Bool": {
        "Other": "set.contains(Look::EndLF)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:771:12:771:41": [
    {
      "Bool": {
        "Other": "set.contains(Look::WordAscii)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:746:12:746:35": [
    {
      "Bool": {
        "Other": "set.contains(Look::End)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:802:17:802:66": [
    {
      "Bool": {
        "Other": "self.is_word_start_unicode(haystack, at).unwrap()"
      }
    }
  ],
  "regex-automata/src/util/look.rs:747:17:747:42": [
    {
      "Bool": {
        "Other": "self.is_end(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:757:17:757:45": [
    {
      "Bool": {
        "Other": "self.is_end_lf(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:827:17:827:69": [
    {
      "Bool": {
        "Other": "self.is_word_end_half_unicode(haystack, at).unwrap()"
      }
    }
  ],
  "regex-automata/src/util/look.rs:782:17:782:60": [
    {
      "Bool": {
        "Other": "self.is_word_unicode(haystack, at).unwrap()"
      }
    }
  ],
  "regex-automata/src/util/look.rs:786:12:786:49": [
    {
      "Bool": {
        "Other": "set.contains(Look::WordUnicodeNegate)"
      }
    }
  ]
}