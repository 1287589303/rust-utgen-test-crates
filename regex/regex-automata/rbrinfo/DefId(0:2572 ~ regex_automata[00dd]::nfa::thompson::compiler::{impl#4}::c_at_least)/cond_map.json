{
  "regex-automata/src/nfa/thompson/compiler.rs:1289:47:1289:52": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "n - 1",
          "lhs": "n",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1280:25:1284:15": [
    {
      "Try": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1239:16:1239:76": [
    {
      "Bool": {
        "Other": "expr.properties().minimum_len().map_or(false, |len| len > 0)"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1285:13:1285:45": [
    {
      "Try": "self.patch(compiled.end, union)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1265:13:1265:44": [
    {
      "Try": "self.patch(compiled.end, plus)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1296:13:1296:48": [
    {
      "Try": "self.patch(prefix.end, last.start)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1266:13:1266:46": [
    {
      "Try": "self.patch(plus, compiled.start)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1260:27:1260:33": [
    {
      "Bool": {
        "Other": "greedy"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1268:28:1272:15": [
    {
      "Try": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1274:13:1274:50": [
    {
      "Try": "self.patch(question, compiled.start)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1289:26:1289:54": [
    {
      "Try": "self.c_exactly(expr, n - 1)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1245:32:1245:45": [
    {
      "Try": "self.c(expr)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1297:13:1297:41": [
    {
      "Try": "self.patch(last.end, union)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1291:28:1291:34": [
    {
      "Bool": {
        "Other": "greedy"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1275:13:1275:41": [
    {
      "Try": "self.patch(question, empty)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1280:28:1280:34": [
    {
      "Bool": {
        "Other": "greedy"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1260:24:1264:15": [
    {
      "Try": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1259:28:1259:41": [
    {
      "Try": "self.c(expr)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1268:31:1268:37": [
    {
      "Bool": {
        "Other": "greedy"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1247:17:1247:49": [
    {
      "Try": "self.patch(compiled.end, union)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1273:25:1273:42": [
    {
      "Try": "self.add_empty()?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1240:29:1244:19": [
    {
      "Try": "if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1290:24:1290:37": [
    {
      "Try": "self.c(expr)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1279:28:1279:41": [
    {
      "Try": "self.c(expr)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1291:25:1295:15": [
    {
      "Try": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1234:12:1234:18": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "n == 0",
          "lhs": "n",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1240:32:1240:38": [
    {
      "Bool": {
        "Other": "greedy"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1278:19:1278:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "n == 1",
          "lhs": "n",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1286:13:1286:47": [
    {
      "Try": "self.patch(union, compiled.start)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1298:13:1298:43": [
    {
      "Try": "self.patch(union, last.start)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1246:17:1246:51": [
    {
      "Try": "self.patch(union, compiled.start)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1276:13:1276:37": [
    {
      "Try": "self.patch(plus, empty)?"
    }
  ]
}