bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:723:13-723:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:723:27-723:47)
      kind: _2 = util::alphabet::ByteClasses::empty() -> [return: bb1, unwind: bb15]
  }
  preds []
  succs [bb1, bb15]

bb1
  0: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/util/alphabet.rs:723:13-723:24)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:724:13-724:22)
  2: _3 = const 0_u8
    SourceInfo(regex-automata/src/util/alphabet.rs:724:25-724:28)
  3: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/util/alphabet.rs:724:13-724:22)
  4: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:725:13-725:18)
  5: _4 = const 0_u8
    SourceInfo(regex-automata/src/util/alphabet.rs:725:21-725:24)
  6: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/alphabet.rs:725:13-725:18)
  7: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:726:9-735:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:726:9-735:10)
      kind: goto -> bb2
  }
  preds [bb0]
  succs [bb2]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:726:9-735:10)
      kind: falseUnwind -> [real: bb3, unwind: bb15]
  }
  preds [bb1, bb14]
  succs [bb3, bb15]

bb3
  0: StorageLive(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:727:13-727:34)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:727:13-727:20)
  2: _8 = &mut _2
    SourceInfo(regex-automata/src/util/alphabet.rs:727:13-727:20)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:727:25-727:26)
  4: _9 = _4
    SourceInfo(regex-automata/src/util/alphabet.rs:727:25-727:26)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:727:28-727:33)
  6: _10 = _3
    SourceInfo(regex-automata/src/util/alphabet.rs:727:28-727:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:727:13-727:34)
      kind: _7 = util::alphabet::ByteClasses::set(move _8, move _9, move _10) -> [return: bb4, unwind: bb15]
  }
  preds [bb2]
  succs [bb4, bb15]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:727:33-727:34)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:727:33-727:34)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:727:33-727:34)
  3: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:727:34-727:35)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:728:13-730:14)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:728:16-728:24)
  6: StorageLive(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:728:16-728:17)
  7: _13 = _4
    SourceInfo(regex-automata/src/util/alphabet.rs:728:16-728:17)
  8: _12 = Eq(move _13, const u8::MAX)
    SourceInfo(regex-automata/src/util/alphabet.rs:728:16-728:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:728:16-728:24)
      kind: switchInt(move _12) -> [0: bb6, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:728:23-728:24)
  1: _5 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:729:17-729:22)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:730:13-730:14)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:730:13-730:14)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:735:9-735:10)
  5: _0 = _2
    SourceInfo(regex-automata/src/util/alphabet.rs:736:9-736:16)
  6: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:737:5-737:6)
  7: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:737:5-737:6)
  8: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:737:5-737:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:737:6-737:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:728:23-728:24)
  1: _11 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:730:14-730:14)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:730:13-730:14)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:730:13-730:14)
  4: StorageLive(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:731:13-733:14)
  5: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:731:16-731:34)
  6: StorageLive(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:731:16-731:22)
  7: _17 = &((*_1).0: util::alphabet::ByteSet)
    SourceInfo(regex-automata/src/util/alphabet.rs:731:16-731:22)
  8: StorageLive(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:731:32-731:33)
  9: _18 = _4
    SourceInfo(regex-automata/src/util/alphabet.rs:731:32-731:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:731:16-731:34)
      kind: _16 = util::alphabet::ByteSet::contains(move _17, move _18) -> [return: bb7, unwind: bb15]
  }
  preds [bb4]
  succs [bb7, bb15]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:731:16-731:34)
      kind: switchInt(move _16) -> [0: bb11, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb11]

bb8
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:731:33-731:34)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:731:33-731:34)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:732:25-732:54)
  3: StorageLive(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:732:25-732:45)
  4: StorageLive(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:732:25-732:30)
  5: _21 = _3
    SourceInfo(regex-automata/src/util/alphabet.rs:732:25-732:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:732:25-732:45)
      kind: _20 = core::num::<impl u8>::checked_add(move _21, const 1_u8) -> [return: bb9, unwind: bb15]
  }
  preds [bb7]
  succs [bb9, bb15]

bb9
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:732:44-732:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:732:25-732:54)
      kind: _19 = core::option::Option::<u8>::unwrap(move _20) -> [return: bb10, unwind: bb15]
  }
  preds [bb8]
  succs [bb10, bb15]

bb10
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:732:53-732:54)
  1: _3 = move _19
    SourceInfo(regex-automata/src/util/alphabet.rs:732:17-732:54)
  2: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:732:53-732:54)
  3: _15 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:731:35-733:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:731:13-733:14)
      kind: goto -> bb12
  }
  preds [bb9]
  succs [bb12]

bb11
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:731:33-731:34)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:731:33-731:34)
  2: _15 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:733:14-733:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:731:13-733:14)
      kind: goto -> bb12
  }
  preds [bb7]
  succs [bb12]

bb12
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:733:13-733:14)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:733:13-733:14)
  2: StorageLive(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:734:17-734:42)
  3: StorageLive(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:734:17-734:33)
  4: StorageLive(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:734:17-734:18)
  5: _24 = _4
    SourceInfo(regex-automata/src/util/alphabet.rs:734:17-734:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:734:17-734:33)
      kind: _23 = core::num::<impl u8>::checked_add(move _24, const 1_u8) -> [return: bb13, unwind: bb15]
  }
  preds [bb10, bb11]
  succs [bb13, bb15]

bb13
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:734:32-734:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:734:17-734:42)
      kind: _22 = core::option::Option::<u8>::unwrap(move _23) -> [return: bb14, unwind: bb15]
  }
  preds [bb12]
  succs [bb14, bb15]

bb14
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:734:41-734:42)
  1: _4 = move _22
    SourceInfo(regex-automata/src/util/alphabet.rs:734:13-734:42)
  2: StorageDead(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:734:41-734:42)
  3: _6 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:726:14-735:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:726:9-735:10)
      kind: goto -> bb2
  }
  preds [bb13]
  succs [bb2]

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:722:5-737:6)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb6, bb8, bb9, bb12, bb13]
  succs []

