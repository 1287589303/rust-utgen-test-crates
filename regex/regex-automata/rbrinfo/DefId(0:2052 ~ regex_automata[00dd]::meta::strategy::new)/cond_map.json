{
  "regex-automata/src/meta/strategy.rs:163:18:163:44": [
    {
      "Match": {
        "match_source": "regex-automata/src/meta/strategy.rs:163:18:163:44",
        "match_str": "ReverseAnchored::new(core)",
        "match_kind": {
          "Enum": [
            "Ok",
            "Err"
          ]
        },
        "arms": {
          "regex-automata/src/meta/strategy.rs:164:9:164:18": {
            "pat": {
              "pat_str": "Err(core)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:164:22:164:26"
          },
          "regex-automata/src/meta/strategy.rs:165:9:165:15": {
            "pat": {
              "pat_str": "Ok(ra)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:165:19:168:10"
          }
        }
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:110:15:110:49": [
    {
      "Bool": {
        "Other": "info.config().get_auto_prefilter()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:85:18:85:49": [
    {
      "Bool": {
        "Other": "info.is_always_anchored_start()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:177:18:177:47": [
    {
      "Match": {
        "match_source": "regex-automata/src/meta/strategy.rs:177:18:177:47",
        "match_str": "ReverseInner::new(core, hirs)",
        "match_kind": {
          "Enum": [
            "Ok",
            "Err"
          ]
        },
        "arms": {
          "regex-automata/src/meta/strategy.rs:178:9:178:18": {
            "pat": {
              "pat_str": "Err(core)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:178:22:178:26"
          },
          "regex-automata/src/meta/strategy.rs:179:9:179:15": {
            "pat": {
              "pat_str": "Ok(ri)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:179:19:182:10"
          }
        }
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:170:18:170:48": [
    {
      "Match": {
        "match_source": "regex-automata/src/meta/strategy.rs:170:18:170:48",
        "match_str": "ReverseSuffix::new(core, hirs)",
        "match_kind": {
          "Enum": [
            "Ok",
            "Err"
          ]
        },
        "arms": {
          "regex-automata/src/meta/strategy.rs:171:9:171:18": {
            "pat": {
              "pat_str": "Err(core)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:171:22:171:26"
          },
          "regex-automata/src/meta/strategy.rs:172:9:172:15": {
            "pat": {
              "pat_str": "Ok(rs)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:172:19:175:10"
          }
        }
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:153:20:153:63": [
    {
      "Try": "Core::new(info.clone(), pre.clone(), hirs)?"
    }
  ],
  "regex-automata/src/meta/strategy.rs:105:15:105:60": [
    {
      "Bool": {
        "Other": "let Some(pre) = info.config().get_prefilter()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:115:12:115:63": [
    {
      "Bool": {
        "Other": "let Some(pre) = Pre::from_prefixes(info, &prefixes)"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:134:12:134:70": [
    {
      "Bool": {
        "Other": "let Some(pre) = Pre::from_alternation_literals(info, hirs)"
      }
    }
  ]
}