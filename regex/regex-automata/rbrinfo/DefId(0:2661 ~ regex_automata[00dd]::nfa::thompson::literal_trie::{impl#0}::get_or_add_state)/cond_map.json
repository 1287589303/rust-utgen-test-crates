{
  "regex-automata/src/nfa/thompson/literal_trie.rs:134:28:136:20": [
    {
      "Try": "StateID::new(self.states.len()).map_err(|_| {\n                    BuildError::too_many_states(self.states.len())\n                })?"
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:130:15:130:61": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/literal_trie.rs:130:15:130:61",
        "match_str": "active.binary_search_by_key(&byte, |t| t.byte)",
        "match_kind": {
          "Enum": [
            "Ok",
            "Err"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/literal_trie.rs:131:13:131:18": {
            "pat": {
              "pat_str": "Ok(i)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/literal_trie.rs:131:22:131:40"
          },
          "regex-automata/src/nfa/thompson/literal_trie.rs:132:13:132:19": {
            "pat": {
              "pat_str": "Err(i)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/literal_trie.rs:132:23:144:14"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:140:25:140:67": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.states[from].active_chunk_start() + i",
          "lhs": "self.states[from].active_chunk_start()",
          "rhs": "i",
          "cmp_with_int": false
        }
      }
    }
  ]
}