bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:32)
  3: _5 = &(*_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
      kind: _4 = util::alphabet::ByteSet::iter_ranges(move _5) -> [return: bb1, unwind: bb11]
  }
  preds []
  succs [bb1, bb11]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:45-714:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
      kind: _3 = <util::alphabet::ByteSetRangeIter<'_> as core::iter::IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb11]
  }
  preds [bb0]
  succs [bb2, bb11]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:45-714:46)
  1: PlaceMention(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  3: _6 = move _3
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:714:9-716:10)
      kind: goto -> bb3
  }
  preds [bb1]
  succs [bb3]

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:714:9-716:10)
      kind: falseUnwind -> [real: bb4, unwind: bb11]
  }
  preds [bb2, bb10]
  succs [bb4, bb11]

bb4
  0: StorageLive(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  4: _11 = &mut _6
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  5: _10 = &mut (*_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
      kind: _9 = <util::alphabet::ByteSetRangeIter<'_> as core::iter::Iterator>::next(move _10) -> [return: bb5, unwind: bb11]
  }
  preds [bb3]
  succs [bb5, bb11]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:45-714:46)
  1: PlaceMention(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  2: _12 = discriminant(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
      kind: switchInt(move _12) -> [0: bb7, 1: bb8, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb7, bb8]

bb6
  0: FakeRead(ForMatchedPlace(None), _9)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:714:29-714:46)
      kind: unreachable
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:714:9-716:10)
      kind: falseEdge -> [real: bb9, imaginary: bb8]
  }
  preds [bb5]
  succs [bb8, bb9]

bb8
  0: StorageLive(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:14-714:19)
  1: _14 = (((_9 as Some).0: (u8, u8)).0: u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:14-714:19)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:21-714:24)
  3: _15 = (((_9 as Some).0: (u8, u8)).1: u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:714:21-714:24)
  4: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:715:13-715:39)
  5: StorageLive(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:715:13-715:17)
  6: _17 = &mut (*_1)
    SourceInfo(regex-automata/src/util/alphabet.rs:715:13-715:17)
  7: StorageLive(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:715:28-715:33)
  8: _18 = _14
    SourceInfo(regex-automata/src/util/alphabet.rs:715:28-715:33)
  9: StorageLive(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:715:35-715:38)
  10: _19 = _15
    SourceInfo(regex-automata/src/util/alphabet.rs:715:35-715:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:715:13-715:39)
      kind: _16 = util::alphabet::ByteClassSet::set_range(move _17, move _18, move _19) -> [return: bb10, unwind: bb11]
  }
  preds [bb5, bb7]
  succs [bb10, bb11]

bb9
  0: _0 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:714:9-716:10)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:716:9-716:10)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:716:9-716:10)
  3: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:716:9-716:10)
  4: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:716:9-716:10)
  5: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:716:9-716:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:717:6-717:6)
      kind: return
  }
  preds [bb7]
  succs []

bb10
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:715:38-715:39)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:715:38-715:39)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:715:38-715:39)
  3: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:715:39-715:40)
  4: _8 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:714:47-716:10)
  5: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:716:9-716:10)
  6: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:716:9-716:10)
  7: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:716:9-716:10)
  8: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:716:9-716:10)
  9: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:716:9-716:10)
  10: _7 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:714:9-716:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:714:9-716:10)
      kind: goto -> bb3
  }
  preds [bb8]
  succs [bb3]

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:713:5-717:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb4, bb8]
  succs []

