bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:609:9-615:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:609:9-615:10)
      kind: goto -> bb1
  }
  preds []
  succs [bb1]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:609:9-615:10)
      kind: falseUnwind -> [real: bb2, unwind: bb22]
  }
  preds [bb0, bb11]
  succs [bb2, bb22]

bb2
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:609:15-609:30)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:609:15-609:24)
  2: _5 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:609:15-609:24)
  3: _4 = Lt(move _5, const 256_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:609:15-609:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:609:15-609:30)
      kind: switchInt(move _4) -> [0: bb12, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb12]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:609:29-609:30)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:610:17-610:21)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:610:24-610:47)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:610:37-610:46)
  4: _8 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:610:37-610:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:610:24-610:47)
      kind: _7 = <u8 as core::convert::TryFrom<usize>>::try_from(move _8) -> [return: bb4, unwind: bb22]
  }
  preds [bb2]
  succs [bb4, bb22]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:610:46-610:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:610:24-610:56)
      kind: _6 = core::result::Result::<u8, core::num::TryFromIntError>::unwrap(move _7) -> [return: bb5, unwind: bb22]
  }
  preds [bb3]
  succs [bb5, bb22]

bb5
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:610:55-610:56)
  1: FakeRead(ForLet(None), _6)
    SourceInfo(regex-automata/src/util/alphabet.rs:610:17-610:21)
  2: _9 = AddWithOverflow(((*_1).2: usize), const 1_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:611:13-611:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:611:13-611:27)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).2: usize), const 1_usize) -> [success: bb6, unwind: bb22]
  }
  preds [bb4]
  succs [bb6, bb22]

bb6
  0: ((*_1).2: usize) = move (_9.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:611:13-611:27)
  1: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:612:16-612:58)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:612:16-612:26)
  3: _11 = ((*_1).1: util::alphabet::Unit)
    SourceInfo(regex-automata/src/util/alphabet.rs:612:16-612:26)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:612:35-612:57)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:612:35-612:47)
  6: _13 = &(*((*_1).0: &util::alphabet::ByteClasses))
    SourceInfo(regex-automata/src/util/alphabet.rs:612:35-612:47)
  7: StorageLive(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:612:52-612:56)
  8: _14 = _6
    SourceInfo(regex-automata/src/util/alphabet.rs:612:52-612:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:612:35-612:57)
      kind: _12 = util::alphabet::ByteClasses::get(move _13, move _14) -> [return: bb7, unwind: bb22]
  }
  preds [bb5]
  succs [bb7, bb22]

bb7
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:612:56-612:57)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:612:56-612:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:612:16-612:58)
      kind: _10 = util::alphabet::Unit::is_byte(move _11, move _12) -> [return: bb8, unwind: bb22]
  }
  preds [bb6]
  succs [bb8, bb22]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:612:16-612:58)
      kind: switchInt(move _10) -> [0: bb11, otherwise: bb9]
  }
  preds [bb7]
  succs [bb9, bb11]

bb9
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:612:57-612:58)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:612:57-612:58)
  2: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:613:29-613:43)
  3: StorageLive(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:613:38-613:42)
  4: _17 = _6
    SourceInfo(regex-automata/src/util/alphabet.rs:613:38-613:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:613:29-613:43)
      kind: _16 = util::alphabet::Unit::u8(move _17) -> [return: bb10, unwind: bb22]
  }
  preds [bb8]
  succs [bb10, bb22]

bb10
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:613:42-613:43)
  1: _0 = core::option::Option::<util::alphabet::Unit>::Some(move _16)
    SourceInfo(regex-automata/src/util/alphabet.rs:613:24-613:44)
  2: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:613:43-613:44)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:614:13-614:14)
  4: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:615:9-615:10)
  5: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:615:9-615:10)
  6: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:615:9-615:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb21
  }
  preds [bb9]
  succs [bb21]

bb11
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:612:57-612:58)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:612:57-612:58)
  2: _3 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:614:14-614:14)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:614:13-614:14)
  4: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:615:9-615:10)
  5: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:615:9-615:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:609:9-615:10)
      kind: goto -> bb1
  }
  preds [bb8]
  succs [bb1]

bb12
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:609:29-609:30)
  1: StorageLive(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:609:9-615:10)
  2: _2 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:609:9-615:10)
  3: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:615:9-615:10)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:615:9-615:10)
  5: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:615:9-615:10)
  6: StorageLive(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:616:9-621:10)
  7: StorageLive(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:616:12-616:27)
  8: StorageLive(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:616:12-616:21)
  9: _23 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:616:12-616:21)
  10: _22 = Lt(move _23, const 257_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:616:12-616:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:616:12-616:27)
      kind: switchInt(move _22) -> [0: bb14, otherwise: bb13]
  }
  preds [bb2]
  succs [bb13, bb14]

bb13
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:616:26-616:27)
  1: _24 = AddWithOverflow(((*_1).2: usize), const 1_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:617:13-617:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:617:13-617:27)
      kind: assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).2: usize), const 1_usize) -> [success: bb15, unwind: bb22]
  }
  preds [bb12]
  succs [bb15, bb22]

bb14
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:616:26-616:27)
  1: _21 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:621:10-621:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:616:9-621:10)
      kind: goto -> bb20
  }
  preds [bb12]
  succs [bb20]

bb15
  0: ((*_1).2: usize) = move (_24.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:617:13-617:27)
  1: StorageLive(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:618:16-618:35)
  2: StorageLive(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:618:16-618:26)
  3: _26 = ((*_1).1: util::alphabet::Unit)
    SourceInfo(regex-automata/src/util/alphabet.rs:618:16-618:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:618:16-618:35)
      kind: _25 = util::alphabet::Unit::is_eoi(move _26) -> [return: bb16, unwind: bb22]
  }
  preds [bb13]
  succs [bb16, bb22]

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:618:16-618:35)
      kind: switchInt(move _25) -> [0: bb19, otherwise: bb17]
  }
  preds [bb15]
  succs [bb17, bb19]

bb17
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:618:34-618:35)
  1: StorageLive(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:619:29-619:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:619:29-619:43)
      kind: _28 = util::alphabet::Unit::eoi(const 256_usize) -> [return: bb18, unwind: bb22]
  }
  preds [bb16]
  succs [bb18, bb22]

bb18
  0: _0 = core::option::Option::<util::alphabet::Unit>::Some(move _28)
    SourceInfo(regex-automata/src/util/alphabet.rs:619:24-619:44)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:619:43-619:44)
  2: StorageDead(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:620:13-620:14)
  3: StorageDead(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:621:9-621:10)
  4: StorageDead(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:621:9-621:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb21
  }
  preds [bb17]
  succs [bb21]

bb19
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:618:34-618:35)
  1: _21 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:620:14-620:14)
  2: StorageDead(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:620:13-620:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:616:9-621:10)
      kind: goto -> bb20
  }
  preds [bb16]
  succs [bb20]

bb20
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:621:9-621:10)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:621:9-621:10)
  2: _0 = core::option::Option::<util::alphabet::Unit>::None
    SourceInfo(regex-automata/src/util/alphabet.rs:622:9-622:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:623:6-623:6)
      kind: goto -> bb21
  }
  preds [bb14, bb19]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:623:6-623:6)
      kind: return
  }
  preds [bb10, bb18, bb20]
  succs []

bb22
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:608:5-623:6)
      kind: resume
  }
  preds [bb1, bb3, bb4, bb5, bb6, bb7, bb9, bb13, bb15, bb17]
  succs []

