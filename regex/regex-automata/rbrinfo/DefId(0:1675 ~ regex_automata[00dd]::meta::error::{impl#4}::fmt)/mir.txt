bb0
  0: PlaceMention((*_1))
    SourceInfo(regex-automata/src/meta/error.rs:145:15-145:20)
  1: _3 = discriminant((*_1))
    SourceInfo(regex-automata/src/meta/error.rs:145:15-145:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/error.rs:145:9-145:20)
      kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(regex-automata/src/meta/error.rs:145:15-145:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/error.rs:145:15-145:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/error.rs:146:13-146:43)
      kind: falseEdge -> [real: bb4, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  0: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/error.rs:147:30-147:37)
  1: _7 = &(((*_1) as Fail).0: meta::error::RetryFailError)
    SourceInfo(regex-automata/src/meta/error.rs:147:30-147:37)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/error.rs:147:42-147:45)
  3: _8 = &(*_7)
    SourceInfo(regex-automata/src/meta/error.rs:147:42-147:45)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/error.rs:147:50-147:51)
  5: _9 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/error.rs:147:50-147:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/error.rs:147:42-147:52)
      kind: _0 = <meta::error::RetryFailError as core::fmt::Display>::fmt(move _8, move _9) -> [return: bb6, unwind: bb8]
  }
  preds [bb0, bb2]
  succs [bb6, bb8]

bb4
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/error.rs:146:35-146:42)
  1: _4 = &(((*_1) as Quadratic).0: meta::error::RetryQuadraticError)
    SourceInfo(regex-automata/src/meta/error.rs:146:35-146:42)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/error.rs:146:47-146:50)
  3: _5 = &(*_4)
    SourceInfo(regex-automata/src/meta/error.rs:146:47-146:50)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/error.rs:146:55-146:56)
  5: _6 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/error.rs:146:55-146:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/error.rs:146:47-146:57)
      kind: _0 = <meta::error::RetryQuadraticError as core::fmt::Display>::fmt(move _5, move _6) -> [return: bb5, unwind: bb8]
  }
  preds [bb2]
  succs [bb5, bb8]

bb5
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/error.rs:146:56-146:57)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/error.rs:146:56-146:57)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/error.rs:146:56-146:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/error.rs:146:56-146:57)
      kind: goto -> bb7
  }
  preds [bb4]
  succs [bb7]

bb6
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/error.rs:147:51-147:52)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/error.rs:147:51-147:52)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/error.rs:147:51-147:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/error.rs:147:51-147:52)
      kind: goto -> bb7
  }
  preds [bb3]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/error.rs:149:6-149:6)
      kind: return
  }
  preds [bb5, bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/error.rs:144:5-149:6)
      kind: resume
  }
  preds [bb3, bb4]
  succs []

