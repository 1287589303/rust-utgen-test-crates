bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:13-902:22)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:25-902:51)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:25-902:39)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:25-902:39)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:25-902:29)
  5: _9 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:25-902:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:902:25-902:39)
      kind: _8 = hybrid::dfa::DFA::get_nfa(move _9) -> [return: bb1, unwind: bb34]
  }
  preds []
  succs [bb1, bb34]

bb1
  0: _7 = &(*_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:25-902:39)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:38-902:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:902:25-902:51)
      kind: _6 = nfa::thompson::nfa::NFA::has_empty(move _7) -> [return: bb2, unwind: bb34]
  }
  preds [bb0]
  succs [bb2, bb34]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:902:25-902:51)
      kind: switchInt(move _6) -> [0: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:50-902:51)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:50-902:51)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:55-902:69)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:55-902:69)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:55-902:59)
  5: _12 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:55-902:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:902:55-902:69)
      kind: _11 = hybrid::dfa::DFA::get_nfa(move _12) -> [return: bb5, unwind: bb34]
  }
  preds [bb2]
  succs [bb5, bb34]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:50-902:51)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:50-902:51)
  2: _5 = const false
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:25-902:79)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:902:25-902:79)
      kind: goto -> bb7
  }
  preds [bb2]
  succs [bb7]

bb5
  0: _10 = &(*_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:55-902:69)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:68-902:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:902:55-902:79)
      kind: _5 = nfa::thompson::nfa::NFA::is_utf8(move _10) -> [return: bb6, unwind: bb34]
  }
  preds [bb3]
  succs [bb6, bb34]

bb6
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:78-902:79)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:78-902:79)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:902:25-902:79)
      kind: goto -> bb7
  }
  preds [bb5]
  succs [bb7]

bb7
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:78-902:79)
  1: FakeRead(ForLet(None), _5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:902:13-902:22)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:65)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:65)
  4: StorageLive(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:64)
  5: StorageLive(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:38-903:42)
  6: _16 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:38-903:42)
  7: StorageLive(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:44-903:49)
  8: _17 = &mut (*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:44-903:49)
  9: StorageLive(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:51-903:56)
  10: _18 = &(*_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:51-903:56)
  11: StorageLive(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:58-903:63)
  12: _19 = &mut (*_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:58-903:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:64)
      kind: _15 = hybrid::search::find_overlapping_fwd(move _16, move _17, move _18, move _19) -> [return: bb8, unwind: bb34]
  }
  preds [bb4, bb6]
  succs [bb8, bb34]

bb8
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:63-903:64)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:63-903:64)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:63-903:64)
  3: StorageDead(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:63-903:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:65)
      kind: _14 = <core::result::Result<(), util::search::MatchError> as core::ops::Try>::branch(move _15) -> [return: bb9, unwind: bb33]
  }
  preds [bb7]
  succs [bb9, bb33]

bb9
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
  1: PlaceMention(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:65)
  2: _20 = discriminant(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:65)
      kind: switchInt(move _20) -> [0: bb12, 1: bb11, otherwise: bb10]
  }
  preds [bb8]
  succs [bb10, bb11, bb12]

bb10
  0: FakeRead(ForMatchedPlace(None), _14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:65)
      kind: unreachable
  }
  preds [bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
      kind: falseEdge -> [real: bb13, imaginary: bb12]
  }
  preds [bb9]
  succs [bb12, bb13]

bb12
  0: StorageLive(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:65)
  1: _24 = ((_14 as Continue).0: ())
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:65)
  2: _13 = _24
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:65)
  3: StorageDead(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:65-903:66)
      kind: drop(_14) -> [return: bb15, unwind: bb34]
  }
  preds [bb9, bb11]
  succs [bb15, bb34]

bb13
  0: StorageLive(_21)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
  1: _21 = move ((_14 as Break).0: core::result::Result<core::convert::Infallible, util::search::MatchError>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
  2: StorageLive(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
  3: _23 = move _21
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:9-903:65)
      kind: _0 = <core::result::Result<(), util::search::MatchError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual(move _23) -> [return: bb14, unwind: bb30]
  }
  preds [bb11]
  succs [bb14, bb30]

bb14
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
      kind: drop(_21) -> [return: bb27, unwind: bb32]
  }
  preds [bb13]
  succs [bb27, bb32]

bb15
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:65-903:66)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:65-903:66)
  2: StorageLive(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:904:15-904:32)
  3: StorageLive(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:904:15-904:20)
  4: _26 = &(*_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:904:15-904:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:904:15-904:32)
      kind: _25 = hybrid::dfa::OverlappingState::get_match(move _26) -> [return: bb16, unwind: bb34]
  }
  preds [bb12]
  succs [bb16, bb34]

bb16
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:904:31-904:32)
  1: PlaceMention(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:904:15-904:32)
  2: _28 = discriminant(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:904:15-904:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:904:9-904:32)
      kind: switchInt(move _28) -> [0: bb18, 1: bb19, otherwise: bb17]
  }
  preds [bb15]
  succs [bb17, bb18, bb19]

bb17
  0: FakeRead(ForMatchedPlace(None), _25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:904:15-904:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:904:15-904:32)
      kind: unreachable
  }
  preds [bb16]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:905:13-905:17)
      kind: falseEdge -> [real: bb21, imaginary: bb19]
  }
  preds [bb16]
  succs [bb19, bb21]

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:906:13-906:20)
      kind: falseEdge -> [real: bb22, imaginary: bb20]
  }
  preds [bb16, bb18]
  succs [bb20, bb22]

bb20
  0: StorageLive(_32)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:908:17-908:22)
  1: _32 = &(*_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:908:17-908:22)
  2: StorageLive(_33)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:909:17-909:22)
  3: _33 = &mut (*_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:909:17-909:22)
  4: StorageLive(_34)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:910:17-912:18)
  5: StorageLive(_35)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:910:17-912:18)
  6: _35 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:910:17-912:18)
  7: StorageLive(_36)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:910:17-912:18)
  8: _36 = &mut (*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:910:17-912:18)
  9: _34 = {closure@regex-automata/src/hybrid/dfa.rs:910:17: 910:31} { self: move _35, cache: move _36 }
    SourceInfo(regex-automata/src/hybrid/dfa.rs:910:17-912:18)
  10: StorageDead(_36)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:910:30-910:31)
  11: StorageDead(_35)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:910:30-910:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:907:24-913:14)
      kind: _0 = hybrid::dfa::skip_empty_utf8_splits_overlapping::<{closure@regex-automata/src/hybrid/dfa.rs:910:17: 910:31}>(move _32, move _33, move _34) -> [return: bb25, unwind: bb34]
  }
  preds [bb19, bb23]
  succs [bb25, bb34]

bb21
  0: StorageLive(_29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:905:24-905:26)
  1: _29 = ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:905:24-905:26)
  2: _0 = core::result::Result::<(), util::search::MatchError>::Ok(move _29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:905:21-905:27)
  3: StorageDead(_29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:905:26-905:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:905:26-905:27)
      kind: goto -> bb26
  }
  preds [bb18]
  succs [bb26]

bb22
  0: _27 = &fake shallow _25
    SourceInfo(regex-automata/src/hybrid/dfa.rs:904:15-904:32)
  1: StorageLive(_30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:906:25-906:34)
  2: _30 = _5
    SourceInfo(regex-automata/src/hybrid/dfa.rs:906:25-906:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:906:25-906:34)
      kind: switchInt(move _30) -> [0: bb24, otherwise: bb23]
  }
  preds [bb19]
  succs [bb23, bb24]

bb23
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:906:33-906:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:906:13-906:44)
      kind: goto -> bb20
  }
  preds [bb22]
  succs [bb20]

bb24
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:906:33-906:34)
  1: FakeRead(ForMatchGuard, _27)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:906:33-906:34)
  2: StorageLive(_31)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:906:41-906:43)
  3: _31 = ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:906:41-906:43)
  4: _0 = core::result::Result::<(), util::search::MatchError>::Ok(move _31)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:906:38-906:44)
  5: StorageDead(_31)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:906:43-906:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:906:43-906:44)
      kind: goto -> bb26
  }
  preds [bb22]
  succs [bb26]

bb25
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:913:13-913:14)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:913:13-913:14)
  2: StorageDead(_32)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:913:13-913:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:913:13-913:14)
      kind: goto -> bb26
  }
  preds [bb20]
  succs [bb26]

bb26
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:915:5-915:6)
  1: StorageDead(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:915:5-915:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:915:6-915:6)
      kind: goto -> bb29
  }
  preds [bb21, bb24, bb25]
  succs [bb29]

bb27
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:65-903:66)
      kind: drop(_14) -> [return: bb28, unwind: bb34]
  }
  preds [bb14]
  succs [bb28, bb34]

bb28
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:65-903:66)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:903:65-903:66)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:915:5-915:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:915:6-915:6)
      kind: goto -> bb29
  }
  preds [bb27]
  succs [bb29]

bb29
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:915:6-915:6)
      kind: return
  }
  preds [bb26, bb28]
  succs []

bb30
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
      kind: drop(_23) -> [return: bb31, unwind terminate(cleanup)]
  }
  preds [bb13]
  succs [bb31]

bb31
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
      kind: drop(_21) -> [return: bb32, unwind terminate(cleanup)]
  }
  preds [bb30]
  succs [bb32]

bb32
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:65-903:66)
      kind: drop(_14) -> [return: bb34, unwind terminate(cleanup)]
  }
  preds [bb14, bb31]
  succs [bb34]

bb33
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:903:64-903:65)
      kind: drop(_15) -> [return: bb34, unwind terminate(cleanup)]
  }
  preds [bb8]
  succs [bb34]

bb34
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:896:5-915:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb5, bb7, bb12, bb15, bb20, bb27, bb32, bb33]
  succs []

