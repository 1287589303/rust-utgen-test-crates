bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/wire.rs:341:9-341:18)
  1: _2 = const 0_usize
    SourceInfo(regex-automata/src/util/wire.rs:341:21-341:22)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/util/wire.rs:341:9-341:18)
  3: StorageLive(_3)
    SourceInfo(regex-automata/src/util/wire.rs:342:5-344:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:342:5-344:6)
      kind: goto -> bb1
  }
  preds []
  succs [bb1]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:342:5-344:6)
      kind: falseUnwind -> [real: bb2, unwind: bb13]
  }
  preds [bb0, bb8]
  succs [bb2, bb13]

bb2
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/util/wire.rs:342:11-342:20)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/util/wire.rs:342:11-342:16)
  2: _6 = _2
    SourceInfo(regex-automata/src/util/wire.rs:342:11-342:16)
  3: _5 = Lt(move _6, const 7_usize)
    SourceInfo(regex-automata/src/util/wire.rs:342:11-342:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:342:11-342:20)
      kind: switchInt(move _5) -> [0: bb11, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb11]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/wire.rs:342:19-342:20)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/util/wire.rs:342:24-342:43)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/util/wire.rs:342:24-342:29)
  3: _8 = _2
    SourceInfo(regex-automata/src/util/wire.rs:342:24-342:29)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/util/wire.rs:342:32-342:43)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/util/wire.rs:342:32-342:37)
  6: _10 = &(*_1)
    SourceInfo(regex-automata/src/util/wire.rs:342:32-342:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:342:32-342:43)
      kind: _9 = core::slice::<impl [u8]>::len(move _10) -> [return: bb4, unwind: bb13]
  }
  preds [bb2]
  succs [bb4, bb13]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/wire.rs:342:42-342:43)
  1: _7 = Lt(move _8, move _9)
    SourceInfo(regex-automata/src/util/wire.rs:342:24-342:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:342:24-342:43)
      kind: switchInt(move _7) -> [0: bb10, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb10]

bb5
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/wire.rs:342:42-342:43)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/wire.rs:342:42-342:43)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/util/wire.rs:342:47-342:64)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/util/wire.rs:342:47-342:59)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/util/wire.rs:342:53-342:58)
  5: _13 = _2
    SourceInfo(regex-automata/src/util/wire.rs:342:53-342:58)
  6: _14 = Len((*_1))
    SourceInfo(regex-automata/src/util/wire.rs:342:47-342:59)
  7: _15 = Lt(_13, _14)
    SourceInfo(regex-automata/src/util/wire.rs:342:47-342:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:342:47-342:59)
      kind: assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb6, unwind: bb13]
  }
  preds [bb4]
  succs [bb6, bb13]

bb6
  0: _12 = (*_1)[_13]
    SourceInfo(regex-automata/src/util/wire.rs:342:47-342:59)
  1: _11 = Eq(move _12, const 0_u8)
    SourceInfo(regex-automata/src/util/wire.rs:342:47-342:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:342:47-342:64)
      kind: switchInt(move _11) -> [0: bb9, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb9]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/wire.rs:342:63-342:64)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/wire.rs:342:63-342:64)
  2: _16 = AddWithOverflow(_2, const 1_usize)
    SourceInfo(regex-automata/src/util/wire.rs:343:9-343:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:343:9-343:19)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_usize) -> [success: bb8, unwind: bb13]
  }
  preds [bb6]
  succs [bb8, bb13]

bb8
  0: _2 = move (_16.0: usize)
    SourceInfo(regex-automata/src/util/wire.rs:343:9-343:19)
  1: _4 = const ()
    SourceInfo(regex-automata/src/util/wire.rs:342:65-344:6)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/util/wire.rs:344:5-344:6)
  3: StorageDead(_7)
    SourceInfo(regex-automata/src/util/wire.rs:344:5-344:6)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/util/wire.rs:344:5-344:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:342:5-344:6)
      kind: goto -> bb1
  }
  preds [bb7]
  succs [bb1]

bb9
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/wire.rs:342:63-342:64)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/wire.rs:342:63-342:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb12
  }
  preds [bb6]
  succs [bb12]

bb10
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/wire.rs:342:42-342:43)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/wire.rs:342:42-342:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb12
  }
  preds [bb4]
  succs [bb12]

bb11
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/wire.rs:342:19-342:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb12
  }
  preds [bb2]
  succs [bb12]

bb12
  0: StorageLive(_18)
    SourceInfo(regex-automata/src/util/wire.rs:342:5-344:6)
  1: _3 = const ()
    SourceInfo(regex-automata/src/util/wire.rs:342:5-344:6)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/util/wire.rs:344:5-344:6)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/util/wire.rs:344:5-344:6)
  4: StorageDead(_7)
    SourceInfo(regex-automata/src/util/wire.rs:344:5-344:6)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/util/wire.rs:344:5-344:6)
  6: StorageDead(_3)
    SourceInfo(regex-automata/src/util/wire.rs:344:5-344:6)
  7: _0 = _2
    SourceInfo(regex-automata/src/util/wire.rs:345:5-345:10)
  8: StorageDead(_2)
    SourceInfo(regex-automata/src/util/wire.rs:346:1-346:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:346:2-346:2)
      kind: return
  }
  preds [bb9, bb10, bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:340:1-346:2)
      kind: resume
  }
  preds [bb1, bb3, bb5, bb7]
  succs []

