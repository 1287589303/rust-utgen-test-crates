bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:13-821:21)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:28-821:68)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:28-821:45)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:28-821:45)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:28-821:32)
  5: _6 = &(*_1)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:28-821:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:28-821:45)
      kind: _5 = nfa::thompson::backtrack::BoundedBacktracker::get_config(move _6) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: _4 = &(*_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:28-821:45)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:44-821:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:28-821:68)
      kind: _3 = nfa::thompson::backtrack::Config::get_visited_capacity(move _4) -> [return: bb2, unwind: bb10]
  }
  preds [bb0]
  succs [bb2, bb10]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:67-821:68)
  1: _7 = MulWithOverflow(const 8_usize, _3)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:24-821:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:24-821:68)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", const 8_usize, move _3) -> [success: bb3, unwind: bb10]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: _2 = move (_7.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:24-821:68)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:67-821:68)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:13-821:21)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:821:68-821:69)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:822:13-822:19)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:822:31-822:39)
  6: _9 = _2
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:822:31-822:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:822:22-822:61)
      kind: _8 = nfa::thompson::backtrack::div_ceil(move _9, const nfa::thompson::backtrack::Visited::BLOCK_SIZE) -> [return: bb4, unwind: bb10]
  }
  preds [bb2]
  succs [bb4, bb10]

bb4
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:822:60-822:61)
  1: FakeRead(ForLet(None), _8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:822:13-822:19)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:823:13-823:26)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:823:29-823:35)
  4: _11 = _8
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:823:29-823:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:823:29-823:71)
      kind: _10 = core::num::<impl usize>::saturating_mul(move _11, const nfa::thompson::backtrack::Visited::BLOCK_SIZE) -> [return: bb5, unwind: bb10]
  }
  preds [bb3]
  succs [bb5, bb10]

bb5
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:823:70-823:71)
  1: FakeRead(ForLet(None), _10)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:823:13-823:26)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:9-827:50)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:10-827:23)
  4: _13 = _10
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:10-827:23)
  5: StorageLive(_14)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:26-827:49)
  6: StorageLive(_15)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:26-827:43)
  7: StorageLive(_16)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:26-827:43)
  8: StorageLive(_17)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:26-827:34)
  9: _17 = &((*_1).1: nfa::thompson::nfa::NFA)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:26-827:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:26-827:43)
      kind: _16 = nfa::thompson::nfa::NFA::states(move _17) -> [return: bb6, unwind: bb10]
  }
  preds [bb4]
  succs [bb6, bb10]

bb6
  0: _15 = &(*_16)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:26-827:43)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:42-827:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:26-827:49)
      kind: _14 = core::slice::<impl [nfa::thompson::nfa::State]>::len(move _15) -> [return: bb7, unwind: bb10]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:48-827:49)
  1: _18 = Eq(_14, const 0_usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:9-827:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:9-827:50)
      kind: assert(!move _18, "attempt to divide `{}` by zero", _13) -> [success: bb8, unwind: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: _12 = Div(move _13, move _14)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:9-827:50)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:49-827:50)
  2: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:49-827:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:9-827:68)
      kind: _0 = core::num::<impl usize>::saturating_sub(move _12, const 1_usize) -> [return: bb9, unwind: bb10]
  }
  preds [bb7]
  succs [bb9, bb10]

bb9
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:827:67-827:68)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:828:5-828:6)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:828:5-828:6)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:828:5-828:6)
  4: StorageDead(_16)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:828:5-828:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:828:6-828:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:817:5-828:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8]
  succs []

