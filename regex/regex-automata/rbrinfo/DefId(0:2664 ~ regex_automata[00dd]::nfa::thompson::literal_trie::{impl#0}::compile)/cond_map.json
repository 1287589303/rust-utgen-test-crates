{
  "regex-automata/src/nfa/thompson/literal_trie.rs:201:21:201:64": [
    {
      "Try": "builder.add_range(f.sparse.pop().unwrap())?"
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:209:16:209:49": [
    {
      "Bool": {
        "Other": "let Some(chunk) = f.chunks.next()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:204:21:204:48": [
    {
      "Try": "builder.add_sparse(sparse)?"
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:200:35:200:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "f.sparse.len() == 1",
          "lhs": "f.sparse.len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:174:16:174:50": [
    {
      "Bool": {
        "Other": "let Some(t) = f.transitions.next()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:223:19:223:30": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/literal_trie.rs:223:19:223:30",
        "match_str": "stack.pop()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/literal_trie.rs:224:17:224:21": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/literal_trie.rs:224:25:226:18"
          },
          "regex-automata/src/nfa/thompson/literal_trie.rs:227:17:227:33": {
            "pat": {
              "pat_str": "Some(mut parent)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/literal_trie.rs:227:37:233:18"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:175:20:175:49": [
    {
      "Bool": {
        "Other": "self.states[t.next].is_leaf()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:199:17:199:36": [
    {
      "Bool": {
        "Other": "f.sparse.is_empty()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:222:25:222:52": [
    {
      "Try": "builder.add_union(f.union)?"
    }
  ],
  "regex-automata/src/nfa/thompson/literal_trie.rs:170:19:170:39": [
    {
      "Try": "builder.add_empty()?"
    }
  ]
}