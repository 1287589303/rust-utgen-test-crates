bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:777:13-777:19)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:777:22-777:26)
  2: _4 = _2
    SourceInfo(regex-automata/src/util/alphabet.rs:777:22-777:26)
  3: _5 = Eq(const 128_u8, const 0_u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:777:22-777:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:777:22-777:32)
      kind: assert(!move _5, "attempt to divide `{}` by zero", _4) -> [success: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: _3 = Div(move _4, const 128_u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:777:22-777:32)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:777:31-777:32)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/util/alphabet.rs:777:13-777:19)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:778:13-778:16)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:778:19-778:23)
  5: _7 = _2
    SourceInfo(regex-automata/src/util/alphabet.rs:778:19-778:23)
  6: _8 = Eq(const 128_u8, const 0_u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:778:19-778:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:778:19-778:29)
      kind: assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _7) -> [success: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _6 = Rem(move _7, const 128_u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:778:19-778:29)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:778:28-778:29)
  2: FakeRead(ForLet(None), _6)
    SourceInfo(regex-automata/src/util/alphabet.rs:778:13-778:16)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:9-779:54)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:9-779:41)
  5: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:21-779:40)
  6: StorageLive(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:33-779:39)
  7: _12 = _3
    SourceInfo(regex-automata/src/util/alphabet.rs:779:33-779:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:779:21-779:40)
      kind: _11 = <usize as core::convert::From<u8>>::from(move _12) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:39-779:40)
  1: _13 = Len((((*_1).0: util::alphabet::BitSet).0: [u128; 2]))
    SourceInfo(regex-automata/src/util/alphabet.rs:779:9-779:41)
  2: _14 = Lt(_11, _13)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:9-779:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:779:9-779:41)
      kind: assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _11) -> [success: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: _10 = (((*_1).0: util::alphabet::BitSet).0: [u128; 2])[_11]
    SourceInfo(regex-automata/src/util/alphabet.rs:779:9-779:41)
  1: StorageLive(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:44-779:54)
  2: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:50-779:53)
  3: _16 = _6
    SourceInfo(regex-automata/src/util/alphabet.rs:779:50-779:53)
  4: _17 = Lt(_16, const 128_u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:44-779:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:779:44-779:54)
      kind: assert(move _17, "attempt to shift left by `{}`, which would overflow", _16) -> [success: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: _15 = Shl(const 1_u128, move _16)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:44-779:54)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:53-779:54)
  2: _9 = BitAnd(move _10, move _15)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:9-779:54)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:53-779:54)
  4: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:53-779:54)
  5: _0 = Gt(move _9, const 0_u128)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:9-779:58)
  6: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:779:57-779:58)
  7: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:780:5-780:6)
  8: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:780:5-780:6)
  9: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:780:5-780:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:780:6-780:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:776:5-780:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

