bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:1195:13-1195:23)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:1196:13-1196:32)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:1196:13-1196:15)
  3: _6 = _3
    SourceInfo(regex-automata/src/util/look.rs:1196:13-1196:15)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:1196:18-1196:32)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:1196:18-1196:26)
  6: _8 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1196:18-1196:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1196:18-1196:32)
      kind: _7 = core::slice::<impl [u8]>::len(move _8) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:1196:31-1196:32)
  1: _5 = Lt(move _6, move _7)
    SourceInfo(regex-automata/src/util/look.rs:1196:13-1196:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1196:13-1196:32)
      kind: switchInt(move _5) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1196:31-1196:32)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1196:31-1196:32)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:1196:55-1196:67)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/util/look.rs:1196:64-1196:66)
  4: _10 = _3
    SourceInfo(regex-automata/src/util/look.rs:1196:64-1196:66)
  5: _11 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:1196:55-1196:67)
  6: _12 = Lt(_10, _11)
    SourceInfo(regex-automata/src/util/look.rs:1196:55-1196:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1196:55-1196:67)
      kind: assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> [success: bb4, unwind: bb7]
  }
  preds [bb1]
  succs [bb4, bb7]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1196:31-1196:32)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1196:31-1196:32)
  2: _4 = const false
    SourceInfo(regex-automata/src/util/look.rs:1196:13-1196:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1196:13-1196:68)
      kind: goto -> bb6
  }
  preds [bb1]
  succs [bb6]

bb4
  0: _9 = (*_2)[_10]
    SourceInfo(regex-automata/src/util/look.rs:1196:55-1196:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1196:36-1196:68)
      kind: _4 = util::utf8::is_word_byte(move _9) -> [return: bb5, unwind: bb7]
  }
  preds [bb2]
  succs [bb5, bb7]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:1196:67-1196:68)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:1196:67-1196:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1196:13-1196:68)
      kind: goto -> bb6
  }
  preds [bb4]
  succs [bb6]

bb6
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1196:67-1196:68)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/look.rs:1195:13-1195:23)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/look.rs:1197:10-1197:20)
  3: _13 = _4
    SourceInfo(regex-automata/src/util/look.rs:1197:10-1197:20)
  4: _0 = Not(move _13)
    SourceInfo(regex-automata/src/util/look.rs:1197:9-1197:20)
  5: StorageDead(_13)
    SourceInfo(regex-automata/src/util/look.rs:1197:19-1197:20)
  6: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1198:5-1198:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1198:6-1198:6)
      kind: return
  }
  preds [bb3, bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1194:5-1198:6)
      kind: resume
  }
  preds [bb0, bb2, bb4]
  succs []

