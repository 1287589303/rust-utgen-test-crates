bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:471:21-471:34)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:471:32-471:33)
  2: _3 = const 0_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:471:32-471:33)
  3: _4 = Len(((*_1).0: [u8; 8]))
    SourceInfo(regex-automata/src/dfa/accel.rs:471:21-471:34)
  4: _5 = Lt(_3, _4)
    SourceInfo(regex-automata/src/dfa/accel.rs:471:21-471:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:471:21-471:34)
      kind: assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _2 = ((*_1).0: [u8; 8])[_3]
    SourceInfo(regex-automata/src/dfa/accel.rs:471:21-471:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:471:9-471:35)
      kind: _0 = <usize as core::convert::From<u8>>::from(move _2) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:471:34-471:35)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:472:5-472:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:472:6-472:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:470:5-472:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

