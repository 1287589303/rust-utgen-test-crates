bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:411:17-411:33)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:411:17-411:24)
  2: _3 = &((*_1).0: dfa::sparse::Transitions<T>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:411:17-411:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:411:17-411:33)
      kind: _2 = dfa::sparse::Transitions::<T>::as_ref(move _3) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:411:32-411:33)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:412:17-412:33)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:412:17-412:24)
  3: _5 = &((*_1).1: dfa::sparse::StartTable<T>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:412:17-412:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:412:17-412:33)
      kind: _4 = dfa::sparse::StartTable::<T>::as_ref(move _5) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:412:32-412:33)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:413:22-413:34)
  2: _6 = ((*_1).2: dfa::special::Special)
    SourceInfo(regex-automata/src/dfa/sparse.rs:413:22-413:34)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:414:18-414:34)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:414:18-414:26)
  5: _8 = &((*_1).3: core::option::Option<util::prefilter::Prefilter>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:414:18-414:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:414:18-414:34)
      kind: _7 = <core::option::Option<util::prefilter::Prefilter> as core::clone::Clone>::clone(move _8) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:414:33-414:34)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:415:22-415:34)
  2: _9 = ((*_1).4: util::alphabet::ByteSet)
    SourceInfo(regex-automata/src/dfa/sparse.rs:415:22-415:34)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:416:20-416:30)
  4: _10 = ((*_1).5: dfa::dense::Flags)
    SourceInfo(regex-automata/src/dfa/sparse.rs:416:20-416:30)
  5: _0 = dfa::sparse::DFA::<&[u8]> { tt: move _2, st: move _4, special: move _6, pre: move _7, quitset: move _9, flags: move _10 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:410:9-417:10)
  6: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:417:9-417:10)
  7: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:417:9-417:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:417:9-417:10)
      kind: drop(_7) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:417:9-417:10)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:417:9-417:10)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:417:9-417:10)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:417:9-417:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:418:6-418:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:409:5-418:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

