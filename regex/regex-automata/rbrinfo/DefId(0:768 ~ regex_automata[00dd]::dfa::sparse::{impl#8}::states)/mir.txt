bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1694:28-1694:32)
  1: _2 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1694:28-1694:32)
  2: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1694:38-1694:53)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1694:38-1694:42)
  4: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1694:38-1694:42)
  5: _5 = const dfa::DEAD
    SourceInfo(regex-automata/src/dfa/sparse.rs:1694:38-1694:42)
  6: _4 = &_5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1694:38-1694:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1694:38-1694:53)
      kind: _3 = util::primitives::StateID::as_usize(move _4) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1694:52-1694:53)
  1: _0 = dfa::sparse::StateIter::<'_, T> { trans: move _2, id: move _3 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1694:9-1694:55)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1694:54-1694:55)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1694:54-1694:55)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1695:5-1695:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1695:6-1695:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1693:5-1695:6)
      kind: resume
  }
  preds [bb0]
  succs []

