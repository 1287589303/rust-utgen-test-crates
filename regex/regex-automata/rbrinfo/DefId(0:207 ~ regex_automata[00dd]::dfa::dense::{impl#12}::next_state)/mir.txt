bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:13-3172:18)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:21-3172:40)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:21-3172:40)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:21-3172:25)
  4: _7 = &(*_1)
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:21-3172:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3172:21-3172:40)
      kind: _6 = dfa::dense::DFA::<T>::byte_classes(move _7) -> [return: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: _5 = &(*_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:21-3172:40)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:39-3172:40)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:45-3172:50)
  3: _8 = _3
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:45-3172:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3172:21-3172:51)
      kind: _4 = util::alphabet::ByteClasses::get(move _5, move _8) -> [return: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:50-3172:51)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:50-3172:51)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:13-3172:18)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:3172:51-3172:52)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:13-3173:14)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:17-3173:35)
  6: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:17-3173:24)
  7: _11 = &_2
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:17-3173:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3173:17-3173:35)
      kind: _10 = util::primitives::StateID::as_usize(move _11) -> [return: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:34-3173:35)
  1: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:38-3173:56)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:50-3173:55)
  3: _13 = _4
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:50-3173:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3173:38-3173:56)
      kind: _12 = <usize as core::convert::From<u8>>::from(move _13) -> [return: bb4, unwind: bb8]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:55-3173:56)
  1: _14 = AddWithOverflow(_10, _12)
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:17-3173:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3173:17-3173:56)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, move _12) -> [success: bb5, unwind: bb8]
  }
  preds [bb3]
  succs [bb5, bb8]

bb5
  0: _9 = move (_14.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:17-3173:56)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:55-3173:56)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:55-3173:56)
  3: FakeRead(ForLet(None), _9)
    SourceInfo(regex-automata/src/dfa/dense.rs:3173:13-3173:14)
  4: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/dense.rs:3174:9-3174:21)
  5: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/dense.rs:3174:9-3174:13)
  6: _16 = &(*_1)
    SourceInfo(regex-automata/src/dfa/dense.rs:3174:9-3174:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3174:9-3174:21)
      kind: _15 = dfa::dense::DFA::<T>::trans(move _16) -> [return: bb6, unwind: bb8]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/dense.rs:3174:20-3174:21)
  1: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/dense.rs:3174:22-3174:23)
  2: _17 = _9
    SourceInfo(regex-automata/src/dfa/dense.rs:3174:22-3174:23)
  3: _18 = Len((*_15))
    SourceInfo(regex-automata/src/dfa/dense.rs:3174:9-3174:24)
  4: _19 = Lt(_17, _18)
    SourceInfo(regex-automata/src/dfa/dense.rs:3174:9-3174:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3174:9-3174:24)
      kind: assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> [success: bb7, unwind: bb8]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: _0 = (*_15)[_17]
    SourceInfo(regex-automata/src/dfa/dense.rs:3174:9-3174:24)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/dense.rs:3175:5-3175:6)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3175:5-3175:6)
  3: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/dense.rs:3175:5-3175:6)
  4: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/dense.rs:3175:5-3175:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3175:6-3175:6)
      kind: return
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3171:5-3175:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6]
  succs []

