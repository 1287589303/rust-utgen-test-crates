bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1225:9-1225:40)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1225:9-1225:26)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1225:9-1225:26)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1225:9-1225:16)
  4: _6 = &((*_1).0: dfa::sparse::Transitions<T>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1225:9-1225:16)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1225:23-1225:25)
  6: _7 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1225:23-1225:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1225:9-1225:26)
      kind: _5 = dfa::sparse::Transitions::<T>::state(move _6, move _7) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _4 = &_5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1225:9-1225:26)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1225:25-1225:26)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1225:25-1225:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1225:9-1225:40)
      kind: _3 = dfa::sparse::State::<'_>::accelerator(move _4) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _0 = &(*_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1225:9-1225:40)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1225:39-1225:40)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1226:5-1226:6)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1226:5-1226:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1226:6-1226:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1224:5-1226:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

