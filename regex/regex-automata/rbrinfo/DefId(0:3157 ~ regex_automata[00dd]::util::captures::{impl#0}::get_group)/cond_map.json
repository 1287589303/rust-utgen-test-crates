{
  "regex-automata/src/util/captures.rs:455:19:455:34": [
    {
      "Try": "self.pattern()?"
    }
  ],
  "regex-automata/src/util/captures.rs:464:21:464:58": [
    {
      "Try": "self.slots.get(slot_start).copied()??"
    }
  ],
  "regex-automata/src/util/captures.rs:462:13:462:49": [
    {
      "Try": "self.group_info().slots(pid, index)?"
    }
  ],
  "regex-automata/src/util/captures.rs:460:14:460:35": [
    {
      "Try": "index.checked_mul(2)?"
    }
  ],
  "regex-automata/src/util/captures.rs:464:21:464:57": [
    {
      "Try": "self.slots.get(slot_start).copied()?"
    }
  ],
  "regex-automata/src/util/captures.rs:460:37:460:74": [
    {
      "Try": "index.checked_mul(2)?.checked_add(1)?"
    }
  ],
  "regex-automata/src/util/captures.rs:465:19:465:53": [
    {
      "Try": "self.slots.get(slot_end).copied()?"
    }
  ],
  "regex-automata/src/util/captures.rs:460:37:460:58": [
    {
      "Try": "index.checked_mul(2)?"
    }
  ],
  "regex-automata/src/util/captures.rs:459:41:459:77": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.group_info().pattern_len() == 1",
          "lhs": "self.group_info().pattern_len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/captures.rs:465:19:465:54": [
    {
      "Try": "self.slots.get(slot_end).copied()??"
    }
  ]
}