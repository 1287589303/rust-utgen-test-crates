bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/sparse_set.rs:237:9-237:22)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:237:9-237:15)
  2: _3 = &mut ((*_1).0: core::slice::Iter<'_, util::primitives::StateID>)
    SourceInfo(regex-automata/src/util/sparse_set.rs:237:9-237:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:237:9-237:22)
      kind: _2 = <core::slice::Iter<'_, util::primitives::StateID> as core::iter::Iterator>::next(move _3) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:237:21-237:22)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:237:27-237:35)
  2: _4 = {closure@regex-automata/src/util/sparse_set.rs:237:27: 237:32}
    SourceInfo(regex-automata/src/util/sparse_set.rs:237:27-237:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:237:9-237:36)
      kind: _0 = core::option::Option::<&util::primitives::StateID>::map::<util::primitives::StateID, {closure@regex-automata/src/util/sparse_set.rs:237:27: 237:32}>(move _2, move _4) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:237:35-237:36)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/util/sparse_set.rs:237:35-237:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:238:6-238:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:236:5-238:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

