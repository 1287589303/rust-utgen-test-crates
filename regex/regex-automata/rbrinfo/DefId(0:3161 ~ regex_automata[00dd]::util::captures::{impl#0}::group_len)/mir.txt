bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/captures.rs:616:13-616:16)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/captures.rs:616:25-616:39)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/captures.rs:616:25-616:29)
  3: _4 = &(*_1)
    SourceInfo(regex-automata/src/util/captures.rs:616:25-616:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:616:25-616:39)
      kind: _3 = util::captures::Captures::pattern(move _4) -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/captures.rs:616:38-616:39)
  1: PlaceMention(_3)
    SourceInfo(regex-automata/src/util/captures.rs:616:25-616:39)
  2: _5 = discriminant(_3)
    SourceInfo(regex-automata/src/util/captures.rs:616:25-616:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:616:19-616:39)
      kind: switchInt(move _5) -> [0: bb3, 1: bb4, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3, bb4]

bb2
  0: FakeRead(ForMatchedPlace(None), _3)
    SourceInfo(regex-automata/src/util/captures.rs:616:25-616:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:616:25-616:39)
      kind: unreachable
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:617:13-617:17)
      kind: falseEdge -> [real: bb5, imaginary: bb4]
  }
  preds [bb1]
  succs [bb4, bb5]

bb4
  0: StorageLive(_7)
    SourceInfo(regex-automata/src/util/captures.rs:618:18-618:21)
  1: _7 = ((_3 as Some).0: util::primitives::PatternID)
    SourceInfo(regex-automata/src/util/captures.rs:618:18-618:21)
  2: _2 = _7
    SourceInfo(regex-automata/src/util/captures.rs:618:26-618:29)
  3: StorageDead(_7)
    SourceInfo(regex-automata/src/util/captures.rs:618:28-618:29)
  4: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/util/captures.rs:616:13-616:16)
  5: StorageDead(_3)
    SourceInfo(regex-automata/src/util/captures.rs:619:10-619:11)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/util/captures.rs:620:9-620:26)
  7: StorageLive(_9)
    SourceInfo(regex-automata/src/util/captures.rs:620:9-620:26)
  8: StorageLive(_10)
    SourceInfo(regex-automata/src/util/captures.rs:620:9-620:13)
  9: _10 = &(*_1)
    SourceInfo(regex-automata/src/util/captures.rs:620:9-620:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:620:9-620:26)
      kind: _9 = util::captures::Captures::group_info(move _10) -> [return: bb6, unwind: bb9]
  }
  preds [bb1, bb3]
  succs [bb6, bb9]

bb5
  0: _0 = const 0_usize
    SourceInfo(regex-automata/src/util/captures.rs:617:28-617:29)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/captures.rs:619:10-619:11)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/util/captures.rs:621:5-621:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:621:6-621:6)
      kind: goto -> bb8
  }
  preds [bb3]
  succs [bb8]

bb6
  0: _8 = &(*_9)
    SourceInfo(regex-automata/src/util/captures.rs:620:9-620:26)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/captures.rs:620:25-620:26)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/util/captures.rs:620:37-620:40)
  3: _11 = _2
    SourceInfo(regex-automata/src/util/captures.rs:620:37-620:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:620:9-620:41)
      kind: _0 = util::captures::GroupInfo::group_len(move _8, move _11) -> [return: bb7, unwind: bb9]
  }
  preds [bb4]
  succs [bb7, bb9]

bb7
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/captures.rs:620:40-620:41)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/captures.rs:620:40-620:41)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/util/captures.rs:621:5-621:6)
  3: StorageDead(_9)
    SourceInfo(regex-automata/src/util/captures.rs:621:5-621:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:621:6-621:6)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:621:6-621:6)
      kind: return
  }
  preds [bb5, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:615:5-621:6)
      kind: resume
  }
  preds [bb0, bb4, bb6]
  succs []

