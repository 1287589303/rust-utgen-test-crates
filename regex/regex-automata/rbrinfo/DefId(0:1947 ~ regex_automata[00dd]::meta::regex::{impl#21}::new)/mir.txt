bb0
  0: StorageLive(_1)
    SourceInfo(regex-automata/src/meta/regex.rs:3333:21-3333:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3333:21-3333:38)
      kind: _1 = <meta::regex::Config as core::default::Default>::default() -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/meta/regex.rs:3334:18-3334:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3334:18-3334:50)
      kind: _2 = regex_syntax::ast::parse::ParserBuilder::new() -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:3335:18-3335:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3335:18-3335:58)
      kind: _3 = regex_syntax::hir::translate::TranslatorBuilder::new() -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _0 = meta::regex::Builder { config: move _1, ast: move _2, hir: move _3 }
    SourceInfo(regex-automata/src/meta/regex.rs:3332:9-3336:10)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:3336:9-3336:10)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/meta/regex.rs:3336:9-3336:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3336:9-3336:10)
      kind: drop(_1) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_1)
    SourceInfo(regex-automata/src/meta/regex.rs:3336:9-3336:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3337:6-3337:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3336:9-3336:10)
      kind: drop(_1) -> [return: bb6, unwind terminate(cleanup)]
  }
  preds [bb1, bb2]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3331:5-3337:6)
      kind: resume
  }
  preds [bb0, bb3, bb5]
  succs []

