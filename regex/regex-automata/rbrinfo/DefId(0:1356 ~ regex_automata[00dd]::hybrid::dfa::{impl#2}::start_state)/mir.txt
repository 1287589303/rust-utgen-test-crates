bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1559:13-1559:17)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1559:33-1559:37)
  2: _5 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1559:33-1559:37)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1559:39-1559:44)
  4: _6 = &(*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1559:39-1559:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1559:20-1559:45)
      kind: _4 = hybrid::dfa::LazyRef::<'_, '_>::new(move _5, move _6) -> [return: bb1, unwind: bb33]
  }
  preds []
  succs [bb1, bb33]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1559:44-1559:45)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1559:44-1559:45)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1559:13-1559:17)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1560:13-1560:21)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1560:24-1560:30)
  5: _8 = &(*_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1560:24-1560:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1560:24-1560:45)
      kind: _7 = util::start::Config::get_anchored(move _8) -> [return: bb2, unwind: bb33]
  }
  preds [bb0]
  succs [bb2, bb33]

bb2
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1560:44-1560:45)
  1: FakeRead(ForLet(None), _7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1560:13-1560:21)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1561:13-1561:18)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1561:27-1561:51)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1561:27-1561:33)
  5: _11 = &(*_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1561:27-1561:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1561:27-1561:51)
      kind: _10 = util::start::Config::get_look_behind(move _11) -> [return: bb3, unwind: bb33]
  }
  preds [bb1]
  succs [bb3, bb33]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1561:50-1561:51)
  1: PlaceMention(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1561:27-1561:51)
  2: _12 = discriminant(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1561:27-1561:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1561:21-1561:51)
      kind: switchInt(move _12) -> [0: bb5, 1: bb6, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5, bb6]

bb4
  0: FakeRead(ForMatchedPlace(None), _10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1561:27-1561:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1561:27-1561:51)
      kind: unreachable
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1562:13-1562:17)
      kind: falseEdge -> [real: bb7, imaginary: bb6]
  }
  preds [bb3]
  succs [bb6, bb7]

bb6
  0: StorageLive(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1563:18-1563:22)
  1: _13 = ((_10 as Some).0: u8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1563:18-1563:22)
  2: StorageLive(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:17-1566:18)
  3: StorageLive(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:21-1564:44)
  4: StorageLive(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:21-1564:33)
  5: _16 = &((*_1).5: util::alphabet::ByteSet)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:21-1564:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:21-1564:44)
      kind: _15 = util::alphabet::ByteSet::is_empty(move _16) -> [return: bb8, unwind: bb33]
  }
  preds [bb3, bb5]
  succs [bb8, bb33]

bb7
  0: _9 = util::start::Start::Text
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1562:21-1562:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1562:21-1562:32)
      kind: goto -> bb17
  }
  preds [bb5]
  succs [bb17]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:21-1564:44)
      kind: switchInt(move _15) -> [0: bb10, otherwise: bb9]
  }
  preds [bb6]
  succs [bb9, bb10]

bb9
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:43-1564:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:76-1566:18)
      kind: goto -> bb15
  }
  preds [bb8]
  succs [bb15]

bb10
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:43-1564:44)
  1: StorageLive(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:48-1564:75)
  2: StorageLive(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:48-1564:60)
  3: _18 = &((*_1).5: util::alphabet::ByteSet)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:48-1564:60)
  4: StorageLive(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:70-1564:74)
  5: _19 = _13
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:70-1564:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:48-1564:75)
      kind: _17 = util::alphabet::ByteSet::contains(move _18, move _19) -> [return: bb11, unwind: bb33]
  }
  preds [bb8]
  succs [bb11, bb33]

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:48-1564:75)
      kind: switchInt(move _17) -> [0: bb14, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb14]

bb12
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:74-1564:75)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:74-1564:75)
  2: StorageLive(_21)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1565:32-1565:54)
  3: StorageLive(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1565:49-1565:53)
  4: _22 = _13
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1565:49-1565:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1565:32-1565:54)
      kind: _21 = hybrid::error::StartError::quit(move _22) -> [return: bb13, unwind: bb33]
  }
  preds [bb11]
  succs [bb13, bb33]

bb13
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1565:53-1565:54)
  1: _0 = core::result::Result::<hybrid::id::LazyStateID, hybrid::error::StartError>::Err(move _21)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1565:28-1565:55)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1565:54-1565:55)
  3: StorageDead(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1566:17-1566:18)
  4: StorageDead(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1566:17-1566:18)
  5: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1566:17-1566:18)
  6: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1568:13-1568:14)
  7: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1569:10-1569:11)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb31
  }
  preds [bb12]
  succs [bb31]

bb14
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:74-1564:75)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1564:74-1564:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb15
  }
  preds [bb11]
  succs [bb15]

bb15
  0: _14 = const ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1566:18-1566:18)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1566:17-1566:18)
  2: StorageDead(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1566:17-1566:18)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1566:17-1566:18)
  4: StorageLive(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1567:17-1567:31)
  5: _23 = &((*_1).3: util::start::StartByteMap)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1567:17-1567:31)
  6: StorageLive(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1567:36-1567:40)
  7: _24 = _13
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1567:36-1567:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1567:17-1567:41)
      kind: _9 = util::start::StartByteMap::get(move _23, move _24) -> [return: bb16, unwind: bb33]
  }
  preds [bb9, bb14]
  succs [bb16, bb33]

bb16
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1567:40-1567:41)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1567:40-1567:41)
  2: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1568:13-1568:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1568:13-1568:14)
      kind: goto -> bb17
  }
  preds [bb15]
  succs [bb17]

bb17
  0: FakeRead(ForLet(None), _9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1561:13-1561:18)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1569:10-1569:11)
  2: StorageLive(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:13-1570:21)
  3: StorageLive(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:66)
  4: StorageLive(_27)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:65)
  5: StorageLive(_28)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:28)
  6: _28 = &_4
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:28)
  7: StorageLive(_29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:49-1570:57)
  8: _29 = _7
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:49-1570:57)
  9: StorageLive(_30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:59-1570:64)
  10: _30 = _9
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:59-1570:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:65)
      kind: _27 = hybrid::dfa::LazyRef::<'_, '_>::get_cached_start_id(move _28, move _29, move _30) -> [return: bb18, unwind: bb33]
  }
  preds [bb7, bb16]
  succs [bb18, bb33]

bb18
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:64-1570:65)
  1: StorageDead(_29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:64-1570:65)
  2: StorageDead(_28)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:64-1570:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:66)
      kind: _26 = <core::result::Result<hybrid::id::LazyStateID, hybrid::error::StartError> as core::ops::Try>::branch(move _27) -> [return: bb19, unwind: bb33]
  }
  preds [bb17]
  succs [bb19, bb33]

bb19
  0: StorageDead(_27)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:65-1570:66)
  1: PlaceMention(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:66)
  2: _31 = discriminant(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:66)
      kind: switchInt(move _31) -> [0: bb22, 1: bb21, otherwise: bb20]
  }
  preds [bb18]
  succs [bb20, bb21, bb22]

bb20
  0: FakeRead(ForMatchedPlace(None), _26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:66)
      kind: unreachable
  }
  preds [bb19]
  succs []

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:65-1570:66)
      kind: falseEdge -> [real: bb23, imaginary: bb22]
  }
  preds [bb19]
  succs [bb22, bb23]

bb22
  0: StorageLive(_35)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:66)
  1: _35 = ((_26 as Continue).0: hybrid::id::LazyStateID)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:66)
  2: _25 = _35
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:66)
  3: StorageDead(_35)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:65-1570:66)
  4: FakeRead(ForLet(None), _25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:13-1570:21)
  5: StorageDead(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:66-1570:67)
  6: StorageLive(_36)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1571:9-1573:10)
  7: StorageLive(_37)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1571:13-1571:34)
  8: StorageLive(_38)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1571:13-1571:21)
  9: _38 = &_25
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1571:13-1571:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1571:13-1571:34)
      kind: _37 = hybrid::id::LazyStateID::is_unknown(move _38) -> [return: bb25, unwind: bb33]
  }
  preds [bb19, bb21]
  succs [bb25, bb33]

bb23
  0: StorageLive(_32)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:65-1570:66)
  1: _32 = move ((_26 as Break).0: core::result::Result<core::convert::Infallible, hybrid::error::StartError>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:65-1570:66)
  2: StorageLive(_34)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:65-1570:66)
  3: _34 = move _32
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:65-1570:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:24-1570:66)
      kind: _0 = <core::result::Result<hybrid::id::LazyStateID, hybrid::error::StartError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, hybrid::error::StartError>>>::from_residual(move _34) -> [return: bb24, unwind: bb33]
  }
  preds [bb21]
  succs [bb24, bb33]

bb24
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:65-1570:66)
  1: StorageDead(_32)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:65-1570:66)
  2: StorageDead(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1570:66-1570:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb30
  }
  preds [bb23]
  succs [bb30]

bb25
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1571:13-1571:34)
      kind: switchInt(move _37) -> [0: bb27, otherwise: bb26]
  }
  preds [bb22]
  succs [bb26, bb27]

bb26
  0: StorageDead(_38)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1571:33-1571:34)
  1: _36 = const ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1573:10-1573:10)
  2: StorageDead(_37)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1573:9-1573:10)
  3: StorageDead(_36)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1573:9-1573:10)
  4: StorageLive(_41)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:9-1574:31)
  5: StorageLive(_42)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:9-1574:31)
  6: StorageLive(_43)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:19-1574:23)
  7: _43 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:19-1574:23)
  8: StorageLive(_44)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:25-1574:30)
  9: _44 = &mut (*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:25-1574:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:9-1574:31)
      kind: _42 = hybrid::dfa::Lazy::<'_, '_>::new(move _43, move _44) -> [return: bb28, unwind: bb33]
  }
  preds [bb25]
  succs [bb28, bb33]

bb27
  0: StorageDead(_38)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1571:33-1571:34)
  1: StorageLive(_40)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1572:23-1572:31)
  2: _40 = _25
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1572:23-1572:31)
  3: _0 = core::result::Result::<hybrid::id::LazyStateID, hybrid::error::StartError>::Ok(move _40)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1572:20-1572:32)
  4: StorageDead(_40)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1572:31-1572:32)
  5: StorageDead(_37)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1573:9-1573:10)
  6: StorageDead(_36)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1573:9-1573:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb30
  }
  preds [bb25]
  succs [bb30]

bb28
  0: _41 = &mut _42
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:9-1574:31)
  1: StorageDead(_44)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:30-1574:31)
  2: StorageDead(_43)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:30-1574:31)
  3: StorageLive(_45)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:50-1574:58)
  4: _45 = _7
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:50-1574:58)
  5: StorageLive(_46)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:60-1574:65)
  6: _46 = _9
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:60-1574:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:9-1574:66)
      kind: _0 = hybrid::dfa::Lazy::<'_, '_>::cache_start_group(move _41, move _45, move _46) -> [return: bb29, unwind: bb33]
  }
  preds [bb26]
  succs [bb29, bb33]

bb29
  0: StorageDead(_46)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:65-1574:66)
  1: StorageDead(_45)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:65-1574:66)
  2: StorageDead(_41)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1574:65-1574:66)
  3: StorageDead(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1575:5-1575:6)
  4: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1575:5-1575:6)
  5: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1575:5-1575:6)
  6: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1575:5-1575:6)
  7: StorageDead(_42)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1575:5-1575:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1575:6-1575:6)
      kind: goto -> bb32
  }
  preds [bb28]
  succs [bb32]

bb30
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1575:5-1575:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb31
  }
  preds [bb24, bb27]
  succs [bb31]

bb31
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1575:5-1575:6)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1575:5-1575:6)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1575:5-1575:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1575:6-1575:6)
      kind: goto -> bb32
  }
  preds [bb13, bb30]
  succs [bb32]

bb32
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1575:6-1575:6)
      kind: return
  }
  preds [bb29, bb31]
  succs []

bb33
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1554:5-1575:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb6, bb10, bb12, bb15, bb17, bb18, bb22, bb23, bb26, bb28]
  succs []

