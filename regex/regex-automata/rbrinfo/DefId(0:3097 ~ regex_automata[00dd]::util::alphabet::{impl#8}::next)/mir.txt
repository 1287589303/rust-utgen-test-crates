bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:638:9-657:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:638:9-657:10)
      kind: goto -> bb1
  }
  preds []
  succs [bb1]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:638:9-657:10)
      kind: falseUnwind -> [real: bb2, unwind: bb25]
  }
  preds [bb0, bb23]
  succs [bb2, bb25]

bb2
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:639:17-639:24)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:639:33-639:53)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:639:33-639:46)
  3: _6 = &mut ((*_1).0: util::alphabet::ByteClassElements<'_>)
    SourceInfo(regex-automata/src/util/alphabet.rs:639:33-639:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:639:33-639:53)
      kind: _5 = <util::alphabet::ByteClassElements<'_> as core::iter::Iterator>::next(move _6) -> [return: bb3, unwind: bb25]
  }
  preds [bb1]
  succs [bb3, bb25]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:639:52-639:53)
  1: PlaceMention(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:639:33-639:53)
  2: _7 = discriminant(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:639:33-639:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:639:27-639:53)
      kind: switchInt(move _7) -> [0: bb5, 1: bb6, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5, bb6]

bb4
  0: FakeRead(ForMatchedPlace(None), _5)
    SourceInfo(regex-automata/src/util/alphabet.rs:639:33-639:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:639:33-639:53)
      kind: unreachable
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:640:17-640:21)
      kind: falseEdge -> [real: bb7, imaginary: bb6]
  }
  preds [bb3]
  succs [bb6, bb7]

bb6
  0: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:641:22-641:29)
  1: _10 = ((_5 as Some).0: util::alphabet::Unit)
    SourceInfo(regex-automata/src/util/alphabet.rs:641:22-641:29)
  2: _4 = _10
    SourceInfo(regex-automata/src/util/alphabet.rs:641:34-641:41)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:641:40-641:41)
  4: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/alphabet.rs:639:17-639:24)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:642:14-642:15)
  6: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:643:19-643:36)
  7: StorageLive(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:643:19-643:29)
  8: _12 = &mut ((*_1).1: core::option::Option<(util::alphabet::Unit, util::alphabet::Unit)>)
    SourceInfo(regex-automata/src/util/alphabet.rs:643:19-643:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:643:19-643:36)
      kind: _11 = core::option::Option::<(util::alphabet::Unit, util::alphabet::Unit)>::take(move _12) -> [return: bb9, unwind: bb25]
  }
  preds [bb3, bb5]
  succs [bb9, bb25]

bb7
  0: StorageLive(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:640:32-640:42)
  1: _9 = &mut ((*_1).1: core::option::Option<(util::alphabet::Unit, util::alphabet::Unit)>)
    SourceInfo(regex-automata/src/util/alphabet.rs:640:32-640:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:640:32-640:49)
      kind: _0 = core::option::Option::<(util::alphabet::Unit, util::alphabet::Unit)>::take(move _9) -> [return: bb8, unwind: bb25]
  }
  preds [bb5]
  succs [bb8, bb25]

bb8
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:640:48-640:49)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:642:14-642:15)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:657:9-657:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb24
  }
  preds [bb7]
  succs [bb24]

bb9
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:643:35-643:36)
  1: PlaceMention(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:643:19-643:36)
  2: _13 = discriminant(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:643:19-643:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:643:13-643:36)
      kind: switchInt(move _13) -> [0: bb11, 1: bb12, otherwise: bb10]
  }
  preds [bb6]
  succs [bb10, bb11, bb12]

bb10
  0: FakeRead(ForMatchedPlace(None), _11)
    SourceInfo(regex-automata/src/util/alphabet.rs:643:19-643:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:643:19-643:36)
      kind: unreachable
  }
  preds [bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:644:17-644:21)
      kind: falseEdge -> [real: bb13, imaginary: bb12]
  }
  preds [bb9]
  succs [bb12, bb13]

bb12
  0: StorageLive(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:647:23-647:28)
  1: _18 = (((_11 as Some).0: (util::alphabet::Unit, util::alphabet::Unit)).0: util::alphabet::Unit)
    SourceInfo(regex-automata/src/util/alphabet.rs:647:23-647:28)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:647:30-647:33)
  3: _19 = (((_11 as Some).0: (util::alphabet::Unit, util::alphabet::Unit)).1: util::alphabet::Unit)
    SourceInfo(regex-automata/src/util/alphabet.rs:647:30-647:33)
  4: StorageLive(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:21-653:22)
  5: StorageLive(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:24-648:64)
  6: StorageLive(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:24-648:42)
  7: StorageLive(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:24-648:38)
  8: StorageLive(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:24-648:27)
  9: _24 = _19
    SourceInfo(regex-automata/src/util/alphabet.rs:648:24-648:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:648:24-648:38)
      kind: _23 = util::alphabet::Unit::as_usize(move _24) -> [return: bb14, unwind: bb25]
  }
  preds [bb9, bb11]
  succs [bb14, bb25]

bb13
  0: StorageLive(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:645:34-645:58)
  1: StorageLive(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:645:39-645:57)
  2: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:645:40-645:47)
  3: _16 = _4
    SourceInfo(regex-automata/src/util/alphabet.rs:645:40-645:47)
  4: StorageLive(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:645:49-645:56)
  5: _17 = _4
    SourceInfo(regex-automata/src/util/alphabet.rs:645:49-645:56)
  6: _15 = (move _16, move _17)
    SourceInfo(regex-automata/src/util/alphabet.rs:645:39-645:57)
  7: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:645:56-645:57)
  8: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:645:56-645:57)
  9: _14 = core::option::Option::<(util::alphabet::Unit, util::alphabet::Unit)>::Some(move _15)
    SourceInfo(regex-automata/src/util/alphabet.rs:645:34-645:58)
  10: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:645:57-645:58)
  11: ((*_1).1: core::option::Option<(util::alphabet::Unit, util::alphabet::Unit)>) = move _14
    SourceInfo(regex-automata/src/util/alphabet.rs:645:21-645:58)
  12: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:645:57-645:58)
  13: _3 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:644:25-646:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:644:25-646:18)
      kind: goto -> bb23
  }
  preds [bb11]
  succs [bb23]

bb14
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:37-648:38)
  1: _25 = AddWithOverflow(_23, const 1_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:24-648:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:648:24-648:42)
      kind: assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", move _23, const 1_usize) -> [success: bb15, unwind: bb25]
  }
  preds [bb12]
  succs [bb15, bb25]

bb15
  0: _22 = move (_25.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:24-648:42)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:41-648:42)
  2: StorageLive(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:46-648:64)
  3: StorageLive(_27)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:46-648:53)
  4: _27 = _4
    SourceInfo(regex-automata/src/util/alphabet.rs:648:46-648:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:648:46-648:64)
      kind: _26 = util::alphabet::Unit::as_usize(move _27) -> [return: bb16, unwind: bb25]
  }
  preds [bb14]
  succs [bb16, bb25]

bb16
  0: StorageDead(_27)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:63-648:64)
  1: _21 = Ne(move _22, move _26)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:24-648:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:648:24-648:64)
      kind: switchInt(move _21) -> [0: bb18, otherwise: bb17]
  }
  preds [bb15]
  succs [bb17, bb18]

bb17
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:63-648:64)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:63-648:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:650:21-653:22)
      kind: goto -> bb21
  }
  preds [bb16]
  succs [bb21]

bb18
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:63-648:64)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:648:63-648:64)
  2: StorageLive(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:649:28-649:44)
  3: StorageLive(_29)
    SourceInfo(regex-automata/src/util/alphabet.rs:649:28-649:35)
  4: _29 = _4
    SourceInfo(regex-automata/src/util/alphabet.rs:649:28-649:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:649:28-649:44)
      kind: _28 = util::alphabet::Unit::is_eoi(move _29) -> [return: bb19, unwind: bb25]
  }
  preds [bb16]
  succs [bb19, bb25]

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:649:28-649:44)
      kind: switchInt(move _28) -> [0: bb22, otherwise: bb20]
  }
  preds [bb18]
  succs [bb20, bb22]

bb20
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/util/alphabet.rs:649:43-649:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:650:21-653:22)
      kind: goto -> bb21
  }
  preds [bb19]
  succs [bb21]

bb21
  0: StorageLive(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:651:38-651:62)
  1: StorageLive(_32)
    SourceInfo(regex-automata/src/util/alphabet.rs:651:43-651:61)
  2: StorageLive(_33)
    SourceInfo(regex-automata/src/util/alphabet.rs:651:44-651:51)
  3: _33 = _4
    SourceInfo(regex-automata/src/util/alphabet.rs:651:44-651:51)
  4: StorageLive(_34)
    SourceInfo(regex-automata/src/util/alphabet.rs:651:53-651:60)
  5: _34 = _4
    SourceInfo(regex-automata/src/util/alphabet.rs:651:53-651:60)
  6: _32 = (move _33, move _34)
    SourceInfo(regex-automata/src/util/alphabet.rs:651:43-651:61)
  7: StorageDead(_34)
    SourceInfo(regex-automata/src/util/alphabet.rs:651:60-651:61)
  8: StorageDead(_33)
    SourceInfo(regex-automata/src/util/alphabet.rs:651:60-651:61)
  9: _31 = core::option::Option::<(util::alphabet::Unit, util::alphabet::Unit)>::Some(move _32)
    SourceInfo(regex-automata/src/util/alphabet.rs:651:38-651:62)
  10: StorageDead(_32)
    SourceInfo(regex-automata/src/util/alphabet.rs:651:61-651:62)
  11: ((*_1).1: core::option::Option<(util::alphabet::Unit, util::alphabet::Unit)>) = move _31
    SourceInfo(regex-automata/src/util/alphabet.rs:651:25-651:62)
  12: StorageDead(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:651:61-651:62)
  13: StorageLive(_35)
    SourceInfo(regex-automata/src/util/alphabet.rs:652:37-652:49)
  14: StorageLive(_36)
    SourceInfo(regex-automata/src/util/alphabet.rs:652:38-652:43)
  15: _36 = _18
    SourceInfo(regex-automata/src/util/alphabet.rs:652:38-652:43)
  16: StorageLive(_37)
    SourceInfo(regex-automata/src/util/alphabet.rs:652:45-652:48)
  17: _37 = _19
    SourceInfo(regex-automata/src/util/alphabet.rs:652:45-652:48)
  18: _35 = (move _36, move _37)
    SourceInfo(regex-automata/src/util/alphabet.rs:652:37-652:49)
  19: StorageDead(_37)
    SourceInfo(regex-automata/src/util/alphabet.rs:652:48-652:49)
  20: StorageDead(_36)
    SourceInfo(regex-automata/src/util/alphabet.rs:652:48-652:49)
  21: _0 = core::option::Option::<(util::alphabet::Unit, util::alphabet::Unit)>::Some(move _35)
    SourceInfo(regex-automata/src/util/alphabet.rs:652:32-652:50)
  22: StorageDead(_35)
    SourceInfo(regex-automata/src/util/alphabet.rs:652:49-652:50)
  23: StorageDead(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:653:21-653:22)
  24: StorageDead(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:653:21-653:22)
  25: StorageDead(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:653:21-653:22)
  26: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:655:17-655:18)
  27: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:655:17-655:18)
  28: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:657:9-657:10)
  29: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:657:9-657:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb24
  }
  preds [bb17, bb20]
  succs [bb24]

bb22
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/util/alphabet.rs:649:43-649:44)
  1: _20 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:653:22-653:22)
  2: StorageDead(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:653:21-653:22)
  3: StorageDead(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:653:21-653:22)
  4: StorageDead(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:653:21-653:22)
  5: StorageLive(_38)
    SourceInfo(regex-automata/src/util/alphabet.rs:654:34-654:56)
  6: StorageLive(_39)
    SourceInfo(regex-automata/src/util/alphabet.rs:654:39-654:55)
  7: StorageLive(_40)
    SourceInfo(regex-automata/src/util/alphabet.rs:654:40-654:45)
  8: _40 = _18
    SourceInfo(regex-automata/src/util/alphabet.rs:654:40-654:45)
  9: StorageLive(_41)
    SourceInfo(regex-automata/src/util/alphabet.rs:654:47-654:54)
  10: _41 = _4
    SourceInfo(regex-automata/src/util/alphabet.rs:654:47-654:54)
  11: _39 = (move _40, move _41)
    SourceInfo(regex-automata/src/util/alphabet.rs:654:39-654:55)
  12: StorageDead(_41)
    SourceInfo(regex-automata/src/util/alphabet.rs:654:54-654:55)
  13: StorageDead(_40)
    SourceInfo(regex-automata/src/util/alphabet.rs:654:54-654:55)
  14: _38 = core::option::Option::<(util::alphabet::Unit, util::alphabet::Unit)>::Some(move _39)
    SourceInfo(regex-automata/src/util/alphabet.rs:654:34-654:56)
  15: StorageDead(_39)
    SourceInfo(regex-automata/src/util/alphabet.rs:654:55-654:56)
  16: ((*_1).1: core::option::Option<(util::alphabet::Unit, util::alphabet::Unit)>) = move _38
    SourceInfo(regex-automata/src/util/alphabet.rs:654:21-654:56)
  17: StorageDead(_38)
    SourceInfo(regex-automata/src/util/alphabet.rs:654:55-654:56)
  18: _3 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:647:39-655:18)
  19: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:655:17-655:18)
  20: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:655:17-655:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:655:17-655:18)
      kind: goto -> bb23
  }
  preds [bb19]
  succs [bb23]

bb23
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:657:9-657:10)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:657:9-657:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:638:9-657:10)
      kind: goto -> bb1
  }
  preds [bb13, bb22]
  succs [bb1]

bb24
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:657:9-657:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:658:6-658:6)
      kind: return
  }
  preds [bb8, bb21]
  succs []

bb25
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:637:5-658:6)
      kind: resume
  }
  preds [bb1, bb2, bb6, bb7, bb12, bb14, bb15, bb18]
  succs []

