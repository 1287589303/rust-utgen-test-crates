bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:3060:13-3060:16)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3060:19-3060:43)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3060:19-3060:33)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:3060:19-3060:23)
  4: _6 = &(*_1)
    SourceInfo(regex-automata/src/dfa/dense.rs:3060:19-3060:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3060:19-3060:33)
      kind: _5 = dfa::dense::DFA::<T>::special(move _6) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:3060:32-3060:33)
  1: _4 = &((*_5).4: util::primitives::StateID)
    SourceInfo(regex-automata/src/dfa/dense.rs:3060:19-3060:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3060:19-3060:54)
      kind: _3 = util::primitives::StateID::as_usize(move _4) -> [return: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3060:53-3060:54)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/dfa/dense.rs:3060:13-3060:16)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3060:54-3060:55)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:9-3064:13)
  4: _7 = &(*_1)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:9-3064:13)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:23-3064:66)
  6: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:46-3064:65)
  7: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:46-3064:59)
  8: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:46-3064:48)
  9: _11 = &_2
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:46-3064:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3064:46-3064:59)
      kind: _10 = util::primitives::StateID::as_usize(move _11) -> [return: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:58-3064:59)
  1: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:62-3064:65)
  2: _12 = _3
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:62-3064:65)
  3: _13 = SubWithOverflow(_10, _12)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:46-3064:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3064:46-3064:65)
      kind: assert(!move (_13.1: bool), "attempt to compute `{} - {}`, which would overflow", move _10, move _12) -> [success: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: _9 = move (_13.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:46-3064:65)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:64-3064:65)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:64-3064:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3064:23-3064:66)
      kind: _8 = util::primitives::StateID::new_unchecked(move _9) -> [return: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:65-3064:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3064:9-3064:67)
      kind: _0 = dfa::dense::DFA::<T>::to_index(move _7, move _8) -> [return: bb6, unwind: bb7]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:66-3064:67)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:3064:66-3064:67)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:3065:5-3065:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3065:6-3065:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3059:5-3065:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5]
  succs []

