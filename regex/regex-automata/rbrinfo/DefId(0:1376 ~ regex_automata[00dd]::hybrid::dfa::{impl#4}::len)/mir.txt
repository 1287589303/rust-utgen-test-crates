bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:12-2059:33)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:12-2059:22)
  2: _3 = ((*_1).0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:12-2059:22)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:26-2059:33)
  4: _4 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:26-2059:33)
  5: _2 = Le(move _3, move _4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:12-2059:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:12-2059:33)
      kind: switchInt(move _2) -> [0: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:32-2059:33)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:32-2059:33)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2060:13-2060:20)
  3: _5 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2060:13-2060:20)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2060:23-2060:33)
  5: _6 = ((*_1).0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2060:23-2060:33)
  6: _7 = SubWithOverflow(_5, _6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2060:13-2060:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2060:13-2060:33)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _5, move _6) -> [success: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _0 = move (_7.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2060:13-2060:33)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2060:32-2060:33)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2060:32-2060:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:9-2063:10)
      kind: goto -> bb5
  }
  preds [bb1]
  succs [bb5]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:32-2059:33)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:32-2059:33)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2062:13-2062:23)
  3: _8 = ((*_1).0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2062:13-2062:23)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2062:26-2062:33)
  5: _9 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2062:26-2062:33)
  6: _10 = SubWithOverflow(_8, _9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2062:13-2062:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2062:13-2062:33)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", move _8, move _9) -> [success: bb4, unwind: bb6]
  }
  preds [bb0]
  succs [bb4, bb6]

bb4
  0: _0 = move (_10.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2062:13-2062:33)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2062:32-2062:33)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2062:32-2062:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2059:9-2063:10)
      kind: goto -> bb5
  }
  preds [bb3]
  succs [bb5]

bb5
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2063:9-2063:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2064:6-2064:6)
      kind: return
  }
  preds [bb2, bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2058:5-2064:6)
      kind: resume
  }
  preds [bb1, bb3]
  succs []

