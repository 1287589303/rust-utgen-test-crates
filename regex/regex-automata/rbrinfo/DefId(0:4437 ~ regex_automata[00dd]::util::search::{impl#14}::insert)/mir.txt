bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/search.rs:1226:9-1226:29)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/search.rs:1226:9-1226:13)
  2: _4 = &mut (*_1)
    SourceInfo(regex-automata/src/util/search.rs:1226:9-1226:13)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/util/search.rs:1226:25-1226:28)
  4: _5 = _2
    SourceInfo(regex-automata/src/util/search.rs:1226:25-1226:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/search.rs:1226:9-1226:29)
      kind: _3 = util::search::PatternSet::try_insert(move _4, move _5) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/search.rs:1226:28-1226:29)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/search.rs:1226:28-1226:29)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/search.rs:1227:21-1227:65)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/search.rs:1227:21-1227:65)
  4: _7 = const "PatternSet should have sufficient capacity"
    SourceInfo(regex-automata/src/util/search.rs:1227:21-1227:65)
  5: _6 = &(*_7)
    SourceInfo(regex-automata/src/util/search.rs:1227:21-1227:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/search.rs:1226:9-1227:66)
      kind: _0 = core::result::Result::<bool, util::search::PatternSetInsertError>::expect(move _3, move _6) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/search.rs:1227:65-1227:66)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/search.rs:1227:65-1227:66)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/util/search.rs:1228:5-1228:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/search.rs:1228:6-1228:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/search.rs:1225:5-1228:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

