bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3588:38)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3587:27)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3586:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3586:25)
      kind: _4 = core::mem::size_of::<u32>() -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3587:11-3587:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3587:11-3587:27)
      kind: _5 = core::mem::size_of::<u32>() -> [return: bb2, unwind: bb10]
  }
  preds [bb0]
  succs [bb2, bb10]

bb2
  0: _6 = AddWithOverflow(_4, _5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3587:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3587:27)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb3, unwind: bb10]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: _3 = move (_6.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3587:27)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3587:26-3587:27)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3587:26-3587:27)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:3588:11-3588:38)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/dense.rs:3588:11-3588:23)
  5: _8 = &((*_1).1: util::alphabet::ByteClasses)
    SourceInfo(regex-automata/src/dfa/dense.rs:3588:11-3588:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3588:11-3588:38)
      kind: _7 = util::alphabet::ByteClasses::write_to_len(move _8) -> [return: bb4, unwind: bb10]
  }
  preds [bb2]
  succs [bb4, bb10]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/dense.rs:3588:37-3588:38)
  1: _9 = AddWithOverflow(_3, _7)
    SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3588:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3588:38)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _7) -> [success: bb5, unwind: bb10]
  }
  preds [bb3]
  succs [bb5, bb10]

bb5
  0: _2 = move (_9.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3588:38)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:3588:37-3588:38)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:3588:37-3588:38)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:11-3589:47)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:12-3589:30)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:12-3589:24)
  6: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:12-3589:24)
  7: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:12-3589:16)
  8: _14 = &(*_1)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:12-3589:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3589:12-3589:24)
      kind: _13 = dfa::dense::TransitionTable::<T>::table(move _14) -> [return: bb6, unwind: bb10]
  }
  preds [bb4]
  succs [bb6, bb10]

bb6
  0: _12 = &(*_13)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:12-3589:24)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:23-3589:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3589:12-3589:30)
      kind: _11 = core::slice::<impl [util::primitives::StateID]>::len(move _12) -> [return: bb7, unwind: bb10]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:29-3589:30)
  1: _15 = MulWithOverflow(_11, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:11-3589:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3589:11-3589:47)
      kind: assert(!move (_15.1: bool), "attempt to compute `{} * {}`, which would overflow", move _11, const util::primitives::StateID::SIZE) -> [success: bb8, unwind: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: _10 = move (_15.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:11-3589:47)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:46-3589:47)
  2: _16 = AddWithOverflow(_2, _10)
    SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3589:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3589:47)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _10) -> [success: bb9, unwind: bb10]
  }
  preds [bb7]
  succs [bb9, bb10]

bb9
  0: _0 = move (_16.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:3586:9-3589:47)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:46-3589:47)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/dense.rs:3589:46-3589:47)
  3: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/dense.rs:3590:5-3590:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3590:6-3590:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3585:5-3590:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8]
  succs []

