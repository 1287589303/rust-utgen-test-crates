bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1201:13-1201:21)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1201:24-1201:30)
  2: _4 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1201:24-1201:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1201:24-1201:45)
      kind: _3 = util::start::Config::get_anchored(move _4) -> [return: bb1, unwind: bb19]
  }
  preds []
  succs [bb1, bb19]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1201:44-1201:45)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1201:13-1201:21)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1202:13-1202:18)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1202:27-1202:51)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1202:27-1202:33)
  5: _7 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1202:27-1202:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1202:27-1202:51)
      kind: _6 = util::start::Config::get_look_behind(move _7) -> [return: bb2, unwind: bb19]
  }
  preds [bb0]
  succs [bb2, bb19]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1202:50-1202:51)
  1: PlaceMention(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1202:27-1202:51)
  2: _8 = discriminant(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1202:27-1202:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1202:21-1202:51)
      kind: switchInt(move _8) -> [0: bb4, 1: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1202:27-1202:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1202:27-1202:51)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1203:13-1203:17)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1204:18-1204:22)
  1: _9 = ((_6 as Some).0: u8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1204:18-1204:22)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:17-1207:18)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:21-1205:44)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:21-1205:33)
  5: _12 = &((*_1).4: util::alphabet::ByteSet)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:21-1205:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1205:21-1205:44)
      kind: _11 = util::alphabet::ByteSet::is_empty(move _12) -> [return: bb7, unwind: bb19]
  }
  preds [bb2, bb4]
  succs [bb7, bb19]

bb6
  0: _5 = util::start::Start::Text
    SourceInfo(regex-automata/src/dfa/sparse.rs:1203:21-1203:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1203:21-1203:32)
      kind: goto -> bb16
  }
  preds [bb4]
  succs [bb16]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1205:21-1205:44)
      kind: switchInt(move _11) -> [0: bb9, otherwise: bb8]
  }
  preds [bb5]
  succs [bb8, bb9]

bb8
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:43-1205:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1205:76-1207:18)
      kind: goto -> bb14
  }
  preds [bb7]
  succs [bb14]

bb9
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:43-1205:44)
  1: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:48-1205:75)
  2: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:48-1205:60)
  3: _14 = &((*_1).4: util::alphabet::ByteSet)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:48-1205:60)
  4: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:70-1205:74)
  5: _15 = _9
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:70-1205:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1205:48-1205:75)
      kind: _13 = util::alphabet::ByteSet::contains(move _14, move _15) -> [return: bb10, unwind: bb19]
  }
  preds [bb7]
  succs [bb10, bb19]

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1205:48-1205:75)
      kind: switchInt(move _13) -> [0: bb13, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb13]

bb11
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:74-1205:75)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:74-1205:75)
  2: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1206:32-1206:54)
  3: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1206:49-1206:53)
  4: _18 = _9
    SourceInfo(regex-automata/src/dfa/sparse.rs:1206:49-1206:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1206:32-1206:54)
      kind: _17 = dfa::automaton::StartError::quit(move _18) -> [return: bb12, unwind: bb19]
  }
  preds [bb10]
  succs [bb12, bb19]

bb12
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1206:53-1206:54)
  1: _0 = core::result::Result::<util::primitives::StateID, dfa::automaton::StartError>::Err(move _17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1206:28-1206:55)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1206:54-1206:55)
  3: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1207:17-1207:18)
  4: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1207:17-1207:18)
  5: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1207:17-1207:18)
  6: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1209:13-1209:14)
  7: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1210:10-1210:11)
  8: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1212:5-1212:6)
  9: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1212:5-1212:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1212:6-1212:6)
      kind: goto -> bb18
  }
  preds [bb11]
  succs [bb18]

bb13
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:74-1205:75)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1205:74-1205:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb14
  }
  preds [bb10]
  succs [bb14]

bb14
  0: _10 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1207:18-1207:18)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1207:17-1207:18)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1207:17-1207:18)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1207:17-1207:18)
  4: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1208:17-1208:34)
  5: _19 = &(((*_1).1: dfa::sparse::StartTable<T>).2: util::start::StartByteMap)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1208:17-1208:34)
  6: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1208:39-1208:43)
  7: _20 = _9
    SourceInfo(regex-automata/src/dfa/sparse.rs:1208:39-1208:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1208:17-1208:44)
      kind: _5 = util::start::StartByteMap::get(move _19, move _20) -> [return: bb15, unwind: bb19]
  }
  preds [bb8, bb13]
  succs [bb15, bb19]

bb15
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1208:43-1208:44)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1208:43-1208:44)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1209:13-1209:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1209:13-1209:14)
      kind: goto -> bb16
  }
  preds [bb14]
  succs [bb16]

bb16
  0: FakeRead(ForLet(None), _5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1202:13-1202:18)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1210:10-1210:11)
  2: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1211:9-1211:16)
  3: _21 = &((*_1).1: dfa::sparse::StartTable<T>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1211:9-1211:16)
  4: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1211:23-1211:31)
  5: _22 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1211:23-1211:31)
  6: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1211:33-1211:38)
  7: _23 = _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1211:33-1211:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1211:9-1211:39)
      kind: _0 = dfa::sparse::StartTable::<T>::start(move _21, move _22, move _23) -> [return: bb17, unwind: bb19]
  }
  preds [bb6, bb15]
  succs [bb17, bb19]

bb17
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1211:38-1211:39)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1211:38-1211:39)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1211:38-1211:39)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1212:5-1212:6)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1212:5-1212:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1212:6-1212:6)
      kind: goto -> bb18
  }
  preds [bb16]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1212:6-1212:6)
      kind: return
  }
  preds [bb12, bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1197:5-1212:6)
      kind: resume
  }
  preds [bb0, bb1, bb5, bb9, bb11, bb14, bb16]
  succs []

