{
  "regex-automata/src/util/look.rs:974:21:974:28": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == 0",
          "lhs": "at",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/look.rs:974:41:974:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/look.rs:972:16:972:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "haystack[at] == b'\\r'",
          "lhs": "haystack[at]",
          "rhs": "b'\\r'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/look.rs:973:17:973:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "haystack[at] == b'\\n'",
          "lhs": "haystack[at]",
          "rhs": "b'\\n'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/look.rs:971:9:971:34": [
    {
      "Bool": {
        "Other": "self.is_end(haystack, at)"
      }
    }
  ],
  "regex-automata/src/util/look.rs:974:32:974:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "haystack[at - 1] != b'\\r'",
          "lhs": "haystack[at - 1]",
          "rhs": "b'\\r'",
          "cmp_with_int": true
        }
      }
    }
  ]
}