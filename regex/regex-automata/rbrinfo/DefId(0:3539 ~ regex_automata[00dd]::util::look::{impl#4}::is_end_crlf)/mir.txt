bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:971:9-971:34)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:971:9-971:13)
  2: _5 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:971:9-971:13)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:971:21-971:29)
  4: _6 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:971:21-971:29)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:971:31-971:33)
  6: _7 = _3
    SourceInfo(regex-automata/src/util/look.rs:971:31-971:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:971:9-971:34)
      kind: _4 = util::look::LookMatcher::is_end(move _5, move _6, move _7) -> [return: bb1, unwind: bb18]
  }
  preds []
  succs [bb1, bb18]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:971:9-971:34)
      kind: switchInt(move _4) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:971:33-971:34)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:971:33-971:34)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:971:33-971:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:971:9-974:59)
      kind: goto -> bb6
  }
  preds [bb1]
  succs [bb6]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:971:33-971:34)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:971:33-971:34)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:971:33-971:34)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:972:16-972:37)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:972:16-972:28)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/util/look.rs:972:25-972:27)
  6: _10 = _3
    SourceInfo(regex-automata/src/util/look.rs:972:25-972:27)
  7: _11 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:972:16-972:28)
  8: _12 = Lt(_10, _11)
    SourceInfo(regex-automata/src/util/look.rs:972:16-972:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:972:16-972:28)
      kind: assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> [success: bb4, unwind: bb18]
  }
  preds [bb1]
  succs [bb4, bb18]

bb4
  0: _9 = (*_2)[_10]
    SourceInfo(regex-automata/src/util/look.rs:972:16-972:28)
  1: _8 = Eq(move _9, const 13_u8)
    SourceInfo(regex-automata/src/util/look.rs:972:16-972:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:972:16-972:37)
      kind: switchInt(move _8) -> [0: bb7, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:972:36-972:37)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:972:36-972:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:971:9-974:59)
      kind: goto -> bb6
  }
  preds [bb4]
  succs [bb6]

bb6
  0: _0 = const true
    SourceInfo(regex-automata/src/util/look.rs:971:9-974:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:971:9-974:59)
      kind: goto -> bb17
  }
  preds [bb2, bb5]
  succs [bb17]

bb7
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:972:36-972:37)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:972:36-972:37)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/look.rs:973:17-973:38)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/util/look.rs:973:17-973:29)
  4: StorageLive(_15)
    SourceInfo(regex-automata/src/util/look.rs:973:26-973:28)
  5: _15 = _3
    SourceInfo(regex-automata/src/util/look.rs:973:26-973:28)
  6: _16 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:973:17-973:29)
  7: _17 = Lt(_15, _16)
    SourceInfo(regex-automata/src/util/look.rs:973:17-973:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:973:17-973:29)
      kind: assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> [success: bb8, unwind: bb18]
  }
  preds [bb4]
  succs [bb8, bb18]

bb8
  0: _14 = (*_2)[_15]
    SourceInfo(regex-automata/src/util/look.rs:973:17-973:29)
  1: _13 = Eq(move _14, const 10_u8)
    SourceInfo(regex-automata/src/util/look.rs:973:17-973:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:973:17-973:38)
      kind: switchInt(move _13) -> [0: bb10, otherwise: bb9]
  }
  preds [bb7]
  succs [bb9, bb10]

bb9
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/util/look.rs:973:37-973:38)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/util/look.rs:973:37-973:38)
  2: StorageLive(_18)
    SourceInfo(regex-automata/src/util/look.rs:974:21-974:28)
  3: StorageLive(_19)
    SourceInfo(regex-automata/src/util/look.rs:974:21-974:23)
  4: _19 = _3
    SourceInfo(regex-automata/src/util/look.rs:974:21-974:23)
  5: _18 = Eq(move _19, const 0_usize)
    SourceInfo(regex-automata/src/util/look.rs:974:21-974:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:974:21-974:28)
      kind: switchInt(move _18) -> [0: bb12, otherwise: bb11]
  }
  preds [bb8]
  succs [bb11, bb12]

bb10
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/util/look.rs:973:37-973:38)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/util/look.rs:973:37-973:38)
  2: _0 = const false
    SourceInfo(regex-automata/src/util/look.rs:973:16-974:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:973:16-974:59)
      kind: goto -> bb16
  }
  preds [bb8]
  succs [bb16]

bb11
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/util/look.rs:974:27-974:28)
  1: _0 = const true
    SourceInfo(regex-automata/src/util/look.rs:974:20-974:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:974:20-974:58)
      kind: goto -> bb15
  }
  preds [bb9]
  succs [bb15]

bb12
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/util/look.rs:974:27-974:28)
  1: StorageLive(_20)
    SourceInfo(regex-automata/src/util/look.rs:974:32-974:48)
  2: StorageLive(_21)
    SourceInfo(regex-automata/src/util/look.rs:974:41-974:47)
  3: StorageLive(_22)
    SourceInfo(regex-automata/src/util/look.rs:974:41-974:43)
  4: _22 = _3
    SourceInfo(regex-automata/src/util/look.rs:974:41-974:43)
  5: _23 = SubWithOverflow(_22, const 1_usize)
    SourceInfo(regex-automata/src/util/look.rs:974:41-974:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:974:41-974:47)
      kind: assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", move _22, const 1_usize) -> [success: bb13, unwind: bb18]
  }
  preds [bb9]
  succs [bb13, bb18]

bb13
  0: _21 = move (_23.0: usize)
    SourceInfo(regex-automata/src/util/look.rs:974:41-974:47)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/util/look.rs:974:46-974:47)
  2: _24 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:974:32-974:48)
  3: _25 = Lt(_21, _24)
    SourceInfo(regex-automata/src/util/look.rs:974:32-974:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:974:32-974:48)
      kind: assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _21) -> [success: bb14, unwind: bb18]
  }
  preds [bb12]
  succs [bb14, bb18]

bb14
  0: _20 = (*_2)[_21]
    SourceInfo(regex-automata/src/util/look.rs:974:32-974:48)
  1: _0 = Ne(move _20, const 13_u8)
    SourceInfo(regex-automata/src/util/look.rs:974:32-974:57)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/util/look.rs:974:56-974:57)
  3: StorageDead(_20)
    SourceInfo(regex-automata/src/util/look.rs:974:56-974:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:974:20-974:58)
      kind: goto -> bb15
  }
  preds [bb13]
  succs [bb15]

bb15
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/util/look.rs:974:57-974:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:973:16-974:59)
      kind: goto -> bb16
  }
  preds [bb11, bb14]
  succs [bb16]

bb16
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/look.rs:974:58-974:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:971:9-974:59)
      kind: goto -> bb17
  }
  preds [bb10, bb15]
  succs [bb17]

bb17
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:974:58-974:59)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:974:58-974:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:975:6-975:6)
      kind: return
  }
  preds [bb6, bb16]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:970:5-975:6)
      kind: resume
  }
  preds [bb0, bb3, bb7, bb12, bb13]
  succs []

