bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:9-2158:56)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:13-2157:14)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:17-2157:33)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:17-2157:27)
  4: _5 = &((*_1).0: std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>>)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:17-2157:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:17-2157:33)
      kind: _4 = std::vec::Vec::<core::option::Option<util::primitives::NonMaxUsize>>::len(move _5) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:32-2157:33)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:36-2157:59)
  2: _6 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:36-2157:59)
  3: _7 = SubWithOverflow(_4, _6)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:17-2157:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:17-2157:59)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _4, move _6) -> [success: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _3 = move (_7.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:17-2157:59)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:58-2157:59)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:58-2157:59)
  3: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2157:13-2157:14)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:9-2158:56)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:24-2158:56)
  6: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:14-2158:24)
  7: _10 = &mut ((*_1).0: std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>>)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:14-2158:24)
  8: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:25-2158:55)
  9: StorageLive(_12)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:25-2158:26)
  10: _12 = _3
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:25-2158:26)
  11: StorageLive(_13)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:28-2158:55)
  12: StorageLive(_14)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:28-2158:29)
  13: _14 = _3
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:28-2158:29)
  14: StorageLive(_15)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:32-2158:55)
  15: _15 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:32-2158:55)
  16: _16 = AddWithOverflow(_14, _15)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:28-2158:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:28-2158:55)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _14, move _15) -> [success: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _13 = move (_16.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:28-2158:55)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:54-2158:55)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:54-2158:55)
  3: _11 = core::ops::Range::<usize> { start: move _12, end: move _13 }
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:25-2158:55)
  4: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:54-2158:55)
  5: StorageDead(_12)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:54-2158:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:24-2158:56)
      kind: _9 = <std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>> as core::ops::IndexMut<core::ops::Range<usize>>>::index_mut(move _10, move _11) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:55-2158:56)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:55-2158:56)
  2: _8 = &mut (*_9)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:9-2158:56)
  3: _2 = &mut (*_8)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:9-2158:56)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2159:5-2159:6)
  5: _0 = &mut (*_2)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2158:9-2158:56)
  6: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2159:5-2159:6)
  7: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2159:5-2159:6)
  8: StorageDead(_2)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2159:5-2159:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2159:6-2159:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:2156:5-2159:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

