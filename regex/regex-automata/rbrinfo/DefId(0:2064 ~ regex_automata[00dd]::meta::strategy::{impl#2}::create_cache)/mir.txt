bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:363:25-363:65)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:363:39-363:64)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:363:39-363:56)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:363:39-363:56)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:363:39-363:43)
  5: _6 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:363:39-363:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:363:39-363:56)
      kind: _5 = <meta::strategy::Pre<P> as meta::strategy::Strategy>::group_info(move _6) -> [return: bb1, unwind: bb21]
  }
  preds []
  succs [bb1, bb21]

bb1
  0: _4 = &(*_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:363:39-363:56)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:363:55-363:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:363:39-363:64)
      kind: _3 = <util::captures::GroupInfo as core::clone::Clone>::clone(move _4) -> [return: bb2, unwind: bb21]
  }
  preds [bb0]
  succs [bb2, bb21]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:363:63-363:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:363:25-363:65)
      kind: _2 = util::captures::Captures::all(move _3) -> [return: bb3, unwind: bb20]
  }
  preds [bb1]
  succs [bb3, bb20]

bb3
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:363:64-363:65)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:364:21-364:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:364:21-364:50)
      kind: _7 = meta::wrappers::PikeVMCache::none() -> [return: bb4, unwind: bb19]
  }
  preds [bb2]
  succs [bb4, bb19]

bb4
  0: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:365:24-365:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:365:24-365:65)
      kind: _8 = meta::wrappers::BoundedBacktrackerCache::none() -> [return: bb5, unwind: bb18]
  }
  preds [bb3]
  succs [bb5, bb18]

bb5
  0: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:366:22-366:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:366:22-366:52)
      kind: _9 = meta::wrappers::OnePassCache::none() -> [return: bb6, unwind: bb17]
  }
  preds [bb4]
  succs [bb6, bb17]

bb6
  0: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:367:21-367:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:367:21-367:50)
      kind: _10 = meta::wrappers::HybridCache::none() -> [return: bb7, unwind: bb16]
  }
  preds [bb5]
  succs [bb7, bb16]

bb7
  0: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:368:24-368:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:368:24-368:60)
      kind: _11 = meta::wrappers::ReverseHybridCache::none() -> [return: bb8, unwind: bb15]
  }
  preds [bb6]
  succs [bb8, bb15]

bb8
  0: _0 = meta::regex::Cache { capmatches: move _2, pikevm: move _7, backtrack: move _8, onepass: move _9, hybrid: move _10, revhybrid: move _11 }
    SourceInfo(regex-automata/src/meta/strategy.rs:362:9-369:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
      kind: drop(_11) -> [return: bb9, unwind: bb15]
  }
  preds [bb7]
  succs [bb9, bb15]

bb9
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
      kind: drop(_10) -> [return: bb10, unwind: bb16]
  }
  preds [bb8]
  succs [bb10, bb16]

bb10
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
      kind: drop(_9) -> [return: bb11, unwind: bb17]
  }
  preds [bb9]
  succs [bb11, bb17]

bb11
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
      kind: drop(_8) -> [return: bb12, unwind: bb18]
  }
  preds [bb10]
  succs [bb12, bb18]

bb12
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
      kind: drop(_7) -> [return: bb13, unwind: bb19]
  }
  preds [bb11]
  succs [bb13, bb19]

bb13
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
      kind: drop(_2) -> [return: bb14, unwind: bb21]
  }
  preds [bb12]
  succs [bb14, bb21]

bb14
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:370:5-370:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:370:6-370:6)
      kind: return
  }
  preds [bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
      kind: drop(_10) -> [return: bb16, unwind terminate(cleanup)]
  }
  preds [bb7, bb8]
  succs [bb16]

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
      kind: drop(_9) -> [return: bb17, unwind terminate(cleanup)]
  }
  preds [bb6, bb9, bb15]
  succs [bb17]

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
      kind: drop(_8) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb5, bb10, bb16]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
      kind: drop(_7) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb4, bb11, bb17]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:369:9-369:10)
      kind: drop(_2) -> [return: bb21, unwind terminate(cleanup)]
  }
  preds [bb3, bb12, bb18]
  succs [bb21]

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:363:64-363:65)
      kind: drop(_3) -> [return: bb21, unwind terminate(cleanup)]
  }
  preds [bb2]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:361:5-370:6)
      kind: resume
  }
  preds [bb0, bb1, bb13, bb19, bb20]
  succs []

