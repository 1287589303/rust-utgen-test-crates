bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:14-42:63)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:14-42:32)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:14-42:26)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:14-42:26)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:14-42:17)
  5: _7 = &(*_1)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:14-42:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:14-42:26)
      kind: _6 = nfa::thompson::nfa::NFA::states(move _7) -> [return: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: _5 = &(*_6)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:14-42:26)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:25-42:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:14-42:32)
      kind: _4 = core::slice::<impl [nfa::thompson::nfa::State]>::len(move _5) -> [return: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:31-42:32)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:35-42:63)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:36-42:58)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:36-42:52)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:36-42:52)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:36-42:41)
  6: _12 = &(*_2)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:36-42:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:36-42:52)
      kind: _11 = util::search::Input::<'_>::get_span(move _12) -> [return: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: _10 = &_11
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:36-42:52)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:51-42:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:36-42:58)
      kind: _9 = util::search::Span::len(move _10) -> [return: bb4, unwind: bb8]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:57-42:58)
  1: _13 = AddWithOverflow(_9, const 1_usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:35-42:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:35-42:63)
      kind: assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_usize) -> [success: bb5, unwind: bb8]
  }
  preds [bb3]
  succs [bb5, bb8]

bb5
  0: _8 = move (_13.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:35-42:63)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:62-42:63)
  2: _14 = MulWithOverflow(_4, _8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:14-42:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:14-42:63)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _8) -> [success: bb6, unwind: bb8]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: _3 = move (_14.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:14-42:63)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:62-42:63)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:62-42:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:5-42:67)
      kind: _0 = nfa::thompson::backtrack::div_ceil(move _3, const 8_usize) -> [return: bb7, unwind: bb8]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:42:66-42:67)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:43:1-43:2)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:43:1-43:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:43:2-43:2)
      kind: return
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:41:1-43:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6]
  succs []

