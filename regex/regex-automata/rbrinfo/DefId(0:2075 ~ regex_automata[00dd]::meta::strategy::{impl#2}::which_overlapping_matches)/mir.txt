bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:12-436:47)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:12-436:37)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:12-436:37)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:12-436:16)
  4: _8 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:12-436:16)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:24-436:29)
  6: _9 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:24-436:29)
  7: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:31-436:36)
  8: _10 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:31-436:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:436:12-436:37)
      kind: _7 = <meta::strategy::Pre<P> as meta::strategy::Strategy>::search(move _8, move _9, move _10) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: _6 = &_7
    SourceInfo(regex-automata/src/meta/strategy.rs:436:12-436:37)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:36-436:37)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:36-436:37)
  3: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:36-436:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:436:12-436:47)
      kind: _5 = core::option::Option::<util::search::Match>::is_some(move _6) -> [return: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:436:12-436:47)
      kind: switchInt(move _5) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:46-436:47)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:46-436:47)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:437:13-437:43)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:437:13-437:19)
  4: _12 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:437:13-437:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:437:13-437:43)
      kind: _11 = util::search::PatternSet::insert(move _12, const util::primitives::PatternID::ZERO) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:437:42-437:43)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:437:43-437:44)
  2: _0 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:436:48-438:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:436:9-438:10)
      kind: goto -> bb6
  }
  preds [bb3]
  succs [bb6]

bb5
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:46-436:47)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:436:46-436:47)
  2: _0 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:438:10-438:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:436:9-438:10)
      kind: goto -> bb6
  }
  preds [bb2]
  succs [bb6]

bb6
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:438:9-438:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:439:6-439:6)
      kind: return
  }
  preds [bb4, bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:430:5-439:6)
      kind: resume
  }
  preds [bb0, bb1, bb3]
  succs []

