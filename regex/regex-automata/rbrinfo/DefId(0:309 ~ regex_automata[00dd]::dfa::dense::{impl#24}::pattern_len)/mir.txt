bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:9-4631:43)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:9-4631:22)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:9-4631:13)
  3: _5 = &(*_1)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:9-4631:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4631:9-4631:22)
      kind: _4 = dfa::dense::MatchStates::<T>::slices(move _5) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:21-4631:22)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:23-4631:42)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:23-4631:38)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:23-4631:34)
  4: _8 = _2
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:23-4631:34)
  5: _9 = MulWithOverflow(_8, const 2_usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:23-4631:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4631:23-4631:38)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", move _8, const 2_usize) -> [success: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _7 = move (_9.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:23-4631:38)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:37-4631:38)
  2: _10 = AddWithOverflow(_7, const 1_usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:23-4631:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4631:23-4631:42)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: _6 = move (_10.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:23-4631:42)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:41-4631:42)
  2: _11 = Len((*_4))
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:9-4631:43)
  3: _12 = Lt(_6, _11)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:9-4631:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4631:9-4631:43)
      kind: assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _6) -> [success: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: _3 = &(*_4)[_6]
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:9-4631:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4631:9-4631:54)
      kind: _0 = util::primitives::PatternID::as_usize(move _3) -> [return: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:4631:53-4631:54)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:4632:5-4632:6)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:4632:5-4632:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4632:6-4632:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:4630:5-4632:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

