{
  "regex-automata/src/hybrid/dfa.rs:2028:9:2032:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE\n        + self.states.len() * STATE_SIZE\n        // Maps likely use more memory than this, but it's probably close.\n        + self.states_to_id.len() * (STATE_SIZE + ID_SIZE)",
          "lhs": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE\n        + self.states.len() * STATE_SIZE",
          "rhs": "self.states_to_id.len() * (STATE_SIZE + ID_SIZE)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2029:11:2029:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.starts.len() * ID_SIZE",
          "lhs": "self.starts.len()",
          "rhs": "ID_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2028:9:2028:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.trans.len() * ID_SIZE",
          "lhs": "self.trans.len()",
          "rhs": "ID_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2028:9:2029:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE",
          "lhs": "self.trans.len() * ID_SIZE",
          "rhs": "self.starts.len() * ID_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2030:11:2030:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.states.len() * STATE_SIZE",
          "lhs": "self.states.len()",
          "rhs": "STATE_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2032:11:2032:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.states_to_id.len() * (STATE_SIZE + ID_SIZE)",
          "lhs": "self.states_to_id.len()",
          "rhs": "(STATE_SIZE + ID_SIZE)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2034:11:2034:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.stack.capacity() * ID_SIZE",
          "lhs": "self.stack.capacity()",
          "rhs": "ID_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2028:9:2037:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE\n        + self.states.len() * STATE_SIZE\n        // Maps likely use more memory than this, but it's probably close.\n        + self.states_to_id.len() * (STATE_SIZE + ID_SIZE)\n        + self.sparses.memory_usage()\n        + self.stack.capacity() * ID_SIZE\n        + self.scratch_state_builder.capacity()\n        // Heap memory used by 'State' in both 'states' and 'states_to_id'.\n        + self.memory_usage_state",
          "lhs": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE\n        + self.states.len() * STATE_SIZE\n        // Maps likely use more memory than this, but it's probably close.\n        + self.states_to_id.len() * (STATE_SIZE + ID_SIZE)\n        + self.sparses.memory_usage()\n        + self.stack.capacity() * ID_SIZE\n        + self.scratch_state_builder.capacity()",
          "rhs": "self.memory_usage_state",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2028:9:2035:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE\n        + self.states.len() * STATE_SIZE\n        // Maps likely use more memory than this, but it's probably close.\n        + self.states_to_id.len() * (STATE_SIZE + ID_SIZE)\n        + self.sparses.memory_usage()\n        + self.stack.capacity() * ID_SIZE\n        + self.scratch_state_builder.capacity()",
          "lhs": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE\n        + self.states.len() * STATE_SIZE\n        // Maps likely use more memory than this, but it's probably close.\n        + self.states_to_id.len() * (STATE_SIZE + ID_SIZE)\n        + self.sparses.memory_usage()\n        + self.stack.capacity() * ID_SIZE",
          "rhs": "self.scratch_state_builder.capacity()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2032:37:2032:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(STATE_SIZE + ID_SIZE)",
          "lhs": "STATE_SIZE",
          "rhs": "ID_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2028:9:2030:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE\n        + self.states.len() * STATE_SIZE",
          "lhs": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE",
          "rhs": "self.states.len() * STATE_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2028:9:2034:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE\n        + self.states.len() * STATE_SIZE\n        // Maps likely use more memory than this, but it's probably close.\n        + self.states_to_id.len() * (STATE_SIZE + ID_SIZE)\n        + self.sparses.memory_usage()\n        + self.stack.capacity() * ID_SIZE",
          "lhs": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE\n        + self.states.len() * STATE_SIZE\n        // Maps likely use more memory than this, but it's probably close.\n        + self.states_to_id.len() * (STATE_SIZE + ID_SIZE)\n        + self.sparses.memory_usage()",
          "rhs": "self.stack.capacity() * ID_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2028:9:2033:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE\n        + self.states.len() * STATE_SIZE\n        // Maps likely use more memory than this, but it's probably close.\n        + self.states_to_id.len() * (STATE_SIZE + ID_SIZE)\n        + self.sparses.memory_usage()",
          "lhs": "self.trans.len() * ID_SIZE\n        + self.starts.len() * ID_SIZE\n        + self.states.len() * STATE_SIZE\n        // Maps likely use more memory than this, but it's probably close.\n        + self.states_to_id.len() * (STATE_SIZE + ID_SIZE)",
          "rhs": "self.sparses.memory_usage()",
          "cmp_with_int": false
        }
      }
    }
  ]
}