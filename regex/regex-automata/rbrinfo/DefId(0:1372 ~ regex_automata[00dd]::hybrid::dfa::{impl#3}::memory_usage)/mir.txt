bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2035:48)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2034:42)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2033:38)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2032:59)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2030:41)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2029:38)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2028:35)
  7: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2028:25)
  8: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2028:19)
  9: _10 = &((*_1).0: std::vec::Vec<hybrid::id::LazyStateID>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2028:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2028:25)
      kind: _9 = std::vec::Vec::<hybrid::id::LazyStateID>::len(move _10) -> [return: bb1, unwind: bb21]
  }
  preds []
  succs [bb1, bb21]

bb1
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:24-2028:25)
  1: _11 = MulWithOverflow(_9, const hybrid::dfa::Cache::memory_usage::ID_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2028:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2028:35)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} * {}`, which would overflow", move _9, const hybrid::dfa::Cache::memory_usage::ID_SIZE) -> [success: bb2, unwind: bb21]
  }
  preds [bb0]
  succs [bb2, bb21]

bb2
  0: _8 = move (_11.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2028:35)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:34-2028:35)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2029:11-2029:38)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2029:11-2029:28)
  4: StorageLive(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2029:11-2029:22)
  5: _14 = &((*_1).1: std::vec::Vec<hybrid::id::LazyStateID>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2029:11-2029:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2029:11-2029:28)
      kind: _13 = std::vec::Vec::<hybrid::id::LazyStateID>::len(move _14) -> [return: bb3, unwind: bb21]
  }
  preds [bb1]
  succs [bb3, bb21]

bb3
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2029:27-2029:28)
  1: _15 = MulWithOverflow(_13, const hybrid::dfa::Cache::memory_usage::ID_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2029:11-2029:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2029:11-2029:38)
      kind: assert(!move (_15.1: bool), "attempt to compute `{} * {}`, which would overflow", move _13, const hybrid::dfa::Cache::memory_usage::ID_SIZE) -> [success: bb4, unwind: bb21]
  }
  preds [bb2]
  succs [bb4, bb21]

bb4
  0: _12 = move (_15.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2029:11-2029:38)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2029:37-2029:38)
  2: _16 = AddWithOverflow(_8, _12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2029:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2029:38)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _12) -> [success: bb5, unwind: bb21]
  }
  preds [bb3]
  succs [bb5, bb21]

bb5
  0: _7 = move (_16.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2029:38)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2029:37-2029:38)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2029:37-2029:38)
  3: StorageLive(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2030:11-2030:41)
  4: StorageLive(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2030:11-2030:28)
  5: StorageLive(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2030:11-2030:22)
  6: _19 = &((*_1).2: std::vec::Vec<util::determinize::state::State>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2030:11-2030:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2030:11-2030:28)
      kind: _18 = std::vec::Vec::<util::determinize::state::State>::len(move _19) -> [return: bb6, unwind: bb21]
  }
  preds [bb4]
  succs [bb6, bb21]

bb6
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2030:27-2030:28)
  1: _20 = MulWithOverflow(_18, const hybrid::dfa::Cache::memory_usage::STATE_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2030:11-2030:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2030:11-2030:41)
      kind: assert(!move (_20.1: bool), "attempt to compute `{} * {}`, which would overflow", move _18, const hybrid::dfa::Cache::memory_usage::STATE_SIZE) -> [success: bb7, unwind: bb21]
  }
  preds [bb5]
  succs [bb7, bb21]

bb7
  0: _17 = move (_20.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2030:11-2030:41)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2030:40-2030:41)
  2: _21 = AddWithOverflow(_7, _17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2030:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2030:41)
      kind: assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _17) -> [success: bb8, unwind: bb21]
  }
  preds [bb6]
  succs [bb8, bb21]

bb8
  0: _6 = move (_21.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2030:41)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2030:40-2030:41)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2030:40-2030:41)
  3: StorageLive(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:11-2032:59)
  4: StorageLive(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:11-2032:34)
  5: StorageLive(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:11-2032:28)
  6: _24 = &((*_1).3: std::collections::HashMap<util::determinize::state::State, hybrid::id::LazyStateID>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:11-2032:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:11-2032:34)
      kind: _23 = std::collections::HashMap::<util::determinize::state::State, hybrid::id::LazyStateID>::len(move _24) -> [return: bb9, unwind: bb21]
  }
  preds [bb7]
  succs [bb9, bb21]

bb9
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:33-2032:34)
  1: StorageLive(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:37-2032:59)
  2: _26 = AddWithOverflow(const hybrid::dfa::Cache::memory_usage::STATE_SIZE, const hybrid::dfa::Cache::memory_usage::ID_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:37-2032:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:37-2032:59)
      kind: assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", const hybrid::dfa::Cache::memory_usage::STATE_SIZE, const hybrid::dfa::Cache::memory_usage::ID_SIZE) -> [success: bb10, unwind: bb21]
  }
  preds [bb8]
  succs [bb10, bb21]

bb10
  0: _25 = move (_26.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:37-2032:59)
  1: _27 = MulWithOverflow(_23, _25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:11-2032:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:11-2032:59)
      kind: assert(!move (_27.1: bool), "attempt to compute `{} * {}`, which would overflow", move _23, move _25) -> [success: bb11, unwind: bb21]
  }
  preds [bb9]
  succs [bb11, bb21]

bb11
  0: _22 = move (_27.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:11-2032:59)
  1: StorageDead(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:58-2032:59)
  2: StorageDead(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:58-2032:59)
  3: _28 = AddWithOverflow(_6, _22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2032:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2032:59)
      kind: assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _22) -> [success: bb12, unwind: bb21]
  }
  preds [bb10]
  succs [bb12, bb21]

bb12
  0: _5 = move (_28.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2032:59)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:58-2032:59)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2032:58-2032:59)
  3: StorageLive(_29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2033:11-2033:38)
  4: StorageLive(_30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2033:11-2033:23)
  5: _30 = &((*_1).4: util::sparse_set::SparseSets)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2033:11-2033:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2033:11-2033:38)
      kind: _29 = util::sparse_set::SparseSets::memory_usage(move _30) -> [return: bb13, unwind: bb21]
  }
  preds [bb11]
  succs [bb13, bb21]

bb13
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2033:37-2033:38)
  1: _31 = AddWithOverflow(_5, _29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2033:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2033:38)
      kind: assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _29) -> [success: bb14, unwind: bb21]
  }
  preds [bb12]
  succs [bb14, bb21]

bb14
  0: _4 = move (_31.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2033:38)
  1: StorageDead(_29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2033:37-2033:38)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2033:37-2033:38)
  3: StorageLive(_32)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2034:11-2034:42)
  4: StorageLive(_33)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2034:11-2034:32)
  5: StorageLive(_34)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2034:11-2034:21)
  6: _34 = &((*_1).5: std::vec::Vec<util::primitives::StateID>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2034:11-2034:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2034:11-2034:32)
      kind: _33 = std::vec::Vec::<util::primitives::StateID>::capacity(move _34) -> [return: bb15, unwind: bb21]
  }
  preds [bb13]
  succs [bb15, bb21]

bb15
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2034:31-2034:32)
  1: _35 = MulWithOverflow(_33, const hybrid::dfa::Cache::memory_usage::ID_SIZE)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2034:11-2034:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2034:11-2034:42)
      kind: assert(!move (_35.1: bool), "attempt to compute `{} * {}`, which would overflow", move _33, const hybrid::dfa::Cache::memory_usage::ID_SIZE) -> [success: bb16, unwind: bb21]
  }
  preds [bb14]
  succs [bb16, bb21]

bb16
  0: _32 = move (_35.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2034:11-2034:42)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2034:41-2034:42)
  2: _36 = AddWithOverflow(_4, _32)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2034:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2034:42)
      kind: assert(!move (_36.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _32) -> [success: bb17, unwind: bb21]
  }
  preds [bb15]
  succs [bb17, bb21]

bb17
  0: _3 = move (_36.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2034:42)
  1: StorageDead(_32)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2034:41-2034:42)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2034:41-2034:42)
  3: StorageLive(_37)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2035:11-2035:48)
  4: StorageLive(_38)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2035:11-2035:37)
  5: _38 = &((*_1).6: util::determinize::state::StateBuilderEmpty)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2035:11-2035:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2035:11-2035:48)
      kind: _37 = util::determinize::state::StateBuilderEmpty::capacity(move _38) -> [return: bb18, unwind: bb21]
  }
  preds [bb16]
  succs [bb18, bb21]

bb18
  0: StorageDead(_38)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2035:47-2035:48)
  1: _39 = AddWithOverflow(_3, _37)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2035:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2035:48)
      kind: assert(!move (_39.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _37) -> [success: bb19, unwind: bb21]
  }
  preds [bb17]
  succs [bb19, bb21]

bb19
  0: _2 = move (_39.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2035:48)
  1: StorageDead(_37)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2035:47-2035:48)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2035:47-2035:48)
  3: StorageLive(_40)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2037:11-2037:34)
  4: _40 = ((*_1).8: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2037:11-2037:34)
  5: _41 = AddWithOverflow(_2, _40)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2037:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2037:34)
      kind: assert(!move (_41.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _40) -> [success: bb20, unwind: bb21]
  }
  preds [bb18]
  succs [bb20, bb21]

bb20
  0: _0 = move (_41.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2028:9-2037:34)
  1: StorageDead(_40)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2037:33-2037:34)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2037:33-2037:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2038:6-2038:6)
      kind: return
  }
  preds [bb19]
  succs []

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2021:5-2038:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, bb13, bb14, bb15, bb16, bb17, bb18, bb19]
  succs []

