bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:616:30-616:53)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:616:30-616:42)
  2: _6 = &((*_1).6: meta::wrappers::OnePass)
    SourceInfo(regex-automata/src/meta/strategy.rs:616:30-616:42)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:616:47-616:52)
  4: _7 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:616:47-616:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:616:30-616:53)
      kind: _5 = meta::wrappers::OnePass::get(move _6, move _7) -> [return: bb1, unwind: bb15]
  }
  preds []
  succs [bb1, bb15]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:616:52-616:53)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:616:52-616:53)
  2: PlaceMention(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:616:30-616:53)
  3: _8 = discriminant(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:616:30-616:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:616:16-616:27)
      kind: switchInt(move _8) -> [1: bb2, otherwise: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:616:16-616:27)
      kind: falseEdge -> [real: bb3, imaginary: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:616:21-616:26)
  1: _9 = &((_5 as Some).0: &meta::wrappers::OnePassEngine)
    SourceInfo(regex-automata/src/meta/strategy.rs:616:21-616:26)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:13-621:14)
  3: _10 = &(*(*_9))
    SourceInfo(regex-automata/src/meta/strategy.rs:621:13-621:14)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:28-621:46)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:28-621:46)
  6: _12 = &mut ((*_2).3: meta::wrappers::OnePassCache)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:28-621:46)
  7: _11 = &mut (*_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:28-621:46)
  8: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:48-621:53)
  9: _13 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:48-621:53)
  10: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:55-621:60)
  11: _14 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:55-621:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:621:13-621:61)
      kind: _0 = meta::wrappers::OnePassEngine::search_slots(move _10, move _11, move _13, move _14) -> [return: bb4, unwind: bb15]
  }
  preds [bb2]
  succs [bb4, bb15]

bb4
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:60-621:61)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:60-621:61)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:60-621:61)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:621:60-621:61)
  4: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:9-622:10)
  5: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:9-622:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:616:9-635:10)
      kind: goto -> bb14
  }
  preds [bb3]
  succs [bb14]

bb5
  0: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:37-622:62)
  1: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:37-622:51)
  2: _16 = &((*_1).5: meta::wrappers::BoundedBacktracker)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:37-622:51)
  3: StorageLive(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:56-622:61)
  4: _17 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:56-622:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:622:37-622:62)
      kind: _15 = meta::wrappers::BoundedBacktracker::get(move _16, move _17) -> [return: bb6, unwind: bb15]
  }
  preds [bb1, bb2]
  succs [bb6, bb15]

bb6
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:61-622:62)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:61-622:62)
  2: PlaceMention(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:37-622:62)
  3: _18 = discriminant(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:37-622:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:622:23-622:34)
      kind: switchInt(move _18) -> [1: bb7, otherwise: bb10]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:622:23-622:34)
      kind: falseEdge -> [real: bb8, imaginary: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:28-622:33)
  1: _19 = &((_15 as Some).0: &meta::wrappers::BoundedBacktrackerEngine)
    SourceInfo(regex-automata/src/meta/strategy.rs:622:28-622:33)
  2: StorageLive(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:13-627:14)
  3: _20 = &(*(*_19))
    SourceInfo(regex-automata/src/meta/strategy.rs:627:13-627:14)
  4: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:28-627:48)
  5: StorageLive(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:28-627:48)
  6: _22 = &mut ((*_2).2: meta::wrappers::BoundedBacktrackerCache)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:28-627:48)
  7: _21 = &mut (*_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:28-627:48)
  8: StorageLive(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:50-627:55)
  9: _23 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:50-627:55)
  10: StorageLive(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:57-627:62)
  11: _24 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:57-627:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:627:13-627:63)
      kind: _0 = meta::wrappers::BoundedBacktrackerEngine::search_slots(move _20, move _21, move _23, move _24) -> [return: bb9, unwind: bb15]
  }
  preds [bb7]
  succs [bb9, bb15]

bb9
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:62-627:63)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:62-627:63)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:62-627:63)
  3: StorageDead(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:627:62-627:63)
  4: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:628:9-628:10)
  5: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:628:9-628:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:622:16-635:10)
      kind: goto -> bb13
  }
  preds [bb8]
  succs [bb13]

bb10
  0: StorageLive(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:633:17-633:18)
  1: StorageLive(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:633:21-633:32)
  2: _26 = &((*_1).4: meta::wrappers::PikeVM)
    SourceInfo(regex-automata/src/meta/strategy.rs:633:21-633:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:633:21-633:38)
      kind: _25 = meta::wrappers::PikeVM::get(move _26) -> [return: bb11, unwind: bb15]
  }
  preds [bb6, bb7]
  succs [bb11, bb15]

bb11
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:633:37-633:38)
  1: FakeRead(ForLet(None), _25)
    SourceInfo(regex-automata/src/meta/strategy.rs:633:17-633:18)
  2: StorageLive(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:13-634:14)
  3: _27 = &(*_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:13-634:14)
  4: StorageLive(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:28-634:45)
  5: StorageLive(_29)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:28-634:45)
  6: _29 = &mut ((*_2).1: meta::wrappers::PikeVMCache)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:28-634:45)
  7: _28 = &mut (*_29)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:28-634:45)
  8: StorageLive(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:47-634:52)
  9: _30 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:47-634:52)
  10: StorageLive(_31)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:54-634:59)
  11: _31 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:54-634:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:634:13-634:60)
      kind: _0 = meta::wrappers::PikeVMEngine::search_slots(move _27, move _28, move _30, move _31) -> [return: bb12, unwind: bb15]
  }
  preds [bb10]
  succs [bb12, bb15]

bb12
  0: StorageDead(_31)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:59-634:60)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:59-634:60)
  2: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:59-634:60)
  3: StorageDead(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:634:59-634:60)
  4: StorageDead(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:635:9-635:10)
  5: StorageDead(_29)
    SourceInfo(regex-automata/src/meta/strategy.rs:635:9-635:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:622:16-635:10)
      kind: goto -> bb13
  }
  preds [bb11]
  succs [bb13]

bb13
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:635:9-635:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:616:9-635:10)
      kind: goto -> bb14
  }
  preds [bb9, bb12]
  succs [bb14]

bb14
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:636:5-636:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:636:6-636:6)
      kind: return
  }
  preds [bb4, bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:610:5-636:6)
      kind: resume
  }
  preds [bb0, bb3, bb5, bb8, bb10, bb11]
  succs []

