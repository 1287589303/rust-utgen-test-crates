bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:770:13-770:19)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:770:22-770:26)
  2: _4 = _2
    SourceInfo(regex-automata/src/util/alphabet.rs:770:22-770:26)
  3: _5 = Eq(const 128_u8, const 0_u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:770:22-770:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:770:22-770:32)
      kind: assert(!move _5, "attempt to divide `{}` by zero", _4) -> [success: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: _3 = Div(move _4, const 128_u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:770:22-770:32)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:770:31-770:32)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/util/alphabet.rs:770:13-770:19)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:771:13-771:16)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:771:19-771:23)
  5: _7 = _2
    SourceInfo(regex-automata/src/util/alphabet.rs:771:19-771:23)
  6: _8 = Eq(const 128_u8, const 0_u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:771:19-771:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:771:19-771:29)
      kind: assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _7) -> [success: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _6 = Rem(move _7, const 128_u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:771:19-771:29)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:771:28-771:29)
  2: FakeRead(ForLet(None), _6)
    SourceInfo(regex-automata/src/util/alphabet.rs:771:13-771:16)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:45-772:56)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:46-772:56)
  5: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:52-772:55)
  6: _11 = _6
    SourceInfo(regex-automata/src/util/alphabet.rs:772:52-772:55)
  7: _12 = Lt(_11, const 128_u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:46-772:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:772:46-772:56)
      kind: assert(move _12, "attempt to shift left by `{}`, which would overflow", _11) -> [success: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: _10 = Shl(const 1_u128, move _11)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:46-772:56)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:55-772:56)
  2: _9 = Not(move _10)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:45-772:56)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:55-772:56)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:21-772:40)
  5: StorageLive(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:33-772:39)
  6: _14 = _3
    SourceInfo(regex-automata/src/util/alphabet.rs:772:33-772:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:772:21-772:40)
      kind: _13 = <usize as core::convert::From<u8>>::from(move _14) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:39-772:40)
  1: _15 = Len((((*_1).0: util::alphabet::BitSet).0: [u128; 2]))
    SourceInfo(regex-automata/src/util/alphabet.rs:772:9-772:41)
  2: _16 = Lt(_13, _15)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:9-772:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:772:9-772:41)
      kind: assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _13) -> [success: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: (((*_1).0: util::alphabet::BitSet).0: [u128; 2])[_13] = BitAnd((((*_1).0: util::alphabet::BitSet).0: [u128; 2])[_13], move _9)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:9-772:56)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:55-772:56)
  2: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:772:56-772:57)
  3: _0 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:769:47-773:6)
  4: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:773:5-773:6)
  5: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:773:5-773:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:773:6-773:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:769:5-773:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

