bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:9-158:61)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:9-158:20)
  2: _4 = &mut ((*_1).0: std::vec::Vec<u32>)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:9-158:20)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:39-158:60)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:39-158:60)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:39-158:60)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:40-158:60)
  7: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:40-158:45)
  8: _9 = &_2
    SourceInfo(regex-automata/src/dfa/accel.rs:158:40-158:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:158:40-158:60)
      kind: _8 = dfa::accel::Accel::as_accel_tys(move _9) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:59-158:60)
  1: _7 = &_8
    SourceInfo(regex-automata/src/dfa/accel.rs:158:39-158:60)
  2: _6 = &(*_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:39-158:60)
  3: _5 = move _6 as &[u32] (PointerCoercion(Unsize))
    SourceInfo(regex-automata/src/dfa/accel.rs:158:39-158:60)
  4: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:59-158:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:158:9-158:61)
      kind: _3 = std::vec::Vec::<u32>::extend_from_slice(move _4, move _5) -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:60-158:61)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:60-158:61)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:61-158:62)
  3: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:61-158:62)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:158:61-158:62)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:159:13-159:16)
  6: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:159:19-159:23)
  7: _11 = &(*_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:159:19-159:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:159:19-159:29)
      kind: _10 = dfa::accel::Accels::<std::vec::Vec<u32>>::len(move _11) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:159:28-159:29)
  1: FakeRead(ForLet(None), _10)
    SourceInfo(regex-automata/src/dfa/accel.rs:159:13-159:16)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/accel.rs:160:9-160:30)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/accel.rs:160:9-160:13)
  4: _13 = &mut (*_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:160:9-160:13)
  5: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/accel.rs:160:22-160:29)
  6: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/accel.rs:160:22-160:25)
  7: _15 = _10
    SourceInfo(regex-automata/src/dfa/accel.rs:160:22-160:25)
  8: _16 = AddWithOverflow(_15, const 1_usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:160:22-160:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:160:22-160:29)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 1_usize) -> [success: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: _14 = move (_16.0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:160:22-160:29)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/accel.rs:160:28-160:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:160:9-160:30)
      kind: _12 = dfa::accel::Accels::<std::vec::Vec<u32>>::set_len(move _13, move _14) -> [return: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/accel.rs:160:29-160:30)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/accel.rs:160:29-160:30)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/accel.rs:160:30-160:31)
  3: _0 = const ()
    SourceInfo(regex-automata/src/dfa/accel.rs:157:41-161:6)
  4: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:161:5-161:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:161:6-161:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:157:5-161:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

