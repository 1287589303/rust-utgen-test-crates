bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:801:9-801:20)
  1: _2 = &(((*_1).0: util::alphabet::BitSet).0: [u128; 2])
    SourceInfo(regex-automata/src/util/alphabet.rs:801:9-801:20)
  2: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:801:24-801:30)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:801:24-801:30)
  4: _4 = [const 0_u128, const 0_u128]
    SourceInfo(regex-automata/src/util/alphabet.rs:801:24-801:30)
  5: _3 = &_4
    SourceInfo(regex-automata/src/util/alphabet.rs:801:24-801:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:801:9-801:30)
      kind: _0 = <[u128; 2] as core::cmp::PartialEq>::eq(move _2, move _3) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:801:29-801:30)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:801:29-801:30)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:802:5-802:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:802:6-802:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:800:5-802:6)
      kind: resume
  }
  preds [bb0]
  succs []

