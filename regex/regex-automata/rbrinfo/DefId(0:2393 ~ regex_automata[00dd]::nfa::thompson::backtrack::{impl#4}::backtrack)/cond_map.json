{
  "regex-automata/src/nfa/thompson/backtrack.rs:1435:19:1435:24": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/backtrack.rs:1435:19:1435:24",
        "match_str": "frame",
        "match_kind": {
          "Enum": [
            "Step",
            "RestoreCapture"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/backtrack.rs:1436:17:1436:40": {
            "pat": {
              "pat_str": "Frame::Step { sid, at }",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1436:44:1440:18"
          },
          "regex-automata/src/nfa/thompson/backtrack.rs:1441:17:1441:55": {
            "pat": {
              "pat_str": "Frame::RestoreCapture { slot, offset }",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/backtrack.rs:1441:59:1443:18"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1437:24:1437:78": [
    {
      "Bool": {
        "Other": "let Some(hm) = self.step(cache, input, sid, at, slots)"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1434:15:1434:50": [
    {
      "Bool": {
        "Other": "let Some(frame) = cache.stack.pop()"
      }
    }
  ]
}