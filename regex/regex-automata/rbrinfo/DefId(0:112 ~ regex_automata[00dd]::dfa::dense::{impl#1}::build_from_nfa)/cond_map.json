{
  "regex-automata/src/dfa/dense.rs:1215:16:1215:58": [
    {
      "Bool": {
        "Other": "nfa.look_set_any().contains_word_unicode()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:1255:9:1260:33": [
    {
      "Try": "determinize::Config::new()\n            .match_kind(self.config.get_match_kind())\n            .quit(quitset)\n            .dfa_size_limit(self.config.get_dfa_size_limit())\n            .determinize_size_limit(self.config.get_determinize_size_limit())\n            .run(nfa, &mut dfa)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:1214:12:1214:51": [
    {
      "Bool": {
        "Other": "self.config.get_unicode_word_boundary()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:1272:13:1272:54": [
    {
      "Bool": {
        "Other": "self.config.get_specialize_start_states()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:1217:22:1217:33": [
    {
      "For": {
        "iter_var": "b",
        "iter_range": "0x80..=0xFF"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:1261:12:1261:38": [
    {
      "Bool": {
        "Other": "self.config.get_minimize()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:1264:12:1264:40": [
    {
      "Bool": {
        "Other": "self.config.get_accelerate()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:1245:23:1254:11": [
    {
      "Try": "DFA::initial(\n            classes,\n            nfa.pattern_len(),\n            self.config.get_starts(),\n            nfa.look_matcher(),\n            self.config.get_starts_for_each_pattern(),\n            self.config.get_prefilter().map(|p| p.clone()),\n            quitset,\n            Flags::from_nfa(&nfa),\n        )?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:1239:17:1239:35": [
    {
      "Bool": {
        "Other": "quitset.is_empty()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:1221:27:1221:57": [
    {
      "Bool": {
        "Other": "self.config.get_byte_classes()"
      }
    }
  ]
}