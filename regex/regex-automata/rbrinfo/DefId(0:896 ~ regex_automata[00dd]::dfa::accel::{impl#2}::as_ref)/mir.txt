bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:233:26-233:46)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:233:26-233:46)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:233:26-233:37)
  3: _4 = &((*_1).0: A)
    SourceInfo(regex-automata/src/dfa/accel.rs:233:26-233:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:233:26-233:46)
      kind: _3 = <A as core::convert::AsRef<[u32]>>::as_ref(move _4) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _2 = &(*_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:233:26-233:46)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:233:45-233:46)
  2: _0 = dfa::accel::Accels::<&[u32]> { accels: move _2 }
    SourceInfo(regex-automata/src/dfa/accel.rs:233:9-233:48)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:233:47-233:48)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:234:5-234:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:234:6-234:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:232:5-234:6)
      kind: resume
  }
  preds [bb0]
  succs []

