bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:23-209:54)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:23-209:47)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:33-209:47)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:23-209:33)
  4: _5 = &((*_1).1: std::vec::Vec<util::primitives::StateID>)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:23-209:33)
  5: StorageLive(_6)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:34-209:46)
  6: StorageLive(_7)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:36-209:46)
  7: StorageLive(_8)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:36-209:40)
  8: _8 = &(*_1)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:36-209:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:209:36-209:46)
      kind: _7 = util::sparse_set::SparseSet::len(move _8) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:45-209:46)
  1: _6 = core::ops::RangeTo::<usize> { end: move _7 }
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:34-209:46)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:45-209:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:209:33-209:47)
      kind: _4 = <std::vec::Vec<util::primitives::StateID> as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _5, move _6) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: _3 = &(*_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:23-209:47)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:46-209:47)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:46-209:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:209:23-209:54)
      kind: _2 = core::slice::<impl [util::primitives::StateID]>::iter(move _3) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:53-209:54)
  1: _0 = util::sparse_set::SparseSetIter::<'_>(move _2)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:9-209:55)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/util/sparse_set.rs:209:54-209:55)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:210:5-210:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:210:6-210:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:208:5-210:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

