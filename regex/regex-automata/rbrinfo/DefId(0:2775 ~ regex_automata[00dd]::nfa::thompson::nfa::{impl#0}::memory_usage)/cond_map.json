{
  "regex-automata/src/nfa/thompson/nfa.rs:1173:15:1173:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.0.states.len() * size_of::<State>()",
          "lhs": "self.0.states.len()",
          "rhs": "size_of::<State>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1172:9:1173:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "size_of::<Inner>() // allocated on the heap via Arc\n            + self.0.states.len() * size_of::<State>()",
          "lhs": "size_of::<Inner>()",
          "rhs": "self.0.states.len() * size_of::<State>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1172:9:1174:64": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "size_of::<Inner>() // allocated on the heap via Arc\n            + self.0.states.len() * size_of::<State>()\n            + self.0.start_pattern.len() * size_of::<StateID>()",
          "lhs": "size_of::<Inner>() // allocated on the heap via Arc\n            + self.0.states.len() * size_of::<State>()",
          "rhs": "self.0.start_pattern.len() * size_of::<StateID>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1172:9:1176:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "size_of::<Inner>() // allocated on the heap via Arc\n            + self.0.states.len() * size_of::<State>()\n            + self.0.start_pattern.len() * size_of::<StateID>()\n            + self.0.group_info.memory_usage()\n            + self.0.memory_extra",
          "lhs": "size_of::<Inner>() // allocated on the heap via Arc\n            + self.0.states.len() * size_of::<State>()\n            + self.0.start_pattern.len() * size_of::<StateID>()\n            + self.0.group_info.memory_usage()",
          "rhs": "self.0.memory_extra",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1174:15:1174:64": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.0.start_pattern.len() * size_of::<StateID>()",
          "lhs": "self.0.start_pattern.len()",
          "rhs": "size_of::<StateID>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1172:9:1175:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "size_of::<Inner>() // allocated on the heap via Arc\n            + self.0.states.len() * size_of::<State>()\n            + self.0.start_pattern.len() * size_of::<StateID>()\n            + self.0.group_info.memory_usage()",
          "lhs": "size_of::<Inner>() // allocated on the heap via Arc\n            + self.0.states.len() * size_of::<State>()\n            + self.0.start_pattern.len() * size_of::<StateID>()",
          "rhs": "self.0.group_info.memory_usage()",
          "cmp_with_int": false
        }
      }
    }
  ]
}