bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1150:9-1150:13)
  1: _4 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1150:9-1150:13)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1150:25-1150:32)
  3: _5 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1150:25-1150:32)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1150:34-1150:39)
  5: _6 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1150:34-1150:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1150:9-1150:40)
      kind: _0 = <dfa::sparse::DFA<T> as dfa::automaton::Automaton>::next_state(move _4, move _5, move _6) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1150:39-1150:40)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1150:39-1150:40)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1150:39-1150:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1151:6-1151:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1145:5-1151:6)
      kind: resume
  }
  preds [bb0]
  succs []

