{
  "regex-automata/src/nfa/thompson/range_trie.rs:259:15:259:74": [
    {
      "Bool": {
        "Other": "let Some(NextIter { mut state_id, mut tidx }) = stack.pop()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:280:59:280:67": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "tidx + 1",
          "lhs": "tidx",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:274:21:274:32": [
    {
      "Try": "f(&ranges)?"
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:266:20:266:51": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "tidx >= state.transitions.len()",
          "lhs": "tidx",
          "rhs": "state.transitions.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:273:20:273:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "t.next_id == FINAL",
          "lhs": "t.next_id",
          "rhs": "FINAL",
          "cmp_with_int": false
        }
      }
    }
  ]
}