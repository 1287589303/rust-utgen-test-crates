bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:1001:10-1001:42)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:1001:10-1001:14)
  2: _5 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:1001:10-1001:14)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:1001:29-1001:37)
  4: _6 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1001:29-1001:37)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:1001:39-1001:41)
  6: _7 = _3
    SourceInfo(regex-automata/src/util/look.rs:1001:39-1001:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1001:10-1001:42)
      kind: _4 = util::look::LookMatcher::is_word_ascii(move _5, move _6, move _7) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1001:41-1001:42)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1001:41-1001:42)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1001:41-1001:42)
  3: _0 = Not(move _4)
    SourceInfo(regex-automata/src/util/look.rs:1001:9-1001:42)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1001:41-1001:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1002:6-1002:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1000:5-1002:6)
      kind: resume
  }
  preds [bb0]
  succs []

