bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:9-1906:19)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:22-1906:44)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:22-1906:33)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:22-1906:33)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:22-1906:23)
  5: _7 = &_1
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:22-1906:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1906:22-1906:33)
      kind: _6 = util::search::Match::pattern(move _7) -> [return: bb1, unwind: bb19]
  }
  preds []
  succs [bb1, bb19]

bb1
  0: _5 = &_6
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:22-1906:33)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:32-1906:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1906:22-1906:44)
      kind: _4 = util::primitives::PatternID::as_usize(move _5) -> [return: bb2, unwind: bb19]
  }
  preds [bb0]
  succs [bb2, bb19]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:43-1906:44)
  1: _8 = MulWithOverflow(_4, const 2_usize)
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:22-1906:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1906:22-1906:48)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, const 2_usize) -> [success: bb3, unwind: bb19]
  }
  preds [bb1]
  succs [bb3, bb19]

bb3
  0: _3 = move (_8.0: usize)
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:22-1906:48)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:47-1906:48)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:9-1906:19)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1906:48-1906:49)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:1907:9-1907:17)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:1907:20-1907:30)
  6: _10 = _3
    SourceInfo(regex-automata/src/meta/strategy.rs:1907:20-1907:30)
  7: _11 = AddWithOverflow(_10, const 1_usize)
    SourceInfo(regex-automata/src/meta/strategy.rs:1907:20-1907:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1907:20-1907:34)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_usize) -> [success: bb4, unwind: bb19]
  }
  preds [bb2]
  succs [bb4, bb19]

bb4
  0: _9 = move (_11.0: usize)
    SourceInfo(regex-automata/src/meta/strategy.rs:1907:20-1907:34)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:1907:33-1907:34)
  2: FakeRead(ForLet(None), _9)
    SourceInfo(regex-automata/src/meta/strategy.rs:1907:9-1907:17)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:5-1910:6)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:25-1908:50)
  5: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:25-1908:30)
  6: _14 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:25-1908:30)
  7: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:39-1908:49)
  8: _15 = _3
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:39-1908:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1908:25-1908:50)
      kind: _13 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::get_mut::<usize>(move _14, move _15) -> [return: bb5, unwind: bb19]
  }
  preds [bb3]
  succs [bb5, bb19]

bb5
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:49-1908:50)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:49-1908:50)
  2: PlaceMention(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:25-1908:50)
  3: _16 = discriminant(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:25-1908:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1908:12-1908:22)
      kind: switchInt(move _16) -> [1: bb6, otherwise: bb10]
  }
  preds [bb4]
  succs [bb6, bb10]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1908:12-1908:22)
      kind: falseEdge -> [real: bb7, imaginary: bb10]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  0: StorageLive(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:17-1908:21)
  1: _17 = move ((_13 as Some).0: &mut core::option::Option<util::primitives::NonMaxUsize>)
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:17-1908:21)
  2: StorageLive(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:1909:17-1909:44)
  3: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:1909:34-1909:43)
  4: StorageLive(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:1909:34-1909:35)
  5: _20 = &_1
    SourceInfo(regex-automata/src/meta/strategy.rs:1909:34-1909:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1909:34-1909:43)
      kind: _19 = util::search::Match::start(move _20) -> [return: bb8, unwind: bb19]
  }
  preds [bb6]
  succs [bb8, bb19]

bb8
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:1909:42-1909:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1909:17-1909:44)
      kind: _18 = util::primitives::NonMaxUsize::new(move _19) -> [return: bb9, unwind: bb19]
  }
  preds [bb7]
  succs [bb9, bb19]

bb9
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:1909:43-1909:44)
  1: (*_17) = move _18
    SourceInfo(regex-automata/src/meta/strategy.rs:1909:9-1909:44)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:1909:43-1909:44)
  3: _12 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:1908:51-1910:6)
  4: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:1910:5-1910:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1908:5-1910:6)
      kind: goto -> bb11
  }
  preds [bb8]
  succs [bb11]

bb10
  0: _12 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:1910:6-1910:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1908:5-1910:6)
      kind: goto -> bb11
  }
  preds [bb5, bb6]
  succs [bb11]

bb11
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1910:5-1910:6)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:1910:5-1910:6)
  2: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1911:25-1911:48)
  3: StorageLive(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1911:25-1911:30)
  4: _22 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1911:25-1911:30)
  5: StorageLive(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:1911:39-1911:47)
  6: _23 = _9
    SourceInfo(regex-automata/src/meta/strategy.rs:1911:39-1911:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1911:25-1911:48)
      kind: _21 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::get_mut::<usize>(move _22, move _23) -> [return: bb12, unwind: bb19]
  }
  preds [bb9, bb10]
  succs [bb12, bb19]

bb12
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:1911:47-1911:48)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1911:47-1911:48)
  2: PlaceMention(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1911:25-1911:48)
  3: _24 = discriminant(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1911:25-1911:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1911:12-1911:22)
      kind: switchInt(move _24) -> [1: bb13, otherwise: bb17]
  }
  preds [bb11]
  succs [bb13, bb17]

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1911:12-1911:22)
      kind: falseEdge -> [real: bb14, imaginary: bb17]
  }
  preds [bb12]
  succs [bb14, bb17]

bb14
  0: StorageLive(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:1911:17-1911:21)
  1: _25 = move ((_21 as Some).0: &mut core::option::Option<util::primitives::NonMaxUsize>)
    SourceInfo(regex-automata/src/meta/strategy.rs:1911:17-1911:21)
  2: StorageLive(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:1912:17-1912:42)
  3: StorageLive(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:1912:34-1912:41)
  4: StorageLive(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:1912:34-1912:35)
  5: _28 = &_1
    SourceInfo(regex-automata/src/meta/strategy.rs:1912:34-1912:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1912:34-1912:41)
      kind: _27 = util::search::Match::end(move _28) -> [return: bb15, unwind: bb19]
  }
  preds [bb13]
  succs [bb15, bb19]

bb15
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:1912:40-1912:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1912:17-1912:42)
      kind: _26 = util::primitives::NonMaxUsize::new(move _27) -> [return: bb16, unwind: bb19]
  }
  preds [bb14]
  succs [bb16, bb19]

bb16
  0: StorageDead(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:1912:41-1912:42)
  1: (*_25) = move _26
    SourceInfo(regex-automata/src/meta/strategy.rs:1912:9-1912:42)
  2: StorageDead(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:1912:41-1912:42)
  3: _0 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:1911:49-1913:6)
  4: StorageDead(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:1913:5-1913:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1911:5-1913:6)
      kind: goto -> bb18
  }
  preds [bb15]
  succs [bb18]

bb17
  0: _0 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:1913:6-1913:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1911:5-1913:6)
      kind: goto -> bb18
  }
  preds [bb12, bb13]
  succs [bb18]

bb18
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:1914:1-1914:2)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1914:1-1914:2)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1914:1-1914:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1914:2-1914:2)
      kind: return
  }
  preds [bb16, bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1905:1-1914:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb7, bb8, bb11, bb14, bb15]
  succs []

