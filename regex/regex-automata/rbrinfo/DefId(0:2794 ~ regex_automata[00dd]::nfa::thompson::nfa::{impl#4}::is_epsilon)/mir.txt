bb0
  0: PlaceMention((*_1))
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1656:15-1656:20)
  1: _2 = discriminant((*_1))
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1656:15-1656:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1656:9-1656:20)
      kind: switchInt(move _2) -> [0: bb2, 1: bb2, 2: bb2, 3: bb3, 4: bb3, 5: bb3, 6: bb3, 7: bb2, 8: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb2, bb2, bb2, bb2, bb3, bb3, bb3, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1656:15-1656:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1656:15-1656:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1657:13-1661:34)
      kind: falseEdge -> [real: bb4, imaginary: bb3]
  }
  preds [bb0, bb0, bb0, bb0, bb0]
  succs [bb3, bb4]

bb3
  0: _0 = const true
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1665:40-1665:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1665:40-1665:44)
      kind: goto -> bb5
  }
  preds [bb0, bb0, bb0, bb0, bb2]
  succs [bb5]

bb4
  0: _0 = const false
    SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1661:38-1661:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1661:38-1661:43)
      kind: goto -> bb5
  }
  preds [bb2]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/nfa.rs:1667:6-1667:6)
      kind: return
  }
  preds [bb3, bb4]
  succs []

