bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:13-2709:18)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:21-2709:44)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:21-2709:24)
  3: _5 = &_2
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:21-2709:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:21-2709:44)
      kind: _4 = hybrid::id::LazyStateID::as_usize_untagged(move _5) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:43-2709:44)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:48-2709:66)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:48-2709:56)
  3: _7 = &(*((*_1).0: &hybrid::dfa::DFA))
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:48-2709:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:48-2709:66)
      kind: _6 = hybrid::dfa::DFA::stride2(move _7) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:65-2709:66)
  1: _8 = Lt(_6, const 64_usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:21-2709:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:21-2709:66)
      kind: assert(move _8, "attempt to shift right by `{}`, which would overflow", _6) -> [success: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _3 = Shr(move _4, move _6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:21-2709:66)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:65-2709:66)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:65-2709:66)
  3: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2709:13-2709:18)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2710:9-2710:34)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2710:27-2710:34)
  6: StorageLive(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2710:10-2710:27)
  7: _11 = &((*((*_1).1: &hybrid::dfa::Cache)).2: std::vec::Vec<util::determinize::state::State>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2710:10-2710:27)
  8: StorageLive(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2710:28-2710:33)
  9: _12 = _3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2710:28-2710:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2710:27-2710:34)
      kind: _10 = <std::vec::Vec<util::determinize::state::State> as core::ops::Index<usize>>::index(move _11, move _12) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2710:33-2710:34)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2710:33-2710:34)
  2: _9 = &(*_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2710:9-2710:34)
  3: _0 = &(*_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2710:9-2710:34)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2711:5-2711:6)
  5: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2711:5-2711:6)
  6: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2711:5-2711:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2711:6-2711:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2708:5-2711:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

