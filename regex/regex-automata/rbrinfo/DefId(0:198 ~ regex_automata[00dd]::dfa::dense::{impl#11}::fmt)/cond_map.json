{
  "regex-automata/src/dfa/dense.rs:3093:47:3093:72": [
    {
      "For": {
        "iter_var": "(i, (start_id, anchored, sty))",
        "iter_range": "self.starts().enumerate()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3099:16:3099:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "i % self.st.stride",
          "lhs": "i",
          "rhs": "self.st.stride",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3081:22:3081:35": [
    {
      "For": {
        "iter_var": "state",
        "iter_range": "self.states()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3111:13:3111:29": [
    {
      "Try": "writeln!(f, \"\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3133:9:3133:26": [
    {
      "Try": "writeln!(f, \")\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3119:17:3119:50": [
    {
      "Try": "write!(f, \"MATCH({:06?}): \", id)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3132:9:3132:48": [
    {
      "Try": "writeln!(f, \"flags: {:?}\", self.flags)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3114:29:3114:42": [
    {
      "Bool": {
        "Other": "f.alternate()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3102:38:3102:75": [
    {
      "Try": "writeln!(f, \"START-GROUP(anchored)\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3125:21:3125:44": [
    {
      "Try": "write!(f, \"{:?}\", pid)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3080:9:3080:36": [
    {
      "Try": "writeln!(f, \"dense::DFA(\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3131:9:3131:65": [
    {
      "Try": "writeln!(f, \"pattern length: {:?}\", self.pattern_len())?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3083:25:3083:38": [
    {
      "Bool": {
        "Other": "f.alternate()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3127:17:3127:33": [
    {
      "Try": "writeln!(f, \"\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3088:13:3088:39": [
    {
      "Try": "write!(f, \"{:06?}: \", id)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3122:24:3122:29": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "i > 0",
          "lhs": "i",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3099:16:3099:39": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "i % self.st.stride == 0",
          "lhs": "i % self.st.stride",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3120:34:3120:80": [
    {
      "For": {
        "iter_var": "(i, &pid)",
        "iter_range": "self.ms.pattern_id_slice(i).iter().enumerate()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3100:23:3100:31": [
    {
      "Match": {
        "match_source": "regex-automata/src/dfa/dense.rs:3100:23:3100:31",
        "match_str": "anchored",
        "match_kind": {
          "Enum": [
            "No",
            "Yes",
            "Pattern"
          ]
        },
        "arms": {
          "regex-automata/src/dfa/dense.rs:3101:21:3101:33": {
            "pat": {
              "pat_str": "Anchored::No",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/dense.rs:3101:37:3101:76"
          },
          "regex-automata/src/dfa/dense.rs:3102:21:3102:34": {
            "pat": {
              "pat_str": "Anchored::Yes",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/dense.rs:3102:38:3102:75"
          },
          "regex-automata/src/dfa/dense.rs:3103:21:3103:43": {
            "pat": {
              "pat_str": "Anchored::Pattern(pid)",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/dense.rs:3103:47:3105:22"
          }
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3112:22:3112:38": [
    {
      "For": {
        "iter_var": "i",
        "iter_range": "0..self.ms.len()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3082:13:3082:54": [
    {
      "Try": "fmt_state_indicator(f, self, state.id())?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3130:9:3130:61": [
    {
      "Try": "writeln!(f, \"state length: {:?}\", self.state_len())?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3123:25:3123:41": [
    {
      "Try": "write!(f, \", \")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3094:25:3094:38": [
    {
      "Bool": {
        "Other": "f.alternate()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3108:13:3108:54": [
    {
      "Try": "writeln!(f, \"  {:?} => {:06?}\", sty, id)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3089:13:3089:26": [
    {
      "Try": "state.fmt(f)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3090:13:3090:29": [
    {
      "Try": "write!(f, \"\\n\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3092:9:3092:25": [
    {
      "Try": "writeln!(f, \"\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3104:25:3104:72": [
    {
      "Try": "writeln!(f, \"START_GROUP(pattern: {:?})\", pid)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3110:12:3110:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "self.pattern_len() > 1",
          "lhs": "self.pattern_len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3101:37:3101:76": [
    {
      "Try": "writeln!(f, \"START-GROUP(unanchored)\")?"
    }
  ]
}