bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:12-534:53)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:12-534:22)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:12-534:18)
  3: _4 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:12-534:18)
  4: _5 = AddWithOverflow(_4, const 1_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:12-534:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:534:12-534:22)
      kind: assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, const 1_usize) -> [success: bb1, unwind: bb16]
  }
  preds []
  succs [bb1, bb16]

bb1
  0: _3 = move (_5.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:12-534:22)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:21-534:22)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:26-534:53)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:26-534:38)
  4: _7 = &(*((*_1).0: &util::alphabet::ByteClasses))
    SourceInfo(regex-automata/src/util/alphabet.rs:534:26-534:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:534:26-534:53)
      kind: _6 = util::alphabet::ByteClasses::alphabet_len(move _7) -> [return: bb2, unwind: bb16]
  }
  preds [bb0]
  succs [bb2, bb16]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:52-534:53)
  1: _2 = Eq(move _3, move _6)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:12-534:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:534:12-534:53)
      kind: switchInt(move _2) -> [0: bb6, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:52-534:53)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:52-534:53)
  2: _8 = AddWithOverflow(((*_1).1: usize), const 1_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:535:13-535:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:535:13-535:24)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb4, unwind: bb16]
  }
  preds [bb2]
  succs [bb4, bb16]

bb4
  0: ((*_1).1: usize) = move (_8.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:535:13-535:24)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:536:18-536:36)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:536:18-536:30)
  3: _10 = &(*((*_1).0: &util::alphabet::ByteClasses))
    SourceInfo(regex-automata/src/util/alphabet.rs:536:18-536:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:536:18-536:36)
      kind: _9 = util::alphabet::ByteClasses::eoi(move _10) -> [return: bb5, unwind: bb16]
  }
  preds [bb3]
  succs [bb5, bb16]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:536:35-536:36)
  1: _0 = core::option::Option::<util::alphabet::Unit>::Some(move _9)
    SourceInfo(regex-automata/src/util/alphabet.rs:536:13-536:37)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:536:36-536:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:534:9-543:10)
      kind: goto -> bb15
  }
  preds [bb4]
  succs [bb15]

bb6
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:52-534:53)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:534:52-534:53)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:537:19-537:55)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:537:19-537:25)
  4: _12 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:537:19-537:25)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:537:28-537:55)
  6: StorageLive(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:537:28-537:40)
  7: _14 = &(*((*_1).0: &util::alphabet::ByteClasses))
    SourceInfo(regex-automata/src/util/alphabet.rs:537:28-537:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:537:28-537:55)
      kind: _13 = util::alphabet::ByteClasses::alphabet_len(move _14) -> [return: bb7, unwind: bb16]
  }
  preds [bb2]
  succs [bb7, bb16]

bb7
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:537:54-537:55)
  1: _11 = Lt(move _12, move _13)
    SourceInfo(regex-automata/src/util/alphabet.rs:537:19-537:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:537:19-537:55)
      kind: switchInt(move _11) -> [0: bb13, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb13]

bb8
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:537:54-537:55)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:537:54-537:55)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:538:17-538:22)
  3: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:538:25-538:45)
  4: StorageLive(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:538:38-538:44)
  5: _17 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:538:38-538:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:538:25-538:45)
      kind: _16 = <u8 as core::convert::TryFrom<usize>>::try_from(move _17) -> [return: bb9, unwind: bb16]
  }
  preds [bb7]
  succs [bb9, bb16]

bb9
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:538:44-538:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:538:25-538:54)
      kind: _15 = core::result::Result::<u8, core::num::TryFromIntError>::unwrap(move _16) -> [return: bb10, unwind: bb16]
  }
  preds [bb8]
  succs [bb10, bb16]

bb10
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:538:53-538:54)
  1: FakeRead(ForLet(None), _15)
    SourceInfo(regex-automata/src/util/alphabet.rs:538:17-538:22)
  2: _18 = AddWithOverflow(((*_1).1: usize), const 1_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:539:13-539:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:539:13-539:24)
      kind: assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb11, unwind: bb16]
  }
  preds [bb9]
  succs [bb11, bb16]

bb11
  0: ((*_1).1: usize) = move (_18.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:539:13-539:24)
  1: StorageLive(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:540:18-540:33)
  2: StorageLive(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:540:27-540:32)
  3: _20 = _15
    SourceInfo(regex-automata/src/util/alphabet.rs:540:27-540:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:540:18-540:33)
      kind: _19 = util::alphabet::Unit::u8(move _20) -> [return: bb12, unwind: bb16]
  }
  preds [bb10]
  succs [bb12, bb16]

bb12
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:540:32-540:33)
  1: _0 = core::option::Option::<util::alphabet::Unit>::Some(move _19)
    SourceInfo(regex-automata/src/util/alphabet.rs:540:13-540:34)
  2: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:540:33-540:34)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:541:9-541:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:537:16-543:10)
      kind: goto -> bb14
  }
  preds [bb11]
  succs [bb14]

bb13
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:537:54-537:55)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:537:54-537:55)
  2: _0 = core::option::Option::<util::alphabet::Unit>::None
    SourceInfo(regex-automata/src/util/alphabet.rs:542:13-542:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:537:16-543:10)
      kind: goto -> bb14
  }
  preds [bb7]
  succs [bb14]

bb14
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:543:9-543:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:534:9-543:10)
      kind: goto -> bb15
  }
  preds [bb12, bb13]
  succs [bb15]

bb15
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:543:9-543:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:544:6-544:6)
      kind: return
  }
  preds [bb5, bb14]
  succs []

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:533:5-544:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb4, bb6, bb8, bb9, bb10, bb11]
  succs []

