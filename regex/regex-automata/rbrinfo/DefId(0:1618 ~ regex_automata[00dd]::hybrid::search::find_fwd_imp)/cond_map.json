{
  "regex-automata/src/hybrid/search.rs:227:23:229:47": [
    {
      "Try": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:79:27:79:69": [
    {
      "Try": "prefilter_restart(dfa, cache, &input, at)?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:273:20:273:28": [
    {
      "Bool": {
        "Other": "earliest"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:197:44:197:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at + 3",
          "lhs": "at",
          "rhs": "3",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:253:37:253:52": [
    {
      "Bool": {
        "Other": "universal_start"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:197:20:197:40": [
    {
      "Bool": {
        "Other": "prev_sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:251:32:251:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "span.start > at",
          "lhs": "span.start",
          "rhs": "at",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:210:20:210:40": [
    {
      "Bool": {
        "Other": "prev_sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:263:23:263:37": [
    {
      "Bool": {
        "Other": "sid.is_match()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:284:31:284:47": [
    {
      "Bool": {
        "Other": "sid.is_unknown()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:204:20:204:35": [
    {
      "Bool": {
        "Other": "sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:74:15:74:47": [
    {
      "Match": {
        "match_source": "regex-automata/src/hybrid/search.rs:74:15:74:47",
        "match_str": "pre.find(input.haystack(), span)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/hybrid/search.rs:75:13:75:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/search.rs:75:21:75:35"
          },
          "regex-automata/src/hybrid/search.rs:76:13:76:27": {
            "pat": {
              "pat_str": "Some(ref span)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/search.rs:76:31:81:14"
          }
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:233:16:233:30": [
    {
      "Bool": {
        "Other": "sid.is_start()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:277:23:277:36": [
    {
      "Bool": {
        "Other": "sid.is_dead()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:234:20:234:43": [
    {
      "Bool": {
        "Other": "let Some(ref pre) = pre"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:60:19:60:47": [
    {
      "Try": "init_fwd(dfa, cache, input)?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:232:12:232:27": [
    {
      "Bool": {
        "Other": "sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:195:19:195:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "at < input.end()",
          "lhs": "at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:254:43:256:39": [
    {
      "Try": "prefilter_restart(\n                                        dfa, cache, &input, at,\n                                    )?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:86:12:86:27": [
    {
      "Bool": {
        "Other": "sid.is_tagged()"
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12:316:42": [
    {
      "Bool": {
        "Other": "$crate::cfg!(debug_assertions)"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:88:19:90:43": [
    {
      "Try": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:217:20:217:35": [
    {
      "Bool": {
        "Other": "sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:85:11:85:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "at < input.end()",
          "lhs": "at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:78:21:78:36": [
    {
      "Bool": {
        "Other": "universal_start"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:72:8:72:31": [
    {
      "Bool": {
        "Other": "let Some(ref pre) = pre"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:225:16:225:32": [
    {
      "Bool": {
        "Other": "sid.is_unknown()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:197:44:197:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "at + 3 >= input.end()",
          "lhs": "at + 3",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:236:27:236:59": [
    {
      "Match": {
        "match_source": "regex-automata/src/hybrid/search.rs:236:27:236:59",
        "match_str": "pre.find(input.haystack(), span)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/hybrid/search.rs:241:25:241:39": {
            "pat": {
              "pat_str": "Some(ref span)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/search.rs:241:43:260:26"
          },
          "regex-automata/src/hybrid/search.rs:237:25:237:29": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/search.rs:237:33:240:26"
          }
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:280:23:280:36": [
    {
      "Bool": {
        "Other": "sid.is_quit()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:290:5:290:52": [
    {
      "Try": "eoi_fwd(dfa, cache, input, &mut sid, &mut mat)?"
    }
  ]
}