bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:9-574:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:565:9-574:10)
      kind: goto -> bb1
  }
  preds []
  succs [bb1]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:565:9-574:10)
      kind: falseUnwind -> [real: bb2, unwind: bb22]
  }
  preds [bb0, bb12]
  succs [bb2, bb22]

bb2
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:15-565:59)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:15-565:28)
  2: _5 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:15-565:28)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:31-565:59)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:31-565:44)
  5: _7 = ((*_1).2: core::option::Option<usize>)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:31-565:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:565:31-565:59)
      kind: _6 = core::option::Option::<usize>::unwrap_or(move _7, const 256_usize) -> [return: bb3, unwind: bb22]
  }
  preds [bb1]
  succs [bb3, bb22]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:58-565:59)
  1: _4 = Lt(move _5, move _6)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:15-565:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:565:15-565:59)
      kind: switchInt(move _4) -> [0: bb13, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb13]

bb4
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:58-565:59)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:58-565:59)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:566:17-566:21)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:566:24-566:51)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:566:37-566:50)
  5: _10 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:566:37-566:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:566:24-566:51)
      kind: _9 = <u8 as core::convert::TryFrom<usize>>::try_from(move _10) -> [return: bb5, unwind: bb22]
  }
  preds [bb3]
  succs [bb5, bb22]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:566:50-566:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:566:24-566:60)
      kind: _8 = core::result::Result::<u8, core::num::TryFromIntError>::unwrap(move _9) -> [return: bb6, unwind: bb22]
  }
  preds [bb4]
  succs [bb6, bb22]

bb6
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:566:59-566:60)
  1: FakeRead(ForLet(None), _8)
    SourceInfo(regex-automata/src/util/alphabet.rs:566:17-566:21)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:567:17-567:22)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:567:25-567:37)
  4: _12 = &(*((*_1).0: &util::alphabet::ByteClasses))
    SourceInfo(regex-automata/src/util/alphabet.rs:567:25-567:37)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:567:42-567:46)
  6: _13 = _8
    SourceInfo(regex-automata/src/util/alphabet.rs:567:42-567:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:567:25-567:47)
      kind: _11 = util::alphabet::ByteClasses::get(move _12, move _13) -> [return: bb7, unwind: bb22]
  }
  preds [bb5]
  succs [bb7, bb22]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:567:46-567:47)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:567:46-567:47)
  2: FakeRead(ForLet(None), _11)
    SourceInfo(regex-automata/src/util/alphabet.rs:567:17-567:22)
  3: _14 = AddWithOverflow(((*_1).1: usize), const 1_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:568:13-568:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:568:13-568:31)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb8, unwind: bb22]
  }
  preds [bb6]
  succs [bb8, bb22]

bb8
  0: ((*_1).1: usize) = move (_14.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:568:13-568:31)
  1: StorageLive(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:16-570:46)
  2: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:16-570:31)
  3: _16 = &((*_1).3: core::option::Option<u8>)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:16-570:31)
  4: StorageLive(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:35-570:46)
  5: StorageLive(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:35-570:46)
  6: StorageLive(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:40-570:45)
  7: _19 = _11
    SourceInfo(regex-automata/src/util/alphabet.rs:570:40-570:45)
  8: _18 = core::option::Option::<u8>::Some(move _19)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:35-570:46)
  9: _17 = &_18
    SourceInfo(regex-automata/src/util/alphabet.rs:570:35-570:46)
  10: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:45-570:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:570:16-570:46)
      kind: _15 = <core::option::Option<u8> as core::cmp::PartialEq>::ne(move _16, move _17) -> [return: bb9, unwind: bb22]
  }
  preds [bb7]
  succs [bb9, bb22]

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:570:16-570:46)
      kind: switchInt(move _15) -> [0: bb12, otherwise: bb10]
  }
  preds [bb8]
  succs [bb10, bb12]

bb10
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:45-570:46)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:45-570:46)
  2: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:45-570:46)
  3: StorageLive(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:571:35-571:46)
  4: StorageLive(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:571:40-571:45)
  5: _22 = _11
    SourceInfo(regex-automata/src/util/alphabet.rs:571:40-571:45)
  6: _21 = core::option::Option::<u8>::Some(move _22)
    SourceInfo(regex-automata/src/util/alphabet.rs:571:35-571:46)
  7: StorageDead(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:571:45-571:46)
  8: ((*_1).3: core::option::Option<u8>) = move _21
    SourceInfo(regex-automata/src/util/alphabet.rs:571:17-571:46)
  9: StorageDead(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:571:45-571:46)
  10: StorageLive(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:572:29-572:43)
  11: StorageLive(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:572:38-572:42)
  12: _24 = _8
    SourceInfo(regex-automata/src/util/alphabet.rs:572:38-572:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:572:29-572:43)
      kind: _23 = util::alphabet::Unit::u8(move _24) -> [return: bb11, unwind: bb22]
  }
  preds [bb9]
  succs [bb11, bb22]

bb11
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:572:42-572:43)
  1: _0 = core::option::Option::<util::alphabet::Unit>::Some(move _23)
    SourceInfo(regex-automata/src/util/alphabet.rs:572:24-572:44)
  2: StorageDead(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:572:43-572:44)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:573:13-573:14)
  4: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:574:9-574:10)
  5: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:574:9-574:10)
  6: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:574:9-574:10)
  7: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:574:9-574:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb21
  }
  preds [bb10]
  succs [bb21]

bb12
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:45-570:46)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:45-570:46)
  2: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:570:45-570:46)
  3: _3 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:573:14-573:14)
  4: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:573:13-573:14)
  5: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:574:9-574:10)
  6: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:574:9-574:10)
  7: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:574:9-574:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:565:9-574:10)
      kind: goto -> bb1
  }
  preds [bb9]
  succs [bb1]

bb13
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:58-565:59)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:58-565:59)
  2: StorageLive(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:565:9-574:10)
  3: _2 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:565:9-574:10)
  4: StorageDead(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:574:9-574:10)
  5: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:574:9-574:10)
  6: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:574:9-574:10)
  7: StorageLive(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:575:9-587:10)
  8: StorageLive(_29)
    SourceInfo(regex-automata/src/util/alphabet.rs:575:12-575:39)
  9: StorageLive(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:575:12-575:25)
  10: _30 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:575:12-575:25)
  11: _29 = Ne(move _30, const core::num::<impl usize>::MAX)
    SourceInfo(regex-automata/src/util/alphabet.rs:575:12-575:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:575:12-575:39)
      kind: switchInt(move _29) -> [0: bb15, otherwise: bb14]
  }
  preds [bb3]
  succs [bb14, bb15]

bb14
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:575:38-575:39)
  1: StorageLive(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:575:43-575:66)
  2: StorageLive(_32)
    SourceInfo(regex-automata/src/util/alphabet.rs:575:43-575:56)
  3: _32 = &((*_1).2: core::option::Option<usize>)
    SourceInfo(regex-automata/src/util/alphabet.rs:575:43-575:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:575:43-575:66)
      kind: _31 = core::option::Option::<usize>::is_none(move _32) -> [return: bb16, unwind: bb22]
  }
  preds [bb13]
  succs [bb16, bb22]

bb15
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:575:38-575:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb20
  }
  preds [bb13]
  succs [bb20]

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:575:43-575:66)
      kind: switchInt(move _31) -> [0: bb19, otherwise: bb17]
  }
  preds [bb14]
  succs [bb17, bb19]

bb17
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/util/alphabet.rs:575:65-575:66)
  1: ((*_1).1: usize) = const core::num::<impl usize>::MAX
    SourceInfo(regex-automata/src/util/alphabet.rs:585:13-585:39)
  2: StorageLive(_34)
    SourceInfo(regex-automata/src/util/alphabet.rs:586:25-586:43)
  3: StorageLive(_35)
    SourceInfo(regex-automata/src/util/alphabet.rs:586:25-586:37)
  4: _35 = &(*((*_1).0: &util::alphabet::ByteClasses))
    SourceInfo(regex-automata/src/util/alphabet.rs:586:25-586:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:586:25-586:43)
      kind: _34 = util::alphabet::ByteClasses::eoi(move _35) -> [return: bb18, unwind: bb22]
  }
  preds [bb16]
  succs [bb18, bb22]

bb18
  0: StorageDead(_35)
    SourceInfo(regex-automata/src/util/alphabet.rs:586:42-586:43)
  1: _0 = core::option::Option::<util::alphabet::Unit>::Some(move _34)
    SourceInfo(regex-automata/src/util/alphabet.rs:586:20-586:44)
  2: StorageDead(_34)
    SourceInfo(regex-automata/src/util/alphabet.rs:586:43-586:44)
  3: StorageDead(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:587:9-587:10)
  4: StorageDead(_29)
    SourceInfo(regex-automata/src/util/alphabet.rs:587:9-587:10)
  5: StorageDead(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:587:9-587:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb21
  }
  preds [bb17]
  succs [bb21]

bb19
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/util/alphabet.rs:575:65-575:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb20
  }
  preds [bb16]
  succs [bb20]

bb20
  0: _28 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:587:10-587:10)
  1: StorageDead(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:587:9-587:10)
  2: StorageDead(_29)
    SourceInfo(regex-automata/src/util/alphabet.rs:587:9-587:10)
  3: StorageDead(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:587:9-587:10)
  4: _0 = core::option::Option::<util::alphabet::Unit>::None
    SourceInfo(regex-automata/src/util/alphabet.rs:588:9-588:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:589:6-589:6)
      kind: goto -> bb21
  }
  preds [bb15, bb19]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:589:6-589:6)
      kind: return
  }
  preds [bb11, bb18, bb20]
  succs []

bb22
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:564:5-589:6)
      kind: resume
  }
  preds [bb1, bb2, bb4, bb5, bb6, bb7, bb8, bb10, bb14, bb17]
  succs []

