{
  "regex-automata/src/nfa/thompson/compiler.rs:1520:21:1520:38": [
    {
      "Try": "self.add_union()?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1538:21:1538:51": [
    {
      "Try": "self.patch(compiled.end, end)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1521:23:1521:40": [
    {
      "Try": "self.add_empty()?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1522:21:1522:31": [
    {
      "For": {
        "iter_var": "urng",
        "iter_range": "cls.iter()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1532:24:1532:60": [
    {
      "Bool": {
        "Other": "let Some(id) = cache.get(&key, hash)"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1523:24:1523:68": [
    {
      "For": {
        "iter_var": "seq",
        "iter_range": "Utf8Sequences::new(urng.start(), urng.end())"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1525:29:1525:43": [
    {
      "For": {
        "iter_var": "brng",
        "iter_range": "seq.as_slice()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1542:17:1542:40": [
    {
      "Try": "self.patch(union, end)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1537:36:1537:71": [
    {
      "Try": "self.c_range(brng.start, brng.end)?"
    }
  ]
}