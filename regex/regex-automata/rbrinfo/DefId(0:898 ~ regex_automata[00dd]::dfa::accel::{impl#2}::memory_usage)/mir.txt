bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:256:9-256:24)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:256:9-256:24)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:256:9-256:13)
  3: _4 = &(*_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:256:9-256:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:256:9-256:24)
      kind: _3 = dfa::accel::Accels::<A>::as_bytes(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _2 = &(*_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:256:9-256:24)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:256:23-256:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:256:9-256:30)
      kind: _0 = core::slice::<impl [u8]>::len(move _2) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:256:29-256:30)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:257:5-257:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:257:6-257:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:255:5-257:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

