bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:9-1957:39)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:9-1956:56)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:10-1956:26)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:10-1956:20)
  4: _5 = &((*_1).0: std::vec::Vec<nfa::thompson::pikevm::FollowEpsilon>)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:10-1956:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:10-1956:26)
      kind: _4 = std::vec::Vec::<nfa::thompson::pikevm::FollowEpsilon>::len(move _5) -> [return: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:25-1956:26)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:29-1956:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:29-1956:55)
      kind: _6 = core::mem::size_of::<nfa::thompson::pikevm::FollowEpsilon>() -> [return: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: _7 = MulWithOverflow(_4, _6)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:9-1956:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:9-1956:56)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _6) -> [success: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: _3 = move (_7.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:9-1956:56)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:55-1956:56)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:55-1956:56)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1957:15-1957:39)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1957:15-1957:24)
  5: _9 = &((*_1).1: nfa::thompson::pikevm::ActiveStates)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1957:15-1957:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1957:15-1957:39)
      kind: _8 = nfa::thompson::pikevm::ActiveStates::memory_usage(move _9) -> [return: bb4, unwind: bb8]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1957:38-1957:39)
  1: _10 = AddWithOverflow(_3, _8)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:9-1957:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:9-1957:39)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _8) -> [success: bb5, unwind: bb8]
  }
  preds [bb3]
  succs [bb5, bb8]

bb5
  0: _2 = move (_10.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:9-1957:39)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1957:38-1957:39)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1957:38-1957:39)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1958:15-1958:39)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1958:15-1958:24)
  5: _12 = &((*_1).2: nfa::thompson::pikevm::ActiveStates)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1958:15-1958:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1958:15-1958:39)
      kind: _11 = nfa::thompson::pikevm::ActiveStates::memory_usage(move _12) -> [return: bb6, unwind: bb8]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1958:38-1958:39)
  1: _13 = AddWithOverflow(_2, _11)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:9-1958:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:9-1958:39)
      kind: assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _11) -> [success: bb7, unwind: bb8]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: _0 = move (_13.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1956:9-1958:39)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1958:38-1958:39)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1958:38-1958:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1959:6-1959:6)
      kind: return
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1954:5-1959:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6]
  succs []

