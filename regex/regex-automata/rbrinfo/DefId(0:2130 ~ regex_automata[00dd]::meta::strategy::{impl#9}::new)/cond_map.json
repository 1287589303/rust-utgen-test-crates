{
  "regex-automata/src/meta/strategy.rs:1511:13:1511:52": [
    {
      "Bool": {
        "Other": "core.info.config().get_auto_prefilter()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:1575:47:1575:75": [
    {
      "Match": {
        "match_source": "regex-automata/src/meta/strategy.rs:1575:47:1575:75",
        "match_str": "reverse_inner::extract(hirs)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/meta/strategy.rs:1579:13:1579:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:1579:21:1579:37"
          },
          "regex-automata/src/meta/strategy.rs:1576:13:1576:20": {
            "pat": {
              "pat_str": "Some(x)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:1576:24:1576:25"
          }
        }
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:1555:13:1555:34": [
    {
      "Bool": {
        "Other": "core.hybrid.is_some()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:1594:28:1594:34": [
    {
      "Match": {
        "match_source": "regex-automata/src/meta/strategy.rs:1594:28:1594:34",
        "match_str": "result",
        "match_kind": {
          "Enum": [
            "Ok",
            "Err"
          ]
        },
        "arms": {
          "regex-automata/src/meta/strategy.rs:1595:13:1595:23": {
            "pat": {
              "pat_str": "Ok(nfarev)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:1595:27:1595:33"
          },
          "regex-automata/src/meta/strategy.rs:1596:13:1596:22": {
            "pat": {
              "pat_str": "Err(_err)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:1596:26:1603:14"
          }
        }
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:1562:12:1562:60": [
    {
      "Bool": {
        "Other": "core.pre.as_ref().map_or(false, |p| p.is_fast())"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:1568:19:1568:37": [
    {
      "Bool": {
        "Other": "core.pre.is_some()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:1613:19:1613:32": [
    {
      "Bool": {
        "Other": "dfa.is_some()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:1611:26:1611:57": [
    {
      "Bool": {
        "Other": "core.info.config().get_hybrid()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:1606:23:1606:51": [
    {
      "Bool": {
        "Other": "core.info.config().get_dfa()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:1522:12:1522:75": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "core.info.config().get_match_kind() != MatchKind::LeftmostFirst",
          "lhs": "core.info.config().get_match_kind()",
          "rhs": "MatchKind::LeftmostFirst",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:1555:39:1555:57": [
    {
      "Bool": {
        "Other": "core.dfa.is_some()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:1545:12:1545:48": [
    {
      "Bool": {
        "Other": "core.info.is_always_anchored_start()"
      }
    }
  ]
}