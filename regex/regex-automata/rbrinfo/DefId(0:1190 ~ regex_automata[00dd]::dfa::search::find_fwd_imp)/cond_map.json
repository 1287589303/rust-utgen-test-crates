{
  "regex-automata/src/dfa/search.rs:184:5:184:45": [
    {
      "Try": "eoi_fwd(dfa, input, &mut sid, &mut mat)?"
    }
  ],
  "regex-automata/src/dfa/search.rs:73:15:73:47": [
    {
      "Match": {
        "match_source": "regex-automata/src/dfa/search.rs:73:15:73:47",
        "match_str": "pre.find(input.haystack(), span)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/dfa/search.rs:74:13:74:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/search.rs:74:21:74:35"
          },
          "regex-automata/src/dfa/search.rs:75:13:75:27": {
            "pat": {
              "pat_str": "Some(ref span)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/search.rs:75:31:80:14"
          }
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:98:15:98:31": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "at < input.end()",
          "lhs": "at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:127:20:127:43": [
    {
      "Bool": {
        "Other": "let Some(ref pre) = pre"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:159:20:159:28": [
    {
      "Bool": {
        "Other": "earliest"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:113:16:113:46": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(prev_sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:156:23:156:46": [
    {
      "Bool": {
        "Other": "dfa.is_match_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:66:8:66:31": [
    {
      "Bool": {
        "Other": "let Some(ref pre) = pre"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:168:23:168:46": [
    {
      "Bool": {
        "Other": "dfa.is_accel_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:54:19:54:40": [
    {
      "Try": "init_fwd(dfa, input)?"
    }
  ],
  "regex-automata/src/dfa/search.rs:120:16:120:41": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:170:63:170:69": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at + 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:83:11:83:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "at < input.end()",
          "lhs": "at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:141:32:141:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "span.start > at",
          "lhs": "span.start",
          "rhs": "at",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:173:23:173:45": [
    {
      "Bool": {
        "Other": "dfa.is_dead_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:77:21:77:36": [
    {
      "Bool": {
        "Other": "universal_start"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:100:50:100:71": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "at + 3 >= input.end()",
          "lhs": "at + 3",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:129:27:129:59": [
    {
      "Match": {
        "match_source": "regex-automata/src/dfa/search.rs:129:27:129:59",
        "match_str": "pre.find(input.haystack(), span)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/dfa/search.rs:130:25:130:29": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/search.rs:130:33:130:47"
          },
          "regex-automata/src/dfa/search.rs:131:25:131:39": {
            "pat": {
              "pat_str": "Some(ref span)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/search.rs:131:43:148:26"
          }
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:126:16:126:39": [
    {
      "Bool": {
        "Other": "dfa.is_start_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:152:69:152:75": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at + 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:150:27:150:50": [
    {
      "Bool": {
        "Other": "dfa.is_accel_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:143:37:143:52": [
    {
      "Bool": {
        "Other": "universal_start"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:164:69:164:75": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at + 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:144:43:144:78": [
    {
      "Try": "prefilter_restart(dfa, &input, at)?"
    }
  ],
  "regex-automata/src/dfa/search.rs:107:16:107:41": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:78:27:78:62": [
    {
      "Try": "prefilter_restart(dfa, &input, at)?"
    }
  ],
  "regex-automata/src/dfa/search.rs:100:50:100:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at + 3",
          "lhs": "at",
          "rhs": "3",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:125:12:125:37": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:162:20:162:43": [
    {
      "Bool": {
        "Other": "dfa.is_accel_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:100:16:100:46": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(prev_sid)"
      }
    }
  ]
}