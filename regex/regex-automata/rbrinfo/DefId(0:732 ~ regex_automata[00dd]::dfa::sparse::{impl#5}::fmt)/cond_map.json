{
  "regex-automata/src/dfa/sparse.rs:1076:9:1076:37": [
    {
      "Try": "writeln!(f, \"sparse::DFA(\")?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1082:47:1082:73": [
    {
      "For": {
        "iter_var": "(i, (start_id, anchored, sty))",
        "iter_range": "self.st.iter().enumerate()"
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1081:9:1081:25": [
    {
      "Try": "writeln!(f, \"\")?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1094:13:1094:71": [
    {
      "Try": "writeln!(f, \"  {:?} => {:06?}\", sty, start_id.as_usize())?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1084:23:1084:31": [
    {
      "Match": {
        "match_source": "regex-automata/src/dfa/sparse.rs:1084:23:1084:31",
        "match_str": "anchored",
        "match_kind": {
          "Enum": [
            "No",
            "Yes",
            "Pattern"
          ]
        },
        "arms": {
          "regex-automata/src/dfa/sparse.rs:1087:21:1087:43": {
            "pat": {
              "pat_str": "Anchored::Pattern(pid)",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/sparse.rs:1087:47:1091:23"
          },
          "regex-automata/src/dfa/sparse.rs:1086:21:1086:34": {
            "pat": {
              "pat_str": "Anchored::Yes",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/sparse.rs:1086:38:1086:75"
          },
          "regex-automata/src/dfa/sparse.rs:1085:21:1085:33": {
            "pat": {
              "pat_str": "Anchored::No",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/sparse.rs:1085:37:1085:76"
          }
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1083:16:1083:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "i % self.st.stride",
          "lhs": "i",
          "rhs": "self.st.stride",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1097:9:1097:65": [
    {
      "Try": "writeln!(f, \"pattern length: {:?}\", self.pattern_len())?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1098:9:1098:48": [
    {
      "Try": "writeln!(f, \"flags: {:?}\", self.flags)?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1085:37:1085:76": [
    {
      "Try": "writeln!(f, \"START-GROUP(unanchored)\")?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1087:47:1091:23": [
    {
      "Try": "writeln!(\n                        f,\n                        \"START_GROUP(pattern: {:?})\",\n                        pid.as_usize()\n                    )?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1077:22:1077:38": [
    {
      "For": {
        "iter_var": "state",
        "iter_range": "self.tt.states()"
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1078:13:1078:54": [
    {
      "Try": "fmt_state_indicator(f, self, state.id())?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1096:9:1096:62": [
    {
      "Try": "writeln!(f, \"state length: {:?}\", self.tt.state_len)?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1083:16:1083:39": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "i % self.st.stride == 0",
          "lhs": "i % self.st.stride",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1099:9:1099:26": [
    {
      "Try": "writeln!(f, \")\")?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1079:13:1079:71": [
    {
      "Try": "writeln!(f, \"{:06?}: {:?}\", state.id().as_usize(), state)?"
    }
  ],
  "regex-automata/src/dfa/sparse.rs:1086:38:1086:75": [
    {
      "Try": "writeln!(f, \"START-GROUP(anchored)\")?"
    }
  ]
}