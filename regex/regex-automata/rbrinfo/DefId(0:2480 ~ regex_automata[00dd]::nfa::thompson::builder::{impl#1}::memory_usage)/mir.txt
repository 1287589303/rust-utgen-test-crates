bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:9-1300:52)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:9-1300:26)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:9-1300:20)
  3: _4 = &((*_1).1: std::vec::Vec<nfa::thompson::builder::State>)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:9-1300:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:9-1300:26)
      kind: _3 = std::vec::Vec::<nfa::thompson::builder::State>::len(move _4) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:25-1300:26)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:29-1300:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:29-1300:52)
      kind: _5 = core::mem::size_of::<nfa::thompson::builder::State>() -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _6 = MulWithOverflow(_3, _5)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:9-1300:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:9-1300:52)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _3, move _5) -> [success: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _2 = move (_6.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:9-1300:52)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:51-1300:52)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:51-1300:52)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:55-1300:73)
  4: _7 = ((*_1).4: usize)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:55-1300:73)
  5: _8 = AddWithOverflow(_2, _7)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:9-1300:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:9-1300:73)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _7) -> [success: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: _0 = move (_8.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:9-1300:73)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:72-1300:73)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1300:72-1300:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1301:6-1301:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:1299:5-1301:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

