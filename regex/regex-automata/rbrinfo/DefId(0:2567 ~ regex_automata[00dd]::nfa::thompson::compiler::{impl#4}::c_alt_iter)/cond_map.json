{
  "regex-automata/src/nfa/thompson/compiler.rs:1103:23:1103:25": [
    {
      "For": {
        "iter_var": "result",
        "iter_range": "it"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1094:29:1094:36": [
    {
      "Try": "result?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1104:28:1104:35": [
    {
      "Try": "result?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1097:21:1097:38": [
    {
      "Try": "self.add_union()?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1098:19:1098:36": [
    {
      "Try": "self.add_empty()?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1102:9:1102:37": [
    {
      "Try": "self.patch(second.end, end)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1092:28:1092:37": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/compiler.rs:1092:28:1092:37",
        "match_str": "it.next()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/compiler.rs:1093:13:1093:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/compiler.rs:1093:21:1093:37"
          },
          "regex-automata/src/nfa/thompson/compiler.rs:1094:13:1094:25": {
            "pat": {
              "pat_str": "Some(result)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/compiler.rs:1094:29:1094:36"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1105:13:1105:47": [
    {
      "Try": "self.patch(union, compiled.start)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1100:9:1100:36": [
    {
      "Try": "self.patch(first.end, end)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1090:29:1090:36": [
    {
      "Try": "result?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1099:9:1099:40": [
    {
      "Try": "self.patch(union, first.start)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1088:27:1088:36": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/compiler.rs:1088:27:1088:36",
        "match_str": "it.next()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/compiler.rs:1089:13:1089:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/compiler.rs:1089:21:1089:41"
          },
          "regex-automata/src/nfa/thompson/compiler.rs:1090:13:1090:25": {
            "pat": {
              "pat_str": "Some(result)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/compiler.rs:1090:29:1090:36"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1101:9:1101:41": [
    {
      "Try": "self.patch(union, second.start)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1106:13:1106:43": [
    {
      "Try": "self.patch(compiled.end, end)?"
    }
  ]
}