bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/limited.rs:133:9-133:16)
  1: _5 = core::option::Option::<util::search::HalfMatch>::None
    SourceInfo(regex-automata/src/meta/limited.rs:133:19-133:23)
  2: FakeRead(ForLet(None), _5)
    SourceInfo(regex-automata/src/meta/limited.rs:133:9-133:16)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/limited.rs:134:9-134:16)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:57)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:56)
  6: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:22)
  7: _9 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:22)
  8: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/limited.rs:134:43-134:48)
  9: _10 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:134:43-134:48)
  10: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/limited.rs:134:50-134:55)
  11: _11 = &(*_3)
    SourceInfo(regex-automata/src/meta/limited.rs:134:50-134:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:56)
      kind: _8 = hybrid::dfa::DFA::start_state_reverse(move _9, move _10, move _11) -> [return: bb1, unwind: bb114]
  }
  preds []
  succs [bb1, bb114]

bb1
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/limited.rs:134:55-134:56)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/limited.rs:134:55-134:56)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/limited.rs:134:55-134:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:57)
      kind: _7 = <core::result::Result<hybrid::id::LazyStateID, util::search::MatchError> as core::ops::Try>::branch(move _8) -> [return: bb2, unwind: bb113]
  }
  preds [bb0]
  succs [bb2, bb113]

bb2
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
  1: PlaceMention(_7)
    SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:57)
  2: _12 = discriminant(_7)
    SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:57)
      kind: switchInt(move _12) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _7)
    SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:57)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:57)
  1: _16 = ((_7 as Continue).0: hybrid::id::LazyStateID)
    SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:57)
  2: _6 = _16
    SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:57)
  3: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
  4: FakeRead(ForLet(None), _6)
    SourceInfo(regex-automata/src/meta/limited.rs:134:9-134:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:57-134:58)
      kind: drop(_7) -> [return: bb8, unwind: bb114]
  }
  preds [bb2, bb4]
  succs [bb8, bb114]

bb6
  0: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
  1: _13 = move ((_7 as Break).0: core::result::Result<core::convert::Infallible, util::search::MatchError>)
    SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
  3: _15 = move _13
    SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:19-134:57)
      kind: _0 = <core::result::Result<core::option::Option<util::search::HalfMatch>, meta::error::RetryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual(move _15) -> [return: bb7, unwind: bb110]
  }
  preds [bb4]
  succs [bb7, bb110]

bb7
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
      kind: drop(_13) -> [return: bb93, unwind: bb112]
  }
  preds [bb6]
  succs [bb93, bb112]

bb8
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/limited.rs:134:57-134:58)
  1: StorageLive(_17)
    SourceInfo(regex-automata/src/meta/limited.rs:135:5-138:6)
  2: StorageLive(_18)
    SourceInfo(regex-automata/src/meta/limited.rs:135:8-135:36)
  3: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/limited.rs:135:8-135:21)
  4: StorageLive(_20)
    SourceInfo(regex-automata/src/meta/limited.rs:135:8-135:13)
  5: _20 = &(*_3)
    SourceInfo(regex-automata/src/meta/limited.rs:135:8-135:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:135:8-135:21)
      kind: _19 = util::search::Input::<'_>::start(move _20) -> [return: bb9, unwind: bb114]
  }
  preds [bb5]
  succs [bb9, bb114]

bb9
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/meta/limited.rs:135:20-135:21)
  1: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/limited.rs:135:25-135:36)
  2: StorageLive(_22)
    SourceInfo(regex-automata/src/meta/limited.rs:135:25-135:30)
  3: _22 = &(*_3)
    SourceInfo(regex-automata/src/meta/limited.rs:135:25-135:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:135:25-135:36)
      kind: _21 = util::search::Input::<'_>::end(move _22) -> [return: bb10, unwind: bb114]
  }
  preds [bb8]
  succs [bb10, bb114]

bb10
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/limited.rs:135:35-135:36)
  1: _18 = Eq(move _19, move _21)
    SourceInfo(regex-automata/src/meta/limited.rs:135:8-135:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:135:8-135:36)
      kind: switchInt(move _18) -> [0: bb20, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb20]

bb11
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/limited.rs:135:35-135:36)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/limited.rs:135:35-135:36)
  2: StorageLive(_24)
    SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:63)
  3: StorageLive(_25)
    SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:63)
  4: StorageLive(_26)
    SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:62)
  5: StorageLive(_27)
    SourceInfo(regex-automata/src/meta/limited.rs:136:24-136:27)
  6: _27 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:136:24-136:27)
  7: StorageLive(_28)
    SourceInfo(regex-automata/src/meta/limited.rs:136:29-136:34)
  8: _28 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:136:29-136:34)
  9: StorageLive(_29)
    SourceInfo(regex-automata/src/meta/limited.rs:136:36-136:41)
  10: _29 = &(*_3)
    SourceInfo(regex-automata/src/meta/limited.rs:136:36-136:41)
  11: StorageLive(_30)
    SourceInfo(regex-automata/src/meta/limited.rs:136:43-136:51)
  12: StorageLive(_31)
    SourceInfo(regex-automata/src/meta/limited.rs:136:43-136:51)
  13: _31 = &mut _6
    SourceInfo(regex-automata/src/meta/limited.rs:136:43-136:51)
  14: _30 = &mut (*_31)
    SourceInfo(regex-automata/src/meta/limited.rs:136:43-136:51)
  15: StorageLive(_32)
    SourceInfo(regex-automata/src/meta/limited.rs:136:53-136:61)
  16: StorageLive(_33)
    SourceInfo(regex-automata/src/meta/limited.rs:136:53-136:61)
  17: _33 = &mut _5
    SourceInfo(regex-automata/src/meta/limited.rs:136:53-136:61)
  18: _32 = &mut (*_33)
    SourceInfo(regex-automata/src/meta/limited.rs:136:53-136:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:62)
      kind: _26 = meta::limited::hybrid_eoi_rev(move _27, move _28, move _29, move _30, move _32) -> [return: bb12, unwind: bb114]
  }
  preds [bb10]
  succs [bb12, bb114]

bb12
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/meta/limited.rs:136:61-136:62)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/limited.rs:136:61-136:62)
  2: StorageDead(_29)
    SourceInfo(regex-automata/src/meta/limited.rs:136:61-136:62)
  3: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/limited.rs:136:61-136:62)
  4: StorageDead(_27)
    SourceInfo(regex-automata/src/meta/limited.rs:136:61-136:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:63)
      kind: _25 = <core::result::Result<(), util::search::MatchError> as core::ops::Try>::branch(move _26) -> [return: bb13, unwind: bb109]
  }
  preds [bb11]
  succs [bb13, bb109]

bb13
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
  1: PlaceMention(_25)
    SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:63)
  2: _34 = discriminant(_25)
    SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:63)
      kind: switchInt(move _34) -> [0: bb16, 1: bb15, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb15, bb16]

bb14
  0: FakeRead(ForMatchedPlace(None), _25)
    SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:63)
      kind: unreachable
  }
  preds [bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
      kind: falseEdge -> [real: bb17, imaginary: bb16]
  }
  preds [bb13]
  succs [bb16, bb17]

bb16
  0: StorageLive(_38)
    SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:63)
  1: _38 = ((_25 as Continue).0: ())
    SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:63)
  2: _24 = _38
    SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:63)
  3: StorageDead(_38)
    SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:63-136:64)
      kind: drop(_25) -> [return: bb19, unwind: bb114]
  }
  preds [bb13, bb15]
  succs [bb19, bb114]

bb17
  0: StorageLive(_35)
    SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
  1: _35 = move ((_25 as Break).0: core::result::Result<core::convert::Infallible, util::search::MatchError>)
    SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
  2: StorageLive(_37)
    SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
  3: _37 = move _35
    SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:9-136:63)
      kind: _0 = <core::result::Result<core::option::Option<util::search::HalfMatch>, meta::error::RetryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual(move _37) -> [return: bb18, unwind: bb106]
  }
  preds [bb15]
  succs [bb18, bb106]

bb18
  0: StorageDead(_37)
    SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
      kind: drop(_35) -> [return: bb90, unwind: bb108]
  }
  preds [bb17]
  succs [bb90, bb108]

bb19
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/meta/limited.rs:136:63-136:64)
  1: StorageDead(_31)
    SourceInfo(regex-automata/src/meta/limited.rs:136:63-136:64)
  2: StorageDead(_25)
    SourceInfo(regex-automata/src/meta/limited.rs:136:63-136:64)
  3: StorageDead(_24)
    SourceInfo(regex-automata/src/meta/limited.rs:136:63-136:64)
  4: StorageLive(_39)
    SourceInfo(regex-automata/src/meta/limited.rs:137:19-137:22)
  5: _39 = _5
    SourceInfo(regex-automata/src/meta/limited.rs:137:19-137:22)
  6: _0 = core::result::Result::<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>::Ok(move _39)
    SourceInfo(regex-automata/src/meta/limited.rs:137:16-137:23)
  7: StorageDead(_39)
    SourceInfo(regex-automata/src/meta/limited.rs:137:22-137:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:137:9-137:23)
      kind: goto -> bb92
  }
  preds [bb16]
  succs [bb92]

bb20
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/limited.rs:135:35-135:36)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/limited.rs:135:35-135:36)
  2: _17 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:138:6-138:6)
  3: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/limited.rs:138:5-138:6)
  4: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/limited.rs:138:5-138:6)
  5: StorageLive(_40)
    SourceInfo(regex-automata/src/meta/limited.rs:139:9-139:15)
  6: StorageLive(_41)
    SourceInfo(regex-automata/src/meta/limited.rs:139:18-139:29)
  7: StorageLive(_42)
    SourceInfo(regex-automata/src/meta/limited.rs:139:18-139:23)
  8: _42 = &(*_3)
    SourceInfo(regex-automata/src/meta/limited.rs:139:18-139:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:139:18-139:29)
      kind: _41 = util::search::Input::<'_>::end(move _42) -> [return: bb21, unwind: bb114]
  }
  preds [bb10]
  succs [bb21, bb114]

bb21
  0: StorageDead(_42)
    SourceInfo(regex-automata/src/meta/limited.rs:139:28-139:29)
  1: _43 = SubWithOverflow(_41, const 1_usize)
    SourceInfo(regex-automata/src/meta/limited.rs:139:18-139:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:139:18-139:33)
      kind: assert(!move (_43.1: bool), "attempt to compute `{} - {}`, which would overflow", move _41, const 1_usize) -> [success: bb22, unwind: bb114]
  }
  preds [bb20]
  succs [bb22, bb114]

bb22
  0: _40 = move (_43.0: usize)
    SourceInfo(regex-automata/src/meta/limited.rs:139:18-139:33)
  1: StorageDead(_41)
    SourceInfo(regex-automata/src/meta/limited.rs:139:32-139:33)
  2: FakeRead(ForLet(None), _40)
    SourceInfo(regex-automata/src/meta/limited.rs:139:9-139:15)
  3: StorageLive(_44)
    SourceInfo(regex-automata/src/meta/limited.rs:140:5-170:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:140:5-170:6)
      kind: goto -> bb23
  }
  preds [bb21]
  succs [bb23]

bb23
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:140:5-170:6)
      kind: falseUnwind -> [real: bb24, unwind: bb114]
  }
  preds [bb22, bb63]
  succs [bb24, bb114]

bb24
  0: StorageLive(_46)
    SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:51)
  1: StorageLive(_47)
    SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:51)
  2: StorageLive(_48)
    SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:50)
  3: StorageLive(_49)
    SourceInfo(regex-automata/src/meta/limited.rs:141:15-142:58)
  4: StorageLive(_50)
    SourceInfo(regex-automata/src/meta/limited.rs:141:15-141:18)
  5: _50 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:141:15-141:18)
  6: StorageLive(_51)
    SourceInfo(regex-automata/src/meta/limited.rs:142:25-142:30)
  7: _51 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:142:25-142:30)
  8: StorageLive(_52)
    SourceInfo(regex-automata/src/meta/limited.rs:142:32-142:35)
  9: _52 = _6
    SourceInfo(regex-automata/src/meta/limited.rs:142:32-142:35)
  10: StorageLive(_53)
    SourceInfo(regex-automata/src/meta/limited.rs:142:37-142:57)
  11: StorageLive(_54)
    SourceInfo(regex-automata/src/meta/limited.rs:142:37-142:53)
  12: StorageLive(_55)
    SourceInfo(regex-automata/src/meta/limited.rs:142:37-142:42)
  13: _55 = &(*_3)
    SourceInfo(regex-automata/src/meta/limited.rs:142:37-142:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:142:37-142:53)
      kind: _54 = util::search::Input::<'_>::haystack(move _55) -> [return: bb25, unwind: bb114]
  }
  preds [bb23]
  succs [bb25, bb114]

bb25
  0: StorageDead(_55)
    SourceInfo(regex-automata/src/meta/limited.rs:142:52-142:53)
  1: StorageLive(_56)
    SourceInfo(regex-automata/src/meta/limited.rs:142:54-142:56)
  2: _56 = _40
    SourceInfo(regex-automata/src/meta/limited.rs:142:54-142:56)
  3: _57 = Len((*_54))
    SourceInfo(regex-automata/src/meta/limited.rs:142:37-142:57)
  4: _58 = Lt(_56, _57)
    SourceInfo(regex-automata/src/meta/limited.rs:142:37-142:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:142:37-142:57)
      kind: assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _56) -> [success: bb26, unwind: bb114]
  }
  preds [bb24]
  succs [bb26, bb114]

bb26
  0: _53 = (*_54)[_56]
    SourceInfo(regex-automata/src/meta/limited.rs:142:37-142:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:141:15-142:58)
      kind: _49 = hybrid::dfa::DFA::next_state(move _50, move _51, move _52, move _53) -> [return: bb27, unwind: bb114]
  }
  preds [bb25]
  succs [bb27, bb114]

bb27
  0: StorageDead(_53)
    SourceInfo(regex-automata/src/meta/limited.rs:142:57-142:58)
  1: StorageDead(_52)
    SourceInfo(regex-automata/src/meta/limited.rs:142:57-142:58)
  2: StorageDead(_51)
    SourceInfo(regex-automata/src/meta/limited.rs:142:57-142:58)
  3: StorageDead(_50)
    SourceInfo(regex-automata/src/meta/limited.rs:142:57-142:58)
  4: StorageLive(_59)
    SourceInfo(regex-automata/src/meta/limited.rs:143:22-143:49)
  5: StorageLive(_60)
    SourceInfo(regex-automata/src/meta/limited.rs:143:22-143:49)
  6: _60 = &_40
    SourceInfo(regex-automata/src/meta/limited.rs:143:22-143:49)
  7: _59 = {closure@regex-automata/src/meta/limited.rs:143:22: 143:25} { at: move _60 }
    SourceInfo(regex-automata/src/meta/limited.rs:143:22-143:49)
  8: StorageDead(_60)
    SourceInfo(regex-automata/src/meta/limited.rs:143:24-143:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:50)
      kind: _48 = core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::map_err::<util::search::MatchError, {closure@regex-automata/src/meta/limited.rs:143:22: 143:25}>(move _49, move _59) -> [return: bb28, unwind: bb114]
  }
  preds [bb26]
  succs [bb28, bb114]

bb28
  0: StorageDead(_59)
    SourceInfo(regex-automata/src/meta/limited.rs:143:49-143:50)
  1: StorageDead(_49)
    SourceInfo(regex-automata/src/meta/limited.rs:143:49-143:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:51)
      kind: _47 = <core::result::Result<hybrid::id::LazyStateID, util::search::MatchError> as core::ops::Try>::branch(move _48) -> [return: bb29, unwind: bb105]
  }
  preds [bb27]
  succs [bb29, bb105]

bb29
  0: StorageDead(_48)
    SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
  1: PlaceMention(_47)
    SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:51)
  2: _61 = discriminant(_47)
    SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:51)
      kind: switchInt(move _61) -> [0: bb32, 1: bb31, otherwise: bb30]
  }
  preds [bb28]
  succs [bb30, bb31, bb32]

bb30
  0: FakeRead(ForMatchedPlace(None), _47)
    SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:51)
      kind: unreachable
  }
  preds [bb29]
  succs []

bb31
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
      kind: falseEdge -> [real: bb33, imaginary: bb32]
  }
  preds [bb29]
  succs [bb32, bb33]

bb32
  0: StorageLive(_65)
    SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:51)
  1: _65 = ((_47 as Continue).0: hybrid::id::LazyStateID)
    SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:51)
  2: _46 = _65
    SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:51)
  3: StorageDead(_65)
    SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
  4: _6 = move _46
    SourceInfo(regex-automata/src/meta/limited.rs:141:9-143:51)
  5: StorageDead(_46)
    SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:143:51-143:52)
      kind: drop(_47) -> [return: bb35, unwind: bb114]
  }
  preds [bb29, bb31]
  succs [bb35, bb114]

bb33
  0: StorageLive(_62)
    SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
  1: _62 = move ((_47 as Break).0: core::result::Result<core::convert::Infallible, util::search::MatchError>)
    SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
  2: StorageLive(_64)
    SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
  3: _64 = move _62
    SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:141:15-143:51)
      kind: _0 = <core::result::Result<core::option::Option<util::search::HalfMatch>, meta::error::RetryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual(move _64) -> [return: bb34, unwind: bb102]
  }
  preds [bb31]
  succs [bb34, bb102]

bb34
  0: StorageDead(_64)
    SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
      kind: drop(_62) -> [return: bb86, unwind: bb104]
  }
  preds [bb33]
  succs [bb86, bb104]

bb35
  0: StorageDead(_56)
    SourceInfo(regex-automata/src/meta/limited.rs:143:51-143:52)
  1: StorageDead(_54)
    SourceInfo(regex-automata/src/meta/limited.rs:143:51-143:52)
  2: StorageDead(_47)
    SourceInfo(regex-automata/src/meta/limited.rs:143:51-143:52)
  3: StorageLive(_66)
    SourceInfo(regex-automata/src/meta/limited.rs:144:9-157:10)
  4: StorageLive(_67)
    SourceInfo(regex-automata/src/meta/limited.rs:144:12-144:27)
  5: StorageLive(_68)
    SourceInfo(regex-automata/src/meta/limited.rs:144:12-144:15)
  6: _68 = &_6
    SourceInfo(regex-automata/src/meta/limited.rs:144:12-144:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:144:12-144:27)
      kind: _67 = hybrid::id::LazyStateID::is_tagged(move _68) -> [return: bb36, unwind: bb114]
  }
  preds [bb32]
  succs [bb36, bb114]

bb36
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:144:12-144:27)
      kind: switchInt(move _67) -> [0: bb55, otherwise: bb37]
  }
  preds [bb35]
  succs [bb37, bb55]

bb37
  0: StorageDead(_68)
    SourceInfo(regex-automata/src/meta/limited.rs:144:26-144:27)
  1: StorageLive(_69)
    SourceInfo(regex-automata/src/meta/limited.rs:145:16-145:30)
  2: StorageLive(_70)
    SourceInfo(regex-automata/src/meta/limited.rs:145:16-145:19)
  3: _70 = &_6
    SourceInfo(regex-automata/src/meta/limited.rs:145:16-145:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:145:16-145:30)
      kind: _69 = hybrid::id::LazyStateID::is_match(move _70) -> [return: bb38, unwind: bb114]
  }
  preds [bb36]
  succs [bb38, bb114]

bb38
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:145:16-145:30)
      kind: switchInt(move _69) -> [0: bb43, otherwise: bb39]
  }
  preds [bb37]
  succs [bb39, bb43]

bb39
  0: StorageDead(_70)
    SourceInfo(regex-automata/src/meta/limited.rs:145:29-145:30)
  1: StorageLive(_71)
    SourceInfo(regex-automata/src/meta/limited.rs:146:21-146:28)
  2: StorageLive(_72)
    SourceInfo(regex-automata/src/meta/limited.rs:146:31-146:34)
  3: _72 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:146:31-146:34)
  4: StorageLive(_73)
    SourceInfo(regex-automata/src/meta/limited.rs:146:49-146:54)
  5: _73 = &(*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:146:49-146:54)
  6: StorageLive(_74)
    SourceInfo(regex-automata/src/meta/limited.rs:146:56-146:59)
  7: _74 = _6
    SourceInfo(regex-automata/src/meta/limited.rs:146:56-146:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:146:31-146:63)
      kind: _71 = hybrid::dfa::DFA::match_pattern(move _72, move _73, move _74, const 0_usize) -> [return: bb40, unwind: bb114]
  }
  preds [bb38]
  succs [bb40, bb114]

bb40
  0: StorageDead(_74)
    SourceInfo(regex-automata/src/meta/limited.rs:146:62-146:63)
  1: StorageDead(_73)
    SourceInfo(regex-automata/src/meta/limited.rs:146:62-146:63)
  2: StorageDead(_72)
    SourceInfo(regex-automata/src/meta/limited.rs:146:62-146:63)
  3: FakeRead(ForLet(None), _71)
    SourceInfo(regex-automata/src/meta/limited.rs:146:21-146:28)
  4: StorageLive(_75)
    SourceInfo(regex-automata/src/meta/limited.rs:151:23-151:60)
  5: StorageLive(_76)
    SourceInfo(regex-automata/src/meta/limited.rs:151:28-151:59)
  6: StorageLive(_77)
    SourceInfo(regex-automata/src/meta/limited.rs:151:43-151:50)
  7: _77 = _71
    SourceInfo(regex-automata/src/meta/limited.rs:151:43-151:50)
  8: StorageLive(_78)
    SourceInfo(regex-automata/src/meta/limited.rs:151:52-151:58)
  9: StorageLive(_79)
    SourceInfo(regex-automata/src/meta/limited.rs:151:52-151:54)
  10: _79 = _40
    SourceInfo(regex-automata/src/meta/limited.rs:151:52-151:54)
  11: _80 = AddWithOverflow(_79, const 1_usize)
    SourceInfo(regex-automata/src/meta/limited.rs:151:52-151:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:151:52-151:58)
      kind: assert(!move (_80.1: bool), "attempt to compute `{} + {}`, which would overflow", move _79, const 1_usize) -> [success: bb41, unwind: bb114]
  }
  preds [bb39]
  succs [bb41, bb114]

bb41
  0: _78 = move (_80.0: usize)
    SourceInfo(regex-automata/src/meta/limited.rs:151:52-151:58)
  1: StorageDead(_79)
    SourceInfo(regex-automata/src/meta/limited.rs:151:57-151:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:151:28-151:59)
      kind: _76 = util::search::HalfMatch::new(move _77, move _78) -> [return: bb42, unwind: bb114]
  }
  preds [bb40]
  succs [bb42, bb114]

bb42
  0: StorageDead(_78)
    SourceInfo(regex-automata/src/meta/limited.rs:151:58-151:59)
  1: StorageDead(_77)
    SourceInfo(regex-automata/src/meta/limited.rs:151:58-151:59)
  2: _75 = core::option::Option::<util::search::HalfMatch>::Some(move _76)
    SourceInfo(regex-automata/src/meta/limited.rs:151:23-151:60)
  3: StorageDead(_76)
    SourceInfo(regex-automata/src/meta/limited.rs:151:59-151:60)
  4: _5 = move _75
    SourceInfo(regex-automata/src/meta/limited.rs:151:17-151:60)
  5: StorageDead(_75)
    SourceInfo(regex-automata/src/meta/limited.rs:151:59-151:60)
  6: _66 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:145:31-152:14)
  7: StorageDead(_71)
    SourceInfo(regex-automata/src/meta/limited.rs:152:13-152:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:145:13-156:14)
      kind: goto -> bb54
  }
  preds [bb41]
  succs [bb54]

bb43
  0: StorageDead(_70)
    SourceInfo(regex-automata/src/meta/limited.rs:145:29-145:30)
  1: StorageLive(_81)
    SourceInfo(regex-automata/src/meta/limited.rs:152:23-152:36)
  2: StorageLive(_82)
    SourceInfo(regex-automata/src/meta/limited.rs:152:23-152:26)
  3: _82 = &_6
    SourceInfo(regex-automata/src/meta/limited.rs:152:23-152:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:152:23-152:36)
      kind: _81 = hybrid::id::LazyStateID::is_dead(move _82) -> [return: bb44, unwind: bb114]
  }
  preds [bb38]
  succs [bb44, bb114]

bb44
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:152:23-152:36)
      kind: switchInt(move _81) -> [0: bb46, otherwise: bb45]
  }
  preds [bb43]
  succs [bb45, bb46]

bb45
  0: StorageDead(_82)
    SourceInfo(regex-automata/src/meta/limited.rs:152:35-152:36)
  1: StorageLive(_84)
    SourceInfo(regex-automata/src/meta/limited.rs:153:27-153:30)
  2: _84 = _5
    SourceInfo(regex-automata/src/meta/limited.rs:153:27-153:30)
  3: _0 = core::result::Result::<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>::Ok(move _84)
    SourceInfo(regex-automata/src/meta/limited.rs:153:24-153:31)
  4: StorageDead(_84)
    SourceInfo(regex-automata/src/meta/limited.rs:153:30-153:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:153:17-153:31)
      kind: goto -> bb85
  }
  preds [bb44]
  succs [bb85]

bb46
  0: StorageDead(_82)
    SourceInfo(regex-automata/src/meta/limited.rs:152:35-152:36)
  1: StorageLive(_85)
    SourceInfo(regex-automata/src/meta/limited.rs:154:23-154:36)
  2: StorageLive(_86)
    SourceInfo(regex-automata/src/meta/limited.rs:154:23-154:26)
  3: _86 = &_6
    SourceInfo(regex-automata/src/meta/limited.rs:154:23-154:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:154:23-154:36)
      kind: _85 = hybrid::id::LazyStateID::is_quit(move _86) -> [return: bb47, unwind: bb114]
  }
  preds [bb44]
  succs [bb47, bb114]

bb47
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:154:23-154:36)
      kind: switchInt(move _85) -> [0: bb53, otherwise: bb48]
  }
  preds [bb46]
  succs [bb48, bb53]

bb48
  0: StorageDead(_86)
    SourceInfo(regex-automata/src/meta/limited.rs:154:35-154:36)
  1: StorageLive(_88)
    SourceInfo(regex-automata/src/meta/limited.rs:155:28-155:77)
  2: StorageLive(_89)
    SourceInfo(regex-automata/src/meta/limited.rs:155:28-155:70)
  3: StorageLive(_90)
    SourceInfo(regex-automata/src/meta/limited.rs:155:45-155:65)
  4: StorageLive(_91)
    SourceInfo(regex-automata/src/meta/limited.rs:155:45-155:61)
  5: StorageLive(_92)
    SourceInfo(regex-automata/src/meta/limited.rs:155:45-155:50)
  6: _92 = &(*_3)
    SourceInfo(regex-automata/src/meta/limited.rs:155:45-155:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:155:45-155:61)
      kind: _91 = util::search::Input::<'_>::haystack(move _92) -> [return: bb49, unwind: bb114]
  }
  preds [bb47]
  succs [bb49, bb114]

bb49
  0: StorageDead(_92)
    SourceInfo(regex-automata/src/meta/limited.rs:155:60-155:61)
  1: StorageLive(_93)
    SourceInfo(regex-automata/src/meta/limited.rs:155:62-155:64)
  2: _93 = _40
    SourceInfo(regex-automata/src/meta/limited.rs:155:62-155:64)
  3: _94 = Len((*_91))
    SourceInfo(regex-automata/src/meta/limited.rs:155:45-155:65)
  4: _95 = Lt(_93, _94)
    SourceInfo(regex-automata/src/meta/limited.rs:155:45-155:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:155:45-155:65)
      kind: assert(move _95, "index out of bounds: the length is {} but the index is {}", move _94, _93) -> [success: bb50, unwind: bb114]
  }
  preds [bb48]
  succs [bb50, bb114]

bb50
  0: _90 = (*_91)[_93]
    SourceInfo(regex-automata/src/meta/limited.rs:155:45-155:65)
  1: StorageLive(_96)
    SourceInfo(regex-automata/src/meta/limited.rs:155:67-155:69)
  2: _96 = _40
    SourceInfo(regex-automata/src/meta/limited.rs:155:67-155:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:155:28-155:70)
      kind: _89 = util::search::MatchError::quit(move _90, move _96) -> [return: bb51, unwind: bb114]
  }
  preds [bb49]
  succs [bb51, bb114]

bb51
  0: StorageDead(_96)
    SourceInfo(regex-automata/src/meta/limited.rs:155:69-155:70)
  1: StorageDead(_90)
    SourceInfo(regex-automata/src/meta/limited.rs:155:69-155:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:155:28-155:77)
      kind: _88 = <util::search::MatchError as core::convert::Into<meta::error::RetryError>>::into(move _89) -> [return: bb52, unwind: bb101]
  }
  preds [bb50]
  succs [bb52, bb101]

bb52
  0: StorageDead(_89)
    SourceInfo(regex-automata/src/meta/limited.rs:155:76-155:77)
  1: _0 = core::result::Result::<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>::Err(move _88)
    SourceInfo(regex-automata/src/meta/limited.rs:155:24-155:78)
  2: StorageDead(_88)
    SourceInfo(regex-automata/src/meta/limited.rs:155:77-155:78)
  3: StorageDead(_93)
    SourceInfo(regex-automata/src/meta/limited.rs:155:78-155:79)
  4: StorageDead(_91)
    SourceInfo(regex-automata/src/meta/limited.rs:155:78-155:79)
  5: StorageDead(_85)
    SourceInfo(regex-automata/src/meta/limited.rs:156:13-156:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb85
  }
  preds [bb51]
  succs [bb85]

bb53
  0: StorageDead(_86)
    SourceInfo(regex-automata/src/meta/limited.rs:154:35-154:36)
  1: _66 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:156:14-156:14)
  2: StorageDead(_85)
    SourceInfo(regex-automata/src/meta/limited.rs:156:13-156:14)
  3: StorageDead(_81)
    SourceInfo(regex-automata/src/meta/limited.rs:156:13-156:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:145:13-156:14)
      kind: goto -> bb54
  }
  preds [bb47]
  succs [bb54]

bb54
  0: StorageDead(_69)
    SourceInfo(regex-automata/src/meta/limited.rs:156:13-156:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:144:9-157:10)
      kind: goto -> bb56
  }
  preds [bb42, bb53]
  succs [bb56]

bb55
  0: StorageDead(_68)
    SourceInfo(regex-automata/src/meta/limited.rs:144:26-144:27)
  1: _66 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:157:10-157:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:144:9-157:10)
      kind: goto -> bb56
  }
  preds [bb36]
  succs [bb56]

bb56
  0: StorageDead(_67)
    SourceInfo(regex-automata/src/meta/limited.rs:157:9-157:10)
  1: StorageDead(_66)
    SourceInfo(regex-automata/src/meta/limited.rs:157:9-157:10)
  2: StorageLive(_97)
    SourceInfo(regex-automata/src/meta/limited.rs:158:9-160:10)
  3: StorageLive(_98)
    SourceInfo(regex-automata/src/meta/limited.rs:158:12-158:31)
  4: StorageLive(_99)
    SourceInfo(regex-automata/src/meta/limited.rs:158:12-158:14)
  5: _99 = _40
    SourceInfo(regex-automata/src/meta/limited.rs:158:12-158:14)
  6: StorageLive(_100)
    SourceInfo(regex-automata/src/meta/limited.rs:158:18-158:31)
  7: StorageLive(_101)
    SourceInfo(regex-automata/src/meta/limited.rs:158:18-158:23)
  8: _101 = &(*_3)
    SourceInfo(regex-automata/src/meta/limited.rs:158:18-158:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:158:18-158:31)
      kind: _100 = util::search::Input::<'_>::start(move _101) -> [return: bb57, unwind: bb114]
  }
  preds [bb54, bb55]
  succs [bb57, bb114]

bb57
  0: StorageDead(_101)
    SourceInfo(regex-automata/src/meta/limited.rs:158:30-158:31)
  1: _98 = Eq(move _99, move _100)
    SourceInfo(regex-automata/src/meta/limited.rs:158:12-158:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:158:12-158:31)
      kind: switchInt(move _98) -> [0: bb59, otherwise: bb58]
  }
  preds [bb56]
  succs [bb58, bb59]

bb58
  0: StorageDead(_100)
    SourceInfo(regex-automata/src/meta/limited.rs:158:30-158:31)
  1: StorageDead(_99)
    SourceInfo(regex-automata/src/meta/limited.rs:158:30-158:31)
  2: _44 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:159:13-159:18)
  3: StorageDead(_98)
    SourceInfo(regex-automata/src/meta/limited.rs:160:9-160:10)
  4: StorageDead(_97)
    SourceInfo(regex-automata/src/meta/limited.rs:160:9-160:10)
  5: StorageDead(_44)
    SourceInfo(regex-automata/src/meta/limited.rs:170:5-170:6)
  6: StorageLive(_110)
    SourceInfo(regex-automata/src/meta/limited.rs:171:9-171:17)
  7: StorageLive(_111)
    SourceInfo(regex-automata/src/meta/limited.rs:171:20-171:23)
  8: _111 = &_6
    SourceInfo(regex-automata/src/meta/limited.rs:171:20-171:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:171:20-171:33)
      kind: _110 = hybrid::id::LazyStateID::is_dead(move _111) -> [return: bb64, unwind: bb114]
  }
  preds [bb57]
  succs [bb64, bb114]

bb59
  0: StorageDead(_100)
    SourceInfo(regex-automata/src/meta/limited.rs:158:30-158:31)
  1: StorageDead(_99)
    SourceInfo(regex-automata/src/meta/limited.rs:158:30-158:31)
  2: _97 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:160:10-160:10)
  3: StorageDead(_98)
    SourceInfo(regex-automata/src/meta/limited.rs:160:9-160:10)
  4: StorageDead(_97)
    SourceInfo(regex-automata/src/meta/limited.rs:160:9-160:10)
  5: _103 = SubWithOverflow(_40, const 1_usize)
    SourceInfo(regex-automata/src/meta/limited.rs:161:9-161:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:161:9-161:16)
      kind: assert(!move (_103.1: bool), "attempt to compute `{} - {}`, which would overflow", _40, const 1_usize) -> [success: bb60, unwind: bb114]
  }
  preds [bb57]
  succs [bb60, bb114]

bb60
  0: _40 = move (_103.0: usize)
    SourceInfo(regex-automata/src/meta/limited.rs:161:9-161:16)
  1: StorageLive(_104)
    SourceInfo(regex-automata/src/meta/limited.rs:162:12-162:26)
  2: StorageLive(_105)
    SourceInfo(regex-automata/src/meta/limited.rs:162:12-162:14)
  3: _105 = _40
    SourceInfo(regex-automata/src/meta/limited.rs:162:12-162:14)
  4: StorageLive(_106)
    SourceInfo(regex-automata/src/meta/limited.rs:162:17-162:26)
  5: _106 = _4
    SourceInfo(regex-automata/src/meta/limited.rs:162:17-162:26)
  6: _104 = Lt(move _105, move _106)
    SourceInfo(regex-automata/src/meta/limited.rs:162:12-162:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:162:12-162:26)
      kind: switchInt(move _104) -> [0: bb63, otherwise: bb61]
  }
  preds [bb59]
  succs [bb61, bb63]

bb61
  0: StorageDead(_106)
    SourceInfo(regex-automata/src/meta/limited.rs:162:25-162:26)
  1: StorageDead(_105)
    SourceInfo(regex-automata/src/meta/limited.rs:162:25-162:26)
  2: StorageLive(_108)
    SourceInfo(regex-automata/src/meta/limited.rs:168:24-168:73)
  3: StorageLive(_109)
    SourceInfo(regex-automata/src/meta/limited.rs:168:46-168:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:168:46-168:72)
      kind: _109 = meta::error::RetryQuadraticError::new() -> [return: bb62, unwind: bb114]
  }
  preds [bb60]
  succs [bb62, bb114]

bb62
  0: _108 = meta::error::RetryError::Quadratic(move _109)
    SourceInfo(regex-automata/src/meta/limited.rs:168:24-168:73)
  1: StorageDead(_109)
    SourceInfo(regex-automata/src/meta/limited.rs:168:72-168:73)
  2: _0 = core::result::Result::<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>::Err(move _108)
    SourceInfo(regex-automata/src/meta/limited.rs:168:20-168:74)
  3: StorageDead(_108)
    SourceInfo(regex-automata/src/meta/limited.rs:168:73-168:74)
  4: StorageDead(_104)
    SourceInfo(regex-automata/src/meta/limited.rs:169:9-169:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb88
  }
  preds [bb61]
  succs [bb88]

bb63
  0: StorageDead(_106)
    SourceInfo(regex-automata/src/meta/limited.rs:162:25-162:26)
  1: StorageDead(_105)
    SourceInfo(regex-automata/src/meta/limited.rs:162:25-162:26)
  2: _45 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:169:10-169:10)
  3: StorageDead(_104)
    SourceInfo(regex-automata/src/meta/limited.rs:169:9-169:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:140:5-170:6)
      kind: goto -> bb23
  }
  preds [bb60]
  succs [bb23]

bb64
  0: StorageDead(_111)
    SourceInfo(regex-automata/src/meta/limited.rs:171:32-171:33)
  1: FakeRead(ForLet(None), _110)
    SourceInfo(regex-automata/src/meta/limited.rs:171:9-171:17)
  2: StorageLive(_112)
    SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:59)
  3: StorageLive(_113)
    SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:59)
  4: StorageLive(_114)
    SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:58)
  5: StorageLive(_115)
    SourceInfo(regex-automata/src/meta/limited.rs:172:20-172:23)
  6: _115 = &(*_1)
    SourceInfo(regex-automata/src/meta/limited.rs:172:20-172:23)
  7: StorageLive(_116)
    SourceInfo(regex-automata/src/meta/limited.rs:172:25-172:30)
  8: _116 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/limited.rs:172:25-172:30)
  9: StorageLive(_117)
    SourceInfo(regex-automata/src/meta/limited.rs:172:32-172:37)
  10: _117 = &(*_3)
    SourceInfo(regex-automata/src/meta/limited.rs:172:32-172:37)
  11: StorageLive(_118)
    SourceInfo(regex-automata/src/meta/limited.rs:172:39-172:47)
  12: StorageLive(_119)
    SourceInfo(regex-automata/src/meta/limited.rs:172:39-172:47)
  13: _119 = &mut _6
    SourceInfo(regex-automata/src/meta/limited.rs:172:39-172:47)
  14: _118 = &mut (*_119)
    SourceInfo(regex-automata/src/meta/limited.rs:172:39-172:47)
  15: StorageLive(_120)
    SourceInfo(regex-automata/src/meta/limited.rs:172:49-172:57)
  16: StorageLive(_121)
    SourceInfo(regex-automata/src/meta/limited.rs:172:49-172:57)
  17: _121 = &mut _5
    SourceInfo(regex-automata/src/meta/limited.rs:172:49-172:57)
  18: _120 = &mut (*_121)
    SourceInfo(regex-automata/src/meta/limited.rs:172:49-172:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:58)
      kind: _114 = meta::limited::hybrid_eoi_rev(move _115, move _116, move _117, move _118, move _120) -> [return: bb65, unwind: bb114]
  }
  preds [bb58]
  succs [bb65, bb114]

bb65
  0: StorageDead(_120)
    SourceInfo(regex-automata/src/meta/limited.rs:172:57-172:58)
  1: StorageDead(_118)
    SourceInfo(regex-automata/src/meta/limited.rs:172:57-172:58)
  2: StorageDead(_117)
    SourceInfo(regex-automata/src/meta/limited.rs:172:57-172:58)
  3: StorageDead(_116)
    SourceInfo(regex-automata/src/meta/limited.rs:172:57-172:58)
  4: StorageDead(_115)
    SourceInfo(regex-automata/src/meta/limited.rs:172:57-172:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:59)
      kind: _113 = <core::result::Result<(), util::search::MatchError> as core::ops::Try>::branch(move _114) -> [return: bb66, unwind: bb100]
  }
  preds [bb64]
  succs [bb66, bb100]

bb66
  0: StorageDead(_114)
    SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
  1: PlaceMention(_113)
    SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:59)
  2: _122 = discriminant(_113)
    SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:59)
      kind: switchInt(move _122) -> [0: bb69, 1: bb68, otherwise: bb67]
  }
  preds [bb65]
  succs [bb67, bb68, bb69]

bb67
  0: FakeRead(ForMatchedPlace(None), _113)
    SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:59)
      kind: unreachable
  }
  preds [bb66]
  succs []

bb68
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
      kind: falseEdge -> [real: bb70, imaginary: bb69]
  }
  preds [bb66]
  succs [bb69, bb70]

bb69
  0: StorageLive(_126)
    SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:59)
  1: _126 = ((_113 as Continue).0: ())
    SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:59)
  2: _112 = _126
    SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:59)
  3: StorageDead(_126)
    SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:59-172:60)
      kind: drop(_113) -> [return: bb72, unwind: bb114]
  }
  preds [bb66, bb68]
  succs [bb72, bb114]

bb70
  0: StorageLive(_123)
    SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
  1: _123 = move ((_113 as Break).0: core::result::Result<core::convert::Infallible, util::search::MatchError>)
    SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
  2: StorageLive(_125)
    SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
  3: _125 = move _123
    SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:5-172:59)
      kind: _0 = <core::result::Result<core::option::Option<util::search::HalfMatch>, meta::error::RetryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual(move _125) -> [return: bb71, unwind: bb97]
  }
  preds [bb68]
  succs [bb71, bb97]

bb71
  0: StorageDead(_125)
    SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
      kind: drop(_123) -> [return: bb82, unwind: bb99]
  }
  preds [bb70]
  succs [bb82, bb99]

bb72
  0: StorageDead(_121)
    SourceInfo(regex-automata/src/meta/limited.rs:172:59-172:60)
  1: StorageDead(_119)
    SourceInfo(regex-automata/src/meta/limited.rs:172:59-172:60)
  2: StorageDead(_113)
    SourceInfo(regex-automata/src/meta/limited.rs:172:59-172:60)
  3: StorageDead(_112)
    SourceInfo(regex-automata/src/meta/limited.rs:172:59-172:60)
  4: StorageLive(_127)
    SourceInfo(regex-automata/src/meta/limited.rs:174:5-184:6)
  5: StorageLive(_128)
    SourceInfo(regex-automata/src/meta/limited.rs:174:8-174:27)
  6: StorageLive(_129)
    SourceInfo(regex-automata/src/meta/limited.rs:174:8-174:10)
  7: _129 = _40
    SourceInfo(regex-automata/src/meta/limited.rs:174:8-174:10)
  8: StorageLive(_130)
    SourceInfo(regex-automata/src/meta/limited.rs:174:14-174:27)
  9: StorageLive(_131)
    SourceInfo(regex-automata/src/meta/limited.rs:174:14-174:19)
  10: _131 = &(*_3)
    SourceInfo(regex-automata/src/meta/limited.rs:174:14-174:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:174:14-174:27)
      kind: _130 = util::search::Input::<'_>::start(move _131) -> [return: bb73, unwind: bb114]
  }
  preds [bb69]
  succs [bb73, bb114]

bb73
  0: StorageDead(_131)
    SourceInfo(regex-automata/src/meta/limited.rs:174:26-174:27)
  1: _128 = Eq(move _129, move _130)
    SourceInfo(regex-automata/src/meta/limited.rs:174:8-174:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:174:8-174:27)
      kind: switchInt(move _128) -> [0: bb80, otherwise: bb74]
  }
  preds [bb72]
  succs [bb74, bb80]

bb74
  0: StorageDead(_130)
    SourceInfo(regex-automata/src/meta/limited.rs:174:26-174:27)
  1: StorageDead(_129)
    SourceInfo(regex-automata/src/meta/limited.rs:174:26-174:27)
  2: StorageLive(_132)
    SourceInfo(regex-automata/src/meta/limited.rs:175:12-175:61)
  3: StorageLive(_133)
    SourceInfo(regex-automata/src/meta/limited.rs:175:12-175:15)
  4: _133 = _5
    SourceInfo(regex-automata/src/meta/limited.rs:175:12-175:15)
  5: StorageLive(_134)
    SourceInfo(regex-automata/src/meta/limited.rs:175:30-175:60)
  6: StorageLive(_135)
    SourceInfo(regex-automata/src/meta/limited.rs:175:30-175:60)
  7: _135 = &(*_3)
    SourceInfo(regex-automata/src/meta/limited.rs:175:30-175:60)
  8: _134 = {closure@regex-automata/src/meta/limited.rs:175:30: 175:33} { input: move _135 }
    SourceInfo(regex-automata/src/meta/limited.rs:175:30-175:60)
  9: StorageDead(_135)
    SourceInfo(regex-automata/src/meta/limited.rs:175:32-175:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:175:12-175:61)
      kind: _132 = core::option::Option::<util::search::HalfMatch>::map_or::<bool, {closure@regex-automata/src/meta/limited.rs:175:30: 175:33}>(move _133, const false, move _134) -> [return: bb75, unwind: bb114]
  }
  preds [bb73]
  succs [bb75, bb114]

bb75
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:175:12-175:61)
      kind: switchInt(move _132) -> [0: bb79, otherwise: bb76]
  }
  preds [bb74]
  succs [bb76, bb79]

bb76
  0: StorageDead(_134)
    SourceInfo(regex-automata/src/meta/limited.rs:175:60-175:61)
  1: StorageDead(_133)
    SourceInfo(regex-automata/src/meta/limited.rs:175:60-175:61)
  2: StorageLive(_136)
    SourceInfo(regex-automata/src/meta/limited.rs:176:13-176:21)
  3: _136 = _110
    SourceInfo(regex-automata/src/meta/limited.rs:176:13-176:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:176:13-176:21)
      kind: switchInt(move _136) -> [0: bb77, otherwise: bb81]
  }
  preds [bb75]
  succs [bb77, bb81]

bb77
  0: StorageLive(_138)
    SourceInfo(regex-automata/src/meta/limited.rs:183:20-183:69)
  1: StorageLive(_139)
    SourceInfo(regex-automata/src/meta/limited.rs:183:42-183:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:183:42-183:68)
      kind: _139 = meta::error::RetryQuadraticError::new() -> [return: bb78, unwind: bb114]
  }
  preds [bb76]
  succs [bb78, bb114]

bb78
  0: _138 = meta::error::RetryError::Quadratic(move _139)
    SourceInfo(regex-automata/src/meta/limited.rs:183:20-183:69)
  1: StorageDead(_139)
    SourceInfo(regex-automata/src/meta/limited.rs:183:68-183:69)
  2: _0 = core::result::Result::<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>::Err(move _138)
    SourceInfo(regex-automata/src/meta/limited.rs:183:16-183:70)
  3: StorageDead(_138)
    SourceInfo(regex-automata/src/meta/limited.rs:183:69-183:70)
  4: StorageDead(_136)
    SourceInfo(regex-automata/src/meta/limited.rs:184:5-184:6)
  5: StorageDead(_132)
    SourceInfo(regex-automata/src/meta/limited.rs:184:5-184:6)
  6: StorageDead(_128)
    SourceInfo(regex-automata/src/meta/limited.rs:184:5-184:6)
  7: StorageDead(_127)
    SourceInfo(regex-automata/src/meta/limited.rs:184:5-184:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb84
  }
  preds [bb77]
  succs [bb84]

bb79
  0: StorageDead(_134)
    SourceInfo(regex-automata/src/meta/limited.rs:175:60-175:61)
  1: StorageDead(_133)
    SourceInfo(regex-automata/src/meta/limited.rs:175:60-175:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb81
  }
  preds [bb75]
  succs [bb81]

bb80
  0: StorageDead(_130)
    SourceInfo(regex-automata/src/meta/limited.rs:174:26-174:27)
  1: StorageDead(_129)
    SourceInfo(regex-automata/src/meta/limited.rs:174:26-174:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb81
  }
  preds [bb73]
  succs [bb81]

bb81
  0: _127 = const ()
    SourceInfo(regex-automata/src/meta/limited.rs:184:6-184:6)
  1: StorageDead(_136)
    SourceInfo(regex-automata/src/meta/limited.rs:184:5-184:6)
  2: StorageDead(_132)
    SourceInfo(regex-automata/src/meta/limited.rs:184:5-184:6)
  3: StorageDead(_128)
    SourceInfo(regex-automata/src/meta/limited.rs:184:5-184:6)
  4: StorageDead(_127)
    SourceInfo(regex-automata/src/meta/limited.rs:184:5-184:6)
  5: StorageLive(_140)
    SourceInfo(regex-automata/src/meta/limited.rs:185:8-185:11)
  6: _140 = _5
    SourceInfo(regex-automata/src/meta/limited.rs:185:8-185:11)
  7: _0 = core::result::Result::<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>::Ok(move _140)
    SourceInfo(regex-automata/src/meta/limited.rs:185:5-185:12)
  8: StorageDead(_140)
    SourceInfo(regex-automata/src/meta/limited.rs:185:11-185:12)
  9: StorageDead(_110)
    SourceInfo(regex-automata/src/meta/limited.rs:186:1-186:2)
  10: StorageDead(_40)
    SourceInfo(regex-automata/src/meta/limited.rs:186:1-186:2)
  11: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/limited.rs:186:1-186:2)
  12: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/limited.rs:186:1-186:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:186:2-186:2)
      kind: goto -> bb96
  }
  preds [bb76, bb79, bb80]
  succs [bb96]

bb82
  0: StorageDead(_123)
    SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:59-172:60)
      kind: drop(_113) -> [return: bb83, unwind: bb114]
  }
  preds [bb71]
  succs [bb83, bb114]

bb83
  0: StorageDead(_121)
    SourceInfo(regex-automata/src/meta/limited.rs:172:59-172:60)
  1: StorageDead(_119)
    SourceInfo(regex-automata/src/meta/limited.rs:172:59-172:60)
  2: StorageDead(_113)
    SourceInfo(regex-automata/src/meta/limited.rs:172:59-172:60)
  3: StorageDead(_112)
    SourceInfo(regex-automata/src/meta/limited.rs:172:59-172:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb84
  }
  preds [bb82]
  succs [bb84]

bb84
  0: StorageDead(_110)
    SourceInfo(regex-automata/src/meta/limited.rs:186:1-186:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb89
  }
  preds [bb78, bb83]
  succs [bb89]

bb85
  0: StorageDead(_81)
    SourceInfo(regex-automata/src/meta/limited.rs:156:13-156:14)
  1: StorageDead(_69)
    SourceInfo(regex-automata/src/meta/limited.rs:156:13-156:14)
  2: StorageDead(_67)
    SourceInfo(regex-automata/src/meta/limited.rs:157:9-157:10)
  3: StorageDead(_66)
    SourceInfo(regex-automata/src/meta/limited.rs:157:9-157:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb88
  }
  preds [bb45, bb52]
  succs [bb88]

bb86
  0: StorageDead(_62)
    SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
  1: StorageDead(_46)
    SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:143:51-143:52)
      kind: drop(_47) -> [return: bb87, unwind: bb114]
  }
  preds [bb34]
  succs [bb87, bb114]

bb87
  0: StorageDead(_56)
    SourceInfo(regex-automata/src/meta/limited.rs:143:51-143:52)
  1: StorageDead(_54)
    SourceInfo(regex-automata/src/meta/limited.rs:143:51-143:52)
  2: StorageDead(_47)
    SourceInfo(regex-automata/src/meta/limited.rs:143:51-143:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb88
  }
  preds [bb86]
  succs [bb88]

bb88
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/meta/limited.rs:170:5-170:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb89
  }
  preds [bb62, bb85, bb87]
  succs [bb89]

bb89
  0: StorageDead(_40)
    SourceInfo(regex-automata/src/meta/limited.rs:186:1-186:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb95
  }
  preds [bb84, bb88]
  succs [bb95]

bb90
  0: StorageDead(_35)
    SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:63-136:64)
      kind: drop(_25) -> [return: bb91, unwind: bb114]
  }
  preds [bb18]
  succs [bb91, bb114]

bb91
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/meta/limited.rs:136:63-136:64)
  1: StorageDead(_31)
    SourceInfo(regex-automata/src/meta/limited.rs:136:63-136:64)
  2: StorageDead(_25)
    SourceInfo(regex-automata/src/meta/limited.rs:136:63-136:64)
  3: StorageDead(_24)
    SourceInfo(regex-automata/src/meta/limited.rs:136:63-136:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb92
  }
  preds [bb90]
  succs [bb92]

bb92
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/limited.rs:138:5-138:6)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/limited.rs:138:5-138:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb95
  }
  preds [bb19, bb91]
  succs [bb95]

bb93
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:57-134:58)
      kind: drop(_7) -> [return: bb94, unwind: bb114]
  }
  preds [bb7]
  succs [bb94, bb114]

bb94
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/limited.rs:134:57-134:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb95
  }
  preds [bb93]
  succs [bb95]

bb95
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/limited.rs:186:1-186:2)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/limited.rs:186:1-186:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:186:2-186:2)
      kind: goto -> bb96
  }
  preds [bb89, bb92, bb94]
  succs [bb96]

bb96
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:186:2-186:2)
      kind: return
  }
  preds [bb81, bb95]
  succs []

bb97
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
      kind: drop(_125) -> [return: bb98, unwind terminate(cleanup)]
  }
  preds [bb70]
  succs [bb98]

bb98
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
      kind: drop(_123) -> [return: bb99, unwind terminate(cleanup)]
  }
  preds [bb97]
  succs [bb99]

bb99
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:59-172:60)
      kind: drop(_113) -> [return: bb114, unwind terminate(cleanup)]
  }
  preds [bb71, bb98]
  succs [bb114]

bb100
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:172:58-172:59)
      kind: drop(_114) -> [return: bb114, unwind terminate(cleanup)]
  }
  preds [bb65]
  succs [bb114]

bb101
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:155:76-155:77)
      kind: drop(_89) -> [return: bb114, unwind terminate(cleanup)]
  }
  preds [bb51]
  succs [bb114]

bb102
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
      kind: drop(_64) -> [return: bb103, unwind terminate(cleanup)]
  }
  preds [bb33]
  succs [bb103]

bb103
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
      kind: drop(_62) -> [return: bb104, unwind terminate(cleanup)]
  }
  preds [bb102]
  succs [bb104]

bb104
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:143:51-143:52)
      kind: drop(_47) -> [return: bb114, unwind terminate(cleanup)]
  }
  preds [bb34, bb103]
  succs [bb114]

bb105
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:143:50-143:51)
      kind: drop(_48) -> [return: bb114, unwind terminate(cleanup)]
  }
  preds [bb28]
  succs [bb114]

bb106
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
      kind: drop(_37) -> [return: bb107, unwind terminate(cleanup)]
  }
  preds [bb17]
  succs [bb107]

bb107
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
      kind: drop(_35) -> [return: bb108, unwind terminate(cleanup)]
  }
  preds [bb106]
  succs [bb108]

bb108
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:63-136:64)
      kind: drop(_25) -> [return: bb114, unwind terminate(cleanup)]
  }
  preds [bb18, bb107]
  succs [bb114]

bb109
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:136:62-136:63)
      kind: drop(_26) -> [return: bb114, unwind terminate(cleanup)]
  }
  preds [bb12]
  succs [bb114]

bb110
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
      kind: drop(_15) -> [return: bb111, unwind terminate(cleanup)]
  }
  preds [bb6]
  succs [bb111]

bb111
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
      kind: drop(_13) -> [return: bb112, unwind terminate(cleanup)]
  }
  preds [bb110]
  succs [bb112]

bb112
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:57-134:58)
      kind: drop(_7) -> [return: bb114, unwind terminate(cleanup)]
  }
  preds [bb7, bb111]
  succs [bb114]

bb113
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:134:56-134:57)
      kind: drop(_8) -> [return: bb114, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb114]

bb114
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/limited.rs:127:1-186:2)
      kind: resume
  }
  preds [bb0, bb5, bb8, bb9, bb11, bb16, bb20, bb21, bb23, bb24, bb25, bb26, bb27, bb32, bb35, bb37, bb39, bb40, bb41, bb43, bb46, bb48, bb49, bb50, bb56, bb58, bb59, bb61, bb64, bb69, bb72, bb74, bb77, bb82, bb86, bb90, bb93, bb99, bb100, bb101, bb104, bb105, bb108, bb109, bb112, bb113]
  succs []

