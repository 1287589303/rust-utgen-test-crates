bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/look.rs:299:9-299:35)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:299:9-299:18)
  2: _4 = (_1.0: u32)
    SourceInfo(regex-automata/src/util/look.rs:299:9-299:18)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:299:21-299:35)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:299:21-299:25)
  5: _6 = _2
    SourceInfo(regex-automata/src/util/look.rs:299:21-299:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:299:21-299:35)
      kind: _5 = util::look::Look::as_repr(move _6) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:299:34-299:35)
  1: _3 = BitAnd(move _4, move _5)
    SourceInfo(regex-automata/src/util/look.rs:299:9-299:35)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:299:34-299:35)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:299:34-299:35)
  4: _0 = Ne(move _3, const 0_u32)
    SourceInfo(regex-automata/src/util/look.rs:299:9-299:40)
  5: StorageDead(_3)
    SourceInfo(regex-automata/src/util/look.rs:299:39-299:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:300:6-300:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:298:5-300:6)
      kind: resume
  }
  preds [bb0]
  succs []

