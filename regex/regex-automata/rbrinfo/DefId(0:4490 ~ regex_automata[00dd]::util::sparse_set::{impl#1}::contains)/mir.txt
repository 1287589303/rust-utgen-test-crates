bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:197:13-197:18)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:197:32-197:36)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/sparse_set.rs:197:21-197:32)
  3: _5 = &((*_1).2: std::vec::Vec<util::primitives::StateID>)
    SourceInfo(regex-automata/src/util/sparse_set.rs:197:21-197:32)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/util/sparse_set.rs:197:33-197:35)
  5: _6 = _2
    SourceInfo(regex-automata/src/util/sparse_set.rs:197:33-197:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:197:32-197:36)
      kind: _4 = <std::vec::Vec<util::primitives::StateID> as core::ops::Index<util::primitives::StateID>>::index(move _5, move _6) -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: _3 = (*_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:197:21-197:36)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/sparse_set.rs:197:35-197:36)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/sparse_set.rs:197:35-197:36)
  3: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:197:13-197:18)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:197:36-197:37)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:9-198:38)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:9-198:25)
  7: StorageLive(_9)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:9-198:14)
  8: _9 = &_3
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:9-198:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:198:9-198:25)
      kind: _8 = util::primitives::StateID::as_usize(move _9) -> [return: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:24-198:25)
  1: StorageLive(_10)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:28-198:38)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:28-198:32)
  3: _11 = &(*_1)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:28-198:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:198:28-198:38)
      kind: _10 = util::sparse_set::SparseSet::len(move _11) -> [return: bb3, unwind: bb9]
  }
  preds [bb1]
  succs [bb3, bb9]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:37-198:38)
  1: _7 = Lt(move _8, move _10)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:9-198:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:198:9-198:38)
      kind: switchInt(move _7) -> [0: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:37-198:38)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:37-198:38)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:42-198:59)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:52-198:59)
  4: StorageLive(_14)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:42-198:52)
  5: _14 = &((*_1).1: std::vec::Vec<util::primitives::StateID>)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:42-198:52)
  6: StorageLive(_15)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:53-198:58)
  7: _15 = _3
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:53-198:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:198:52-198:59)
      kind: _13 = <std::vec::Vec<util::primitives::StateID> as core::ops::Index<util::primitives::StateID>>::index(move _14, move _15) -> [return: bb6, unwind: bb9]
  }
  preds [bb3]
  succs [bb6, bb9]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:37-198:38)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:37-198:38)
  2: _0 = const false
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:9-198:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:198:9-198:65)
      kind: goto -> bb8
  }
  preds [bb3]
  succs [bb8]

bb6
  0: _12 = &(*_13)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:42-198:59)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:58-198:59)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:58-198:59)
  3: StorageLive(_16)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:63-198:65)
  4: _16 = &_2
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:63-198:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:198:42-198:65)
      kind: _0 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _12, move _16) -> [return: bb7, unwind: bb9]
  }
  preds [bb4]
  succs [bb7, bb9]

bb7
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:64-198:65)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:64-198:65)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:64-198:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:198:9-198:65)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/sparse_set.rs:198:64-198:65)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:199:5-199:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:199:6-199:6)
      kind: return
  }
  preds [bb5, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:196:5-199:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb4, bb6]
  succs []

