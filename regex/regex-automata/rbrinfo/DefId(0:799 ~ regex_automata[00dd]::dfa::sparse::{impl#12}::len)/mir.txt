bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2117:9-2117:27)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2117:9-2117:21)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2117:9-2117:21)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2117:9-2117:13)
  4: _5 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2117:9-2117:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2117:9-2117:21)
      kind: _4 = dfa::sparse::StartTable::<T>::table(move _5) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _3 = &(*_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2117:9-2117:21)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2117:20-2117:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2117:9-2117:27)
      kind: _2 = core::slice::<impl [u8]>::len(move _3) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2117:26-2117:27)
  1: _6 = Eq(const util::primitives::StateID::SIZE, const 0_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2117:9-2117:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2117:9-2117:43)
      kind: assert(!move _6, "attempt to divide `{}` by zero", _2) -> [success: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: _0 = Div(move _2, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2117:9-2117:43)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2117:42-2117:43)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2118:5-2118:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2118:6-2118:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2116:5-2118:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

