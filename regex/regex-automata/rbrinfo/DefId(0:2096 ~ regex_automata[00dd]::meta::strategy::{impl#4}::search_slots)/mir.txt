bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:807:9-812:10)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:807:13-807:55)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:807:13-807:17)
  3: _7 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:807:13-807:17)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:807:43-807:54)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:807:43-807:48)
  6: _9 = &(*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:807:43-807:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:807:43-807:54)
      kind: _8 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::len(move _9) -> [return: bb1, unwind: bb43]
  }
  preds []
  succs [bb1, bb43]

bb1
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:807:53-807:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:807:13-807:55)
      kind: _6 = meta::strategy::Core::is_capture_search_needed(move _7, move _8) -> [return: bb2, unwind: bb43]
  }
  preds [bb0]
  succs [bb2, bb43]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:807:13-807:55)
      kind: switchInt(move _6) -> [0: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:807:54-807:55)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:807:54-807:55)
  2: _5 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:812:10-812:10)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:812:9-812:10)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:812:9-812:10)
  5: StorageLive(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:9-828:10)
  6: StorageLive(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:12-826:46)
  7: StorageLive(_29)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:12-826:36)
  8: StorageLive(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:12-826:36)
  9: StorageLive(_31)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:12-826:24)
  10: _31 = &((*_1).6: meta::wrappers::OnePass)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:12-826:24)
  11: StorageLive(_32)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:29-826:35)
  12: StorageLive(_33)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:29-826:35)
  13: _33 = &_3
    SourceInfo(regex-automata/src/meta/strategy.rs:826:29-826:35)
  14: _32 = &(*(*_33))
    SourceInfo(regex-automata/src/meta/strategy.rs:826:29-826:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:826:12-826:36)
      kind: _30 = meta::wrappers::OnePass::get(move _31, move _32) -> [return: bb14, unwind: bb43]
  }
  preds [bb2]
  succs [bb14, bb43]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:807:54-807:55)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:807:54-807:55)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:17-809:18)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:47)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:46)
  5: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:25)
  6: _14 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:25)
  7: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:33-809:38)
  8: _15 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:33-809:38)
  9: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:40-809:45)
  10: _16 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:40-809:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:46)
      kind: _13 = <meta::strategy::Core as meta::strategy::Strategy>::search(move _14, move _15, move _16) -> [return: bb5, unwind: bb43]
  }
  preds [bb2]
  succs [bb5, bb43]

bb5
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:45-809:46)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:45-809:46)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:45-809:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:47)
      kind: _12 = <core::option::Option<util::search::Match> as core::ops::Try>::branch(move _13) -> [return: bb6, unwind: bb43]
  }
  preds [bb4]
  succs [bb6, bb43]

bb6
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:46-809:47)
  1: PlaceMention(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:47)
  2: _17 = discriminant(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:47)
      kind: switchInt(move _17) -> [0: bb9, 1: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8, bb9]

bb7
  0: FakeRead(ForMatchedPlace(None), _12)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:47)
      kind: unreachable
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:809:46-809:47)
      kind: falseEdge -> [real: bb10, imaginary: bb9]
  }
  preds [bb6]
  succs [bb9, bb10]

bb9
  0: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:47)
  1: _21 = ((_12 as Continue).0: util::search::Match)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:47)
  2: _11 = _21
    SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:47)
  3: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:46-809:47)
  4: FakeRead(ForLet(None), _11)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:17-809:18)
  5: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:47-809:48)
  6: StorageLive(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:810:13-810:42)
  7: StorageLive(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:810:33-810:34)
  8: _23 = _11
    SourceInfo(regex-automata/src/meta/strategy.rs:810:33-810:34)
  9: StorageLive(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:810:36-810:41)
  10: _24 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:810:36-810:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:810:13-810:42)
      kind: _22 = meta::strategy::copy_match_to_slots(move _23, move _24) -> [return: bb12, unwind: bb43]
  }
  preds [bb6, bb8]
  succs [bb12, bb43]

bb10
  0: StorageLive(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:46-809:47)
  1: _18 = ((_12 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:46-809:47)
  2: StorageLive(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:46-809:47)
  3: _20 = _18
    SourceInfo(regex-automata/src/meta/strategy.rs:809:46-809:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:809:21-809:47)
      kind: _0 = <core::option::Option<util::primitives::PatternID> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _20) -> [return: bb11, unwind: bb43]
  }
  preds [bb8]
  succs [bb11, bb43]

bb11
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:46-809:47)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:46-809:47)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:809:47-809:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb41
  }
  preds [bb10]
  succs [bb41]

bb12
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:810:41-810:42)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:810:41-810:42)
  2: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:810:42-810:43)
  3: StorageLive(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:811:25-811:36)
  4: StorageLive(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:811:25-811:26)
  5: _26 = &_11
    SourceInfo(regex-automata/src/meta/strategy.rs:811:25-811:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:811:25-811:36)
      kind: _25 = util::search::Match::pattern(move _26) -> [return: bb13, unwind: bb43]
  }
  preds [bb9]
  succs [bb13, bb43]

bb13
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:811:35-811:36)
  1: _0 = core::option::Option::<util::primitives::PatternID>::Some(move _25)
    SourceInfo(regex-automata/src/meta/strategy.rs:811:20-811:37)
  2: StorageDead(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:811:36-811:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:811:13-811:37)
      kind: goto -> bb41
  }
  preds [bb12]
  succs [bb41]

bb14
  0: _29 = &_30
    SourceInfo(regex-automata/src/meta/strategy.rs:826:12-826:36)
  1: StorageDead(_32)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:35-826:36)
  2: StorageDead(_31)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:35-826:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:826:12-826:46)
      kind: _28 = core::option::Option::<&meta::wrappers::OnePassEngine>::is_some(move _29) -> [return: bb15, unwind: bb43]
  }
  preds [bb3]
  succs [bb15, bb43]

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:826:12-826:46)
      kind: switchInt(move _28) -> [0: bb18, otherwise: bb16]
  }
  preds [bb14]
  succs [bb16, bb18]

bb16
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:45-826:46)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:45-826:46)
  2: StorageDead(_29)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:45-826:46)
  3: StorageLive(_35)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:20-827:24)
  4: _35 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:20-827:24)
  5: StorageLive(_36)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:45-827:50)
  6: _36 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:45-827:50)
  7: StorageLive(_37)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:52-827:58)
  8: StorageLive(_38)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:52-827:58)
  9: _38 = &_3
    SourceInfo(regex-automata/src/meta/strategy.rs:827:52-827:58)
  10: _37 = &(*(*_38))
    SourceInfo(regex-automata/src/meta/strategy.rs:827:52-827:58)
  11: StorageLive(_39)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:60-827:65)
  12: _39 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:60-827:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:827:20-827:66)
      kind: _0 = meta::strategy::Core::search_slots_nofail(move _35, move _36, move _37, move _39) -> [return: bb17, unwind: bb43]
  }
  preds [bb15]
  succs [bb17, bb43]

bb17
  0: StorageDead(_39)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:65-827:66)
  1: StorageDead(_37)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:65-827:66)
  2: StorageDead(_36)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:65-827:66)
  3: StorageDead(_35)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:65-827:66)
  4: StorageDead(_38)
    SourceInfo(regex-automata/src/meta/strategy.rs:827:66-827:67)
  5: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:828:9-828:10)
  6: StorageDead(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:828:9-828:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb42
  }
  preds [bb16]
  succs [bb42]

bb18
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:45-826:46)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:45-826:46)
  2: StorageDead(_29)
    SourceInfo(regex-automata/src/meta/strategy.rs:826:45-826:46)
  3: _27 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:828:10-828:10)
  4: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:828:9-828:10)
  5: StorageDead(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:828:9-828:10)
  6: StorageLive(_40)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:13-829:14)
  7: StorageLive(_41)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:23-829:60)
  8: StorageLive(_42)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:23-829:27)
  9: _42 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:23-829:27)
  10: StorageLive(_43)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:47-829:52)
  11: _43 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:47-829:52)
  12: StorageLive(_44)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:54-829:59)
  13: _44 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:54-829:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:829:23-829:60)
      kind: _41 = meta::strategy::Core::try_search_mayfail(move _42, move _43, move _44) -> [return: bb19, unwind: bb43]
  }
  preds [bb15]
  succs [bb19, bb43]

bb19
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:59-829:60)
  1: StorageDead(_43)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:59-829:60)
  2: StorageDead(_42)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:59-829:60)
  3: PlaceMention(_41)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:23-829:60)
  4: _47 = discriminant(_41)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:23-829:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:829:17-829:60)
      kind: switchInt(move _47) -> [0: bb26, 1: bb21, otherwise: bb20]
  }
  preds [bb18]
  succs [bb20, bb21, bb26]

bb20
  0: FakeRead(ForMatchedPlace(None), _41)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:23-829:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:829:23-829:60)
      kind: unreachable
  }
  preds [bb19, bb21, bb22]
  succs []

bb21
  0: _46 = discriminant(((_41 as Some).0: core::result::Result<core::option::Option<util::search::Match>, meta::error::RetryFailError>))
    SourceInfo(regex-automata/src/meta/strategy.rs:829:23-829:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:829:17-829:60)
      kind: switchInt(move _46) -> [0: bb22, 1: bb25, otherwise: bb20]
  }
  preds [bb19]
  succs [bb20, bb22, bb25]

bb22
  0: _45 = discriminant(((((_41 as Some).0: core::result::Result<core::option::Option<util::search::Match>, meta::error::RetryFailError>) as Ok).0: core::option::Option<util::search::Match>))
    SourceInfo(regex-automata/src/meta/strategy.rs:829:23-829:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:829:17-829:60)
      kind: switchInt(move _45) -> [0: bb24, 1: bb23, otherwise: bb20]
  }
  preds [bb21]
  succs [bb20, bb23, bb24]

bb23
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:830:13-830:30)
      kind: falseEdge -> [real: bb27, imaginary: bb24]
  }
  preds [bb22]
  succs [bb24, bb27]

bb24
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:831:13-831:27)
      kind: falseEdge -> [real: bb28, imaginary: bb25]
  }
  preds [bb22, bb23]
  succs [bb25, bb28]

bb25
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:832:13-832:28)
      kind: falseEdge -> [real: bb29, imaginary: bb26]
  }
  preds [bb21, bb24]
  succs [bb26, bb29]

bb26
  0: StorageLive(_57)
    SourceInfo(regex-automata/src/meta/strategy.rs:837:24-837:28)
  1: _57 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:837:24-837:28)
  2: StorageLive(_58)
    SourceInfo(regex-automata/src/meta/strategy.rs:837:49-837:54)
  3: _58 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:837:49-837:54)
  4: StorageLive(_59)
    SourceInfo(regex-automata/src/meta/strategy.rs:837:56-837:61)
  5: _59 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:837:56-837:61)
  6: StorageLive(_60)
    SourceInfo(regex-automata/src/meta/strategy.rs:837:63-837:68)
  7: _60 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:837:63-837:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:837:24-837:69)
      kind: _0 = meta::strategy::Core::search_slots_nofail(move _57, move _58, move _59, move _60) -> [return: bb31, unwind: bb43]
  }
  preds [bb19, bb25]
  succs [bb31, bb43]

bb27
  0: StorageLive(_48)
    SourceInfo(regex-automata/src/meta/strategy.rs:830:26-830:27)
  1: _48 = ((((((_41 as Some).0: core::result::Result<core::option::Option<util::search::Match>, meta::error::RetryFailError>) as Ok).0: core::option::Option<util::search::Match>) as Some).0: util::search::Match)
    SourceInfo(regex-automata/src/meta/strategy.rs:830:26-830:27)
  2: _40 = _48
    SourceInfo(regex-automata/src/meta/strategy.rs:830:34-830:35)
  3: StorageDead(_48)
    SourceInfo(regex-automata/src/meta/strategy.rs:830:34-830:35)
  4: FakeRead(ForLet(None), _40)
    SourceInfo(regex-automata/src/meta/strategy.rs:829:13-829:14)
  5: StorageDead(_41)
    SourceInfo(regex-automata/src/meta/strategy.rs:839:10-839:11)
  6: StorageLive(_61)
    SourceInfo(regex-automata/src/meta/strategy.rs:850:13-850:18)
  7: StorageLive(_62)
    SourceInfo(regex-automata/src/meta/strategy.rs:850:21-852:38)
  8: StorageLive(_63)
    SourceInfo(regex-automata/src/meta/strategy.rs:850:21-851:21)
  9: StorageLive(_64)
    SourceInfo(regex-automata/src/meta/strategy.rs:850:21-850:26)
  10: _64 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:850:21-850:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:850:21-851:21)
      kind: _63 = <util::search::Input<'_> as core::clone::Clone>::clone(move _64) -> [return: bb32, unwind: bb43]
  }
  preds [bb23]
  succs [bb32, bb43]

bb28
  0: _0 = core::option::Option::<util::primitives::PatternID>::None
    SourceInfo(regex-automata/src/meta/strategy.rs:831:38-831:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:831:31-831:42)
      kind: goto -> bb40
  }
  preds [bb24]
  succs [bb40]

bb29
  0: StorageLive(_50)
    SourceInfo(regex-automata/src/meta/strategy.rs:832:22-832:26)
  1: _50 = move ((((_41 as Some).0: core::result::Result<core::option::Option<util::search::Match>, meta::error::RetryFailError>) as Err).0: meta::error::RetryFailError)
    SourceInfo(regex-automata/src/meta/strategy.rs:832:22-832:26)
  2: StorageLive(_52)
    SourceInfo(regex-automata/src/meta/strategy.rs:834:24-834:28)
  3: _52 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:834:24-834:28)
  4: StorageLive(_53)
    SourceInfo(regex-automata/src/meta/strategy.rs:834:49-834:54)
  5: _53 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:834:49-834:54)
  6: StorageLive(_54)
    SourceInfo(regex-automata/src/meta/strategy.rs:834:56-834:61)
  7: _54 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:834:56-834:61)
  8: StorageLive(_55)
    SourceInfo(regex-automata/src/meta/strategy.rs:834:63-834:68)
  9: _55 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:834:63-834:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:834:24-834:69)
      kind: _0 = meta::strategy::Core::search_slots_nofail(move _52, move _53, move _54, move _55) -> [return: bb30, unwind: bb43]
  }
  preds [bb25]
  succs [bb30, bb43]

bb30
  0: StorageDead(_55)
    SourceInfo(regex-automata/src/meta/strategy.rs:834:68-834:69)
  1: StorageDead(_54)
    SourceInfo(regex-automata/src/meta/strategy.rs:834:68-834:69)
  2: StorageDead(_53)
    SourceInfo(regex-automata/src/meta/strategy.rs:834:68-834:69)
  3: StorageDead(_52)
    SourceInfo(regex-automata/src/meta/strategy.rs:834:68-834:69)
  4: StorageDead(_50)
    SourceInfo(regex-automata/src/meta/strategy.rs:835:13-835:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb40
  }
  preds [bb29]
  succs [bb40]

bb31
  0: StorageDead(_60)
    SourceInfo(regex-automata/src/meta/strategy.rs:837:68-837:69)
  1: StorageDead(_59)
    SourceInfo(regex-automata/src/meta/strategy.rs:837:68-837:69)
  2: StorageDead(_58)
    SourceInfo(regex-automata/src/meta/strategy.rs:837:68-837:69)
  3: StorageDead(_57)
    SourceInfo(regex-automata/src/meta/strategy.rs:837:68-837:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:837:17-837:69)
      kind: goto -> bb40
  }
  preds [bb26]
  succs [bb40]

bb32
  0: StorageDead(_64)
    SourceInfo(regex-automata/src/meta/strategy.rs:851:20-851:21)
  1: StorageLive(_65)
    SourceInfo(regex-automata/src/meta/strategy.rs:852:19-852:37)
  2: StorageLive(_66)
    SourceInfo(regex-automata/src/meta/strategy.rs:852:19-852:28)
  3: StorageLive(_67)
    SourceInfo(regex-automata/src/meta/strategy.rs:852:19-852:20)
  4: _67 = &_40
    SourceInfo(regex-automata/src/meta/strategy.rs:852:19-852:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:852:19-852:28)
      kind: _66 = util::search::Match::start(move _67) -> [return: bb33, unwind: bb43]
  }
  preds [bb27]
  succs [bb33, bb43]

bb33
  0: StorageDead(_67)
    SourceInfo(regex-automata/src/meta/strategy.rs:852:27-852:28)
  1: StorageLive(_68)
    SourceInfo(regex-automata/src/meta/strategy.rs:852:30-852:37)
  2: StorageLive(_69)
    SourceInfo(regex-automata/src/meta/strategy.rs:852:30-852:31)
  3: _69 = &_40
    SourceInfo(regex-automata/src/meta/strategy.rs:852:30-852:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:852:30-852:37)
      kind: _68 = util::search::Match::end(move _69) -> [return: bb34, unwind: bb43]
  }
  preds [bb32]
  succs [bb34, bb43]

bb34
  0: StorageDead(_69)
    SourceInfo(regex-automata/src/meta/strategy.rs:852:36-852:37)
  1: _65 = core::ops::Range::<usize> { start: move _66, end: move _68 }
    SourceInfo(regex-automata/src/meta/strategy.rs:852:19-852:37)
  2: StorageDead(_68)
    SourceInfo(regex-automata/src/meta/strategy.rs:852:36-852:37)
  3: StorageDead(_66)
    SourceInfo(regex-automata/src/meta/strategy.rs:852:36-852:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:850:21-852:38)
      kind: _62 = util::search::Input::<'_>::span::<core::ops::Range<usize>>(move _63, move _65) -> [return: bb35, unwind: bb43]
  }
  preds [bb33]
  succs [bb35, bb43]

bb35
  0: StorageDead(_65)
    SourceInfo(regex-automata/src/meta/strategy.rs:852:37-852:38)
  1: StorageDead(_63)
    SourceInfo(regex-automata/src/meta/strategy.rs:852:37-852:38)
  2: StorageLive(_70)
    SourceInfo(regex-automata/src/meta/strategy.rs:853:23-853:53)
  3: StorageLive(_71)
    SourceInfo(regex-automata/src/meta/strategy.rs:853:41-853:52)
  4: StorageLive(_72)
    SourceInfo(regex-automata/src/meta/strategy.rs:853:41-853:42)
  5: _72 = &_40
    SourceInfo(regex-automata/src/meta/strategy.rs:853:41-853:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:853:41-853:52)
      kind: _71 = util::search::Match::pattern(move _72) -> [return: bb36, unwind: bb43]
  }
  preds [bb34]
  succs [bb36, bb43]

bb36
  0: StorageDead(_72)
    SourceInfo(regex-automata/src/meta/strategy.rs:853:51-853:52)
  1: _70 = util::search::Anchored::Pattern(move _71)
    SourceInfo(regex-automata/src/meta/strategy.rs:853:23-853:53)
  2: StorageDead(_71)
    SourceInfo(regex-automata/src/meta/strategy.rs:853:52-853:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:850:21-853:54)
      kind: _61 = util::search::Input::<'_>::anchored(move _62, move _70) -> [return: bb37, unwind: bb43]
  }
  preds [bb35]
  succs [bb37, bb43]

bb37
  0: StorageDead(_70)
    SourceInfo(regex-automata/src/meta/strategy.rs:853:53-853:54)
  1: StorageDead(_62)
    SourceInfo(regex-automata/src/meta/strategy.rs:853:53-853:54)
  2: FakeRead(ForLet(None), _61)
    SourceInfo(regex-automata/src/meta/strategy.rs:850:13-850:18)
  3: StorageLive(_73)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:13-856:47)
  4: StorageLive(_74)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:13-855:59)
  5: StorageLive(_75)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:13-855:17)
  6: _75 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:13-855:17)
  7: StorageLive(_76)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:38-855:43)
  8: _76 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:38-855:43)
  9: StorageLive(_77)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:45-855:51)
  10: StorageLive(_78)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:45-855:51)
  11: _78 = &_61
    SourceInfo(regex-automata/src/meta/strategy.rs:855:45-855:51)
  12: _77 = &(*_78)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:45-855:51)
  13: StorageLive(_79)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:53-855:58)
  14: _79 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:53-855:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:855:13-855:59)
      kind: _74 = meta::strategy::Core::search_slots_nofail(move _75, move _76, move _77, move _79) -> [return: bb38, unwind: bb43]
  }
  preds [bb36]
  succs [bb38, bb43]

bb38
  0: StorageDead(_79)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:58-855:59)
  1: StorageDead(_77)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:58-855:59)
  2: StorageDead(_76)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:58-855:59)
  3: StorageDead(_75)
    SourceInfo(regex-automata/src/meta/strategy.rs:855:58-855:59)
  4: StorageLive(_80)
    SourceInfo(regex-automata/src/meta/strategy.rs:856:25-856:46)
  5: StorageLive(_81)
    SourceInfo(regex-automata/src/meta/strategy.rs:856:25-856:46)
  6: _81 = const "should find a match"
    SourceInfo(regex-automata/src/meta/strategy.rs:856:25-856:46)
  7: _80 = &(*_81)
    SourceInfo(regex-automata/src/meta/strategy.rs:856:25-856:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:855:13-856:47)
      kind: _73 = core::option::Option::<util::primitives::PatternID>::expect(move _74, move _80) -> [return: bb39, unwind: bb43]
  }
  preds [bb37]
  succs [bb39, bb43]

bb39
  0: StorageDead(_80)
    SourceInfo(regex-automata/src/meta/strategy.rs:856:46-856:47)
  1: StorageDead(_74)
    SourceInfo(regex-automata/src/meta/strategy.rs:856:46-856:47)
  2: _0 = core::option::Option::<util::primitives::PatternID>::Some(move _73)
    SourceInfo(regex-automata/src/meta/strategy.rs:854:9-857:10)
  3: StorageDead(_73)
    SourceInfo(regex-automata/src/meta/strategy.rs:857:9-857:10)
  4: StorageDead(_61)
    SourceInfo(regex-automata/src/meta/strategy.rs:858:5-858:6)
  5: StorageDead(_40)
    SourceInfo(regex-automata/src/meta/strategy.rs:858:5-858:6)
  6: StorageDead(_81)
    SourceInfo(regex-automata/src/meta/strategy.rs:858:5-858:6)
  7: StorageDead(_78)
    SourceInfo(regex-automata/src/meta/strategy.rs:858:5-858:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:858:6-858:6)
      kind: goto -> bb42
  }
  preds [bb38]
  succs [bb42]

bb40
  0: StorageDead(_41)
    SourceInfo(regex-automata/src/meta/strategy.rs:839:10-839:11)
  1: StorageDead(_40)
    SourceInfo(regex-automata/src/meta/strategy.rs:858:5-858:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb42
  }
  preds [bb28, bb30, bb31]
  succs [bb42]

bb41
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:812:9-812:10)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:812:9-812:10)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:812:9-812:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb42
  }
  preds [bb11, bb13]
  succs [bb42]

bb42
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:858:6-858:6)
      kind: return
  }
  preds [bb17, bb39, bb40, bb41]
  succs []

bb43
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:796:5-858:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb4, bb5, bb9, bb10, bb12, bb14, bb16, bb18, bb26, bb27, bb29, bb32, bb33, bb34, bb35, bb36, bb37, bb38]
  succs []

