{
  "regex-automata/src/meta/strategy.rs:807:13:807:55": [
    {
      "Bool": {
        "Other": "self.is_capture_search_needed(slots.len())"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:826:12:826:46": [
    {
      "Bool": {
        "Other": "self.onepass.get(&input).is_some()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:829:23:829:60": [
    {
      "Match": {
        "match_source": "regex-automata/src/meta/strategy.rs:829:23:829:60",
        "match_str": "self.try_search_mayfail(cache, input)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/meta/strategy.rs:832:13:832:28": {
            "pat": {
              "pat_str": "Some(Err(_err))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:832:32:835:14"
          },
          "regex-automata/src/meta/strategy.rs:836:13:836:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:836:21:838:14"
          },
          "regex-automata/src/meta/strategy.rs:830:13:830:30": {
            "pat": {
              "pat_str": "Some(Ok(Some(m)))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:830:34:830:35"
          },
          "regex-automata/src/meta/strategy.rs:831:13:831:27": {
            "pat": {
              "pat_str": "Some(Ok(None))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/strategy.rs:831:31:831:42"
          }
        }
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:809:21:809:47": [
    {
      "Try": "self.search(cache, input)?"
    }
  ]
}