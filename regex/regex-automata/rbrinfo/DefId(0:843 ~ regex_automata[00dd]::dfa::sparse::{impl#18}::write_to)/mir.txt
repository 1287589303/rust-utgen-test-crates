bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2344:13-2344:19)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2344:22-2344:26)
  2: _4 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2344:22-2344:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2344:22-2344:41)
      kind: _3 = dfa::sparse::State::<'_>::write_to_len(move _4) -> [return: bb1, unwind: bb63]
  }
  preds []
  succs [bb1, bb63]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2344:40-2344:41)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2344:13-2344:19)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:9-2349:10)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:12-2345:30)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:12-2345:21)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:12-2345:15)
  6: _8 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:12-2345:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2345:12-2345:21)
      kind: _7 = core::slice::<impl [u8]>::len(move _8) -> [return: bb2, unwind: bb63]
  }
  preds [bb0]
  succs [bb2, bb63]

bb2
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:20-2345:21)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:24-2345:30)
  2: _9 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:24-2345:30)
  3: _6 = Lt(move _7, move _9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:12-2345:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2345:12-2345:30)
      kind: switchInt(move _6) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:29-2345:30)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:29-2345:30)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2346:24-2348:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2346:24-2348:14)
      kind: _11 = util::wire::SerializeError::buffer_too_small(const "sparse state transitions") -> [return: bb4, unwind: bb63]
  }
  preds [bb2]
  succs [bb4, bb63]

bb4
  0: _0 = core::result::Result::<usize, util::wire::SerializeError>::Err(move _11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2346:20-2348:15)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2348:14-2348:15)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2349:9-2349:10)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2349:9-2349:10)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2378:5-2378:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2378:6-2378:6)
      kind: goto -> bb62
  }
  preds [bb3]
  succs [bb62]

bb5
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:29-2345:30)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2345:29-2345:30)
  2: _5 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2349:10-2349:10)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2349:9-2349:10)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2349:9-2349:10)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2351:13-2351:19)
  6: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:16-2352:29)
  7: _13 = ((*_1).1: bool)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:16-2352:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2352:16-2352:29)
      kind: switchInt(move _13) -> [0: bb7, otherwise: bb6]
  }
  preds [bb2]
  succs [bb6, bb7]

bb6
  0: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:32-2352:43)
  1: _14 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:32-2352:43)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:46-2352:55)
  3: _16 = const 15_i32 as u32 (IntToInt)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:46-2352:55)
  4: _17 = Lt(move _16, const 64_u32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:46-2352:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2352:46-2352:55)
      kind: assert(move _17, "attempt to shift left by `{}`, which would overflow", const 15_i32) -> [success: bb8, unwind: bb63]
  }
  preds [bb5]
  succs [bb8, bb63]

bb7
  0: _12 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:65-2352:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2352:13-2352:78)
      kind: goto -> bb9
  }
  preds [bb5]
  succs [bb9]

bb8
  0: _15 = Shl(const 1_usize, const 15_i32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:46-2352:55)
  1: _12 = BitOr(move _14, move _15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:32-2352:55)
  2: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:54-2352:55)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:54-2352:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2352:13-2352:78)
      kind: goto -> bb9
  }
  preds [bb6]
  succs [bb9]

bb9
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2352:77-2352:78)
  1: FakeRead(ForLet(None), _12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2351:13-2351:19)
  2: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2353:9-2353:58)
  3: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2353:22-2353:52)
  4: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2353:22-2353:43)
  5: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2353:36-2353:42)
  6: _21 = _12
    SourceInfo(regex-automata/src/dfa/sparse.rs:2353:36-2353:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2353:22-2353:43)
      kind: _20 = <u16 as core::convert::TryFrom<usize>>::try_from(move _21) -> [return: bb10, unwind: bb63]
  }
  preds [bb7, bb8]
  succs [bb10, bb63]

bb10
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2353:42-2353:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2353:22-2353:52)
      kind: _19 = core::result::Result::<u16, core::num::TryFromIntError>::unwrap(move _20) -> [return: bb11, unwind: bb63]
  }
  preds [bb9]
  succs [bb11, bb63]

bb11
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2353:51-2353:52)
  1: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2353:54-2353:57)
  2: _22 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2353:54-2353:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2353:9-2353:58)
      kind: _18 = <E as util::wire::Endian>::write_u16(move _19, move _22) -> [return: bb12, unwind: bb63]
  }
  preds [bb10]
  succs [bb12, bb63]

bb12
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2353:57-2353:58)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2353:57-2353:58)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2353:58-2353:59)
  3: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:15-2354:43)
  4: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:15-2354:43)
  5: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:23-2354:43)
  6: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:20-2354:23)
  7: _26 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:20-2354:23)
  8: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:24-2354:42)
  9: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:24-2354:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2354:24-2354:40)
      kind: _28 = core::mem::size_of::<u16>() -> [return: bb13, unwind: bb63]
  }
  preds [bb11]
  succs [bb13, bb63]

bb13
  0: _27 = core::ops::RangeFrom::<usize> { start: move _28 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:24-2354:42)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:41-2354:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2354:23-2354:43)
      kind: _25 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _26, move _27) -> [return: bb14, unwind: bb63]
  }
  preds [bb12]
  succs [bb14, bb63]

bb14
  0: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:42-2354:43)
  1: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:42-2354:43)
  2: _24 = &mut (*_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:15-2354:43)
  3: _23 = &mut (*_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:15-2354:43)
  4: _2 = move _23
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:9-2354:43)
  5: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:42-2354:43)
  6: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:43-2354:44)
  7: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2354:43-2354:44)
  8: StorageLive(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:9-2356:74)
  9: StorageLive(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:9-2356:39)
  10: StorageLive(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:12-2356:39)
  11: StorageLive(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:9-2356:12)
  12: _32 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:9-2356:12)
  13: StorageLive(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:13-2356:38)
  14: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:15-2356:38)
  15: StorageLive(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:15-2356:32)
  16: _35 = &(*((*_1).3: &[u8]))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:15-2356:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2356:15-2356:38)
      kind: _34 = core::slice::<impl [u8]>::len(move _35) -> [return: bb15, unwind: bb63]
  }
  preds [bb13]
  succs [bb15, bb63]

bb15
  0: StorageDead(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:37-2356:38)
  1: _33 = core::ops::RangeTo::<usize> { end: move _34 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:13-2356:38)
  2: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:37-2356:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2356:12-2356:39)
      kind: _31 = <[u8] as core::ops::IndexMut<core::ops::RangeTo<usize>>>::index_mut(move _32, move _33) -> [return: bb16, unwind: bb63]
  }
  preds [bb14]
  succs [bb16, bb63]

bb16
  0: _30 = &mut (*_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:9-2356:39)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:38-2356:39)
  2: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:38-2356:39)
  3: StorageLive(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:56-2356:73)
  4: _36 = &(*((*_1).3: &[u8]))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:56-2356:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2356:9-2356:74)
      kind: _29 = core::slice::<impl [u8]>::copy_from_slice(move _30, move _36) -> [return: bb17, unwind: bb63]
  }
  preds [bb15]
  succs [bb17, bb63]

bb17
  0: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:73-2356:74)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:73-2356:74)
  2: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:74-2356:75)
  3: StorageDead(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2356:74-2356:75)
  4: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:15-2357:50)
  5: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:15-2357:50)
  6: StorageLive(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:23-2357:50)
  7: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:20-2357:23)
  8: _40 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:20-2357:23)
  9: StorageLive(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:24-2357:49)
  10: StorageLive(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:24-2357:47)
  11: StorageLive(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:24-2357:41)
  12: _43 = &(*((*_1).3: &[u8]))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:24-2357:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2357:24-2357:47)
      kind: _42 = core::slice::<impl [u8]>::len(move _43) -> [return: bb18, unwind: bb63]
  }
  preds [bb16]
  succs [bb18, bb63]

bb18
  0: StorageDead(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:46-2357:47)
  1: _41 = core::ops::RangeFrom::<usize> { start: move _42 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:24-2357:49)
  2: StorageDead(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:48-2357:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2357:23-2357:50)
      kind: _39 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _40, move _41) -> [return: bb19, unwind: bb63]
  }
  preds [bb17]
  succs [bb19, bb63]

bb19
  0: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:49-2357:50)
  1: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:49-2357:50)
  2: _38 = &mut (*_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:15-2357:50)
  3: _37 = &mut (*_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:15-2357:50)
  4: _2 = move _37
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:9-2357:50)
  5: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:49-2357:50)
  6: StorageDead(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:50-2357:51)
  7: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2357:50-2357:51)
  8: StorageLive(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:9-2362:10)
  9: StorageLive(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  10: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  11: StorageLive(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:21-2359:32)
  12: _47 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:21-2359:32)
  13: _46 = core::ops::Range::<usize> { start: const 0_usize, end: move _47 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  14: StorageDead(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:31-2359:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
      kind: _45 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _46) -> [return: bb20, unwind: bb63]
  }
  preds [bb18]
  succs [bb20, bb63]

bb20
  0: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:31-2359:32)
  1: PlaceMention(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  2: StorageLive(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  3: _48 = move _45
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2359:9-2362:10)
      kind: goto -> bb21
  }
  preds [bb19]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2359:9-2362:10)
      kind: falseUnwind -> [real: bb22, unwind: bb63]
  }
  preds [bb20, bb31]
  succs [bb22, bb63]

bb22
  0: StorageLive(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  1: StorageLive(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  2: StorageLive(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  3: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  4: _53 = &mut _48
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  5: _52 = &mut (*_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
      kind: _51 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _52) -> [return: bb23, unwind: bb63]
  }
  preds [bb21]
  succs [bb23, bb63]

bb23
  0: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:31-2359:32)
  1: PlaceMention(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  2: _54 = discriminant(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
      kind: switchInt(move _54) -> [0: bb25, 1: bb26, otherwise: bb24]
  }
  preds [bb22]
  succs [bb24, bb25, bb26]

bb24
  0: FakeRead(ForMatchedPlace(None), _51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2359:18-2359:32)
      kind: unreachable
  }
  preds [bb23]
  succs []

bb25
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2359:9-2362:10)
      kind: falseEdge -> [real: bb27, imaginary: bb26]
  }
  preds [bb23]
  succs [bb26, bb27]

bb26
  0: StorageLive(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:13-2359:14)
  1: _56 = ((_51 as Some).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:13-2359:14)
  2: StorageLive(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:13-2360:56)
  3: StorageLive(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:26-2360:50)
  4: StorageLive(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:26-2360:41)
  5: StorageLive(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:26-2360:41)
  6: StorageLive(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:26-2360:30)
  7: _61 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:26-2360:30)
  8: StorageLive(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:39-2360:40)
  9: _62 = _56
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:39-2360:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2360:26-2360:41)
      kind: _60 = dfa::sparse::State::<'_>::next_at(move _61, move _62) -> [return: bb28, unwind: bb63]
  }
  preds [bb23, bb25]
  succs [bb28, bb63]

bb27
  0: _44 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:9-2362:10)
  1: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2362:9-2362:10)
  2: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2362:9-2362:10)
  3: StorageDead(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2362:9-2362:10)
  4: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2362:9-2362:10)
  5: StorageDead(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2362:9-2362:10)
  6: StorageDead(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2362:9-2362:10)
  7: StorageLive(_69)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2364:9-2372:10)
  8: StorageLive(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2364:12-2364:25)
  9: _70 = ((*_1).1: bool)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2364:12-2364:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2364:12-2364:25)
      kind: switchInt(move _70) -> [0: bb33, otherwise: bb32]
  }
  preds [bb25]
  succs [bb32, bb33]

bb28
  0: _59 = &_60
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:26-2360:41)
  1: StorageDead(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:40-2360:41)
  2: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:40-2360:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2360:26-2360:50)
      kind: _58 = util::primitives::StateID::as_u32(move _59) -> [return: bb29, unwind: bb63]
  }
  preds [bb26]
  succs [bb29, bb63]

bb29
  0: StorageDead(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:49-2360:50)
  1: StorageLive(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:52-2360:55)
  2: _63 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:52-2360:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2360:13-2360:56)
      kind: _57 = <E as util::wire::Endian>::write_u32(move _58, move _63) -> [return: bb30, unwind: bb63]
  }
  preds [bb28]
  succs [bb30, bb63]

bb30
  0: StorageDead(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:55-2360:56)
  1: StorageDead(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:55-2360:56)
  2: StorageDead(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:56-2360:57)
  3: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2360:56-2360:57)
  4: StorageLive(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:19-2361:44)
  5: StorageLive(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:19-2361:44)
  6: StorageLive(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:27-2361:44)
  7: StorageLive(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:24-2361:27)
  8: _67 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:24-2361:27)
  9: StorageLive(_68)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:28-2361:43)
  10: _68 = core::ops::RangeFrom::<usize> { start: const util::primitives::StateID::SIZE }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:28-2361:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2361:27-2361:44)
      kind: _66 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _67, move _68) -> [return: bb31, unwind: bb63]
  }
  preds [bb29]
  succs [bb31, bb63]

bb31
  0: StorageDead(_68)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:43-2361:44)
  1: StorageDead(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:43-2361:44)
  2: _65 = &mut (*_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:19-2361:44)
  3: _64 = &mut (*_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:19-2361:44)
  4: _2 = move _64
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:13-2361:44)
  5: StorageDead(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:43-2361:44)
  6: StorageDead(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:44-2361:45)
  7: StorageDead(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2361:44-2361:45)
  8: _50 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:33-2362:10)
  9: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2362:9-2362:10)
  10: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2362:9-2362:10)
  11: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2362:9-2362:10)
  12: StorageDead(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2362:9-2362:10)
  13: _49 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2359:9-2362:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2359:9-2362:10)
      kind: goto -> bb21
  }
  preds [bb30]
  succs [bb21]

bb32
  0: StorageLive(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:13-2365:74)
  1: StorageLive(_72)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:26-2365:68)
  2: StorageLive(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:26-2365:59)
  3: StorageLive(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:40-2365:58)
  4: StorageLive(_75)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:40-2365:44)
  5: _75 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:40-2365:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2365:40-2365:58)
      kind: _74 = dfa::sparse::State::<'_>::pattern_len(move _75) -> [return: bb34, unwind: bb63]
  }
  preds [bb27]
  succs [bb34, bb63]

bb33
  0: _69 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2372:10-2372:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2364:9-2372:10)
      kind: goto -> bb53
  }
  preds [bb27]
  succs [bb53]

bb34
  0: StorageDead(_75)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:57-2365:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2365:26-2365:59)
      kind: _73 = <u32 as core::convert::TryFrom<usize>>::try_from(move _74) -> [return: bb35, unwind: bb63]
  }
  preds [bb32]
  succs [bb35, bb63]

bb35
  0: StorageDead(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:58-2365:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2365:26-2365:68)
      kind: _72 = core::result::Result::<u32, core::num::TryFromIntError>::unwrap(move _73) -> [return: bb36, unwind: bb63]
  }
  preds [bb34]
  succs [bb36, bb63]

bb36
  0: StorageDead(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:67-2365:68)
  1: StorageLive(_76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:70-2365:73)
  2: _76 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:70-2365:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2365:13-2365:74)
      kind: _71 = <E as util::wire::Endian>::write_u32(move _72, move _76) -> [return: bb37, unwind: bb63]
  }
  preds [bb35]
  succs [bb37, bb63]

bb37
  0: StorageDead(_76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:73-2365:74)
  1: StorageDead(_72)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:73-2365:74)
  2: StorageDead(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2365:74-2365:75)
  3: StorageLive(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:19-2366:47)
  4: StorageLive(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:19-2366:47)
  5: StorageLive(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:27-2366:47)
  6: StorageLive(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:24-2366:27)
  7: _80 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:24-2366:27)
  8: StorageLive(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:28-2366:46)
  9: StorageLive(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:28-2366:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2366:28-2366:44)
      kind: _82 = core::mem::size_of::<u32>() -> [return: bb38, unwind: bb63]
  }
  preds [bb36]
  succs [bb38, bb63]

bb38
  0: _81 = core::ops::RangeFrom::<usize> { start: move _82 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:28-2366:46)
  1: StorageDead(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:45-2366:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2366:27-2366:47)
      kind: _79 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _80, move _81) -> [return: bb39, unwind: bb63]
  }
  preds [bb37]
  succs [bb39, bb63]

bb39
  0: StorageDead(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:46-2366:47)
  1: StorageDead(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:46-2366:47)
  2: _78 = &mut (*_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:19-2366:47)
  3: _77 = &mut (*_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:19-2366:47)
  4: _2 = move _77
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:13-2366:47)
  5: StorageDead(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:46-2366:47)
  6: StorageDead(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:47-2366:48)
  7: StorageDead(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2366:47-2366:48)
  8: StorageLive(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  9: StorageLive(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  10: StorageLive(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:25-2367:43)
  11: StorageLive(_86)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:25-2367:29)
  12: _86 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:25-2367:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2367:25-2367:43)
      kind: _85 = dfa::sparse::State::<'_>::pattern_len(move _86) -> [return: bb40, unwind: bb63]
  }
  preds [bb38]
  succs [bb40, bb63]

bb40
  0: StorageDead(_86)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:42-2367:43)
  1: _84 = core::ops::Range::<usize> { start: const 0_usize, end: move _85 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  2: StorageDead(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:42-2367:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
      kind: _83 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _84) -> [return: bb41, unwind: bb63]
  }
  preds [bb39]
  succs [bb41, bb63]

bb41
  0: StorageDead(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:42-2367:43)
  1: PlaceMention(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  2: StorageLive(_87)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  3: _87 = move _83
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2367:13-2371:14)
      kind: goto -> bb42
  }
  preds [bb40]
  succs [bb42]

bb42
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2367:13-2371:14)
      kind: falseUnwind -> [real: bb43, unwind: bb63]
  }
  preds [bb41, bb52]
  succs [bb43, bb63]

bb43
  0: StorageLive(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  1: StorageLive(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  2: StorageLive(_90)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  3: StorageLive(_91)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  4: _91 = &mut _87
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  5: _90 = &mut (*_91)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
      kind: _89 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _90) -> [return: bb44, unwind: bb63]
  }
  preds [bb42]
  succs [bb44, bb63]

bb44
  0: StorageDead(_90)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:42-2367:43)
  1: PlaceMention(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  2: _92 = discriminant(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
      kind: switchInt(move _92) -> [0: bb46, 1: bb47, otherwise: bb45]
  }
  preds [bb43]
  succs [bb45, bb46, bb47]

bb45
  0: FakeRead(ForMatchedPlace(None), _89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2367:22-2367:43)
      kind: unreachable
  }
  preds [bb44]
  succs []

bb46
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2367:13-2371:14)
      kind: falseEdge -> [real: bb48, imaginary: bb47]
  }
  preds [bb44]
  succs [bb47, bb48]

bb47
  0: StorageLive(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:17-2367:18)
  1: _94 = ((_89 as Some).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:17-2367:18)
  2: StorageLive(_95)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2368:21-2368:24)
  3: StorageLive(_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2368:27-2368:31)
  4: _96 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2368:27-2368:31)
  5: StorageLive(_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2368:43-2368:44)
  6: _97 = _94
    SourceInfo(regex-automata/src/dfa/sparse.rs:2368:43-2368:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2368:27-2368:45)
      kind: _95 = dfa::sparse::State::<'_>::pattern_id(move _96, move _97) -> [return: bb49, unwind: bb63]
  }
  preds [bb44, bb46]
  succs [bb49, bb63]

bb48
  0: _69 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:13-2371:14)
  1: StorageDead(_91)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2371:13-2371:14)
  2: StorageDead(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2371:13-2371:14)
  3: StorageDead(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2371:13-2371:14)
  4: StorageDead(_87)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2371:13-2371:14)
  5: StorageDead(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2371:13-2371:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2364:9-2372:10)
      kind: goto -> bb53
  }
  preds [bb46]
  succs [bb53]

bb49
  0: StorageDead(_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2368:44-2368:45)
  1: StorageDead(_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2368:44-2368:45)
  2: FakeRead(ForLet(None), _95)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2368:21-2368:24)
  3: StorageLive(_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2369:17-2369:48)
  4: StorageLive(_99)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2369:30-2369:42)
  5: StorageLive(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2369:30-2369:33)
  6: _100 = &_95
    SourceInfo(regex-automata/src/dfa/sparse.rs:2369:30-2369:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2369:30-2369:42)
      kind: _99 = util::primitives::PatternID::as_u32(move _100) -> [return: bb50, unwind: bb63]
  }
  preds [bb47]
  succs [bb50, bb63]

bb50
  0: StorageDead(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2369:41-2369:42)
  1: StorageLive(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2369:44-2369:47)
  2: _101 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2369:44-2369:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2369:17-2369:48)
      kind: _98 = <E as util::wire::Endian>::write_u32(move _99, move _101) -> [return: bb51, unwind: bb63]
  }
  preds [bb49]
  succs [bb51, bb63]

bb51
  0: StorageDead(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2369:47-2369:48)
  1: StorageDead(_99)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2369:47-2369:48)
  2: StorageDead(_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2369:48-2369:49)
  3: StorageLive(_102)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:23-2370:50)
  4: StorageLive(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:23-2370:50)
  5: StorageLive(_104)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:31-2370:50)
  6: StorageLive(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:28-2370:31)
  7: _105 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:28-2370:31)
  8: StorageLive(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:32-2370:49)
  9: _106 = core::ops::RangeFrom::<usize> { start: const util::primitives::PatternID::SIZE }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:32-2370:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2370:31-2370:50)
      kind: _104 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _105, move _106) -> [return: bb52, unwind: bb63]
  }
  preds [bb50]
  succs [bb52, bb63]

bb52
  0: StorageDead(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:49-2370:50)
  1: StorageDead(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:49-2370:50)
  2: _103 = &mut (*_104)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:23-2370:50)
  3: _102 = &mut (*_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:23-2370:50)
  4: _2 = move _102
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:17-2370:50)
  5: StorageDead(_102)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:49-2370:50)
  6: StorageDead(_104)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:50-2370:51)
  7: StorageDead(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2370:50-2370:51)
  8: _88 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:44-2371:14)
  9: StorageDead(_95)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2371:13-2371:14)
  10: StorageDead(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2371:13-2371:14)
  11: StorageDead(_91)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2371:13-2371:14)
  12: StorageDead(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2371:13-2371:14)
  13: StorageDead(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2371:13-2371:14)
  14: _49 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2367:13-2371:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2367:13-2371:14)
      kind: goto -> bb42
  }
  preds [bb51]
  succs [bb42]

bb53
  0: StorageDead(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2372:9-2372:10)
  1: StorageDead(_69)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2372:9-2372:10)
  2: StorageLive(_107)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:18-2374:57)
  3: StorageLive(_108)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:18-2374:48)
  4: StorageLive(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:31-2374:47)
  5: StorageLive(_110)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:31-2374:41)
  6: _110 = &(*((*_1).6: &[u8]))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:31-2374:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2374:31-2374:47)
      kind: _109 = core::slice::<impl [u8]>::len(move _110) -> [return: bb54, unwind: bb63]
  }
  preds [bb33, bb48]
  succs [bb54, bb63]

bb54
  0: StorageDead(_110)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:46-2374:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2374:18-2374:48)
      kind: _108 = <u8 as core::convert::TryFrom<usize>>::try_from(move _109) -> [return: bb55, unwind: bb63]
  }
  preds [bb53]
  succs [bb55, bb63]

bb55
  0: StorageDead(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:47-2374:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2374:18-2374:57)
      kind: _107 = core::result::Result::<u8, core::num::TryFromIntError>::unwrap(move _108) -> [return: bb56, unwind: bb63]
  }
  preds [bb54]
  succs [bb56, bb63]

bb56
  0: StorageDead(_108)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:56-2374:57)
  1: StorageLive(_111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:13-2374:14)
  2: _111 = const 0_usize
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:13-2374:14)
  3: _112 = Len((*_2))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:9-2374:15)
  4: _113 = Lt(_111, _112)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:9-2374:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2374:9-2374:15)
      kind: assert(move _113, "index out of bounds: the length is {} but the index is {}", move _112, _111) -> [success: bb57, unwind: bb63]
  }
  preds [bb55]
  succs [bb57, bb63]

bb57
  0: (*_2)[_111] = move _107
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:9-2374:57)
  1: StorageDead(_107)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:56-2374:57)
  2: StorageDead(_111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2374:57-2374:58)
  3: StorageLive(_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:9-2375:65)
  4: StorageLive(_115)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:9-2375:37)
  5: StorageLive(_116)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:17-2375:37)
  6: StorageLive(_117)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:9-2375:17)
  7: StorageLive(_118)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:12-2375:17)
  8: StorageLive(_119)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:9-2375:12)
  9: _119 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:9-2375:12)
  10: StorageLive(_120)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:13-2375:16)
  11: _120 = core::ops::RangeFrom::<usize> { start: const 1_usize }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:13-2375:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2375:12-2375:17)
      kind: _118 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _119, move _120) -> [return: bb58, unwind: bb63]
  }
  preds [bb56]
  succs [bb58, bb63]

bb58
  0: _117 = &mut (*_118)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:9-2375:17)
  1: StorageDead(_120)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:16-2375:17)
  2: StorageDead(_119)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:16-2375:17)
  3: StorageLive(_121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:18-2375:36)
  4: StorageLive(_122)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:20-2375:36)
  5: StorageLive(_123)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:20-2375:30)
  6: _123 = &(*((*_1).6: &[u8]))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:20-2375:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2375:20-2375:36)
      kind: _122 = core::slice::<impl [u8]>::len(move _123) -> [return: bb59, unwind: bb63]
  }
  preds [bb57]
  succs [bb59, bb63]

bb59
  0: StorageDead(_123)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:35-2375:36)
  1: _121 = core::ops::RangeTo::<usize> { end: move _122 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:18-2375:36)
  2: StorageDead(_122)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:35-2375:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2375:17-2375:37)
      kind: _116 = <[u8] as core::ops::IndexMut<core::ops::RangeTo<usize>>>::index_mut(move _117, move _121) -> [return: bb60, unwind: bb63]
  }
  preds [bb58]
  succs [bb60, bb63]

bb60
  0: _115 = &mut (*_116)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:9-2375:37)
  1: StorageDead(_121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:36-2375:37)
  2: StorageDead(_117)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:36-2375:37)
  3: StorageLive(_124)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:54-2375:64)
  4: _124 = &(*((*_1).6: &[u8]))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:54-2375:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2375:9-2375:65)
      kind: _114 = core::slice::<impl [u8]>::copy_from_slice(move _115, move _124) -> [return: bb61, unwind: bb63]
  }
  preds [bb59]
  succs [bb61, bb63]

bb61
  0: StorageDead(_124)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:64-2375:65)
  1: StorageDead(_115)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:64-2375:65)
  2: StorageDead(_118)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:65-2375:66)
  3: StorageDead(_116)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:65-2375:66)
  4: StorageDead(_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2375:65-2375:66)
  5: StorageLive(_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2377:12-2377:18)
  6: _125 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:2377:12-2377:18)
  7: _0 = core::result::Result::<usize, util::wire::SerializeError>::Ok(move _125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2377:9-2377:19)
  8: StorageDead(_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2377:18-2377:19)
  9: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2378:5-2378:6)
  10: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2378:5-2378:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2378:6-2378:6)
      kind: goto -> bb62
  }
  preds [bb60]
  succs [bb62]

bb62
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2378:6-2378:6)
      kind: return
  }
  preds [bb4, bb61]
  succs []

bb63
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2340:5-2378:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb6, bb9, bb10, bb11, bb12, bb13, bb14, bb15, bb16, bb17, bb18, bb19, bb21, bb22, bb26, bb28, bb29, bb30, bb32, bb34, bb35, bb36, bb37, bb38, bb39, bb40, bb42, bb43, bb47, bb49, bb50, bb51, bb53, bb54, bb55, bb56, bb57, bb58, bb59, bb60]
  succs []

