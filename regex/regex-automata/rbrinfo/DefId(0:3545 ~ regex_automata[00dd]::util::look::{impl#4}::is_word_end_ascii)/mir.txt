bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:1115:13-1115:24)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:1115:27-1115:33)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:1115:27-1115:29)
  3: _6 = _3
    SourceInfo(regex-automata/src/util/look.rs:1115:27-1115:29)
  4: _5 = Gt(move _6, const 0_usize)
    SourceInfo(regex-automata/src/util/look.rs:1115:27-1115:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1115:27-1115:33)
      kind: switchInt(move _5) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1115:32-1115:33)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:1115:56-1115:72)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:1115:65-1115:71)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:1115:65-1115:67)
  4: _9 = _3
    SourceInfo(regex-automata/src/util/look.rs:1115:65-1115:67)
  5: _10 = SubWithOverflow(_9, const 1_usize)
    SourceInfo(regex-automata/src/util/look.rs:1115:65-1115:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1115:65-1115:71)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", move _9, const 1_usize) -> [success: bb3, unwind: bb16]
  }
  preds [bb0]
  succs [bb3, bb16]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1115:32-1115:33)
  1: _4 = const false
    SourceInfo(regex-automata/src/util/look.rs:1115:27-1115:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1115:27-1115:73)
      kind: goto -> bb6
  }
  preds [bb0]
  succs [bb6]

bb3
  0: _8 = move (_10.0: usize)
    SourceInfo(regex-automata/src/util/look.rs:1115:65-1115:71)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:1115:70-1115:71)
  2: _11 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:1115:56-1115:72)
  3: _12 = Lt(_8, _11)
    SourceInfo(regex-automata/src/util/look.rs:1115:56-1115:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1115:56-1115:72)
      kind: assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _8) -> [success: bb4, unwind: bb16]
  }
  preds [bb1]
  succs [bb4, bb16]

bb4
  0: _7 = (*_2)[_8]
    SourceInfo(regex-automata/src/util/look.rs:1115:56-1115:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1115:37-1115:73)
      kind: _4 = util::utf8::is_word_byte(move _7) -> [return: bb5, unwind: bb16]
  }
  preds [bb3]
  succs [bb5, bb16]

bb5
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:1115:72-1115:73)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1115:72-1115:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1115:27-1115:73)
      kind: goto -> bb6
  }
  preds [bb4]
  succs [bb6]

bb6
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1115:72-1115:73)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/look.rs:1115:13-1115:24)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/look.rs:1116:13-1116:23)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/util/look.rs:1117:13-1117:32)
  4: StorageLive(_15)
    SourceInfo(regex-automata/src/util/look.rs:1117:13-1117:15)
  5: _15 = _3
    SourceInfo(regex-automata/src/util/look.rs:1117:13-1117:15)
  6: StorageLive(_16)
    SourceInfo(regex-automata/src/util/look.rs:1117:18-1117:32)
  7: StorageLive(_17)
    SourceInfo(regex-automata/src/util/look.rs:1117:18-1117:26)
  8: _17 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1117:18-1117:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1117:18-1117:32)
      kind: _16 = core::slice::<impl [u8]>::len(move _17) -> [return: bb7, unwind: bb16]
  }
  preds [bb2, bb5]
  succs [bb7, bb16]

bb7
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/look.rs:1117:31-1117:32)
  1: _14 = Lt(move _15, move _16)
    SourceInfo(regex-automata/src/util/look.rs:1117:13-1117:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1117:13-1117:32)
      kind: switchInt(move _14) -> [0: bb9, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9]

bb8
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/look.rs:1117:31-1117:32)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/util/look.rs:1117:31-1117:32)
  2: StorageLive(_18)
    SourceInfo(regex-automata/src/util/look.rs:1117:55-1117:67)
  3: StorageLive(_19)
    SourceInfo(regex-automata/src/util/look.rs:1117:64-1117:66)
  4: _19 = _3
    SourceInfo(regex-automata/src/util/look.rs:1117:64-1117:66)
  5: _20 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:1117:55-1117:67)
  6: _21 = Lt(_19, _20)
    SourceInfo(regex-automata/src/util/look.rs:1117:55-1117:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1117:55-1117:67)
      kind: assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb10, unwind: bb16]
  }
  preds [bb7]
  succs [bb10, bb16]

bb9
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/look.rs:1117:31-1117:32)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/util/look.rs:1117:31-1117:32)
  2: _13 = const false
    SourceInfo(regex-automata/src/util/look.rs:1117:13-1117:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1117:13-1117:68)
      kind: goto -> bb12
  }
  preds [bb7]
  succs [bb12]

bb10
  0: _18 = (*_2)[_19]
    SourceInfo(regex-automata/src/util/look.rs:1117:55-1117:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1117:36-1117:68)
      kind: _13 = util::utf8::is_word_byte(move _18) -> [return: bb11, unwind: bb16]
  }
  preds [bb8]
  succs [bb11, bb16]

bb11
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/util/look.rs:1117:67-1117:68)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/util/look.rs:1117:67-1117:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1117:13-1117:68)
      kind: goto -> bb12
  }
  preds [bb10]
  succs [bb12]

bb12
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/look.rs:1117:67-1117:68)
  1: FakeRead(ForLet(None), _13)
    SourceInfo(regex-automata/src/util/look.rs:1116:13-1116:23)
  2: StorageLive(_22)
    SourceInfo(regex-automata/src/util/look.rs:1118:9-1118:20)
  3: _22 = _4
    SourceInfo(regex-automata/src/util/look.rs:1118:9-1118:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1118:9-1118:20)
      kind: switchInt(move _22) -> [0: bb14, otherwise: bb13]
  }
  preds [bb9, bb11]
  succs [bb13, bb14]

bb13
  0: StorageLive(_23)
    SourceInfo(regex-automata/src/util/look.rs:1118:25-1118:35)
  1: _23 = _13
    SourceInfo(regex-automata/src/util/look.rs:1118:25-1118:35)
  2: _0 = Not(move _23)
    SourceInfo(regex-automata/src/util/look.rs:1118:24-1118:35)
  3: StorageDead(_23)
    SourceInfo(regex-automata/src/util/look.rs:1118:34-1118:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1118:9-1118:35)
      kind: goto -> bb15
  }
  preds [bb12]
  succs [bb15]

bb14
  0: _0 = const false
    SourceInfo(regex-automata/src/util/look.rs:1118:9-1118:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1118:9-1118:35)
      kind: goto -> bb15
  }
  preds [bb12]
  succs [bb15]

bb15
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/util/look.rs:1118:34-1118:35)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/util/look.rs:1119:5-1119:6)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1119:5-1119:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1119:6-1119:6)
      kind: return
  }
  preds [bb13, bb14]
  succs []

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1114:5-1119:6)
      kind: resume
  }
  preds [bb1, bb3, bb4, bb6, bb8, bb10]
  succs []

