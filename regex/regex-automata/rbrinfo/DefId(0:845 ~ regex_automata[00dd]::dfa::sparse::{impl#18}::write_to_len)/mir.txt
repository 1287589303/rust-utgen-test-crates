bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2383:13-2383:20)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2383:23-2385:44)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2383:23-2384:32)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2384:15-2384:32)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2384:16-2384:27)
  5: _6 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2384:16-2384:27)
  6: _7 = MulWithOverflow(_6, const 2_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2384:15-2384:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2384:15-2384:32)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _6, const 2_usize) -> [success: bb1, unwind: bb15]
  }
  preds []
  succs [bb1, bb15]

bb1
  0: _5 = move (_7.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2384:15-2384:32)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2384:31-2384:32)
  2: _8 = AddWithOverflow(const 2_usize, _5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2383:23-2384:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2383:23-2384:32)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", const 2_usize, move _5) -> [success: bb2, unwind: bb15]
  }
  preds [bb0]
  succs [bb2, bb15]

bb2
  0: _4 = move (_8.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2383:23-2384:32)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2384:31-2384:32)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2385:15-2385:44)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2385:16-2385:27)
  4: _10 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2385:16-2385:27)
  5: _11 = MulWithOverflow(_10, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2385:15-2385:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2385:15-2385:44)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} * {}`, which would overflow", move _10, const util::primitives::StateID::SIZE) -> [success: bb3, unwind: bb15]
  }
  preds [bb1]
  succs [bb3, bb15]

bb3
  0: _9 = move (_11.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2385:15-2385:44)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2385:43-2385:44)
  2: _12 = AddWithOverflow(_4, _9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2383:23-2385:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2383:23-2385:44)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _9) -> [success: bb4, unwind: bb15]
  }
  preds [bb2]
  succs [bb4, bb15]

bb4
  0: _3 = move (_12.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2383:23-2385:44)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2385:43-2385:44)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2385:43-2385:44)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2386:15-2386:37)
  4: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2386:20-2386:36)
  5: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2386:20-2386:30)
  6: _15 = &(*((*_1).6: &[u8]))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2386:20-2386:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2386:20-2386:36)
      kind: _14 = core::slice::<impl [u8]>::len(move _15) -> [return: bb5, unwind: bb15]
  }
  preds [bb3]
  succs [bb5, bb15]

bb5
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2386:35-2386:36)
  1: _16 = AddWithOverflow(const 1_usize, _14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2386:15-2386:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2386:15-2386:37)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, move _14) -> [success: bb6, unwind: bb15]
  }
  preds [bb4]
  succs [bb6, bb15]

bb6
  0: _13 = move (_16.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2386:15-2386:37)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2386:36-2386:37)
  2: _17 = AddWithOverflow(_3, _13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2383:23-2386:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2383:23-2386:37)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _13) -> [success: bb7, unwind: bb15]
  }
  preds [bb5]
  succs [bb7, bb15]

bb7
  0: _2 = move (_17.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2383:23-2386:37)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2386:36-2386:37)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2386:36-2386:37)
  3: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2383:13-2383:20)
  4: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2387:9-2389:10)
  5: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2387:12-2387:25)
  6: _19 = ((*_1).1: bool)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2387:12-2387:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2387:12-2387:25)
      kind: switchInt(move _19) -> [0: bb13, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb13]

bb8
  0: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:20-2388:61)
  1: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:20-2388:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2388:20-2388:36)
      kind: _21 = core::mem::size_of::<u32>() -> [return: bb9, unwind: bb15]
  }
  preds [bb7]
  succs [bb9, bb15]

bb9
  0: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:39-2388:61)
  1: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:39-2388:55)
  2: _23 = &(*((*_1).5: &[u8]))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:39-2388:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2388:39-2388:61)
      kind: _22 = core::slice::<impl [u8]>::len(move _23) -> [return: bb10, unwind: bb15]
  }
  preds [bb8]
  succs [bb10, bb15]

bb10
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:60-2388:61)
  1: _24 = AddWithOverflow(_21, _22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:20-2388:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2388:20-2388:61)
      kind: assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", move _21, move _22) -> [success: bb11, unwind: bb15]
  }
  preds [bb9]
  succs [bb11, bb15]

bb11
  0: _20 = move (_24.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:20-2388:61)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:60-2388:61)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:60-2388:61)
  3: _25 = AddWithOverflow(_2, _20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:13-2388:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2388:13-2388:61)
      kind: assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _20) -> [success: bb12, unwind: bb15]
  }
  preds [bb10]
  succs [bb12, bb15]

bb12
  0: _2 = move (_25.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:13-2388:61)
  1: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2388:60-2388:61)
  2: _18 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2387:26-2389:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2387:9-2389:10)
      kind: goto -> bb14
  }
  preds [bb11]
  succs [bb14]

bb13
  0: _18 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2389:10-2389:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2387:9-2389:10)
      kind: goto -> bb14
  }
  preds [bb7]
  succs [bb14]

bb14
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2389:9-2389:10)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2389:9-2389:10)
  2: _0 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2390:9-2390:12)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2391:5-2391:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2391:6-2391:6)
      kind: return
  }
  preds [bb12, bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2382:5-2391:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb8, bb9, bb10, bb11]
  succs []

