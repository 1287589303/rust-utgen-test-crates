bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/error.rs:45:19-45:79)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/error.rs:45:63-45:70)
  2: _4 = _1
    SourceInfo(regex-automata/src/hybrid/error.rs:45:63-45:70)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/error.rs:45:72-45:77)
  4: _5 = _2
    SourceInfo(regex-automata/src/hybrid/error.rs:45:72-45:77)
  5: _3 = hybrid::error::BuildErrorKind::InsufficientCacheCapacity { minimum: move _4, given: move _5 }
    SourceInfo(regex-automata/src/hybrid/error.rs:45:19-45:79)
  6: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/error.rs:45:78-45:79)
  7: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/error.rs:45:78-45:79)
  8: _0 = hybrid::error::BuildError { kind: move _3 }
    SourceInfo(regex-automata/src/hybrid/error.rs:44:9-46:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/error.rs:46:9-46:10)
      kind: drop(_3) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/error.rs:46:9-46:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/error.rs:47:6-47:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/error.rs:40:5-47:6)
      kind: resume
  }
  preds [bb0]
  succs []

