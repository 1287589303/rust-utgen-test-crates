bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1986:13-1986:18)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:13-1987:33)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:13-1987:26)
  3: _5 = &mut ((*_1).11: core::option::Option<hybrid::dfa::SearchProgress>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:13-1987:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:13-1987:33)
      kind: _4 = core::option::Option::<hybrid::dfa::SearchProgress>::take(move _5) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:32-1987:33)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:41-1987:74)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:41-1987:74)
  3: _7 = const "no in-progress search to finish"
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:41-1987:74)
  4: _6 = &(*_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:41-1987:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:13-1987:75)
      kind: _3 = core::option::Option::<hybrid::dfa::SearchProgress>::expect(move _4, move _6) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:74-1987:75)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:74-1987:75)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1986:13-1986:18)
  3: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1987:75-1987:76)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1988:16-1988:18)
  5: _8 = _2
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1988:16-1988:18)
  6: (_3.1: usize) = move _8
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1988:9-1988:18)
  7: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1988:17-1988:18)
  8: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1989:32-1989:39)
  9: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1989:32-1989:33)
  10: _10 = &_3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1989:32-1989:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1989:32-1989:39)
      kind: _9 = hybrid::dfa::SearchProgress::len(move _10) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1989:38-1989:39)
  1: _11 = AddWithOverflow(((*_1).10: usize), _9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1989:9-1989:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1989:9-1989:39)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).10: usize), move _9) -> [success: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: ((*_1).10: usize) = move (_11.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1989:9-1989:39)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1989:38-1989:39)
  2: _0 = const ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1985:48-1990:6)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1990:5-1990:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1990:6-1990:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1985:5-1990:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

