bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/int.rs:89:13-89:34)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/int.rs:89:29-89:33)
  2: _3 = _1
    SourceInfo(regex-automata/src/util/int.rs:89:29-89:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/int.rs:89:13-89:34)
      kind: _2 = <usize as core::convert::TryFrom<u32>>::try_from(move _3) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/int.rs:89:33-89:34)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/int.rs:89:42-89:64)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/int.rs:89:42-89:64)
  3: _5 = const "u32 overflowed usize"
    SourceInfo(regex-automata/src/util/int.rs:89:42-89:64)
  4: _4 = &(*_5)
    SourceInfo(regex-automata/src/util/int.rs:89:42-89:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/int.rs:89:13-89:65)
      kind: _0 = core::result::Result::<usize, core::num::TryFromIntError>::expect(move _2, move _4) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/int.rs:89:64-89:65)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/util/int.rs:89:64-89:65)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/int.rs:95:5-95:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/int.rs:95:6-95:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/int.rs:86:5-95:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

