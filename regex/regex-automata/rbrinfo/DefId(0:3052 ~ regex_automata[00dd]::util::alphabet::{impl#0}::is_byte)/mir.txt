bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:159:9-159:21)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:159:9-159:13)
  2: _4 = _1
    SourceInfo(regex-automata/src/util/alphabet.rs:159:9-159:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:159:9-159:21)
      kind: _3 = util::alphabet::Unit::as_u8(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:159:20-159:21)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:159:36-159:49)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:159:36-159:49)
  3: _6 = &_2
    SourceInfo(regex-automata/src/util/alphabet.rs:159:36-159:49)
  4: _5 = {closure@regex-automata/src/util/alphabet.rs:159:36: 159:39} { byte: move _6 }
    SourceInfo(regex-automata/src/util/alphabet.rs:159:36-159:49)
  5: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:159:38-159:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:159:9-159:50)
      kind: _0 = core::option::Option::<u8>::map_or::<bool, {closure@regex-automata/src/util/alphabet.rs:159:36: 159:39}>(move _3, const false, move _5) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:159:49-159:50)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:159:49-159:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:160:6-160:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:158:5-160:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

