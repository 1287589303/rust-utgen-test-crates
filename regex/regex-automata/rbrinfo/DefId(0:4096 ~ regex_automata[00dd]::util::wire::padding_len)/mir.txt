bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/wire.rs:848:5-848:35)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/wire.rs:848:10-848:34)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/wire.rs:848:11-848:26)
  3: _4 = _1
    SourceInfo(regex-automata/src/util/wire.rs:848:11-848:26)
  4: _3 = BitAnd(move _4, const 3_usize)
    SourceInfo(regex-automata/src/util/wire.rs:848:10-848:34)
  5: StorageDead(_4)
    SourceInfo(regex-automata/src/util/wire.rs:848:33-848:34)
  6: _5 = SubWithOverflow(const 4_usize, _3)
    SourceInfo(regex-automata/src/util/wire.rs:848:5-848:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:848:5-848:35)
      kind: assert(!move (_5.1: bool), "attempt to compute `{} - {}`, which would overflow", const 4_usize, move _3) -> [success: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _2 = move (_5.0: usize)
    SourceInfo(regex-automata/src/util/wire.rs:848:5-848:35)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/wire.rs:848:34-848:35)
  2: _0 = BitAnd(move _2, const 3_usize)
    SourceInfo(regex-automata/src/util/wire.rs:848:5-848:42)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/util/wire.rs:848:41-848:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:849:2-849:2)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:847:1-849:2)
      kind: resume
  }
  preds [bb0]
  succs []

