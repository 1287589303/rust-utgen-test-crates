bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/automaton.rs:1970:9-1970:17)
  1: _4 = &(*(*_1))
    SourceInfo(regex-automata/src/dfa/automaton.rs:1970:9-1970:17)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/automaton.rs:1970:45-1970:50)
  3: _5 = &(*_2)
    SourceInfo(regex-automata/src/dfa/automaton.rs:1970:45-1970:50)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/automaton.rs:1970:52-1970:57)
  5: _6 = &mut (*_3)
    SourceInfo(regex-automata/src/dfa/automaton.rs:1970:52-1970:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/automaton.rs:1970:9-1970:58)
      kind: _0 = <A as dfa::automaton::Automaton>::try_search_overlapping_fwd(move _4, move _5, move _6) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/automaton.rs:1970:57-1970:58)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/automaton.rs:1970:57-1970:58)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/automaton.rs:1970:57-1970:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/automaton.rs:1971:6-1971:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/automaton.rs:1965:5-1971:6)
      kind: resume
  }
  preds [bb0]
  succs []

