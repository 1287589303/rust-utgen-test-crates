bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:128:9-128:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/reverse_inner.rs:128:25-128:50)
      kind: _2 = regex_syntax::hir::literal::Extractor::new() -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:128:9-128:22)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:129:5-129:49)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:129:5-129:14)
  3: _4 = &mut _2
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:129:5-129:14)
  4: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:129:20-129:48)
  5: _5 = regex_syntax::hir::literal::ExtractKind::Prefix
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:129:20-129:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/reverse_inner.rs:129:5-129:49)
      kind: _3 = regex_syntax::hir::literal::Extractor::kind(move _4, move _5) -> [return: bb2, unwind: bb10]
  }
  preds [bb0]
  succs [bb2, bb10]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:129:48-129:49)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:129:48-129:49)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:129:49-129:50)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:130:9-130:21)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:130:24-130:33)
  5: _7 = &_2
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:130:24-130:33)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:130:42-130:45)
  7: _8 = &(*_1)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:130:42-130:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/reverse_inner.rs:130:24-130:46)
      kind: _6 = regex_syntax::hir::literal::Extractor::extract(move _7, move _8) -> [return: bb3, unwind: bb10]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:130:45-130:46)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:130:45-130:46)
  2: FakeRead(ForLet(None), _6)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:130:9-130:21)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:144:5-144:28)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:144:5-144:13)
  5: _10 = &mut _6
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:144:5-144:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/reverse_inner.rs:144:5-144:28)
      kind: _9 = regex_syntax::hir::literal::Seq::make_inexact(move _10) -> [return: bb4, unwind: bb9]
  }
  preds [bb2]
  succs [bb4, bb9]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:144:27-144:28)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:144:28-144:29)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:145:5-145:49)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:145:5-145:13)
  4: _12 = &mut _6
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:145:5-145:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/reverse_inner.rs:145:5-145:49)
      kind: _11 = regex_syntax::hir::literal::Seq::optimize_for_prefix_by_preference(move _12) -> [return: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:145:48-145:49)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:145:49-145:50)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:151:5-152:20)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:151:5-151:13)
  4: _14 = &_6
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:151:5-151:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/reverse_inner.rs:151:5-152:20)
      kind: _13 = regex_syntax::hir::literal::Seq::literals(move _14) -> [return: bb6, unwind: bb9]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:152:19-152:20)
  1: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:153:19-153:72)
  2: _15 = {closure@regex-automata/src/meta/reverse_inner.rs:153:19: 153:25}
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:153:19-153:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/reverse_inner.rs:151:5-153:73)
      kind: _0 = core::option::Option::<&[regex_syntax::hir::literal::Literal]>::and_then::<util::prefilter::Prefilter, {closure@regex-automata/src/meta/reverse_inner.rs:153:19: 153:25}>(move _13, move _15) -> [return: bb7, unwind: bb9]
  }
  preds [bb5]
  succs [bb7, bb9]

bb7
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:153:72-153:73)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:153:72-153:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/reverse_inner.rs:154:1-154:2)
      kind: drop(_6) -> [return: bb8, unwind: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:154:1-154:2)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/meta/reverse_inner.rs:154:1-154:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/reverse_inner.rs:154:2-154:2)
      kind: return
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/reverse_inner.rs:154:1-154:2)
      kind: drop(_6) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb3, bb4, bb5, bb6]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/reverse_inner.rs:127:1-154:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb7, bb9]
  succs []

