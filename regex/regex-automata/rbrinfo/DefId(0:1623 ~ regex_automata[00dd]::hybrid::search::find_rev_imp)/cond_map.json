{
  "regex-automata/src/hybrid/search.rs:386:20:386:40": [
    {
      "Bool": {
        "Other": "prev_sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:411:23:411:37": [
    {
      "Bool": {
        "Other": "sid.is_match()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:432:12:432:31": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == input.start()",
          "lhs": "at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:417:20:417:28": [
    {
      "Bool": {
        "Other": "earliest"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:421:23:421:36": [
    {
      "Bool": {
        "Other": "sid.is_dead()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:428:31:428:47": [
    {
      "Bool": {
        "Other": "sid.is_unknown()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:319:19:319:47": [
    {
      "Try": "init_rev(dfa, cache, input)?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:369:19:369:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "at >= input.start()",
          "lhs": "at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:438:5:438:52": [
    {
      "Try": "eoi_rev(dfa, cache, input, &mut sid, &mut mat)?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:416:52:416:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at + 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:409:16:409:30": [
    {
      "Bool": {
        "Other": "sid.is_start()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:403:23:405:47": [
    {
      "Try": "dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:327:9:327:56": [
    {
      "Try": "eoi_rev(dfa, cache, input, &mut sid, &mut mat)?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:326:8:326:36": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "input.start() == input.end()",
          "lhs": "input.start()",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:393:20:393:35": [
    {
      "Bool": {
        "Other": "sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:380:20:380:35": [
    {
      "Bool": {
        "Other": "sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:340:12:340:27": [
    {
      "Bool": {
        "Other": "sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:372:24:372:61": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "at <= input.start().saturating_add(3)",
          "lhs": "at",
          "rhs": "input.start().saturating_add(3)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:408:12:408:27": [
    {
      "Bool": {
        "Other": "sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:371:20:371:40": [
    {
      "Bool": {
        "Other": "prev_sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:342:19:344:43": [
    {
      "Try": "dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:424:23:424:36": [
    {
      "Bool": {
        "Other": "sid.is_quit()"
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12:316:42": [
    {
      "Bool": {
        "Other": "$crate::cfg!(debug_assertions)"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:331:18:331:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input.end() - 1",
          "lhs": "input.end()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:401:16:401:32": [
    {
      "Bool": {
        "Other": "sid.is_unknown()"
      }
    }
  ]
}