bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1221:13-1221:18)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1221:33-1221:56)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1221:33-1221:45)
  3: _7 = &((*_1).4: util::alphabet::ByteClasses)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1221:33-1221:45)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1221:50-1221:55)
  5: _8 = _4
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1221:50-1221:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1221:33-1221:56)
      kind: _6 = util::alphabet::ByteClasses::get(move _7, move _8) -> [return: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1221:55-1221:56)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1221:55-1221:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1221:21-1221:57)
      kind: _5 = <usize as core::convert::From<u8>>::from(move _6) -> [return: bb2, unwind: bb13]
  }
  preds [bb0]
  succs [bb2, bb13]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1221:56-1221:57)
  1: FakeRead(ForLet(None), _5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1221:13-1221:18)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:13-1222:19)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:22-1222:49)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:22-1222:29)
  5: _11 = &_3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:22-1222:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:22-1222:49)
      kind: _10 = hybrid::id::LazyStateID::as_usize_untagged(move _11) -> [return: bb3, unwind: bb13]
  }
  preds [bb1]
  succs [bb3, bb13]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:48-1222:49)
  1: StorageLive(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:52-1222:57)
  2: _12 = _5
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:52-1222:57)
  3: _13 = AddWithOverflow(_10, _12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:22-1222:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:22-1222:57)
      kind: assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, move _12) -> [success: bb4, unwind: bb13]
  }
  preds [bb2]
  succs [bb4, bb13]

bb4
  0: _9 = move (_13.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:22-1222:57)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:56-1222:57)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:56-1222:57)
  3: FakeRead(ForLet(None), _9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1222:13-1222:19)
  4: StorageLive(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1223:13-1223:16)
  5: StorageLive(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1223:30-1223:38)
  6: StorageLive(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1223:19-1223:30)
  7: _16 = &((*_2).0: std::vec::Vec<hybrid::id::LazyStateID>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1223:19-1223:30)
  8: StorageLive(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1223:31-1223:37)
  9: _17 = _9
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1223:31-1223:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1223:30-1223:38)
      kind: _15 = <std::vec::Vec<hybrid::id::LazyStateID> as core::ops::Index<usize>>::index(move _16, move _17) -> [return: bb5, unwind: bb13]
  }
  preds [bb3]
  succs [bb5, bb13]

bb5
  0: _14 = (*_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1223:19-1223:38)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1223:37-1223:38)
  2: StorageDead(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1223:37-1223:38)
  3: FakeRead(ForLet(None), _14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1223:13-1223:16)
  4: StorageDead(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1223:38-1223:39)
  5: StorageLive(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1224:9-1226:10)
  6: StorageLive(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1224:13-1224:29)
  7: StorageLive(_20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1224:13-1224:16)
  8: _20 = &_14
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1224:13-1224:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1224:13-1224:29)
      kind: _19 = hybrid::id::LazyStateID::is_unknown(move _20) -> [return: bb6, unwind: bb13]
  }
  preds [bb4]
  succs [bb6, bb13]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1224:13-1224:29)
      kind: switchInt(move _19) -> [0: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1224:28-1224:29)
  1: _18 = const ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1226:10-1226:10)
  2: StorageDead(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1226:9-1226:10)
  3: StorageDead(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1226:9-1226:10)
  4: StorageLive(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1227:13-1227:17)
  5: StorageLive(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1227:39-1227:44)
  6: _24 = _4
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1227:39-1227:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1227:20-1227:45)
      kind: _23 = util::alphabet::Unit::u8(move _24) -> [return: bb9, unwind: bb13]
  }
  preds [bb6]
  succs [bb9, bb13]

bb8
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1224:28-1224:29)
  1: StorageLive(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1225:23-1225:26)
  2: _22 = _14
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1225:23-1225:26)
  3: _0 = core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::Ok(move _22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1225:20-1225:27)
  4: StorageDead(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1225:26-1225:27)
  5: StorageDead(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1226:9-1226:10)
  6: StorageDead(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1226:9-1226:10)
  7: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1229:5-1229:6)
  8: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1229:5-1229:6)
  9: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1229:5-1229:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1229:6-1229:6)
      kind: goto -> bb12
  }
  preds [bb6]
  succs [bb12]

bb9
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1227:44-1227:45)
  1: FakeRead(ForLet(None), _23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1227:13-1227:17)
  2: StorageLive(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:9-1228:31)
  3: StorageLive(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:9-1228:31)
  4: StorageLive(_27)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:19-1228:23)
  5: _27 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:19-1228:23)
  6: StorageLive(_28)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:25-1228:30)
  7: _28 = &mut (*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:25-1228:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:9-1228:31)
      kind: _26 = hybrid::dfa::Lazy::<'_, '_>::new(move _27, move _28) -> [return: bb10, unwind: bb13]
  }
  preds [bb7]
  succs [bb10, bb13]

bb10
  0: _25 = &mut _26
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:9-1228:31)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:30-1228:31)
  2: StorageDead(_27)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:30-1228:31)
  3: StorageLive(_29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:49-1228:56)
  4: _29 = _3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:49-1228:56)
  5: StorageLive(_30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:58-1228:62)
  6: _30 = _23
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:58-1228:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:9-1228:63)
      kind: _0 = hybrid::dfa::Lazy::<'_, '_>::cache_next_state(move _25, move _29, move _30) -> [return: bb11, unwind: bb13]
  }
  preds [bb9]
  succs [bb11, bb13]

bb11
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:62-1228:63)
  1: StorageDead(_29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:62-1228:63)
  2: StorageDead(_25)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1228:62-1228:63)
  3: StorageDead(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1229:5-1229:6)
  4: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1229:5-1229:6)
  5: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1229:5-1229:6)
  6: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1229:5-1229:6)
  7: StorageDead(_26)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:1229:5-1229:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1229:6-1229:6)
      kind: goto -> bb12
  }
  preds [bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1229:6-1229:6)
      kind: return
  }
  preds [bb8, bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:1215:5-1229:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb7, bb9, bb10]
  succs []

