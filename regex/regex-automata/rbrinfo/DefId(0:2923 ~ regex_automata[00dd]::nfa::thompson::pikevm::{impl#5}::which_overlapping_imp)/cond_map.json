{
  "regex-automata/src/nfa/thompson/pikevm.rs:1429:19:1429:46": [
    {
      "For": {
        "iter_var": "at",
        "iter_range": "input.start()..=input.end()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1448:36:1448:56": [
    {
      "Bool": {
        "Other": "input.get_earliest()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1439:32:1439:42": [
    {
      "Bool": {
        "Other": "allmatches"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1435:32:1435:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "at > input.start()",
          "lhs": "at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1439:17:1439:28": [
    {
      "Bool": {
        "Other": "any_matches"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1423:42:1423:66": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/pikevm.rs:1423:42:1423:66",
        "match_str": "self.start_config(input)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/pikevm.rs:1425:13:1425:25": {
            "pat": {
              "pat_str": "Some(config)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1425:29:1425:35"
          },
          "regex-automata/src/nfa/thompson/pikevm.rs:1424:13:1424:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1424:21:1424:27"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1432:36:1432:46": [
    {
      "Bool": {
        "Other": "allmatches"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1435:20:1435:28": [
    {
      "Bool": {
        "Other": "anchored"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1412:12:1412:27": [
    {
      "Bool": {
        "Other": "input.is_done()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1431:16:1431:35": [
    {
      "Bool": {
        "Other": "curr.set.is_empty()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1448:16:1448:32": [
    {
      "Bool": {
        "Other": "patset.is_full()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1432:20:1432:31": [
    {
      "Bool": {
        "Other": "any_matches"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1416:13:1416:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "input.haystack().len() < core::usize::MAX",
          "lhs": "input.haystack().len()",
          "rhs": "core::usize::MAX",
          "cmp_with_int": false
        }
      }
    }
  ]
}