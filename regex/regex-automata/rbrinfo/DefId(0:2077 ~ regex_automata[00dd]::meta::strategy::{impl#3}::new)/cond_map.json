{
  "regex-automata/src/meta/strategy.rs:494:17:494:43": [
    {
      "Bool": {
        "Other": "info.config().get_hybrid()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:481:13:481:73": [
    {
      "Try": "wrappers::BoundedBacktracker::new(&info, pre.clone(), &nfa)?"
    }
  ],
  "regex-automata/src/meta/strategy.rs:469:19:472:39": [
    {
      "Try": "thompson::Compiler::new()\n            .configure(thompson_config.clone())\n            .build_many_from_hir(hirs)\n            .map_err(BuildError::nfa)?"
    }
  ],
  "regex-automata/src/meta/strategy.rs:494:48:494:71": [
    {
      "Bool": {
        "Other": "info.config().get_dfa()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:507:30:520:47": [
    {
      "Try": "thompson::Compiler::new()\n                    // Currently, reverse NFAs don't support capturing groups,\n                    // so we MUST disable them. But even if we didn't have to,\n                    // we would, because nothing in this crate does anything\n                    // useful with capturing groups in reverse. And of course,\n                    // the lazy DFA ignores capturing groups in all cases.\n                    .configure(\n                        thompson_config\n                            .clone()\n                            .which_captures(WhichCaptures::None)\n                            .reverse(true),\n                    )\n                    .build_many_from_hir(hirs)\n                    .map_err(BuildError::nfa)?"
    }
  ],
  "regex-automata/src/meta/strategy.rs:479:22:479:70": [
    {
      "Try": "wrappers::PikeVM::new(&info, pre.clone(), &nfa)?"
    }
  ],
  "regex-automata/src/meta/strategy.rs:526:34:526:60": [
    {
      "Bool": {
        "Other": "info.config().get_hybrid()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:521:31:521:54": [
    {
      "Bool": {
        "Other": "info.config().get_dfa()"
      }
    }
  ],
  "regex-automata/src/meta/strategy.rs:528:27:528:40": [
    {
      "Bool": {
        "Other": "dfa.is_some()"
      }
    }
  ]
}