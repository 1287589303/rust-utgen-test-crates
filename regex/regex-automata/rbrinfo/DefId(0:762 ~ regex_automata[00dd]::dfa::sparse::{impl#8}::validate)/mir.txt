bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1388:13-1388:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1388:28-1388:39)
      kind: _3 = dfa::sparse::Seen::new() -> [return: bb1, unwind: bb91]
  }
  preds []
  succs [bb1, bb91]

bb1
  0: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1388:13-1388:25)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1392:13-1392:20)
  2: _4 = const 0_usize
    SourceInfo(regex-automata/src/dfa/sparse.rs:1392:23-1392:24)
  3: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1392:13-1392:20)
  4: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1395:13-1395:19)
  5: _5 = const dfa::DEAD
    SourceInfo(regex-automata/src/dfa/sparse.rs:1395:22-1395:26)
  6: FakeRead(ForLet(None), _5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1395:13-1395:19)
  7: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:9-1426:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1396:9-1426:10)
      kind: goto -> bb2
  }
  preds [bb0]
  succs [bb2]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1396:9-1426:10)
      kind: falseUnwind -> [real: bb3, unwind: bb90]
  }
  preds [bb1, bb55]
  succs [bb3, bb90]

bb3
  0: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:15-1396:50)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:15-1396:28)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:15-1396:17)
  3: _10 = &_5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:15-1396:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1396:15-1396:28)
      kind: _9 = util::primitives::StateID::as_usize(move _10) -> [return: bb4, unwind: bb90]
  }
  preds [bb2]
  succs [bb4, bb90]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:27-1396:28)
  1: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:31-1396:50)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:31-1396:44)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:31-1396:44)
  4: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:31-1396:35)
  5: _14 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:31-1396:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1396:31-1396:44)
      kind: _13 = dfa::sparse::Transitions::<T>::sparse(move _14) -> [return: bb5, unwind: bb90]
  }
  preds [bb3]
  succs [bb5, bb90]

bb5
  0: _12 = &(*_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:31-1396:44)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:43-1396:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1396:31-1396:50)
      kind: _11 = core::slice::<impl [u8]>::len(move _12) -> [return: bb6, unwind: bb90]
  }
  preds [bb4]
  succs [bb6, bb90]

bb6
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:49-1396:50)
  1: _8 = Lt(move _9, move _11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:15-1396:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1396:15-1396:50)
      kind: switchInt(move _8) -> [0: bb56, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb56]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:49-1396:50)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:49-1396:50)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:49-1396:50)
  3: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1400:13-1413:14)
  4: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1400:16-1400:39)
  5: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1400:16-1400:18)
  6: _17 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1400:16-1400:18)
  7: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1400:36-1400:38)
  8: _18 = _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1400:36-1400:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1400:16-1400:39)
      kind: _16 = dfa::special::Special::is_special_state(move _17, move _18) -> [return: bb8, unwind: bb90]
  }
  preds [bb6]
  succs [bb8, bb90]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1400:16-1400:39)
      kind: switchInt(move _16) -> [0: bb28, otherwise: bb9]
  }
  preds [bb7]
  succs [bb9, bb28]

bb9
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1400:38-1400:39)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1400:38-1400:39)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1401:21-1401:40)
  3: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1401:43-1401:63)
  4: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1401:43-1401:45)
  5: _21 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1401:43-1401:45)
  6: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1401:60-1401:62)
  7: _22 = _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1401:60-1401:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1401:43-1401:63)
      kind: _20 = dfa::special::Special::is_dead_state(move _21, move _22) -> [return: bb10, unwind: bb90]
  }
  preds [bb8]
  succs [bb10, bb90]

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1401:43-1401:63)
      kind: switchInt(move _20) -> [0: bb12, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb12]

bb11
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1401:62-1401:63)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1401:62-1401:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1401:43-1405:45)
      kind: goto -> bb21
  }
  preds [bb10]
  succs [bb21]

bb12
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1401:62-1401:63)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1401:62-1401:63)
  2: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1402:24-1402:44)
  3: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1402:24-1402:26)
  4: _24 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1402:24-1402:26)
  5: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1402:41-1402:43)
  6: _25 = _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1402:41-1402:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1402:24-1402:44)
      kind: _23 = dfa::special::Special::is_quit_state(move _24, move _25) -> [return: bb13, unwind: bb90]
  }
  preds [bb10]
  succs [bb13, bb90]

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1402:24-1402:44)
      kind: switchInt(move _23) -> [0: bb15, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb15]

bb14
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1402:43-1402:44)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1402:43-1402:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1401:43-1405:45)
      kind: goto -> bb21
  }
  preds [bb13]
  succs [bb21]

bb15
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1402:43-1402:44)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1402:43-1402:44)
  2: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1403:24-1403:45)
  3: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1403:24-1403:26)
  4: _27 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1403:24-1403:26)
  5: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1403:42-1403:44)
  6: _28 = _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1403:42-1403:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1403:24-1403:45)
      kind: _26 = dfa::special::Special::is_match_state(move _27, move _28) -> [return: bb16, unwind: bb90]
  }
  preds [bb13]
  succs [bb16, bb90]

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1403:24-1403:45)
      kind: switchInt(move _26) -> [0: bb18, otherwise: bb17]
  }
  preds [bb15]
  succs [bb17, bb18]

bb17
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1403:44-1403:45)
  1: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1403:44-1403:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1401:43-1405:45)
      kind: goto -> bb21
  }
  preds [bb16]
  succs [bb21]

bb18
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1403:44-1403:45)
  1: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1403:44-1403:45)
  2: StorageLive(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1404:24-1404:45)
  3: StorageLive(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1404:24-1404:26)
  4: _30 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1404:24-1404:26)
  5: StorageLive(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1404:42-1404:44)
  6: _31 = _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1404:42-1404:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1404:24-1404:45)
      kind: _29 = dfa::special::Special::is_start_state(move _30, move _31) -> [return: bb19, unwind: bb90]
  }
  preds [bb16]
  succs [bb19, bb90]

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1404:24-1404:45)
      kind: switchInt(move _29) -> [0: bb22, otherwise: bb20]
  }
  preds [bb18]
  succs [bb20, bb22]

bb20
  0: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1404:44-1404:45)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1404:44-1404:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1401:43-1405:45)
      kind: goto -> bb21
  }
  preds [bb19]
  succs [bb21]

bb21
  0: _19 = const true
    SourceInfo(regex-automata/src/dfa/sparse.rs:1401:43-1405:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1401:43-1405:45)
      kind: goto -> bb24
  }
  preds [bb11, bb14, bb17, bb20]
  succs [bb24]

bb22
  0: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1404:44-1404:45)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1404:44-1404:45)
  2: StorageLive(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1405:24-1405:26)
  3: _32 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1405:24-1405:26)
  4: StorageLive(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1405:42-1405:44)
  5: _33 = _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1405:42-1405:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1405:24-1405:45)
      kind: _19 = dfa::special::Special::is_accel_state(move _32, move _33) -> [return: bb23, unwind: bb90]
  }
  preds [bb19]
  succs [bb23, bb90]

bb23
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1405:44-1405:45)
  1: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1405:44-1405:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1401:43-1405:45)
      kind: goto -> bb24
  }
  preds [bb22]
  succs [bb24]

bb24
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1405:44-1405:45)
  1: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1405:44-1405:45)
  2: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1405:44-1405:45)
  3: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1405:44-1405:45)
  4: FakeRead(ForLet(None), _19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1401:21-1401:40)
  5: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1406:21-1406:40)
  6: _34 = _19
    SourceInfo(regex-automata/src/dfa/sparse.rs:1406:21-1406:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1406:21-1406:40)
      kind: switchInt(move _34) -> [0: bb25, otherwise: bb27]
  }
  preds [bb21, bb23]
  succs [bb25, bb27]

bb25
  0: StorageLive(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1408:32-1411:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1408:32-1411:22)
      kind: _36 = util::wire::DeserializeError::generic(const "found sparse state tagged as special but wasn't actually special") -> [return: bb26, unwind: bb90]
  }
  preds [bb24]
  succs [bb26, bb90]

bb26
  0: _0 = core::result::Result::<dfa::sparse::Seen, util::wire::DeserializeError>::Err(move _36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1408:28-1411:23)
  1: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1411:22-1411:23)
  2: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1412:17-1412:18)
  3: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1413:13-1413:14)
  4: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1413:13-1413:14)
  5: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1413:13-1413:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb86
  }
  preds [bb25]
  succs [bb86]

bb27
  0: _15 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1412:18-1412:18)
  1: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1412:17-1412:18)
  2: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1413:13-1413:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1400:13-1413:14)
      kind: goto -> bb29
  }
  preds [bb24]
  succs [bb29]

bb28
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1400:38-1400:39)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1400:38-1400:39)
  2: _15 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1413:14-1413:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1400:13-1413:14)
      kind: goto -> bb29
  }
  preds [bb8]
  succs [bb29]

bb29
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1413:13-1413:14)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1413:13-1413:14)
  2: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:17-1414:22)
  3: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:48)
  4: StorageLive(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:47)
  5: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:29)
  6: _40 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:29)
  7: StorageLive(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:40-1414:42)
  8: _41 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:40-1414:42)
  9: StorageLive(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:44-1414:46)
  10: _42 = _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:44-1414:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:47)
      kind: _39 = dfa::sparse::Transitions::<T>::try_state(move _40, move _41, move _42) -> [return: bb30, unwind: bb90]
  }
  preds [bb27, bb28]
  succs [bb30, bb90]

bb30
  0: StorageDead(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:46-1414:47)
  1: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:46-1414:47)
  2: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:46-1414:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:48)
      kind: _38 = <core::result::Result<dfa::sparse::State<'_>, util::wire::DeserializeError> as core::ops::Try>::branch(move _39) -> [return: bb31, unwind: bb90]
  }
  preds [bb29]
  succs [bb31, bb90]

bb31
  0: StorageDead(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:47-1414:48)
  1: PlaceMention(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:48)
  2: _43 = discriminant(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:48)
      kind: switchInt(move _43) -> [0: bb34, 1: bb33, otherwise: bb32]
  }
  preds [bb30]
  succs [bb32, bb33, bb34]

bb32
  0: FakeRead(ForMatchedPlace(None), _38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:48)
      kind: unreachable
  }
  preds [bb31]
  succs []

bb33
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1414:47-1414:48)
      kind: falseEdge -> [real: bb35, imaginary: bb34]
  }
  preds [bb31]
  succs [bb34, bb35]

bb34
  0: StorageLive(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:48)
  1: _47 = move ((_38 as Continue).0: dfa::sparse::State<'_>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:48)
  2: _37 = move _47
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:48)
  3: StorageDead(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:47-1414:48)
  4: FakeRead(ForLet(None), _37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:17-1414:22)
  5: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:48-1414:49)
  6: StorageLive(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1415:13-1415:32)
  7: StorageLive(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1415:13-1415:21)
  8: _49 = &mut _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1415:13-1415:21)
  9: StorageLive(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1415:29-1415:31)
  10: _50 = _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1415:29-1415:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1415:13-1415:32)
      kind: _48 = dfa::sparse::Seen::insert(move _49, move _50) -> [return: bb37, unwind: bb90]
  }
  preds [bb31, bb33]
  succs [bb37, bb90]

bb35
  0: StorageLive(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:47-1414:48)
  1: _44 = move ((_38 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:47-1414:48)
  2: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:47-1414:48)
  3: _46 = move _44
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:47-1414:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1414:25-1414:48)
      kind: _0 = <core::result::Result<dfa::sparse::Seen, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _46) -> [return: bb36, unwind: bb90]
  }
  preds [bb33]
  succs [bb36, bb90]

bb36
  0: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:47-1414:48)
  1: StorageDead(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:47-1414:48)
  2: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1414:48-1414:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb85
  }
  preds [bb35]
  succs [bb85]

bb37
  0: StorageDead(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1415:31-1415:32)
  1: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1415:31-1415:32)
  2: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1415:32-1415:33)
  3: StorageLive(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:16)
  4: StorageLive(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:16)
  5: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:15)
  6: StorageLive(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1421:16)
  7: StorageLive(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:15)
  8: StorageLive(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:15)
  9: StorageLive(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:14)
  10: StorageLive(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1418:17-1418:30)
  11: StorageLive(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1418:17-1418:19)
  12: _59 = &_5
    SourceInfo(regex-automata/src/dfa/sparse.rs:1418:17-1418:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1418:17-1418:30)
      kind: _58 = util::primitives::StateID::as_usize(move _59) -> [return: bb38, unwind: bb90]
  }
  preds [bb34]
  succs [bb38, bb90]

bb38
  0: StorageDead(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1418:29-1418:30)
  1: StorageLive(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1419:17-1419:37)
  2: StorageLive(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1419:17-1419:22)
  3: _61 = &_37
    SourceInfo(regex-automata/src/dfa/sparse.rs:1419:17-1419:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1419:17-1419:37)
      kind: _60 = dfa::sparse::State::<'_>::write_to_len(move _61) -> [return: bb39, unwind: bb90]
  }
  preds [bb37]
  succs [bb39, bb90]

bb39
  0: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1419:36-1419:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:14)
      kind: _57 = util::wire::add(move _58, move _60, const "next state ID offset") -> [return: bb40, unwind: bb90]
  }
  preds [bb38]
  succs [bb40, bb90]

bb40
  0: StorageDead(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1421:13-1421:14)
  1: StorageDead(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1421:13-1421:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:15)
      kind: _56 = <core::result::Result<usize, util::wire::DeserializeError> as core::ops::Try>::branch(move _57) -> [return: bb41, unwind: bb90]
  }
  preds [bb39]
  succs [bb41, bb90]

bb41
  0: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1421:14-1421:15)
  1: PlaceMention(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:15)
  2: _62 = discriminant(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:15)
      kind: switchInt(move _62) -> [0: bb44, 1: bb43, otherwise: bb42]
  }
  preds [bb40]
  succs [bb42, bb43, bb44]

bb42
  0: FakeRead(ForMatchedPlace(None), _56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:15)
      kind: unreachable
  }
  preds [bb41]
  succs []

bb43
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1421:14-1421:15)
      kind: falseEdge -> [real: bb45, imaginary: bb44]
  }
  preds [bb41]
  succs [bb44, bb45]

bb44
  0: StorageLive(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:15)
  1: _66 = ((_56 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:15)
  2: _55 = _66
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:15)
  3: StorageDead(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1421:14-1421:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1421:16)
      kind: _54 = util::primitives::StateID::new(move _55) -> [return: bb47, unwind: bb90]
  }
  preds [bb41, bb43]
  succs [bb47, bb90]

bb45
  0: StorageLive(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1421:14-1421:15)
  1: _63 = move ((_56 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1421:14-1421:15)
  2: StorageLive(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1421:14-1421:15)
  3: _65 = move _63
    SourceInfo(regex-automata/src/dfa/sparse.rs:1421:14-1421:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1417:31-1421:15)
      kind: _0 = <core::result::Result<dfa::sparse::Seen, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _65) -> [return: bb46, unwind: bb90]
  }
  preds [bb43]
  succs [bb46, bb90]

bb46
  0: StorageDead(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1421:14-1421:15)
  1: StorageDead(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1421:14-1421:15)
  2: StorageDead(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1421:15-1421:16)
  3: StorageDead(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:14-1424:15)
  4: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:15-1424:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb84
  }
  preds [bb45]
  succs [bb84]

bb47
  0: StorageDead(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1421:15-1421:16)
  1: StorageLive(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1422:22-1424:14)
  2: _67 = {closure@regex-automata/src/dfa/sparse.rs:1422:22: 1422:27}
    SourceInfo(regex-automata/src/dfa/sparse.rs:1422:22-1424:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:15)
      kind: _53 = core::result::Result::<util::primitives::StateID, util::primitives::StateIDError>::map_err::<util::wire::DeserializeError, {closure@regex-automata/src/dfa/sparse.rs:1422:22: 1422:27}>(move _54, move _67) -> [return: bb48, unwind: bb90]
  }
  preds [bb44]
  succs [bb48, bb90]

bb48
  0: StorageDead(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:14-1424:15)
  1: StorageDead(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:14-1424:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:16)
      kind: _52 = <core::result::Result<util::primitives::StateID, util::wire::DeserializeError> as core::ops::Try>::branch(move _53) -> [return: bb49, unwind: bb90]
  }
  preds [bb47]
  succs [bb49, bb90]

bb49
  0: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:15-1424:16)
  1: PlaceMention(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:16)
  2: _68 = discriminant(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:16)
      kind: switchInt(move _68) -> [0: bb52, 1: bb51, otherwise: bb50]
  }
  preds [bb48]
  succs [bb50, bb51, bb52]

bb50
  0: FakeRead(ForMatchedPlace(None), _52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:16)
      kind: unreachable
  }
  preds [bb49]
  succs []

bb51
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1424:15-1424:16)
      kind: falseEdge -> [real: bb53, imaginary: bb52]
  }
  preds [bb49]
  succs [bb52, bb53]

bb52
  0: StorageLive(_72)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:16)
  1: _72 = ((_52 as Continue).0: util::primitives::StateID)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:16)
  2: _51 = _72
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:16)
  3: StorageDead(_72)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:15-1424:16)
  4: _5 = move _51
    SourceInfo(regex-automata/src/dfa/sparse.rs:1417:13-1424:16)
  5: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:15-1424:16)
  6: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:16-1424:17)
  7: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:16-1424:17)
  8: _73 = AddWithOverflow(_4, const 1_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1425:13-1425:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1425:13-1425:21)
      kind: assert(!move (_73.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, const 1_usize) -> [success: bb55, unwind: bb90]
  }
  preds [bb49, bb51]
  succs [bb55, bb90]

bb53
  0: StorageLive(_69)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:15-1424:16)
  1: _69 = move ((_52 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:15-1424:16)
  2: StorageLive(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:15-1424:16)
  3: _71 = move _69
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:15-1424:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1417:18-1424:16)
      kind: _0 = <core::result::Result<dfa::sparse::Seen, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _71) -> [return: bb54, unwind: bb90]
  }
  preds [bb51]
  succs [bb54, bb90]

bb54
  0: StorageDead(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:15-1424:16)
  1: StorageDead(_69)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:15-1424:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb84
  }
  preds [bb53]
  succs [bb84]

bb55
  0: _4 = move (_73.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1425:13-1425:21)
  1: _7 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:51-1426:10)
  2: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1426:9-1426:10)
  3: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1426:9-1426:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1396:9-1426:10)
      kind: goto -> bb2
  }
  preds [bb52]
  succs [bb2]

bb56
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:49-1396:50)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:49-1396:50)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:49-1396:50)
  3: StorageLive(_75)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:9-1426:10)
  4: _6 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1396:9-1426:10)
  5: StorageDead(_75)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1426:9-1426:10)
  6: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1426:9-1426:10)
  7: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1426:9-1426:10)
  8: StorageLive(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:9-1459:10)
  9: StorageLive(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  10: StorageLive(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  11: StorageLive(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:26)
  12: _80 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
      kind: _79 = dfa::sparse::Transitions::<T>::states(move _80) -> [return: bb57, unwind: bb90]
  }
  preds [bb6]
  succs [bb57, bb90]

bb57
  0: StorageDead(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:34-1436:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
      kind: _78 = <dfa::sparse::StateIter<'_, T> as core::iter::IntoIterator>::into_iter(move _79) -> [return: bb58, unwind: bb90]
  }
  preds [bb56]
  succs [bb58, bb90]

bb58
  0: StorageDead(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:34-1436:35)
  1: PlaceMention(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  2: StorageLive(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  3: _81 = move _78
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1436:9-1459:10)
      kind: goto -> bb59
  }
  preds [bb57]
  succs [bb59]

bb59
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1436:9-1459:10)
      kind: falseUnwind -> [real: bb60, unwind: bb90]
  }
  preds [bb58, bb73]
  succs [bb60, bb90]

bb60
  0: StorageLive(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  1: StorageLive(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  2: StorageLive(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  3: StorageLive(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  4: _85 = &mut _81
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  5: _84 = &mut (*_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
      kind: _83 = <dfa::sparse::StateIter<'_, T> as core::iter::Iterator>::next(move _84) -> [return: bb61, unwind: bb90]
  }
  preds [bb59]
  succs [bb61, bb90]

bb61
  0: StorageDead(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:34-1436:35)
  1: PlaceMention(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  2: _86 = discriminant(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
      kind: switchInt(move _86) -> [0: bb63, 1: bb64, otherwise: bb62]
  }
  preds [bb60]
  succs [bb62, bb63, bb64]

bb62
  0: FakeRead(ForMatchedPlace(None), _83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1436:22-1436:35)
      kind: unreachable
  }
  preds [bb61]
  succs []

bb63
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1436:9-1459:10)
      kind: falseEdge -> [real: bb65, imaginary: bb64]
  }
  preds [bb61]
  succs [bb64, bb65]

bb64
  0: StorageLive(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:13-1436:18)
  1: _88 = move ((_83 as Some).0: dfa::sparse::State<'_>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:13-1436:18)
  2: StorageLive(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  3: StorageLive(_90)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  4: StorageLive(_91)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:25-1438:37)
  5: _91 = (_88.2: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:25-1438:37)
  6: _90 = core::ops::Range::<usize> { start: const 0_usize, end: move _91 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  7: StorageDead(_91)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:36-1438:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
      kind: _89 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _90) -> [return: bb66, unwind: bb90]
  }
  preds [bb61, bb63]
  succs [bb66, bb90]

bb65
  0: _77 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:9-1459:10)
  1: StorageDead(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  2: StorageDead(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  3: StorageDead(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  4: StorageDead(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  5: StorageDead(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  6: StorageDead(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  7: StorageLive(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1460:9-1464:10)
  8: StorageLive(_110)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1460:12-1460:33)
  9: StorageLive(_111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1460:12-1460:15)
  10: _111 = _4
    SourceInfo(regex-automata/src/dfa/sparse.rs:1460:12-1460:15)
  11: StorageLive(_112)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1460:19-1460:33)
  12: _112 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1460:19-1460:33)
  13: _110 = Ne(move _111, move _112)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1460:12-1460:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1460:12-1460:33)
      kind: switchInt(move _110) -> [0: bb80, otherwise: bb79]
  }
  preds [bb63]
  succs [bb79, bb80]

bb66
  0: StorageDead(_90)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:36-1438:37)
  1: PlaceMention(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  2: StorageLive(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  3: _92 = move _89
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1438:13-1458:14)
      kind: goto -> bb67
  }
  preds [bb64]
  succs [bb67]

bb67
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1438:13-1458:14)
      kind: falseUnwind -> [real: bb68, unwind: bb90]
  }
  preds [bb66, bb76]
  succs [bb68, bb90]

bb68
  0: StorageLive(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  1: StorageLive(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  2: StorageLive(_95)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  3: StorageLive(_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  4: _96 = &mut _92
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  5: _95 = &mut (*_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
      kind: _94 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _95) -> [return: bb69, unwind: bb90]
  }
  preds [bb67]
  succs [bb69, bb90]

bb69
  0: StorageDead(_95)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:36-1438:37)
  1: PlaceMention(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  2: _97 = discriminant(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
      kind: switchInt(move _97) -> [0: bb71, 1: bb72, otherwise: bb70]
  }
  preds [bb68]
  succs [bb70, bb71, bb72]

bb70
  0: FakeRead(ForMatchedPlace(None), _94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1438:22-1438:37)
      kind: unreachable
  }
  preds [bb69]
  succs []

bb71
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1438:13-1458:14)
      kind: falseEdge -> [real: bb73, imaginary: bb72]
  }
  preds [bb69]
  succs [bb72, bb73]

bb72
  0: StorageLive(_99)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:17-1438:18)
  1: _99 = ((_94 as Some).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:17-1438:18)
  2: StorageLive(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1439:21-1439:23)
  3: StorageLive(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1439:26-1439:31)
  4: _101 = &_88
    SourceInfo(regex-automata/src/dfa/sparse.rs:1439:26-1439:31)
  5: StorageLive(_102)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1439:40-1439:41)
  6: _102 = _99
    SourceInfo(regex-automata/src/dfa/sparse.rs:1439:40-1439:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1439:26-1439:42)
      kind: _100 = dfa::sparse::State::<'_>::next_at(move _101, move _102) -> [return: bb74, unwind: bb90]
  }
  preds [bb69, bb71]
  succs [bb74, bb90]

bb73
  0: _82 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:13-1458:14)
  1: StorageDead(_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  2: StorageDead(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  3: StorageDead(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  4: StorageDead(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  5: StorageDead(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  6: StorageDead(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  7: StorageDead(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  8: StorageDead(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  9: StorageDead(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  10: _7 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1436:9-1459:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1436:9-1459:10)
      kind: goto -> bb59
  }
  preds [bb71]
  succs [bb59]

bb74
  0: StorageDead(_102)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1439:41-1439:42)
  1: StorageDead(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1439:41-1439:42)
  2: FakeRead(ForLet(None), _100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1439:21-1439:23)
  3: StorageLive(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:25-1451:47)
  4: StorageLive(_104)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:25-1451:33)
  5: _104 = &_3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:25-1451:33)
  6: StorageLive(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:43-1451:46)
  7: StorageLive(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:43-1451:46)
  8: _106 = &_100
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:43-1451:46)
  9: _105 = &(*_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:43-1451:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1451:25-1451:47)
      kind: _103 = dfa::sparse::Seen::contains(move _104, move _105) -> [return: bb75, unwind: bb90]
  }
  preds [bb72]
  succs [bb75, bb90]

bb75
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1451:25-1451:47)
      kind: switchInt(move _103) -> [0: bb77, otherwise: bb76]
  }
  preds [bb74]
  succs [bb76, bb77]

bb76
  0: StorageDead(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:46-1451:47)
  1: StorageDead(_104)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:46-1451:47)
  2: StorageDead(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:46-1451:47)
  3: _93 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1456:22-1456:22)
  4: StorageDead(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1456:21-1456:22)
  5: StorageDead(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  6: StorageDead(_99)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  7: StorageDead(_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  8: StorageDead(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  9: StorageDead(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  10: _7 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1438:13-1458:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1438:13-1458:14)
      kind: goto -> bb67
  }
  preds [bb75]
  succs [bb67]

bb77
  0: StorageDead(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:46-1451:47)
  1: StorageDead(_104)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:46-1451:47)
  2: StorageDead(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1451:46-1451:47)
  3: StorageLive(_108)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1452:36-1455:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1452:36-1455:26)
      kind: _108 = util::wire::DeserializeError::generic(const "found transition that points to a non-existent state") -> [return: bb78, unwind: bb90]
  }
  preds [bb75]
  succs [bb78, bb90]

bb78
  0: _0 = core::result::Result::<dfa::sparse::Seen, util::wire::DeserializeError>::Err(move _108)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1452:32-1455:27)
  1: StorageDead(_108)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1455:26-1455:27)
  2: StorageDead(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1456:21-1456:22)
  3: StorageDead(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  4: StorageDead(_99)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  5: StorageDead(_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  6: StorageDead(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  7: StorageDead(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  8: StorageDead(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  9: StorageDead(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1458:13-1458:14)
  10: StorageDead(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  11: StorageDead(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  12: StorageDead(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  13: StorageDead(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  14: StorageDead(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  15: StorageDead(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  16: StorageDead(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1459:9-1459:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb87
  }
  preds [bb77]
  succs [bb87]

bb79
  0: StorageDead(_112)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1460:32-1460:33)
  1: StorageDead(_111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1460:32-1460:33)
  2: StorageLive(_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1461:24-1463:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1461:24-1463:14)
      kind: _114 = util::wire::DeserializeError::generic(const "mismatching sparse state length") -> [return: bb81, unwind: bb90]
  }
  preds [bb65]
  succs [bb81, bb90]

bb80
  0: StorageDead(_112)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1460:32-1460:33)
  1: StorageDead(_111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1460:32-1460:33)
  2: _109 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1464:10-1464:10)
  3: StorageDead(_110)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1464:9-1464:10)
  4: StorageDead(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1464:9-1464:10)
  5: StorageLive(_115)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1465:12-1465:20)
  6: _115 = move _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1465:12-1465:20)
  7: _0 = core::result::Result::<dfa::sparse::Seen, util::wire::DeserializeError>::Ok(move _115)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1465:9-1465:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1465:20-1465:21)
      kind: drop(_115) -> [return: bb82, unwind: bb90]
  }
  preds [bb65]
  succs [bb82, bb90]

bb81
  0: _0 = core::result::Result::<dfa::sparse::Seen, util::wire::DeserializeError>::Err(move _114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1461:20-1463:15)
  1: StorageDead(_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1463:14-1463:15)
  2: StorageDead(_110)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1464:9-1464:10)
  3: StorageDead(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1464:9-1464:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb87
  }
  preds [bb79]
  succs [bb87]

bb82
  0: StorageDead(_115)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1465:20-1465:21)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1466:5-1466:6)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1466:5-1466:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1466:5-1466:6)
      kind: drop(_3) -> [return: bb83, unwind: bb91]
  }
  preds [bb80]
  succs [bb83, bb91]

bb83
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1466:5-1466:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1466:6-1466:6)
      kind: goto -> bb89
  }
  preds [bb82]
  succs [bb89]

bb84
  0: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:15-1424:16)
  1: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:16-1424:17)
  2: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1424:16-1424:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb85
  }
  preds [bb46, bb54]
  succs [bb85]

bb85
  0: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1426:9-1426:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb86
  }
  preds [bb36, bb84]
  succs [bb86]

bb86
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1426:9-1426:10)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1426:9-1426:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb87
  }
  preds [bb26, bb85]
  succs [bb87]

bb87
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1466:5-1466:6)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1466:5-1466:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1466:5-1466:6)
      kind: drop(_3) -> [return: bb88, unwind: bb91]
  }
  preds [bb78, bb81, bb86]
  succs [bb88, bb91]

bb88
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1466:5-1466:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1466:6-1466:6)
      kind: goto -> bb89
  }
  preds [bb87]
  succs [bb89]

bb89
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1466:6-1466:6)
      kind: return
  }
  preds [bb83, bb88]
  succs []

bb90
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1466:5-1466:6)
      kind: drop(_3) -> [return: bb91, unwind terminate(cleanup)]
  }
  preds [bb2, bb3, bb4, bb5, bb7, bb9, bb12, bb15, bb18, bb22, bb25, bb29, bb30, bb34, bb35, bb37, bb38, bb39, bb40, bb44, bb45, bb47, bb48, bb52, bb53, bb56, bb57, bb59, bb60, bb64, bb67, bb68, bb72, bb74, bb77, bb79, bb80]
  succs [bb91]

bb91
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1387:5-1466:6)
      kind: resume
  }
  preds [bb0, bb82, bb87, bb90]
  succs []

