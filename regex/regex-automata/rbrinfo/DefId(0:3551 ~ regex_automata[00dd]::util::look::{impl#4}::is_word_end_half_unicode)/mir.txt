bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:1254:13-1254:23)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:1254:26-1254:45)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:1254:26-1254:28)
  3: _6 = _3
    SourceInfo(regex-automata/src/util/look.rs:1254:26-1254:28)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:1254:31-1254:45)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:1254:31-1254:39)
  6: _8 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1254:31-1254:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1254:31-1254:45)
      kind: _7 = core::slice::<impl [u8]>::len(move _8) -> [return: bb1, unwind: bb21]
  }
  preds []
  succs [bb1, bb21]

bb1
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:1254:44-1254:45)
  1: _5 = Lt(move _6, move _7)
    SourceInfo(regex-automata/src/util/look.rs:1254:26-1254:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1254:26-1254:45)
      kind: switchInt(move _5) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1254:44-1254:45)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1254:44-1254:45)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:1255:22-1255:51)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/util/look.rs:1255:35-1255:50)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/util/look.rs:1255:35-1255:50)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/util/look.rs:1255:44-1255:50)
  6: StorageLive(_13)
    SourceInfo(regex-automata/src/util/look.rs:1255:36-1255:44)
  7: _13 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1255:36-1255:44)
  8: StorageLive(_14)
    SourceInfo(regex-automata/src/util/look.rs:1255:45-1255:49)
  9: StorageLive(_15)
    SourceInfo(regex-automata/src/util/look.rs:1255:45-1255:47)
  10: _15 = _3
    SourceInfo(regex-automata/src/util/look.rs:1255:45-1255:47)
  11: _14 = core::ops::RangeFrom::<usize> { start: move _15 }
    SourceInfo(regex-automata/src/util/look.rs:1255:45-1255:49)
  12: StorageDead(_15)
    SourceInfo(regex-automata/src/util/look.rs:1255:48-1255:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1255:44-1255:50)
      kind: _12 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _13, move _14) -> [return: bb4, unwind: bb21]
  }
  preds [bb1]
  succs [bb4, bb21]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1254:44-1254:45)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1254:44-1254:45)
  2: _4 = const false
    SourceInfo(regex-automata/src/util/look.rs:1254:26-1258:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1254:26-1258:14)
      kind: goto -> bb18
  }
  preds [bb1]
  succs [bb18]

bb4
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/look.rs:1255:49-1255:50)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/util/look.rs:1255:49-1255:50)
  2: _11 = &(*_12)
    SourceInfo(regex-automata/src/util/look.rs:1255:35-1255:50)
  3: _10 = &(*_11)
    SourceInfo(regex-automata/src/util/look.rs:1255:35-1255:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1255:22-1255:51)
      kind: _9 = util::utf8::decode(move _10) -> [return: bb5, unwind: bb21]
  }
  preds [bb2]
  succs [bb5, bb21]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:1255:50-1255:51)
  1: PlaceMention(_9)
    SourceInfo(regex-automata/src/util/look.rs:1255:22-1255:51)
  2: _17 = discriminant(_9)
    SourceInfo(regex-automata/src/util/look.rs:1255:22-1255:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1255:16-1255:51)
      kind: switchInt(move _17) -> [0: bb9, 1: bb7, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb7, bb9]

bb6
  0: FakeRead(ForMatchedPlace(None), _9)
    SourceInfo(regex-automata/src/util/look.rs:1255:22-1255:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1255:22-1255:51)
      kind: unreachable
  }
  preds [bb5, bb7]
  succs []

bb7
  0: _16 = discriminant(((_9 as Some).0: core::result::Result<char, u8>))
    SourceInfo(regex-automata/src/util/look.rs:1255:22-1255:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1255:16-1255:51)
      kind: switchInt(move _16) -> [0: bb8, 1: bb9, otherwise: bb6]
  }
  preds [bb5]
  succs [bb6, bb8, bb9]

bb8
  0: StorageLive(_19)
    SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:64)
  1: StorageLive(_20)
    SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:63)
  2: StorageLive(_21)
    SourceInfo(regex-automata/src/util/look.rs:1257:50-1257:58)
  3: _21 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:1257:50-1257:58)
  4: StorageLive(_22)
    SourceInfo(regex-automata/src/util/look.rs:1257:60-1257:62)
  5: _22 = _3
    SourceInfo(regex-automata/src/util/look.rs:1257:60-1257:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:63)
      kind: _20 = util::look::is_word_char::fwd(move _21, move _22) -> [return: bb11, unwind: bb21]
  }
  preds [bb7, bb9]
  succs [bb11, bb21]

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1256:17-1256:36)
      kind: falseEdge -> [real: bb10, imaginary: bb8]
  }
  preds [bb5, bb7]
  succs [bb8, bb10]

bb10
  0: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::Ok(const false)
    SourceInfo(regex-automata/src/util/look.rs:1256:47-1256:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1256:40-1256:56)
      kind: goto -> bb19
  }
  preds [bb9]
  succs [bb19]

bb11
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/util/look.rs:1257:62-1257:63)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/util/look.rs:1257:62-1257:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:64)
      kind: _19 = <core::result::Result<bool, util::look::UnicodeWordBoundaryError> as core::ops::Try>::branch(move _20) -> [return: bb12, unwind: bb21]
  }
  preds [bb8]
  succs [bb12, bb21]

bb12
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/look.rs:1257:63-1257:64)
  1: PlaceMention(_19)
    SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:64)
  2: _23 = discriminant(_19)
    SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:64)
      kind: switchInt(move _23) -> [0: bb15, 1: bb14, otherwise: bb13]
  }
  preds [bb11]
  succs [bb13, bb14, bb15]

bb13
  0: FakeRead(ForMatchedPlace(None), _19)
    SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:64)
      kind: unreachable
  }
  preds [bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1257:63-1257:64)
      kind: falseEdge -> [real: bb16, imaginary: bb15]
  }
  preds [bb12]
  succs [bb15, bb16]

bb15
  0: StorageLive(_27)
    SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:64)
  1: _27 = ((_19 as Continue).0: bool)
    SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:64)
  2: _4 = _27
    SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:64)
  3: StorageDead(_27)
    SourceInfo(regex-automata/src/util/look.rs:1257:63-1257:64)
  4: StorageDead(_19)
    SourceInfo(regex-automata/src/util/look.rs:1257:63-1257:64)
  5: StorageDead(_12)
    SourceInfo(regex-automata/src/util/look.rs:1258:13-1258:14)
  6: StorageDead(_11)
    SourceInfo(regex-automata/src/util/look.rs:1258:13-1258:14)
  7: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:1258:13-1258:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1254:26-1258:14)
      kind: goto -> bb18
  }
  preds [bb12, bb14]
  succs [bb18]

bb16
  0: StorageLive(_24)
    SourceInfo(regex-automata/src/util/look.rs:1257:63-1257:64)
  1: _24 = move ((_19 as Break).0: core::result::Result<core::convert::Infallible, util::look::UnicodeWordBoundaryError>)
    SourceInfo(regex-automata/src/util/look.rs:1257:63-1257:64)
  2: StorageLive(_26)
    SourceInfo(regex-automata/src/util/look.rs:1257:63-1257:64)
  3: _26 = move _24
    SourceInfo(regex-automata/src/util/look.rs:1257:63-1257:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1257:32-1257:64)
      kind: _0 = <core::result::Result<bool, util::look::UnicodeWordBoundaryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::look::UnicodeWordBoundaryError>>>::from_residual(move _26) -> [return: bb17, unwind: bb21]
  }
  preds [bb14]
  succs [bb17, bb21]

bb17
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/util/look.rs:1257:63-1257:64)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/util/look.rs:1257:63-1257:64)
  2: StorageDead(_19)
    SourceInfo(regex-automata/src/util/look.rs:1257:63-1257:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb19
  }
  preds [bb16]
  succs [bb19]

bb18
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1258:13-1258:14)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/look.rs:1254:13-1254:23)
  2: StorageLive(_28)
    SourceInfo(regex-automata/src/util/look.rs:1259:12-1259:23)
  3: StorageLive(_29)
    SourceInfo(regex-automata/src/util/look.rs:1259:13-1259:23)
  4: _29 = _4
    SourceInfo(regex-automata/src/util/look.rs:1259:13-1259:23)
  5: _28 = Not(move _29)
    SourceInfo(regex-automata/src/util/look.rs:1259:12-1259:23)
  6: StorageDead(_29)
    SourceInfo(regex-automata/src/util/look.rs:1259:22-1259:23)
  7: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::Ok(move _28)
    SourceInfo(regex-automata/src/util/look.rs:1259:9-1259:24)
  8: StorageDead(_28)
    SourceInfo(regex-automata/src/util/look.rs:1259:23-1259:24)
  9: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1260:5-1260:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1260:6-1260:6)
      kind: goto -> bb20
  }
  preds [bb3, bb15]
  succs [bb20]

bb19
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/look.rs:1258:13-1258:14)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/look.rs:1258:13-1258:14)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:1258:13-1258:14)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1258:13-1258:14)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1260:5-1260:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1260:6-1260:6)
      kind: goto -> bb20
  }
  preds [bb10, bb17]
  succs [bb20]

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1260:6-1260:6)
      kind: return
  }
  preds [bb18, bb19]
  succs []

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1245:5-1260:6)
      kind: resume
  }
  preds [bb0, bb2, bb4, bb8, bb11, bb16]
  succs []

