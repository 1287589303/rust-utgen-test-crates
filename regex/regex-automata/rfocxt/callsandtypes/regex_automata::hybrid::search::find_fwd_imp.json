{"mod_name":"hybrid::search","calls":["hybrid::dfa::DFA::next_state","util::search::HalfMatch::new","hybrid::id::LazyStateID::is_dead","hybrid::id::LazyStateID::is_unknown","hybrid::id::LazyStateID::is_quit","core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::map_err::<util::search::MatchError, {closure@regex-automata/src/hybrid/search.rs:90:26: 90:29}>","core::panicking::panic","nfa::thompson::nfa::NFA::look_set_prefix_any","hybrid::dfa::DFA::match_pattern","hybrid::search::init_fwd","<core::result::Result<hybrid::id::LazyStateID, util::search::MatchError> as core::ops::Try>::branch","core::fmt::rt::Argument::<'_>::none","hybrid::id::LazyStateID::is_start","<core::result::Result<core::option::Option<util::search::HalfMatch>, util::search::MatchError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual","hybrid::search::eoi_fwd","core::panicking::panic_fmt","hybrid::id::LazyStateID::is_tagged","<core::result::Result<","hybrid::dfa::DFA::get_nfa","core::slice::<impl [u8]>::get_unchecked::<usize>","core::fmt::Arguments::<'_>::new_v1::<1, 0>","util::look::LookSet::is_empty","hybrid::dfa::Cache::search_update","hybrid::dfa::DFA::next_state_untagged_unchecked","hybrid::id::LazyStateID::is_match","<util::search::Span as core::convert::From<core::ops::Range<usize>>>::from","util::search::MatchError::quit","hybrid::dfa::Cache::search_finish","util::search::Input::<'_>::end","util::search::Input::<'_>::haystack","util::prefilter::Prefilter::find","util::search::Input::<'_>::start","hybrid::search::prefilter_restart","core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::map_err::<util::search::MatchError, {closure@regex-automata/src/hybrid/search.rs:229:30: 229:33}>","hybrid::dfa::Cache::search_start","core::mem::swap::<hybrid::id::LazyStateID>"],"types":["[u8]","(usize, bool)","[&str; 1]","core::result::Result<(), util::search::MatchError>","hybrid::dfa::DFA","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::search::MatchError>, hybrid::id::LazyStateID>","core::result::Result<core::option::Option<util::search::HalfMatch>, util::search::MatchError>","util::search::HalfMatch","core::ops::Range<usize>","hybrid::id::LazyStateID","str","util::search::Span","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::search::MatchError>>","()","core::fmt::rt::Argument<'_>","!","core::result::Result<hybrid::id::LazyStateID, util::search::MatchError>","core::convert::Infallible","nfa::thompson::nfa::NFA","hybrid::error::CacheError","core::fmt::Arguments<'_>","core::option::Option<&util::prefilter::Prefilter>","hybrid::dfa::Cache","util::look::LookSet","usize","util::search::Input<'_>","{closure@regex-automata/src/hybrid/search.rs:90:26: 90:29}","core::result::Result<core::convert::Infallible, util::search::MatchError>","core::option::Option<util::search::HalfMatch>","util::primitives::PatternID","{closure@regex-automata/src/hybrid/search.rs:229:30: 229:33}","[core::fmt::rt::Argument<'_>; 0]","util::search::MatchError","core::option::Option<util::search::Span>","bool","isize","util::prefilter::Prefilter","core::result::Result<hybrid::id::LazyStateID, hybrid::error::CacheError>","u8"]}