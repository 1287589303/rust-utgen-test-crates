{"mod_name":"nfa::thompson::backtrack","calls":["std::vec::from_elem::<core::option::Option<util::primitives::NonMaxUsize>>","nfa::thompson::nfa::NFA::group_info","<core::result::Result<core::option::Option<util::primitives::PatternID>, util::search::MatchError> as core::ops::Try>::branch","nfa::thompson::backtrack::BoundedBacktracker::get_nfa","util::primitives::NonMaxUsize::get","<std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>> as core::ops::Index<usize>>::index","<I as core::convert::Into<util::search::Input<'_>>>::into","<std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>> as core::ops::DerefMut>::deref_mut","<core::result::Result<core::option::Option<util::search::Match>, util::search::MatchError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual","nfa::thompson::backtrack::BoundedBacktracker::try_search_slots","util::captures::GroupInfo::implicit_slot_len","util::primitives::PatternID::as_usize","util::search::Match::new::<util::search::Span>","nfa::thompson::nfa::NFA::pattern_len"],"types":["[core::option::Option<util::primitives::NonMaxUsize>; 2]","core::result::Result<core::option::Option<util::search::Match>, util::search::MatchError>","core::convert::Infallible","core::option::Option<util::search::Match>","util::primitives::NonMaxUsize","nfa::thompson::backtrack::Cache","(usize, bool)","util::captures::GroupInfo","I","util::search::Span","std::alloc::Global","bool","core::option::Option<util::primitives::PatternID>","util::search::Match","core::result::Result<core::convert::Infallible, util::search::MatchError>","!","[core::option::Option<util::primitives::NonMaxUsize>]","core::option::Option<util::primitives::NonMaxUsize>","nfa::thompson::backtrack::BoundedBacktracker","usize","util::search::Input<'_>","core::result::Result<core::option::Option<util::primitives::PatternID>, util::search::MatchError>","std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>>","isize","util::primitives::PatternID","util::search::MatchError","()","nfa::thompson::nfa::NFA","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::search::MatchError>, core::option::Option<util::primitives::PatternID>>"]}