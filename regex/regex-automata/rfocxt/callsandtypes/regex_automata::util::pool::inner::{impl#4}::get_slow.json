{"mod_name":"util::pool::inner","calls":["std::vec::Vec::<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>>>::len","<std::sync::MutexGuard<'_, std::vec::Vec<std::boxed::Box<T>>> as core::ops::DerefMut>::deref_mut","std::boxed::Box::<T>::new","<std::vec::Vec<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>>> as core::ops::Index<usize>>::index","<core::ops::Range<i32> as core::iter::Iterator>::next","<core::ops::Range<i32> as core::iter::IntoIterator>::into_iter","std::vec::Vec::<std::boxed::Box<T>>::pop","core::mem::drop::<std::sync::MutexGuard<'_, std::vec::Vec<std::boxed::Box<T>>>>","core::sync::atomic::AtomicUsize::compare_exchange","core::result::Result::<usize, usize>::is_ok","std::sync::Mutex::<std::vec::Vec<std::boxed::Box<T>>>::try_lock","util::pool::inner::Pool::<T, F>::guard_stack","util::pool::inner::Pool::<T, F>::guard_stack_transient","util::pool::inner::Pool::<T, F>::guard_owned","<F as core::ops::Fn<","core::cell::UnsafeCell::<core::option::Option<T>>::get"],"types":["util::pool::inner::Pool<T, F>","i32","core::sync::atomic::AtomicUsize","core::result::Result<usize, usize>","T","*mut core::option::Option<T>","core::option::Option<std::boxed::Box<T>>","std::vec::Vec<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>>>","core::cell::UnsafeCell<core::option::Option<T>>","()","usize","std::sync::TryLockError<std::sync::MutexGuard<'_, std::vec::Vec<std::boxed::Box<T>>>>","core::ops::Range<i32>","bool","core::sync::atomic::Ordering","!","F","util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>>","isize","std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>","core::result::Result<std::sync::MutexGuard<'_, std::vec::Vec<std::boxed::Box<T>>>, std::sync::TryLockError<std::sync::MutexGuard<'_, std::vec::Vec<std::boxed::Box<T>>>>>","std::boxed::Box<T>","core::option::Option<i32>","std::alloc::Global","std::sync::MutexGuard<'_, std::vec::Vec<std::boxed::Box<T>>>","core::option::Option<T>","util::pool::inner::PoolGuard<'_, T, F>","std::vec::Vec<std::boxed::Box<T>>"]}