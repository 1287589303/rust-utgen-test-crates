{"mod_name":"nfa::thompson::compiler","calls":["regex_syntax::hir::Hir::kind","nfa::thompson::compiler::Compiler::is_reverse","<core::slice::Iter<'_, regex_syntax::hir::Hir> as core::iter::Iterator>::next","<core::cell::RefMut<'_, nfa::thompson::builder::Builder> as core::ops::DerefMut>::deref_mut","<core::iter::Filter<core::slice::Iter<'_, regex_syntax::hir::Hir>, {closure@regex-automata/src/nfa/thompson/compiler.rs:1052:21: 1052:24}> as core::iter::Iterator>::count","nfa::thompson::literal_trie::LiteralTrie::reverse","nfa::thompson::literal_trie::LiteralTrie::forward","nfa::thompson::literal_trie::LiteralTrie::add","core::slice::<impl [regex_syntax::hir::Hir]>::iter","core::cell::RefCell::<nfa::thompson::builder::Builder>::borrow_mut","core::panicking::panic","<core::result::Result<","core::slice::<impl [regex_syntax::hir::Hir]>::len","<core::slice::Iter<'_, regex_syntax::hir::Hir> as core::iter::Iterator>::map::<core::result::Result<nfa::thompson::compiler::ThompsonRef, nfa::thompson::error::BuildError>, {closure@regex-automata/src/nfa/thompson/compiler.rs:1057:53: 1057:56}>","<core::slice::Iter<'_, regex_syntax::hir::Hir> as core::iter::IntoIterator>::into_iter","<core::slice::Iter<'_, regex_syntax::hir::Hir> as core::iter::Iterator>::filter::<{closure@regex-automata/src/nfa/thompson/compiler.rs:1052:21: 1052:24}>","nfa::thompson::literal_trie::LiteralTrie::compile","nfa::thompson::compiler::Compiler::c_alt_iter::<core::iter::Map<core::slice::Iter<'_, regex_syntax::hir::Hir>, {closure@regex-automata/src/nfa/thompson/compiler.rs:1057:53: 1057:56}>>","<core::result::Result<nfa::thompson::compiler::ThompsonRef, nfa::thompson::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>>>::from_residual"],"types":["core::iter::Filter<core::slice::Iter<'_, regex_syntax::hir::Hir>, {closure@regex-automata/src/nfa/thompson/compiler.rs:1052:21: 1052:24}>","()","std::alloc::Global","core::cell::RefCell<nfa::thompson::builder::Builder>","{closure@regex-automata/src/nfa/thompson/compiler.rs:1057:53: 1057:56}","core::convert::Infallible","nfa::thompson::compiler::Compiler","str","core::iter::Map<core::slice::Iter<'_, regex_syntax::hir::Hir>, {closure@regex-automata/src/nfa/thompson/compiler.rs:1057:53: 1057:56}>","core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>","[u8]","core::cell::RefMut<'_, nfa::thompson::builder::Builder>","nfa::thompson::compiler::ThompsonRef","nfa::thompson::literal_trie::LiteralTrie","core::slice::Iter<'_, regex_syntax::hir::Hir>","core::result::Result<(), nfa::thompson::error::BuildError>","std::boxed::Box<[u8]>","usize","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>>","core::option::Option<&regex_syntax::hir::Hir>","bool","nfa::thompson::error::BuildError","[regex_syntax::hir::Hir]","regex_syntax::hir::Hir","nfa::thompson::builder::Builder","core::result::Result<nfa::thompson::compiler::ThompsonRef, nfa::thompson::error::BuildError>","{closure@regex-automata/src/nfa/thompson/compiler.rs:1052:21: 1052:24}","!","regex_syntax::hir::HirKind","u8","isize"]}