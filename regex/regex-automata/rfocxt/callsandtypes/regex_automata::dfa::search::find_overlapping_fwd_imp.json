{"mod_name":"dfa::search","calls":["<core::result::Result<util::primitives::StateID, util::search::MatchError> as core::ops::Try>::branch","util::search::HalfMatch::new","dfa::search::prefilter_restart::<A>","<A as dfa::automaton::Automaton>::is_accel_state","util::search::Input::<'_>::haystack","util::prefilter::Prefilter::find","<A as dfa::automaton::Automaton>::is_start_state","util::search::MatchError::quit","core::option::Option::<usize>::unwrap_or","dfa::search::init_fwd::<A>","<core::result::Result<","core::option::Option::<util::search::HalfMatch>::is_some","<A as dfa::automaton::Automaton>::match_pattern","core::option::Option::<util::primitives::StateID>::is_some","util::search::Input::<'_>::start","util::search::Input::<'_>::end","<A as dfa::automaton::Automaton>::next_state","<A as dfa::automaton::Automaton>::universal_start_state","<A as dfa::automaton::Automaton>::match_len","<A as dfa::automaton::Automaton>::is_special_state","<A as dfa::automaton::Automaton>::accelerator","<util::search::Span as core::convert::From<core::ops::Range<usize>>>::from","<A as dfa::automaton::Automaton>::is_dead_state","dfa::search::eoi_fwd::<A>","<A as dfa::automaton::Automaton>::is_match_state","dfa::accel::find_fwd"],"types":["A","core::option::Option<usize>","util::prefilter::Prefilter","util::search::Span","core::result::Result<core::convert::Infallible, util::search::MatchError>","[u8]","core::option::Option<util::primitives::StateID>","dfa::automaton::OverlappingState","core::option::Option<&util::prefilter::Prefilter>","core::result::Result<(), util::search::MatchError>","util::primitives::StateID","u8","util::search::MatchError","isize","core::option::Option<util::search::HalfMatch>","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::search::MatchError>, util::primitives::StateID>","bool","util::primitives::PatternID","usize","core::ops::Range<usize>","core::option::Option<util::search::Span>","util::search::Input<'_>","()","core::convert::Infallible","util::search::Anchored","core::result::Result<util::primitives::StateID, util::search::MatchError>","!","util::search::HalfMatch","(usize, bool)"]}