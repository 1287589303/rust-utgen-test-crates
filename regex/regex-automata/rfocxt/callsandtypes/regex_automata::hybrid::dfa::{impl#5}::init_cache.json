{"mod_name":"hybrid::dfa","calls":["hybrid::dfa::LazyRef::<'_, '_>::quit_id","util::start::Start::len","core::option::Option::<usize>::unwrap","core::panicking::assert_failed::<hybrid::id::LazyStateID, hybrid::id::LazyStateID>","core::num::<impl usize>::checked_mul","util::determinize::state::State::dead","hybrid::dfa::DFA::pattern_len","hybrid::dfa::LazyRef::<'_, '_>::unknown_id","core::iter::repeat::<hybrid::id::LazyStateID>","hybrid::dfa::Lazy::<'_, '_>::add_state::<{closure@regex-automata/src/hybrid/dfa.rs:2534:42: 2534:46}>","<std::vec::Vec<hybrid::id::LazyStateID> as core::iter::Extend<hybrid::id::LazyStateID>>::extend::<core::iter::Take<core::iter::Repeat<hybrid::id::LazyStateID>>>","<hybrid::id::LazyStateID as core::cmp::PartialEq>::eq","hybrid::dfa::LazyRef::<'_, '_>::dead_id","std::collections::HashMap::<util::determinize::state::State, hybrid::id::LazyStateID>::insert","<util::determinize::state::State as core::clone::Clone>::clone","hybrid::dfa::DFA::get_config","<core::iter::Repeat<hybrid::id::LazyStateID> as core::iter::Iterator>::take","hybrid::dfa::Lazy::<'_, '_>::set_all_transitions","hybrid::dfa::Lazy::<'_, '_>::add_state::<{closure@regex-automata/src/hybrid/dfa.rs:2535:52: 2535:56}>","hybrid::dfa::Config::get_starts_for_each_pattern","hybrid::dfa::Lazy::<'_, '_>::as_ref","hybrid::dfa::Lazy::<'_, '_>::add_state::<{closure@regex-automata/src/hybrid/dfa.rs:2536:52: 2536:56}>","core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::unwrap"],"types":["{closure@regex-automata/src/hybrid/dfa.rs:2536:52: 2536:56}","hybrid::error::CacheError","std::vec::Vec<hybrid::id::LazyStateID>","std::collections::HashMap<util::determinize::state::State, hybrid::id::LazyStateID>","usize","hybrid::id::LazyStateID","{closure@regex-automata/src/hybrid/dfa.rs:2535:52: 2535:56}","core::option::Option<hybrid::id::LazyStateID>","(&hybrid::id::LazyStateID, &hybrid::id::LazyStateID)","core::option::Option<core::fmt::Arguments<'_>>","hybrid::dfa::DFA","()","core::option::Option<usize>","std::hash::RandomState","bool","util::determinize::state::State","std::alloc::Global","hybrid::dfa::Config","hybrid::dfa::Lazy<'_, '_>","{closure@regex-automata/src/hybrid/dfa.rs:2534:42: 2534:46}","hybrid::dfa::LazyRef<'_, '_>","core::result::Result<hybrid::id::LazyStateID, hybrid::error::CacheError>","(usize, bool)","core::iter::Repeat<hybrid::id::LazyStateID>","!","core::iter::Take<core::iter::Repeat<hybrid::id::LazyStateID>>","core::panicking::AssertKind","core::fmt::Arguments<'_>"]}