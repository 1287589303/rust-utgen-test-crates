{"mod_name":"nfa::thompson::range_trie","calls":["std::vec::Vec::<nfa::thompson::range_trie::NextInsert>::new","std::vec::Vec::<nfa::thompson::range_trie::Transition>::len","core::panicking::panic","<nfa::thompson::range_trie::Transition as core::clone::Clone>::clone","std::vec::Vec::<nfa::thompson::range_trie::NextInsert>::push","nfa::thompson::range_trie::NextInsert::ranges","<core::slice::Iter<'_, nfa::thompson::range_trie::SplitRange> as core::iter::Iterator>::enumerate","core::slice::<impl [regex_syntax::utf8::Utf8Range]>::len","nfa::thompson::range_trie::State::find","nfa::thompson::range_trie::Split::as_slice","core::slice::<impl [nfa::thompson::range_trie::SplitRange]>::iter","<{closure@regex-automata/src/nfa/thompson/range_trie.rs:361:21: 361:65} as core::ops::FnMut<","<core::iter::Enumerate<core::slice::Iter<'_, nfa::thompson::range_trie::SplitRange>> as core::iter::Iterator>::next","nfa::thompson::range_trie::NextInsert::new","std::vec::Vec::<nfa::thompson::range_trie::NextInsert>::pop","nfa::thompson::range_trie::Split::new","nfa::thompson::range_trie::NextInsert::state_id","nfa::thompson::range_trie::intersects","nfa::thompson::range_trie::RangeTrie::duplicate","nfa::thompson::range_trie::RangeTrie::add_transition","core::mem::replace::<std::vec::Vec<nfa::thompson::range_trie::NextInsert>>","<core::iter::Enumerate<core::slice::Iter<'_, nfa::thompson::range_trie::SplitRange>> as core::iter::IntoIterator>::into_iter","std::vec::Vec::<nfa::thompson::range_trie::NextInsert>::clear","<std::vec::Vec<nfa::thompson::range_trie::Transition> as core::ops::Index<usize>>::index","core::slice::<impl [nfa::thompson::range_trie::SplitRange]>::len","nfa::thompson::range_trie::NextInsert::push","core::slice::<impl [regex_syntax::utf8::Utf8Range]>::is_empty","nfa::thompson::range_trie::RangeTrie::add_transition_at","<[regex_syntax::utf8::Utf8Range] as core::ops::Index<core::ops::RangeFrom<usize>>>::index","nfa::thompson::range_trie::RangeTrie::state"],"types":["core::option::Option<nfa::thompson::range_trie::Split>","()","isize","(regex_syntax::utf8::Utf8Range, &[regex_syntax::utf8::Utf8Range])","core::ops::RangeFrom<usize>","std::alloc::Global","core::option::Option<nfa::thompson::range_trie::NextInsert>","(usize, &nfa::thompson::range_trie::SplitRange)","(usize, bool)","(&mut nfa::thompson::range_trie::RangeTrie, usize, util::primitives::StateID, regex_syntax::utf8::Utf8Range, util::primitives::StateID)","{closure@regex-automata/src/nfa/thompson/range_trie.rs:361:21: 361:65}","util::primitives::StateID","nfa::thompson::range_trie::Split","nfa::thompson::range_trie::NextInsert","bool","nfa::thompson::range_trie::Transition","std::vec::Vec<nfa::thompson::range_trie::Transition>","!","nfa::thompson::range_trie::State","str","core::slice::Iter<'_, nfa::thompson::range_trie::SplitRange>","usize","core::iter::Enumerate<core::slice::Iter<'_, nfa::thompson::range_trie::SplitRange>>","core::option::Option<(usize, &nfa::thompson::range_trie::SplitRange)>","nfa::thompson::range_trie::SplitRange","std::vec::Vec<nfa::thompson::range_trie::NextInsert>","regex_syntax::utf8::Utf8Range","[nfa::thompson::range_trie::SplitRange]","[regex_syntax::utf8::Utf8Range]","nfa::thompson::range_trie::RangeTrie","(util::primitives::StateID, &[regex_syntax::utf8::Utf8Range])"]}