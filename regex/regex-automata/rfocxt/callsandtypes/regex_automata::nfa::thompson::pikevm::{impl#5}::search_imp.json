{"mod_name":"nfa::thompson::pikevm","calls":["core::fmt::Arguments::<'_>::new_const::<1>","nfa::thompson::pikevm::Cache::setup_search","core::slice::<impl [u8]>::len","nfa::thompson::pikevm::Config::get_match_kind","util::search::MatchKind::continue_past_first_match","nfa::thompson::pikevm::Config::get_prefilter","<util::search::Span as core::convert::From<core::ops::Range<usize>>>::from","nfa::thompson::pikevm::PikeVM::nexts","nfa::thompson::pikevm::PikeVM::start_config","nfa::thompson::pikevm::PikeVM::get_config","util::search::HalfMatch::new","core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::len","util::search::Input::<'_>::is_done","util::sparse_set::SparseSet::is_empty","core::panicking::panic_fmt","util::search::Input::<'_>::get_earliest","nfa::thompson::pikevm::SlotTable::all_absent","core::mem::swap::<nfa::thompson::pikevm::ActiveStates>","util::search::Input::<'_>::end","nfa::thompson::pikevm::PikeVM::epsilon_closure","util::search::Input::<'_>::haystack","util::search::Input::<'_>::start","core::option::Option::<util::search::HalfMatch>::is_some","util::sparse_set::SparseSet::clear","util::prefilter::Prefilter::find"],"types":["!","core::fmt::Arguments<'_>","core::option::Option<util::primitives::NonMaxUsize>","core::option::Option<util::search::Span>","util::search::Input<'_>","(bool, util::primitives::StateID)","u8","bool","util::prefilter::Prefilter","usize","util::primitives::NonMaxUsize","core::option::Option<util::search::HalfMatch>","nfa::thompson::pikevm::PikeVM","nfa::thompson::pikevm::SlotTable","isize","[core::option::Option<util::primitives::NonMaxUsize>]","nfa::thompson::pikevm::Config","util::primitives::StateID","util::search::Span","nfa::thompson::pikevm::ActiveStates","[&str; 1]","core::ops::Range<usize>","std::alloc::Global","util::primitives::PatternID","nfa::thompson::pikevm::Cache","(usize, bool)","util::search::HalfMatch","()","core::option::Option<&util::prefilter::Prefilter>","core::option::Option<(bool, util::primitives::StateID)>","nfa::thompson::pikevm::FollowEpsilon","util::sparse_set::SparseSet","[u8]","core::option::Option<util::primitives::PatternID>","std::vec::Vec<nfa::thompson::pikevm::FollowEpsilon>","util::search::MatchKind","str"]}