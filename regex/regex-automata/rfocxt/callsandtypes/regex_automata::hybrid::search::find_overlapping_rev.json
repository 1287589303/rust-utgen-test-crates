{"mod_name":"hybrid::search","calls":["util::search::HalfMatch::new","hybrid::dfa::Cache::search_update","hybrid::dfa::DFA::next_state","core::fmt::rt::Argument::<'_>::none","hybrid::dfa::Cache::search_start","hybrid::id::LazyStateID::is_tagged","util::search::MatchError::quit","util::search::Input::<'_>::start","hybrid::id::LazyStateID::is_unknown","core::panicking::panic_fmt","core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::map_err::<util::search::MatchError, {closure@regex-automata/src/hybrid/search.rs:620:22: 620:25}>","hybrid::dfa::Cache::search_finish","hybrid::search::eoi_rev","util::search::Input::<'_>::is_done","hybrid::id::LazyStateID::is_start","core::panicking::panic","util::search::Input::<'_>::end","hybrid::id::LazyStateID::is_match","core::fmt::Arguments::<'_>::new_v1::<1, 0>","hybrid::id::LazyStateID::is_dead","hybrid::dfa::DFA::match_len","<core::result::Result<hybrid::id::LazyStateID, util::search::MatchError> as core::ops::Try>::branch","<core::result::Result<","hybrid::dfa::DFA::match_pattern","core::option::Option::<util::search::HalfMatch>::is_some","hybrid::search::init_rev","util::search::Input::<'_>::haystack","hybrid::id::LazyStateID::is_quit"],"types":["util::search::HalfMatch","hybrid::error::CacheError","bool","core::option::Option<util::search::HalfMatch>","()","util::search::MatchError","[u8]","core::fmt::Arguments<'_>","hybrid::id::LazyStateID","str","isize","usize","util::primitives::PatternID","[core::fmt::rt::Argument<'_>; 0]","core::fmt::rt::Argument<'_>","core::result::Result<hybrid::id::LazyStateID, hybrid::error::CacheError>","{closure@regex-automata/src/hybrid/search.rs:620:22: 620:25}","core::result::Result<core::convert::Infallible, util::search::MatchError>","[&str; 1]","!","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::search::MatchError>, hybrid::id::LazyStateID>","core::option::Option<hybrid::id::LazyStateID>","core::result::Result<hybrid::id::LazyStateID, util::search::MatchError>","hybrid::dfa::Cache","u8","core::convert::Infallible","hybrid::dfa::DFA","hybrid::dfa::OverlappingState","(usize, bool)","core::option::Option<usize>","util::search::Input<'_>","core::result::Result<(), util::search::MatchError>"]}