{"mod_name":"hybrid::dfa","calls":["nfa::thompson::nfa::NFA::start_anchored","hybrid::dfa::Lazy::<'_, '_>::cache_start_one","<core::result::Result<hybrid::id::LazyStateID, hybrid::error::StartError> as core::ops::Try>::branch","hybrid::error::StartError::unsupported_anchored","core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::map_err::<hybrid::error::StartError, fn","hybrid::dfa::DFA::get_nfa","hybrid::dfa::Lazy::<'_, '_>::as_ref","hybrid::dfa::LazyRef::<'_, '_>::dead_id","hybrid::dfa::Lazy::<'_, '_>::set_start_state","<core::result::Result<hybrid::id::LazyStateID, hybrid::error::StartError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, hybrid::error::StartError>>>::from_residual","hybrid::dfa::DFA::get_config","hybrid::dfa::Config::get_starts_for_each_pattern","nfa::thompson::nfa::NFA::start_unanchored","nfa::thompson::nfa::NFA::start_pattern"],"types":["core::ops::ControlFlow<core::result::Result<core::convert::Infallible, hybrid::error::StartError>, hybrid::id::LazyStateID>","hybrid::dfa::DFA","hybrid::dfa::Lazy<'_, '_>","fn(hybrid::error::CacheError) -> hybrid::error::StartError {hybrid::error::StartError::cache}","hybrid::dfa::LazyRef<'_, '_>","core::result::Result<hybrid::id::LazyStateID, hybrid::error::CacheError>","hybrid::error::CacheError","core::result::Result<hybrid::id::LazyStateID, hybrid::error::StartError>","isize","bool","util::start::Start","hybrid::dfa::Config","util::primitives::StateID","core::option::Option<util::primitives::StateID>","()","core::convert::Infallible","core::result::Result<core::convert::Infallible, hybrid::error::StartError>","util::search::Anchored","hybrid::error::StartError","nfa::thompson::nfa::NFA","util::primitives::PatternID","!","hybrid::id::LazyStateID"]}