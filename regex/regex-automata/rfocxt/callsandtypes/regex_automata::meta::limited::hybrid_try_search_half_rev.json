{"mod_name":"meta::limited","calls":["hybrid::dfa::DFA::start_state_reverse","<core::result::Result<hybrid::id::LazyStateID, util::search::MatchError> as core::ops::Try>::branch","hybrid::id::LazyStateID::is_quit","hybrid::id::LazyStateID::is_tagged","core::option::Option::<util::search::HalfMatch>::map_or::<bool, {closure@regex-automata/src/meta/limited.rs:175:30: 175:33}>","util::search::Input::<'_>::haystack","meta::limited::hybrid_eoi_rev","<core::result::Result<core::option::Option<util::search::HalfMatch>, meta::error::RetryError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual","util::search::Input::<'_>::start","util::search::Input::<'_>::end","<core::result::Result<","hybrid::dfa::DFA::match_pattern","hybrid::id::LazyStateID::is_match","core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::map_err::<util::search::MatchError, {closure@regex-automata/src/meta/limited.rs:143:22: 143:25}>","hybrid::id::LazyStateID::is_dead","hybrid::dfa::DFA::next_state","util::search::MatchError::quit","<util::search::MatchError as core::convert::Into<meta::error::RetryError>>::into","util::search::HalfMatch::new","meta::error::RetryQuadraticError::new"],"types":["!","hybrid::error::CacheError","(usize, bool)","core::result::Result<core::convert::Infallible, util::search::MatchError>","util::search::MatchError","core::result::Result<core::option::Option<util::search::HalfMatch>, meta::error::RetryError>","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::search::MatchError>>","util::search::Input<'_>","meta::error::RetryQuadraticError","core::result::Result<hybrid::id::LazyStateID, hybrid::error::CacheError>","hybrid::id::LazyStateID","core::option::Option<util::search::HalfMatch>","util::search::HalfMatch","meta::error::RetryError","[u8]","util::primitives::PatternID","usize","core::result::Result<hybrid::id::LazyStateID, util::search::MatchError>","hybrid::dfa::DFA","core::result::Result<(), util::search::MatchError>","bool","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::search::MatchError>, hybrid::id::LazyStateID>","{closure@regex-automata/src/meta/limited.rs:175:30: 175:33}","core::convert::Infallible","()","isize","{closure@regex-automata/src/meta/limited.rs:143:22: 143:25}","u8","hybrid::dfa::Cache"]}