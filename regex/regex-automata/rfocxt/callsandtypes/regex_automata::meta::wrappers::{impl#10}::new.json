{"mod_name":"meta::wrappers","calls":["hybrid::dfa::Config::minimum_cache_clear_count","hybrid::dfa::Config::starts_for_each_pattern","hybrid::dfa::Config::prefilter","hybrid::dfa::Config::specialize_start_states","hybrid::dfa::Config::match_kind","hybrid::dfa::Config::byte_classes","meta::regex::Config::get_hybrid","meta::regex::Config::get_hybrid_cache_capacity","hybrid::dfa::Config::cache_capacity","hybrid::dfa::Config::skip_cache_capacity_check","hybrid::dfa::Config::minimum_bytes_per_state","hybrid::dfa::Builder::new","hybrid::regex::Builder::new","hybrid::regex::Builder::build_from_dfas","<nfa::thompson::nfa::NFA as core::clone::Clone>::clone","hybrid::dfa::Builder::configure","meta::regex::Config::get_byte_classes","hybrid::dfa::Config::unicode_word_boundary","core::option::Option::<util::prefilter::Prefilter>::is_some","<core::option::Option<util::prefilter::Prefilter> as core::clone::Clone>::clone","meta::regex::RegexInfo::config","meta::regex::Config::get_match_kind","<hybrid::dfa::Config as core::clone::Clone>::clone","hybrid::dfa::Builder::build_from_nfa","hybrid::dfa::Config::new"],"types":["core::option::Option<meta::wrappers::HybridEngine>","hybrid::regex::Builder","hybrid::regex::Regex","meta::wrappers::HybridEngine","hybrid::dfa::Config","usize","core::result::Result<hybrid::dfa::DFA, hybrid::error::BuildError>","hybrid::dfa::Builder","hybrid::error::BuildError","nfa::thompson::nfa::NFA","hybrid::dfa::DFA","isize","core::option::Option<usize>","bool","meta::regex::Config","util::search::MatchKind","!","core::option::Option<util::prefilter::Prefilter>","()","meta::regex::RegexInfo","util::prefilter::Prefilter"]}