{"mod_name":"nfa::thompson::nfa","calls":["<nfa::thompson::nfa::Transition as core::fmt::Debug>::fmt","<impl core::iter::Iterator<Item = nfa::thompson::nfa::Transition> + '_ as core::iter::Iterator>::enumerate","core::fmt::Arguments::<'_>::new_v1::<1, 1>","std::slice::<impl [std::string::String]>::join::<&str>","nfa::thompson::nfa::DenseTransitions::iter","core::fmt::Formatter::<'_>::write_fmt","core::fmt::rt::Argument::<'_>::new_display::<usize>","<core::iter::Enumerate<impl core::iter::Iterator<Item = nfa::thompson::nfa::Transition> + '_> as core::iter::Iterator>::next","<core::iter::Map<core::slice::Iter<'_, nfa::thompson::nfa::Transition>, {closure@regex-automata/src/nfa/thompson/nfa.rs:1733:26: 1733:29}> as core::iter::Iterator>::collect::<std::vec::Vec<std::string::String>>","core::slice::<impl [nfa::thompson::nfa::Transition]>::iter","<core::iter::Enumerate<impl core::iter::Iterator<Item = nfa::thompson::nfa::Transition> + '_> as core::iter::IntoIterator>::into_iter","core::fmt::rt::Argument::<'_>::new_debug::<nfa::thompson::nfa::Transition>","util::primitives::StateID::as_usize","core::fmt::rt::Argument::<'_>::new_display::<std::string::String>","core::fmt::Arguments::<'_>::new_v1::<2, 1>","core::fmt::Arguments::<'_>::new_const::<1>","<core::result::Result<","<core::slice::Iter<'_, nfa::thompson::nfa::Transition> as core::iter::Iterator>::map::<std::string::String, {closure@regex-automata/src/nfa/thompson/nfa.rs:1733:26: 1733:29}>","<core::slice::Iter<'_, util::primitives::StateID> as core::iter::Iterator>::map::<std::string::String, {closure@regex-automata/src/nfa/thompson/nfa.rs:1754:26: 1754:30}>","core::fmt::Arguments::<'_>::new_v1::<2, 2>","<core::iter::Map<core::slice::Iter<'_, util::primitives::StateID>, {closure@regex-automata/src/nfa/thompson/nfa.rs:1754:26: 1754:30}> as core::iter::Iterator>::collect::<std::vec::Vec<std::string::String>>","core::fmt::Arguments::<'_>::new_v1::<3, 2>","util::primitives::SmallIndex::as_usize","core::fmt::Arguments::<'_>::new_v1::<4, 4>","<std::vec::Vec<std::string::String> as core::ops::Deref>::deref","util::primitives::PatternID::as_usize","core::fmt::rt::Argument::<'_>::new_debug::<&util::look::Look>","core::slice::<impl [util::primitives::StateID]>::iter","core::fmt::rt::Argument::<'_>::new_debug::<usize>"],"types":["std::boxed::Box<[nfa::thompson::nfa::Transition]>","core::result::Result<core::convert::Infallible, core::fmt::Error>","[&str; 1]","util::primitives::SmallIndex","core::fmt::rt::Argument<'_>","[util::primitives::StateID]","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>>","core::option::Option<(usize, nfa::thompson::nfa::Transition)>","isize","[core::fmt::rt::Argument<'_>; 2]","core::convert::Infallible","nfa::thompson::nfa::State","core::slice::Iter<'_, util::primitives::StateID>","bool","core::slice::Iter<'_, nfa::thompson::nfa::Transition>","usize","[core::fmt::rt::Argument<'_>; 4]","std::alloc::Global","[&str; 3]","nfa::thompson::nfa::DenseTransitions","util::primitives::StateID","[&str; 4]","[core::fmt::rt::Argument<'_>; 1]","std::boxed::Box<[util::primitives::StateID]>","core::iter::Map<core::slice::Iter<'_, nfa::thompson::nfa::Transition>, {closure@regex-automata/src/nfa/thompson/nfa.rs:1733:26: 1733:29}>","(usize, nfa::thompson::nfa::Transition)","std::vec::Vec<std::string::String>","core::result::Result<(), core::fmt::Error>","util::look::Look","{closure@regex-automata/src/nfa/thompson/nfa.rs:1754:26: 1754:30}","str","core::iter::Map<core::slice::Iter<'_, util::primitives::StateID>, {closure@regex-automata/src/nfa/thompson/nfa.rs:1754:26: 1754:30}>","core::fmt::Formatter<'_>","util::primitives::PatternID","impl core::iter::Iterator<Item = nfa::thompson::nfa::Transition> + '_","[std::string::String]","std::string::String","!","{closure@regex-automata/src/nfa/thompson/nfa.rs:1733:26: 1733:29}","nfa::thompson::nfa::Transition","[nfa::thompson::nfa::Transition]","core::fmt::Error","[&str; 2]","core::fmt::Arguments<'_>","core::iter::Enumerate<impl core::iter::Iterator<Item = nfa::thompson::nfa::Transition> + '_>","()"]}