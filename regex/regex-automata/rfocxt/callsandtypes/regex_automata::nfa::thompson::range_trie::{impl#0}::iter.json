{"mod_name":"nfa::thompson::range_trie","calls":["std::vec::Vec::<regex_syntax::utf8::Utf8Range>::pop","<std::vec::Vec<nfa::thompson::range_trie::Transition> as core::ops::Index<usize>>::index","core::cell::RefCell::<std::vec::Vec<regex_syntax::utf8::Utf8Range>>::borrow_mut","std::vec::Vec::<regex_syntax::utf8::Utf8Range>::push","<core::result::Result<","std::vec::Vec::<nfa::thompson::range_trie::NextIter>::push","<F as core::ops::FnMut<","std::vec::Vec::<nfa::thompson::range_trie::NextIter>::pop","core::cell::RefCell::<std::vec::Vec<nfa::thompson::range_trie::NextIter>>::borrow_mut","std::vec::Vec::<nfa::thompson::range_trie::NextIter>::clear","<core::cell::RefMut<'_, std::vec::Vec<regex_syntax::utf8::Utf8Range>> as core::ops::Deref>::deref","<core::cell::RefMut<'_, std::vec::Vec<regex_syntax::utf8::Utf8Range>> as core::ops::DerefMut>::deref_mut","std::vec::Vec::<regex_syntax::utf8::Utf8Range>::clear","nfa::thompson::range_trie::RangeTrie::state","<std::vec::Vec<regex_syntax::utf8::Utf8Range> as core::ops::Deref>::deref","std::vec::Vec::<nfa::thompson::range_trie::Transition>::len","<util::primitives::StateID as core::cmp::PartialEq>::eq","<core::cell::RefMut<'_, std::vec::Vec<nfa::thompson::range_trie::NextIter>> as core::ops::DerefMut>::deref_mut"],"types":["usize","nfa::thompson::range_trie::Transition","F","std::vec::Vec<nfa::thompson::range_trie::Transition>","(&[regex_syntax::utf8::Utf8Range],)","core::convert::Infallible","std::vec::Vec<nfa::thompson::range_trie::NextIter>","core::cell::RefCell<std::vec::Vec<nfa::thompson::range_trie::NextIter>>","bool","util::primitives::StateID","(usize, bool)","core::cell::RefMut<'_, std::vec::Vec<nfa::thompson::range_trie::NextIter>>","[regex_syntax::utf8::Utf8Range]","core::cell::RefMut<'_, std::vec::Vec<regex_syntax::utf8::Utf8Range>>","!","core::option::Option<nfa::thompson::range_trie::NextIter>","isize","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, E>>","core::result::Result<core::convert::Infallible, E>","E","nfa::thompson::range_trie::State","nfa::thompson::range_trie::RangeTrie","regex_syntax::utf8::Utf8Range","std::alloc::Global","core::result::Result<(), E>","nfa::thompson::range_trie::NextIter","core::option::Option<regex_syntax::utf8::Utf8Range>","core::cell::RefCell<std::vec::Vec<regex_syntax::utf8::Utf8Range>>","()","std::vec::Vec<regex_syntax::utf8::Utf8Range>"]}