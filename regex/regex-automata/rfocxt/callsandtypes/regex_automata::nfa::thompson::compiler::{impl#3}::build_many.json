{"mod_name":"nfa::thompson::compiler","calls":["<std::vec::Vec<regex_syntax::hir::Hir> as core::ops::Deref>::deref","nfa::thompson::compiler::Compiler::build_many_from_hir::<regex_syntax::hir::Hir>","<&[P] as core::iter::IntoIterator>::into_iter","<P as core::convert::AsRef<str>>::as_ref","regex_syntax::Parser::parse","std::vec::Vec::<regex_syntax::hir::Hir>::new","core::result::Result::<regex_syntax::hir::Hir, regex_syntax::Error>::map_err::<nfa::thompson::error::BuildError, fn","<core::result::Result<nfa::thompson::nfa::NFA, nfa::thompson::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>>>::from_residual","<core::slice::Iter<'_, P> as core::iter::Iterator>::next","<core::result::Result<regex_syntax::hir::Hir, nfa::thompson::error::BuildError> as core::ops::Try>::branch","regex_syntax::ParserBuilder::build","std::vec::Vec::<regex_syntax::hir::Hir>::push"],"types":["regex_syntax::ParserBuilder","core::option::Option<&P>","core::result::Result<nfa::thompson::nfa::NFA, nfa::thompson::error::BuildError>","!","str","std::alloc::Global","core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>","core::convert::Infallible","regex_syntax::hir::Hir","nfa::thompson::error::BuildError","P","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>, regex_syntax::hir::Hir>","()","fn(regex_syntax::Error) -> nfa::thompson::error::BuildError {nfa::thompson::error::BuildError::syntax}","std::vec::Vec<regex_syntax::hir::Hir>","nfa::thompson::nfa::NFA","core::result::Result<regex_syntax::hir::Hir, regex_syntax::Error>","core::result::Result<regex_syntax::hir::Hir, nfa::thompson::error::BuildError>","regex_syntax::Parser","[P]","[regex_syntax::hir::Hir]","isize","core::slice::Iter<'_, P>","nfa::thompson::compiler::Compiler","regex_syntax::Error"]}