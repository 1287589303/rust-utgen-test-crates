[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/mod.rs:207:9: 207:35 (#0),
                    scope: scope[0],
                },
                kind: _3 = util::prefilter::Choice::new::<B>(move _4, move _5) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
            _6 = {closure@regex-automata/src/util/prefilter/mod.rs:207:45: 207:53} { needles: move _7 },
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/mod.rs:207:9: 211:11 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<util::prefilter::Choice>::and_then::<util::prefilter::Prefilter, {closure@regex-automata/src/util/prefilter/mod.rs:207:45: 207:53}>(move _3, move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/mod.rs:212:6: 212:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/mod.rs:211:10: 211:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/mod.rs:203:5: 212:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:206:10: 206:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/prefilter/mod.rs:204:15: 204:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/mod.rs:204:9: 204:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/mod.rs:204:9: 204:13 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:204:9: 204:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/prefilter/mod.rs:205:18: 205:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/mod.rs:205:9: 205:16 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/mod.rs:205:9: 205:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [B/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:205:9: 205:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/mod.rs:207:9: 211:11 (#0),
                },
            ),
        ),
        ty: core::option::Option<util::prefilter::Choice>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:207:9: 207:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/mod.rs:207:9: 211:11 (#0),
                },
            ),
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:207:21: 207:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/mod.rs:207:9: 211:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [B/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:207:27: 207:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/mod.rs:207:9: 211:11 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:3819 ~ regex_automata[00dd]::util::prefilter::{impl#0}::new::{closure#0}),
            [
                B/#0,
                i32,
                Binder { value: extern "RustCall" fn((util::prefilter::Choice,)) -> core::option::Option<util::prefilter::Prefilter>, bound_vars: [] },
                (&'{erased} [B/#0],),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:207:45: 211:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/mod.rs:207:9: 211:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [B/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:207:45: 211:10 (#0),
            scope: scope[0],
        },
    },
]