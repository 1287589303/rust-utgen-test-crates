[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).0: meta::regex::FindMatches<'_, '_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2201:15: 2201:33 (#0),
                    scope: scope[0],
                },
                kind: _2 = <meta::regex::FindMatches<'_, '_> as core::iter::Iterator>::next(move _3) -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            PlaceMention(_2),
            _4 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2201:9: 2201:33 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2201:15: 2201:33 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2202:13: 2202:17 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = ((_2 as Some).0: util::search::Match),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = ((*_1).1: usize),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &_21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2213:50: 2213:59 (#0),
                    scope: scope[3],
                },
                kind: _25 = util::search::Match::start(move _26) -> [return: bb14, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(((*_1).0: meta::regex::FindMatches<'_, '_>).2: util::iter::Searcher<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2203:27: 2203:49 (#0),
                    scope: scope[0],
                },
                kind: _9 = util::iter::Searcher::<'_>::input(move _10) -> [return: bb6, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &(*_9),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2203:27: 2203:60 (#0),
                    scope: scope[0],
                },
                kind: _7 = util::search::Input::<'_>::haystack(move _8) -> [return: bb7, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &(*_7),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2203:27: 2203:66 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [u8]>::len(move _6) -> [return: bb8, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageDead(_9),
            StorageDead(_7),
            StorageLive(_11),
            StorageLive(_12),
            _12 = ((*_1).1: usize),
            StorageLive(_13),
            _13 = _5,
            _11 = Gt(move _12, move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2204:20: 2204:35 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb10, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            _0 = core::option::Option::<util::search::Span>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2204:17: 2210:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = ((*_1).1: usize),
            StorageLive(_17),
            _17 = _5,
            _15 = core::ops::Range::<usize> { start: move _16, end: move _17 },
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2207:32: 2207:58 (#0),
                    scope: scope[1],
                },
                kind: _14 = <util::search::Span as core::convert::From<core::ops::Range<usize>>>::from(move _15) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            FakeRead(ForLet(None), _14),
            StorageLive(_18),
            _18 = _5,
            _19 = AddWithOverflow(_18, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2208:33: 2208:40 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _18, const 1_usize) -> [success: bb12, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_19.0: usize),
            StorageDead(_18),
            StorageLive(_20),
            _20 = _14,
            _0 = core::option::Option::<util::search::Span>::Some(move _20),
            StorageDead(_20),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2204:17: 2210:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2211:13: 2211:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            _23 = core::ops::Range::<usize> { start: move _24, end: move _25 },
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2213:28: 2213:60 (#0),
                    scope: scope[3],
                },
                kind: _22 = <util::search::Span as core::convert::From<core::ops::Range<usize>>>::from(move _23) -> [return: bb15, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            FakeRead(ForLet(None), _22),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &_21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2214:29: 2214:36 (#0),
                    scope: scope[4],
                },
                kind: _27 = util::search::Match::end(move _28) -> [return: bb16, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            ((*_1).1: usize) = move _27,
            StorageDead(_27),
            StorageLive(_29),
            _29 = _22,
            _0 = core::option::Option::<util::search::Span>::Some(move _29),
            StorageDead(_29),
            StorageDead(_22),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2216:13: 2216:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2218:6: 2218:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2200:5: 2218:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::search::Span>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2200:27: 2200:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut meta::regex::Split<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2200:13: 2200:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:2201:9: 2217:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<util::search::Match>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2201:15: 2201:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:2201:9: 2217:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut meta::regex::FindMatches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2201:15: 2201:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2202:13: 2202:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:2203:27: 2203:66 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:2203:21: 2203:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2203:21: 2203:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2203:27: 2203:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2203:27: 2203:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2203:27: 2203:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2203:27: 2203:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::iter::Searcher<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2203:27: 2203:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:2204:17: 2210:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2204:20: 2204:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:2204:17: 2210:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2204:20: 2204:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:2204:17: 2210:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2204:32: 2204:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:2207:32: 2207:58 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:2207:25: 2207:29 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2207:25: 2207:29 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2207:43: 2207:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2207:43: 2207:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2207:54: 2207:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2208:33: 2208:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2208:33: 2208:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::search::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2209:26: 2209:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/meta/regex.rs:2201:15: 2201:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:2212:13: 2212:20 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::Match,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2212:18: 2212:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:2213:28: 2213:60 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:2213:21: 2213:25 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2213:21: 2213:25 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2213:39: 2213:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2213:39: 2213:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2213:50: 2213:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Match,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2213:50: 2213:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2214:29: 2214:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Match,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2214:29: 2214:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::search::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2215:22: 2215:26 (#0),
            scope: scope[0],
        },
    },
]