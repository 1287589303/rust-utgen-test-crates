[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*((*_1).0: &dfa::accel::Accels<A>)),
            StorageLive(_6),
            _6 = ((*_1).1: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:369:21: 369:44 (#0),
                    scope: scope[0],
                },
                kind: _4 = dfa::accel::Accels::<A>::get(move _5, move _6) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:369:21: 369:45 (#3030),
                    scope: scope[0],
                },
                kind: _3 = <core::option::Option<dfa::accel::Accel> as core::ops::Try>::branch(move _4) -> [return: bb2, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _7 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:369:21: 369:45 (#3030),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:369:21: 369:45 (#3030),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:369:44: 369:45 (#3031),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_3 as Continue).0: dfa::accel::Accel),
            _2 = move _11,
            StorageDead(_11),
            FakeRead(ForLet(None), _2),
            StorageDead(_3),
            _12 = AddWithOverflow(((*_1).1: usize), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:370:9: 370:20 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = ((_3 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_10),
            _10 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:369:21: 369:45 (#3030),
                    scope: scope[3],
                },
                kind: _0 = <core::option::Option<dfa::accel::Accel> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _10) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:372:6: 372:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_12.0: usize),
            StorageLive(_13),
            _13 = move _2,
            _0 = core::option::Option::<dfa::accel::Accel>::Some(move _13),
            StorageDead(_13),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:372:6: 372:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:372:6: 372:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:368:5: 372:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<dfa::accel::Accel>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:368:27: 368:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut dfa::accel::IterAccels<'{erased}, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:368:13: 368:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/accel.rs:369:21: 369:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/accel.rs:369:13: 369:18 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::accel::Accel,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:369:13: 369:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, dfa::accel::Accel>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:369:21: 369:45 (#3030),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<dfa::accel::Accel>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:369:21: 369:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::accel::Accels<A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:369:21: 369:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:369:37: 369:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:369:44: 369:45 (#3031),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-automata/src/dfa/accel.rs:369:21: 369:45 (#3030),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/accel.rs:369:44: 369:45 (#3031),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:369:44: 369:45 (#3031),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:369:44: 369:45 (#3031),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:369:44: 369:45 (#3031),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-automata/src/dfa/accel.rs:369:21: 369:45 (#3030),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/accel.rs:369:21: 369:45 (#3030),
                    },
                ),
            ),
        ),
        ty: dfa::accel::Accel,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:369:21: 369:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:370:9: 370:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: dfa::accel::Accel,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:371:14: 371:19 (#0),
            scope: scope[0],
        },
    },
]