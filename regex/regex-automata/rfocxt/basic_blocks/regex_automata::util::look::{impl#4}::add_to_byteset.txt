[
    BasicBlockData {
        statements: [
            PlaceMention(_2),
            _4 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:842:9: 842:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [1: bb2, 2: bb2, 4: bb3, 8: bb3, 16: bb4, 32: bb4, 64: bb5, 128: bb5, 256: bb5, 512: bb5, 1024: bb5, 2048: bb5, 4096: bb5, 8192: bb5, 16384: bb5, 32768: bb5, 65536: bb5, 131072: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:842:15: 842:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:843:13: 843:36 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:844:13: 844:40 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:847:13: 847:44 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = util::utf8::is_word_byte,
            FakeRead(ForLet(None), _13),
            StorageLive(_14),
            _14 = {closure@regex-automata/src/util/look.rs:878:28: 878:36},
            FakeRead(ForLet(None), _14),
            StorageLive(_15),
            _15 = const 0_u16,
            FakeRead(ForLet(None), _15),
            AscribeUserType(_15, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:881:17: 894:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:843:40: 843:42 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_3),
            StorageLive(_7),
            _7 = (((*_1).0: util::escape::DebugByte).0: u8),
            StorageLive(_8),
            _8 = (((*_1).0: util::escape::DebugByte).0: u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:845:17: 845:64 (#0),
                    scope: scope[0],
                },
                kind: _5 = util::alphabet::ByteClassSet::set_range(move _6, move _7, move _8) -> [return: bb8, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:844:44: 846:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:848:17: 848:44 (#0),
                    scope: scope[0],
                },
                kind: _9 = util::alphabet::ByteClassSet::set_range(move _10, const 13_u8, const 13_u8) -> [return: bb10, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:849:17: 849:44 (#0),
                    scope: scope[0],
                },
                kind: _11 = util::alphabet::ByteClassSet::set_range(move _12, const 10_u8, const 10_u8) -> [return: bb11, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:847:48: 850:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:881:17: 894:18 (#0),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb13, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            StorageLive(_19),
            _19 = _15,
            _18 = Le(move _19, const 255_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:881:23: 881:32 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _18) -> [0: bb35, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageLive(_20),
            _20 = _15,
            _21 = AddWithOverflow(_20, const 1_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:882:26: 882:32 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _20, const 1_u16) -> [success: bb15, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = move (_21.0: u16),
            StorageDead(_20),
            StorageLive(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#0),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb17, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            StorageLive(_24),
            _24 = _16,
            _23 = Le(move _24, const 255_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:883:27: 883:36 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _23) -> [0: bb26, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = _13,
            StorageLive(_28),
            StorageLive(_29),
            _29 = &_14,
            StorageLive(_30),
            StorageLive(_31),
            _31 = _15,
            _30 = (move _31,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:883:45: 883:53 (#0),
                    scope: scope[4],
                },
                kind: _28 = <{closure@regex-automata/src/util/look.rs:878:28: 878:36} as core::ops::Fn<(u16,)>>::call(move _29, move _30) -> [return: bb19, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:883:40: 883:54 (#0),
                    scope: scope[4],
                },
                kind: _26 = move _27(move _28) -> [return: bb20, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_32),
            StorageLive(_33),
            _33 = _13,
            StorageLive(_34),
            StorageLive(_35),
            _35 = &_14,
            StorageLive(_36),
            StorageLive(_37),
            _37 = _16,
            _36 = (move _37,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:883:63: 883:71 (#0),
                    scope: scope[4],
                },
                kind: _34 = <{closure@regex-automata/src/util/look.rs:878:28: 878:36} as core::ops::Fn<(u16,)>>::call(move _35, move _36) -> [return: bb21, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:883:58: 883:72 (#0),
                    scope: scope[4],
                },
                kind: _32 = move _33(move _34) -> [return: bb22, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            _25 = Eq(move _26, move _32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:883:40: 883:72 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _25) -> [0: bb25, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_26),
            _38 = AddWithOverflow(_16, const 1_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:884:25: 884:32 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_38.1: bool), "attempt to compute `{} + {}`, which would overflow", _16, const 1_u16) -> [success: bb24, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = move (_38.0: u16),
            _17 = const (),
            StorageDead(_25),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _22 = const (),
            StorageDead(_40),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = _16,
            _43 = Le(move _44, const 256_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:888:29: 888:38 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _43) -> [0: bb29, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            _42 = const (),
            StorageDead(_43),
            StorageDead(_42),
            StorageLive(_46),
            StorageLive(_47),
            _47 = &mut (*_3),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &_14,
            StorageLive(_50),
            StorageLive(_51),
            _51 = _15,
            _50 = (move _51,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:892:35: 892:43 (#0),
                    scope: scope[4],
                },
                kind: _48 = <{closure@regex-automata/src/util/look.rs:878:28: 878:36} as core::ops::Fn<(u16,)>>::call(move _49, move _50) -> [return: bb30, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageLive(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:888:21: 888:39 (#1687),
                    scope: scope[4],
                },
                kind: _45 = core::panicking::panic(const "assertion failed: b2 <= 256") -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_50),
            StorageDead(_49),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &_14,
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            _57 = _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:892:50: 892:67 (#0),
                    scope: scope[4],
                },
                kind: _56 = core::num::<impl u16>::checked_sub(move _57, const 1_u16) -> [return: bb31, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:892:50: 892:76 (#0),
                    scope: scope[4],
                },
                kind: _55 = core::option::Option::<u16>::unwrap(move _56) -> [return: bb32, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            _54 = (move _55,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:892:45: 892:77 (#0),
                    scope: scope[4],
                },
                kind: _52 = <{closure@regex-automata/src/util/look.rs:878:28: 878:36} as core::ops::Fn<(u16,)>>::call(move _53, move _54) -> [return: bb33, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:892:21: 892:78 (#0),
                    scope: scope[4],
                },
                kind: _46 = util::alphabet::ByteClassSet::set_range(move _47, move _48, move _52) -> [return: bb34, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_46),
            StorageLive(_58),
            _58 = _16,
            _15 = move _58,
            StorageDead(_58),
            _17 = const (),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:881:17: 894:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageLive(_60),
            _0 = const (),
            StorageDead(_60),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:895:13: 895:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:897:6: 897:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:837:5: 897:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:841:6: 841:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:838:9: 838:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/look.rs:839:15: 839:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/look.rs:839:9: 839:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/look.rs:839:9: 839:13 (#0),
                    },
                ),
            ),
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:839:9: 839:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/look.rs:840:14: 840:54 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/look.rs:840:9: 840:12 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/look.rs:840:9: 840:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::alphabet::ByteClassSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:840:9: 840:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:843:13: 843:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:845:17: 845:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::alphabet::ByteClassSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:845:17: 845:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:845:31: 845:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:845:48: 845:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:848:17: 848:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::alphabet::ByteClassSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:848:17: 848:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:849:17: 849:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::alphabet::ByteClassSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:849:17: 849:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/look.rs:875:28: 875:46 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/look.rs:875:21: 875:25 (#0),
                    },
                ),
            ),
        ),
        ty: FnDef(
            DefId(0:4503 ~ regex_automata[00dd]::util::utf8::is_word_byte),
            [],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:875:21: 875:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/look.rs:878:28: 878:61 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/look.rs:878:21: 878:25 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:3533 ~ regex_automata[00dd]::util::look::{impl#4}::add_to_byteset::{closure#0}),
            [
                i8,
                Binder { value: extern "RustCall" fn((u16,)) -> u8, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:878:21: 878:25 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/look.rs:879:35: 879:36 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/look.rs:879:21: 879:27 (#0),
                    },
                ),
            ),
        ),
        ty: u16,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        regex-automata/src/util/look.rs:879:29: 879:32 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:879:21: 879:27 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: regex-automata/src/util/look.rs:880:21: 880:27 (#0),
                    },
                ),
            ),
        ),
        ty: u16,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(2),
                            projs: [],
                        },
                        regex-automata/src/util/look.rs:880:29: 880:32 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:880:21: 880:27 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:837:5: 897:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:881:17: 894:18 (#4853),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:881:23: 881:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:881:17: 894:18 (#4853),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:881:23: 881:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:882:26: 882:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u16, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:882:26: 882:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:21: 885:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:27: 883:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:27: 883:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:40: 883:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:40: 883:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: FnDef(
            DefId(0:4503 ~ regex_automata[00dd]::util::utf8::is_word_byte),
            [],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:40: 883:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:45: 883:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3533 ~ regex_automata[00dd]::util::look::{impl#4}::add_to_byteset::{closure#0}), [i8, Binder { value: extern "RustCall" fn((u16,)) -> u8, bound_vars: [] }, ()]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:45: 883:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: (u16,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:45: 883:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:50: 883:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:58: 883:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: FnDef(
            DefId(0:4503 ~ regex_automata[00dd]::util::utf8::is_word_byte),
            [],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:58: 883:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:63: 883:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3533 ~ regex_automata[00dd]::util::look::{impl#4}::add_to_byteset::{closure#0}), [i8, Binder { value: extern "RustCall" fn((u16,)) -> u8, bound_vars: [] }, ()]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:63: 883:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: (u16,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:63: 883:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:68: 883:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u16, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:884:25: 884:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:883:21: 885:22 (#4855),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:888:21: 888:39 (#1687),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:888:29: 888:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:888:29: 888:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:888:21: 888:39 (#1687),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:888:21: 888:39 (#1687),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:892:21: 892:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::alphabet::ByteClassSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:892:21: 892:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:892:35: 892:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:3533 ~ regex_automata[00dd]::util::look::{impl#4}::add_to_byteset::{closure#0}), [i8, Binder { value: extern "RustCall" fn((u16,)) -> u8, bound_vars: [] }, ()]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:892:35: 892:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u16,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:892:35: 892:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:892:40: 892:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:892:45: 892:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:3533 ~ regex_automata[00dd]::util::look::{impl#4}::add_to_byteset::{closure#0}), [i8, Binder { value: extern "RustCall" fn((u16,)) -> u8, bound_vars: [] }, ()]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:892:45: 892:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u16,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:892:45: 892:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:892:50: 892:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:892:50: 892:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:892:50: 892:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:893:26: 893:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/look.rs:881:17: 894:18 (#4853),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:881:17: 894:18 (#4853),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:881:17: 894:18 (#4853),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:881:17: 894:18 (#4853),
            scope: scope[0],
        },
    },
]