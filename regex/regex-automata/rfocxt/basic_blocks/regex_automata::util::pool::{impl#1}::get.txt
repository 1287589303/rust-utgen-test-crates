[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*((*_1).0: std::boxed::Box<util::pool::inner::Pool<T, F>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:182:19: 182:31 (#0),
                    scope: scope[0],
                },
                kind: _2 = util::pool::inner::Pool::<T, F>::get(move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = util::pool::PoolGuard::<'_, T, F>(move _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:182:31: 182:32 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:183:6: 183:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:181:5: 183:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::pool::PoolGuard<'{erased}, T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:181:26: 181:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::pool::Pool<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:181:16: 181:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::pool::inner::PoolGuard<'{erased}, T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:182:19: 182:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/pool.rs:182:9: 182:32 (#0),
                },
            ),
        ),
        ty: &'{erased} util::pool::inner::Pool<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:182:19: 182:25 (#0),
            scope: scope[0],
        },
    },
]