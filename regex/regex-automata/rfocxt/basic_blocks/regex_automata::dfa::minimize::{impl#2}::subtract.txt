[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:421:9: 421:21 (#0),
                    scope: scope[0],
                },
                kind: _4 = dfa::minimize::StateSet::clear(move _5) -> [return: bb1, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:422:12: 422:27 (#0),
                    scope: scope[0],
                },
                kind: _7 = dfa::minimize::StateSet::is_empty(move _8) -> [return: bb2, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:422:12: 422:27 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:422:48: 425:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:422:31: 422:47 (#0),
                    scope: scope[0],
                },
                kind: _9 = dfa::minimize::StateSet::is_empty(move _10) -> [return: bb5, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:422:31: 422:47 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb9, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:422:48: 425:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_1),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut (*_3),
            _14 = {closure@regex-automata/src/dfa/minimize.rs:423:23: 423:26} { dest: move _15 },
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:423:13: 423:39 (#0),
                    scope: scope[0],
                },
                kind: _12 = dfa::minimize::StateSet::iter::<{closure@regex-automata/src/dfa/minimize.rs:423:23: 423:26}>(move _13, move _14) -> [return: bb8, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
            _0 = const (),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:462:6: 462:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _6 = const (),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &((*_1).0: std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:427:29: 427:46 (#0),
                    scope: scope[0],
                },
                kind: _21 = <std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID>>> as core::ops::Deref>::deref(move _22) -> [return: bb10, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = &(*_21),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:427:29: 427:46 (#0),
                    scope: scope[0],
                },
                kind: _19 = core::cell::RefCell::<std::vec::Vec<util::primitives::StateID>>::borrow(move _20) -> [return: bb11, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &((*_2).0: std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:427:48: 427:66 (#0),
                    scope: scope[0],
                },
                kind: _25 = <std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID>>> as core::ops::Deref>::deref(move _26) -> [return: bb12, unwind: bb80],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = &(*_25),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:427:48: 427:66 (#0),
                    scope: scope[0],
                },
                kind: _23 = core::cell::RefCell::<std::vec::Vec<util::primitives::StateID>>::borrow(move _24) -> [return: bb13, unwind: bb80],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _18 = (move _19, move _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:427:66: 427:67 (#0),
                    scope: scope[0],
                },
                kind: drop(_23) -> [return: bb14, unwind: bb78],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:427:66: 427:67 (#0),
                    scope: scope[0],
                },
                kind: drop(_19) -> [return: bb15, unwind: bb79],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            PlaceMention(_18),
            StorageLive(_16),
            _16 = move (_18.0: core::cell::Ref<'_, std::vec::Vec<util::primitives::StateID>>),
            StorageLive(_17),
            _17 = move (_18.1: core::cell::Ref<'_, std::vec::Vec<util::primitives::StateID>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:427:67: 427:68 (#0),
                    scope: scope[0],
                },
                kind: drop(_18) -> [return: bb16, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_21),
            StorageDead(_18),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &_16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:428:35: 428:46 (#0),
                    scope: scope[1],
                },
                kind: _35 = <core::cell::Ref<'_, std::vec::Vec<util::primitives::StateID>> as core::ops::Deref>::deref(move _36) -> [return: bb17, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = &(*_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:428:35: 428:46 (#0),
                    scope: scope[1],
                },
                kind: _33 = <std::vec::Vec<util::primitives::StateID> as core::ops::Deref>::deref(move _34) -> [return: bb18, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _32 = &(*_33),
            StorageDead(_36),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:428:35: 428:46 (#0),
                    scope: scope[1],
                },
                kind: _31 = core::slice::<impl [util::primitives::StateID]>::iter(move _32) -> [return: bb19, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:428:35: 428:55 (#0),
                    scope: scope[1],
                },
                kind: _30 = <core::slice::Iter<'_, util::primitives::StateID> as core::iter::Iterator>::cloned::<'_, util::primitives::StateID>(move _31) -> [return: bb20, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            _43 = &_17,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:428:57: 428:68 (#0),
                    scope: scope[1],
                },
                kind: _42 = <core::cell::Ref<'_, std::vec::Vec<util::primitives::StateID>> as core::ops::Deref>::deref(move _43) -> [return: bb21, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = &(*_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:428:57: 428:68 (#0),
                    scope: scope[1],
                },
                kind: _40 = <std::vec::Vec<util::primitives::StateID> as core::ops::Deref>::deref(move _41) -> [return: bb22, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _39 = &(*_40),
            StorageDead(_43),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:428:57: 428:68 (#0),
                    scope: scope[1],
                },
                kind: _38 = core::slice::<impl [util::primitives::StateID]>::iter(move _39) -> [return: bb23, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:428:57: 428:77 (#0),
                    scope: scope[1],
                },
                kind: _37 = <core::slice::Iter<'_, util::primitives::StateID> as core::iter::Iterator>::cloned::<'_, util::primitives::StateID>(move _38) -> [return: bb24, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            _29 = (move _30, move _37),
            StorageDead(_37),
            StorageDead(_30),
            PlaceMention(_29),
            StorageLive(_27),
            _27 = move (_29.0: core::iter::Cloned<core::slice::Iter<'_, util::primitives::StateID>>),
            StorageLive(_28),
            _28 = move (_29.1: core::iter::Cloned<core::slice::Iter<'_, util::primitives::StateID>>),
            StorageDead(_42),
            StorageDead(_40),
            StorageDead(_35),
            StorageDead(_33),
            StorageDead(_29),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &mut _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:429:31: 429:41 (#0),
                    scope: scope[2],
                },
                kind: _48 = <core::iter::Cloned<core::slice::Iter<'_, util::primitives::StateID>> as core::iter::Iterator>::next(move _49) -> [return: bb25, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:429:31: 429:50 (#0),
                    scope: scope[2],
                },
                kind: _47 = core::option::Option::<util::primitives::StateID>::unwrap(move _48) -> [return: bb26, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &mut _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:429:52: 429:62 (#0),
                    scope: scope[2],
                },
                kind: _51 = <core::iter::Cloned<core::slice::Iter<'_, util::primitives::StateID>> as core::iter::Iterator>::next(move _52) -> [return: bb27, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:429:52: 429:71 (#0),
                    scope: scope[2],
                },
                kind: _50 = core::option::Option::<util::primitives::StateID>::unwrap(move _51) -> [return: bb28, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            _46 = (move _47, move _50),
            StorageDead(_50),
            StorageDead(_47),
            PlaceMention(_46),
            StorageLive(_44),
            _44 = (_46.0: util::primitives::StateID),
            StorageLive(_45),
            _45 = (_46.1: util::primitives::StateID),
            StorageDead(_46),
            StorageLive(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:430:9: 458:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:430:9: 458:10 (#0),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb30, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            StorageLive(_56),
            _56 = &_44,
            StorageLive(_57),
            _57 = &_45,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:431:16: 431:22 (#0),
                    scope: scope[3],
                },
                kind: _55 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _56, move _57) -> [return: bb31, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:431:16: 431:22 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _55) -> [0: bb44, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_56),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &mut _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:432:27: 432:37 (#0),
                    scope: scope[3],
                },
                kind: _59 = <core::iter::Cloned<core::slice::Iter<'_, util::primitives::StateID>> as core::iter::Iterator>::next(move _60) -> [return: bb33, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            PlaceMention(_59),
            _61 = discriminant(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:432:21: 432:37 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _61) -> [0: bb35, 1: bb36, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:432:27: 432:37 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:433:21: 433:25 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb37, imaginary: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_63),
            _63 = ((_59 as Some).0: util::primitives::StateID),
            _58 = _63,
            StorageDead(_63),
            _44 = move _58,
            StorageDead(_58),
            StorageDead(_59),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            _66 = &mut _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:436:27: 436:37 (#0),
                    scope: scope[3],
                },
                kind: _65 = <core::iter::Cloned<core::slice::Iter<'_, util::primitives::StateID>> as core::iter::Iterator>::next(move _66) -> [return: bb38, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _53 = const (),
            StorageDead(_58),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            PlaceMention(_65),
            _67 = discriminant(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:436:21: 436:37 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _67) -> [0: bb40, 1: bb41, otherwise: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:436:27: 436:37 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:437:21: 437:25 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb42, imaginary: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_72),
            _72 = ((_65 as Some).0: util::primitives::StateID),
            _64 = _72,
            StorageDead(_72),
            _45 = move _64,
            StorageDead(_64),
            StorageDead(_65),
            _54 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:431:13: 457:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_69),
            StorageLive(_70),
            _70 = &mut (*_3),
            StorageLive(_71),
            _71 = _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:438:25: 438:36 (#0),
                    scope: scope[3],
                },
                kind: _69 = dfa::minimize::StateSet::add(move _70, move _71) -> [return: bb43, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            StorageDead(_69),
            _53 = const (),
            StorageDead(_64),
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_56),
            StorageLive(_73),
            StorageLive(_74),
            _74 = &_44,
            StorageLive(_75),
            _75 = &_45,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:443:23: 443:28 (#0),
                    scope: scope[3],
                },
                kind: _73 = <util::primitives::StateID as core::cmp::PartialOrd>::lt(move _74, move _75) -> [return: bb45, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:443:23: 443:28 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _73) -> [0: bb53, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_74),
            StorageLive(_76),
            StorageLive(_77),
            _77 = &mut (*_3),
            StorageLive(_78),
            _78 = _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:444:17: 444:28 (#0),
                    scope: scope[3],
                },
                kind: _76 = dfa::minimize::StateSet::add(move _77, move _78) -> [return: bb47, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_77),
            StorageDead(_76),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            _81 = &mut _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:445:27: 445:37 (#0),
                    scope: scope[3],
                },
                kind: _80 = <core::iter::Cloned<core::slice::Iter<'_, util::primitives::StateID>> as core::iter::Iterator>::next(move _81) -> [return: bb48, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            PlaceMention(_80),
            _82 = discriminant(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:445:21: 445:37 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _82) -> [0: bb50, 1: bb51, otherwise: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:445:27: 445:37 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:446:21: 446:25 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb52, imaginary: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_84),
            _84 = ((_80 as Some).0: util::primitives::StateID),
            _79 = _84,
            StorageDead(_84),
            _44 = move _79,
            StorageDead(_79),
            StorageDead(_80),
            _54 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:443:20: 457:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _53 = const (),
            StorageDead(_79),
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_74),
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            _87 = &mut _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:450:27: 450:37 (#0),
                    scope: scope[3],
                },
                kind: _86 = <core::iter::Cloned<core::slice::Iter<'_, util::primitives::StateID>> as core::iter::Iterator>::next(move _87) -> [return: bb54, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            PlaceMention(_86),
            _88 = discriminant(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:450:21: 450:37 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _88) -> [0: bb56, 1: bb57, otherwise: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:450:27: 450:37 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:451:21: 451:25 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb58, imaginary: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_93),
            _93 = ((_86 as Some).0: util::primitives::StateID),
            _85 = _93,
            StorageDead(_93),
            _45 = move _85,
            StorageDead(_85),
            StorageDead(_86),
            _54 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:443:20: 457:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_90),
            StorageLive(_91),
            _91 = &mut (*_3),
            StorageLive(_92),
            _92 = _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:452:25: 452:36 (#0),
                    scope: scope[3],
                },
                kind: _90 = dfa::minimize::StateSet::add(move _91, move _92) -> [return: bb59, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_91),
            StorageDead(_90),
            _53 = const (),
            StorageDead(_85),
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:431:13: 457:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:430:9: 458:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageDead(_53),
            StorageLive(_94),
            StorageLive(_95),
            _95 = move _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
                    scope: scope[3],
                },
                kind: _94 = <core::iter::Cloned<core::slice::Iter<'_, util::primitives::StateID>> as core::iter::IntoIterator>::into_iter(move _95) -> [return: bb64, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            PlaceMention(_94),
            StorageLive(_96),
            _96 = move _94,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:459:9: 461:10 (#3225),
                    scope: scope[8],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:459:9: 461:10 (#3225),
                    scope: scope[8],
                },
                kind: falseUnwind -> [real: bb66, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_97),
            StorageLive(_98),
            StorageLive(_99),
            StorageLive(_100),
            _100 = &mut _96,
            _99 = &mut (*_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
                    scope: scope[8],
                },
                kind: _98 = <core::iter::Cloned<core::slice::Iter<'_, util::primitives::StateID>> as core::iter::Iterator>::next(move _99) -> [return: bb67, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            PlaceMention(_98),
            _101 = discriminant(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
                    scope: scope[8],
                },
                kind: switchInt(move _101) -> [0: bb69, 1: bb70, otherwise: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
                    scope: scope[8],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:459:9: 461:10 (#3225),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb71, imaginary: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_103),
            _103 = ((_98 as Some).0: util::primitives::StateID),
            StorageLive(_104),
            StorageLive(_105),
            _105 = &mut (*_3),
            StorageLive(_106),
            _106 = _103,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:460:13: 460:24 (#0),
                    scope: scope[9],
                },
                kind: _104 = dfa::minimize::StateSet::add(move _105, move _106) -> [return: bb72, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_100),
            StorageDead(_98),
            StorageDead(_97),
            StorageDead(_96),
            StorageDead(_94),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:462:5: 462:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_17) -> [return: bb73, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            StorageDead(_105),
            StorageDead(_104),
            _97 = const (),
            StorageDead(_103),
            StorageDead(_100),
            StorageDead(_98),
            StorageDead(_97),
            _54 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:459:9: 461:10 (#3225),
                    scope: scope[8],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:462:5: 462:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb74, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:462:6: 462:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:462:6: 462:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:462:5: 462:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_17) -> [return: bb77, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:462:5: 462:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb81, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:427:66: 427:67 (#0),
                    scope: scope[0],
                },
                kind: drop(_19) -> [return: bb79, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:427:67: 427:68 (#0),
                    scope: scope[0],
                },
                kind: drop(_18) -> [return: bb81, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:427:66: 427:67 (#0),
                    scope: scope[0],
                },
                kind: drop(_19) -> [return: bb81, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:420:5: 462:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:420:62: 420:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:420:17: 420:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/minimize.rs:420:31: 420:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:420:24: 420:29 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:420:24: 420:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:420:24: 420:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/minimize.rs:420:48: 420:61 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:420:42: 420:46 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:420:42: 420:46 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:420:42: 420:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:421:9: 421:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:421:9: 421:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:422:9: 425:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:422:12: 422:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:422:12: 422:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:422:31: 422:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:422:31: 422:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:422:48: 425:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:423:13: 423:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:423:13: 423:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1134 ~ regex_automata[00dd]::dfa::minimize::{impl#2}::subtract::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::primitives::StateID,)), bound_vars: [] },
                (&'{erased} mut dfa::minimize::StateSet,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:423:23: 423:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:423:23: 423:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                regex-automata/src/dfa/minimize.rs:427:28: 427:67 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:427:13: 427:25 (#0),
                    },
                ),
            ),
        ),
        ty: core::cell::Ref<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:427:14: 427:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                regex-automata/src/dfa/minimize.rs:427:28: 427:67 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:427:13: 427:25 (#0),
                    },
                ),
            ),
        ),
        ty: core::cell::Ref<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:427:20: 427:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::cell::Ref<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>, core::cell::Ref<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:427:28: 427:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::cell::Ref<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:427:29: 427:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:427:29: 427:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:427:29: 427:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:427:29: 427:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::cell::Ref<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:427:48: 427:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:427:48: 427:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:427:48: 427:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:427:48: 427:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _29,
                                ),
                                regex-automata/src/dfa/minimize.rs:428:34: 428:78 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:428:13: 428:31 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:14: 428:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _29,
                                ),
                                regex-automata/src/dfa/minimize.rs:428:34: 428:78 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:428:13: 428:31 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:23: 428:30 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>, core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:34: 428:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:35: 428:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:35: 428:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:35: 428:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:35: 428:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:35: 428:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:35: 428:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::Ref<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:35: 428:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:57: 428:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:57: 428:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:57: 428:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:57: 428:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:57: 428:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:57: 428:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::Ref<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:428:57: 428:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-automata/src/dfa/minimize.rs:429:30: 429:72 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:429:13: 429:27 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:429:14: 429:19 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-automata/src/dfa/minimize.rs:429:30: 429:72 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:429:13: 429:27 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:429:21: 429:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID, util::primitives::StateID),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:429:30: 429:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:429:31: 429:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:429:31: 429:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:429:31: 429:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:429:52: 429:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:429:52: 429:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:429:52: 429:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:430:9: 458:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:420:5: 462:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:431:13: 457:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:431:16: 431:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:431:13: 457:14 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:431:16: 431:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:431:13: 457:14 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:431:21: 431:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:432:21: 435:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:432:27: 432:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:432:27: 432:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:433:21: 433:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:433:29: 433:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _59,
                                ),
                                regex-automata/src/dfa/minimize.rs:432:27: 432:37 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:434:21: 434:28 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:434:26: 434:27 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:436:21: 442:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:436:27: 436:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:436:27: 436:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:437:21: 437:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:437:29: 440:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:438:25: 438:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:438:25: 438:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:438:34: 438:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _65,
                                ),
                                regex-automata/src/dfa/minimize.rs:436:27: 436:37 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:441:21: 441:28 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:441:26: 441:27 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:431:13: 457:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:443:23: 443:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:431:13: 457:14 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:443:23: 443:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:431:13: 457:14 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:443:27: 443:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:444:17: 444:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:444:17: 444:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:444:26: 444:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:445:21: 448:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:445:27: 445:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:445:27: 445:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:446:21: 446:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:446:29: 446:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _80,
                                ),
                                regex-automata/src/dfa/minimize.rs:445:27: 445:37 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:447:21: 447:28 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:447:26: 447:27 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:450:21: 456:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:450:27: 450:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:450:27: 450:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:451:21: 451:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:451:29: 454:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:452:25: 452:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:452:25: 452:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:452:34: 452:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _86,
                                ),
                                regex-automata/src/dfa/minimize.rs:450:27: 450:37 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:455:21: 455:28 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:455:26: 455:27 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:459:9: 461:10 (#3225),
                },
            ),
        ),
        ty: core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:459:9: 461:10 (#3225),
                },
            ),
        ),
        ty: core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _94,
                                ),
                                regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
                    },
                ),
            ),
        ),
        ty: core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Cloned<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:459:9: 461:10 (#3225),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:459:9: 461:10 (#3225),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _98,
                                ),
                                regex-automata/src/dfa/minimize.rs:459:18: 459:21 (#3226),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:459:13: 459:14 (#3227),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:459:13: 459:14 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:460:13: 460:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:460:13: 460:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:460:22: 460:23 (#0),
            scope: scope[0],
        },
    },
]