[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _1,
            StorageLive(_5),
            _5 = _2,
            _3 = util::wire::DeserializeErrorKind::PatternID { err: move _4, what: move _5 },
            StorageDead(_5),
            StorageDead(_4),
            _0 = util::wire::DeserializeError(move _3),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:204:6: 204:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:202:10: 202:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/wire.rs:200:14: 200:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/wire.rs:200:9: 200:12 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/wire.rs:200:9: 200:12 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternIDError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:200:9: 200:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/wire.rs:201:15: 201:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/wire.rs:201:9: 201:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/wire.rs:201:9: 201:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:201:9: 201:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:203:26: 203:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::PatternIDError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:203:60: 203:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:203:65: 203:69 (#0),
            scope: scope[0],
        },
    },
]