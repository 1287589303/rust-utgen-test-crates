[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
            _2 = nfa::thompson::error::BuildErrorKind::Captures(move _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:101:56: 101:57 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = nfa::thompson::error::BuildError { kind: move _2 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:101:58: 101:59 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:102:5: 102:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:102:6: 102:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:101:58: 101:59 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:102:5: 102:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:100:5: 102:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::error::BuildError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:100:62: 100:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/error.rs:100:33: 100:57 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/error.rs:100:28: 100:31 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/error.rs:100:28: 100:31 (#0),
                    },
                ),
            ),
        ),
        ty: util::captures::GroupInfoError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:100:28: 100:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::error::BuildErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:101:28: 101:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::captures::GroupInfoError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:101:53: 101:56 (#0),
            scope: scope[0],
        },
    },
]