[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: std::sync::Arc<util::captures::GroupInfoInner>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1990:9: 1990:30 (#0),
                    scope: scope[0],
                },
                kind: _4 = <std::sync::Arc<util::captures::GroupInfoInner> as core::ops::Deref>::deref(move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &(*_4),
            StorageDead(_5),
            StorageLive(_6),
            _6 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1990:9: 1990:30 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::captures::GroupInfoInner::group_len(move _3, move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1991:6: 1991:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1989:5: 1991:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1989:48: 1989:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1989:22: 1989:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/captures.rs:1989:34: 1989:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:1989:29: 1989:32 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:1989:29: 1989:32 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1989:29: 1989:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1990:9: 1990:30 (#0),
                },
            ),
        ),
        ty: &'{erased} util::captures::GroupInfoInner,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1990:9: 1990:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1990:9: 1990:30 (#0),
                },
            ),
        ),
        ty: &'{erased} util::captures::GroupInfoInner,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1990:9: 1990:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1990:9: 1990:30 (#0),
                },
            ),
        ),
        ty: &'{erased} std::sync::Arc<util::captures::GroupInfoInner, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1990:9: 1990:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1990:9: 1990:30 (#0),
                },
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1990:26: 1990:29 (#0),
            scope: scope[0],
        },
    },
]