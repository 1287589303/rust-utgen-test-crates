[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).2: util::primitives::StateID),
            StorageLive(_5),
            StorageLive(_6),
            _6 = const dfa::DEAD,
            _5 = &_6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:264:12: 264:34 (#0),
                    scope: scope[0],
                },
                kind: _3 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:264:12: 264:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb7, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &((*_1).3: util::primitives::StateID),
            StorageLive(_9),
            StorageLive(_10),
            _10 = const dfa::DEAD,
            _9 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:264:38: 264:60 (#0),
                    scope: scope[0],
                },
                kind: _7 = <util::primitives::StateID as core::cmp::PartialEq>::ne(move _8, move _9) -> [return: bb3, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:264:38: 264:60 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb6, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#484),
                    scope: scope[0],
                },
                kind: _12 = util::wire::DeserializeError::generic(const "min_match is DEAD, but max_match is not") -> [return: bb5, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _12),
            StorageDead(_12),
            StorageDead(_7),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = const (),
            StorageDead(_7),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &((*_1).2: util::primitives::StateID),
            StorageLive(_16),
            StorageLive(_17),
            _17 = const dfa::DEAD,
            _16 = &_17,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:267:12: 267:34 (#0),
                    scope: scope[0],
                },
                kind: _14 = <util::primitives::StateID as core::cmp::PartialEq>::ne(move _15, move _16) -> [return: bb9, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:267:12: 267:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _14) -> [0: bb15, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &((*_1).3: util::primitives::StateID),
            StorageLive(_20),
            StorageLive(_21),
            _21 = const dfa::DEAD,
            _20 = &_21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:267:38: 267:60 (#0),
                    scope: scope[0],
                },
                kind: _18 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _19, move _20) -> [return: bb11, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:267:38: 267:60 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _18) -> [0: bb14, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#485),
                    scope: scope[0],
                },
                kind: _23 = util::wire::DeserializeError::generic(const "max_match is DEAD, but min_match is not") -> [return: bb13, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _23),
            StorageDead(_23),
            StorageDead(_18),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = const (),
            StorageDead(_18),
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &((*_1).4: util::primitives::StateID),
            StorageLive(_27),
            StorageLive(_28),
            _28 = const dfa::DEAD,
            _27 = &_28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:270:12: 270:34 (#0),
                    scope: scope[0],
                },
                kind: _25 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _26, move _27) -> [return: bb17, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:270:12: 270:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _25) -> [0: bb23, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &((*_1).5: util::primitives::StateID),
            StorageLive(_31),
            StorageLive(_32),
            _32 = const dfa::DEAD,
            _31 = &_32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:270:38: 270:60 (#0),
                    scope: scope[0],
                },
                kind: _29 = <util::primitives::StateID as core::cmp::PartialEq>::ne(move _30, move _31) -> [return: bb19, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:270:38: 270:60 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _29) -> [0: bb22, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_30),
            StorageLive(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#486),
                    scope: scope[0],
                },
                kind: _34 = util::wire::DeserializeError::generic(const "min_accel is DEAD, but max_accel is not") -> [return: bb21, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _34),
            StorageDead(_34),
            StorageDead(_29),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = const (),
            StorageDead(_29),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &((*_1).4: util::primitives::StateID),
            StorageLive(_38),
            StorageLive(_39),
            _39 = const dfa::DEAD,
            _38 = &_39,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:273:12: 273:34 (#0),
                    scope: scope[0],
                },
                kind: _36 = <util::primitives::StateID as core::cmp::PartialEq>::ne(move _37, move _38) -> [return: bb25, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:273:12: 273:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _36) -> [0: bb31, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &((*_1).5: util::primitives::StateID),
            StorageLive(_42),
            StorageLive(_43),
            _43 = const dfa::DEAD,
            _42 = &_43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:273:38: 273:60 (#0),
                    scope: scope[0],
                },
                kind: _40 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _41, move _42) -> [return: bb27, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:273:38: 273:60 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _40) -> [0: bb30, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
            StorageLive(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#487),
                    scope: scope[0],
                },
                kind: _45 = util::wire::DeserializeError::generic(const "max_accel is DEAD, but min_accel is not") -> [return: bb29, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _45),
            StorageDead(_45),
            StorageDead(_40),
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = const (),
            StorageDead(_40),
            StorageDead(_36),
            StorageDead(_35),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            _48 = &((*_1).6: util::primitives::StateID),
            StorageLive(_49),
            StorageLive(_50),
            _50 = const dfa::DEAD,
            _49 = &_50,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:276:12: 276:34 (#0),
                    scope: scope[0],
                },
                kind: _47 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _48, move _49) -> [return: bb33, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:276:12: 276:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _47) -> [0: bb39, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_48),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &((*_1).7: util::primitives::StateID),
            StorageLive(_53),
            StorageLive(_54),
            _54 = const dfa::DEAD,
            _53 = &_54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:276:38: 276:60 (#0),
                    scope: scope[0],
                },
                kind: _51 = <util::primitives::StateID as core::cmp::PartialEq>::ne(move _52, move _53) -> [return: bb35, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:276:38: 276:60 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _51) -> [0: bb38, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
            StorageDead(_52),
            StorageLive(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#488),
                    scope: scope[0],
                },
                kind: _56 = util::wire::DeserializeError::generic(const "min_start is DEAD, but max_start is not") -> [return: bb37, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _56),
            StorageDead(_56),
            StorageDead(_51),
            StorageDead(_47),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _46 = const (),
            StorageDead(_51),
            StorageDead(_47),
            StorageDead(_46),
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &((*_1).6: util::primitives::StateID),
            StorageLive(_60),
            StorageLive(_61),
            _61 = const dfa::DEAD,
            _60 = &_61,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:279:12: 279:34 (#0),
                    scope: scope[0],
                },
                kind: _58 = <util::primitives::StateID as core::cmp::PartialEq>::ne(move _59, move _60) -> [return: bb41, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:279:12: 279:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _58) -> [0: bb47, otherwise: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
            StorageDead(_59),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &((*_1).7: util::primitives::StateID),
            StorageLive(_64),
            StorageLive(_65),
            _65 = const dfa::DEAD,
            _64 = &_65,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:279:38: 279:60 (#0),
                    scope: scope[0],
                },
                kind: _62 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _63, move _64) -> [return: bb43, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:279:38: 279:60 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _62) -> [0: bb46, otherwise: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageDead(_64),
            StorageDead(_63),
            StorageLive(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#489),
                    scope: scope[0],
                },
                kind: _67 = util::wire::DeserializeError::generic(const "max_start is DEAD, but min_start is not") -> [return: bb45, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _67),
            StorageDead(_67),
            StorageDead(_62),
            StorageDead(_58),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageDead(_64),
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _57 = const (),
            StorageDead(_62),
            StorageDead(_58),
            StorageDead(_57),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            _70 = &((*_1).2: util::primitives::StateID),
            StorageLive(_71),
            _71 = &((*_1).3: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:284:12: 284:43 (#0),
                    scope: scope[0],
                },
                kind: _69 = <util::primitives::StateID as core::cmp::PartialOrd>::gt(move _70, move _71) -> [return: bb49, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:284:12: 284:43 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _69) -> [0: bb52, otherwise: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            StorageLive(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#490),
                    scope: scope[0],
                },
                kind: _73 = util::wire::DeserializeError::generic(const "min_match should not be greater than max_match") -> [return: bb51, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _73),
            StorageDead(_73),
            StorageDead(_69),
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            _68 = const (),
            StorageDead(_69),
            StorageDead(_68),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            _76 = &((*_1).4: util::primitives::StateID),
            StorageLive(_77),
            _77 = &((*_1).5: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:287:12: 287:43 (#0),
                    scope: scope[0],
                },
                kind: _75 = <util::primitives::StateID as core::cmp::PartialOrd>::gt(move _76, move _77) -> [return: bb53, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:287:12: 287:43 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _75) -> [0: bb56, otherwise: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_76),
            StorageLive(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#491),
                    scope: scope[0],
                },
                kind: _79 = util::wire::DeserializeError::generic(const "min_accel should not be greater than max_accel") -> [return: bb55, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _79),
            StorageDead(_79),
            StorageDead(_75),
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_76),
            _74 = const (),
            StorageDead(_75),
            StorageDead(_74),
            StorageLive(_80),
            StorageLive(_81),
            StorageLive(_82),
            _82 = &((*_1).6: util::primitives::StateID),
            StorageLive(_83),
            _83 = &((*_1).7: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:290:12: 290:43 (#0),
                    scope: scope[0],
                },
                kind: _81 = <util::primitives::StateID as core::cmp::PartialOrd>::gt(move _82, move _83) -> [return: bb57, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:290:12: 290:43 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _81) -> [0: bb60, otherwise: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_82),
            StorageLive(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#492),
                    scope: scope[0],
                },
                kind: _85 = util::wire::DeserializeError::generic(const "min_start should not be greater than max_start") -> [return: bb59, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _85),
            StorageDead(_85),
            StorageDead(_81),
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_82),
            _80 = const (),
            StorageDead(_81),
            StorageDead(_80),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:295:12: 295:26 (#0),
                    scope: scope[0],
                },
                kind: _87 = dfa::special::Special::matches(move _88) -> [return: bb61, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:295:12: 295:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _87) -> [0: bb67, otherwise: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageLive(_89),
            StorageLive(_90),
            _90 = &((*_1).1: util::primitives::StateID),
            StorageLive(_91),
            _91 = &((*_1).2: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:295:30: 295:60 (#0),
                    scope: scope[0],
                },
                kind: _89 = <util::primitives::StateID as core::cmp::PartialOrd>::ge(move _90, move _91) -> [return: bb63, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:295:30: 295:60 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _89) -> [0: bb66, otherwise: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageDead(_90),
            StorageLive(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#493),
                    scope: scope[0],
                },
                kind: _93 = util::wire::DeserializeError::generic(const "quit_id should not be greater than min_match") -> [return: bb65, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _93),
            StorageDead(_93),
            StorageDead(_89),
            StorageDead(_87),
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb68,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb68,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _86 = const (),
            StorageDead(_89),
            StorageDead(_87),
            StorageDead(_86),
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            _96 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:298:12: 298:25 (#0),
                    scope: scope[0],
                },
                kind: _95 = dfa::special::Special::accels(move _96) -> [return: bb69, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:298:12: 298:25 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _95) -> [0: bb75, otherwise: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = &((*_1).1: util::primitives::StateID),
            StorageLive(_99),
            _99 = &((*_1).4: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:298:29: 298:59 (#0),
                    scope: scope[0],
                },
                kind: _97 = <util::primitives::StateID as core::cmp::PartialOrd>::ge(move _98, move _99) -> [return: bb71, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:298:29: 298:59 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _97) -> [0: bb74, otherwise: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            StorageDead(_98),
            StorageLive(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#494),
                    scope: scope[0],
                },
                kind: _101 = util::wire::DeserializeError::generic(const "quit_id should not be greater than min_accel") -> [return: bb73, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _101),
            StorageDead(_101),
            StorageDead(_97),
            StorageDead(_95),
            StorageDead(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            StorageDead(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _94 = const (),
            StorageDead(_97),
            StorageDead(_95),
            StorageDead(_94),
            StorageLive(_102),
            StorageLive(_103),
            StorageLive(_104),
            _104 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:301:12: 301:25 (#0),
                    scope: scope[0],
                },
                kind: _103 = dfa::special::Special::starts(move _104) -> [return: bb77, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:301:12: 301:25 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _103) -> [0: bb83, otherwise: bb78],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageLive(_105),
            StorageLive(_106),
            _106 = &((*_1).1: util::primitives::StateID),
            StorageLive(_107),
            _107 = &((*_1).6: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:301:29: 301:59 (#0),
                    scope: scope[0],
                },
                kind: _105 = <util::primitives::StateID as core::cmp::PartialOrd>::ge(move _106, move _107) -> [return: bb79, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:301:29: 301:59 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _105) -> [0: bb82, otherwise: bb80],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
            StorageDead(_106),
            StorageLive(_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#495),
                    scope: scope[0],
                },
                kind: _109 = util::wire::DeserializeError::generic(const "quit_id should not be greater than min_start") -> [return: bb81, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _109),
            StorageDead(_109),
            StorageDead(_105),
            StorageDead(_103),
            StorageDead(_102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
            StorageDead(_106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb84,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb84,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _102 = const (),
            StorageDead(_105),
            StorageDead(_103),
            StorageDead(_102),
            StorageLive(_110),
            StorageLive(_111),
            StorageLive(_112),
            _112 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:304:12: 304:26 (#0),
                    scope: scope[0],
                },
                kind: _111 = dfa::special::Special::matches(move _112) -> [return: bb85, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:304:12: 304:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _111) -> [0: bb94, otherwise: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            StorageLive(_113),
            StorageLive(_114),
            _114 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:304:30: 304:43 (#0),
                    scope: scope[0],
                },
                kind: _113 = dfa::special::Special::accels(move _114) -> [return: bb87, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:304:30: 304:43 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _113) -> [0: bb93, otherwise: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
            StorageLive(_115),
            StorageLive(_116),
            _116 = &((*_1).4: util::primitives::StateID),
            StorageLive(_117),
            _117 = &((*_1).2: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:304:47: 304:78 (#0),
                    scope: scope[0],
                },
                kind: _115 = <util::primitives::StateID as core::cmp::PartialOrd>::lt(move _116, move _117) -> [return: bb89, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:304:47: 304:78 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _115) -> [0: bb92, otherwise: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
            StorageDead(_116),
            StorageLive(_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#496),
                    scope: scope[0],
                },
                kind: _119 = util::wire::DeserializeError::generic(const "min_match should not be greater than min_accel") -> [return: bb91, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _119),
            StorageDead(_119),
            StorageDead(_115),
            StorageDead(_113),
            StorageDead(_111),
            StorageDead(_110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
            StorageDead(_116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb95,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb95,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb95,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _110 = const (),
            StorageDead(_115),
            StorageDead(_113),
            StorageDead(_111),
            StorageDead(_110),
            StorageLive(_120),
            StorageLive(_121),
            StorageLive(_122),
            _122 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:307:12: 307:26 (#0),
                    scope: scope[0],
                },
                kind: _121 = dfa::special::Special::matches(move _122) -> [return: bb96, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:307:12: 307:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _121) -> [0: bb105, otherwise: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_122),
            StorageLive(_123),
            StorageLive(_124),
            _124 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:307:30: 307:43 (#0),
                    scope: scope[0],
                },
                kind: _123 = dfa::special::Special::starts(move _124) -> [return: bb98, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:307:30: 307:43 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _123) -> [0: bb104, otherwise: bb99],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageLive(_125),
            StorageLive(_126),
            _126 = &((*_1).6: util::primitives::StateID),
            StorageLive(_127),
            _127 = &((*_1).2: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:307:47: 307:78 (#0),
                    scope: scope[0],
                },
                kind: _125 = <util::primitives::StateID as core::cmp::PartialOrd>::lt(move _126, move _127) -> [return: bb100, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:307:47: 307:78 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _125) -> [0: bb103, otherwise: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            StorageDead(_126),
            StorageLive(_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#497),
                    scope: scope[0],
                },
                kind: _129 = util::wire::DeserializeError::generic(const "min_match should not be greater than min_start") -> [return: bb102, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _129),
            StorageDead(_129),
            StorageDead(_125),
            StorageDead(_123),
            StorageDead(_121),
            StorageDead(_120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            StorageDead(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb106,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb106,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_122),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb106,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _120 = const (),
            StorageDead(_125),
            StorageDead(_123),
            StorageDead(_121),
            StorageDead(_120),
            StorageLive(_130),
            StorageLive(_131),
            StorageLive(_132),
            _132 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:310:12: 310:25 (#0),
                    scope: scope[0],
                },
                kind: _131 = dfa::special::Special::accels(move _132) -> [return: bb107, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:310:12: 310:25 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _131) -> [0: bb116, otherwise: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_132),
            StorageLive(_133),
            StorageLive(_134),
            _134 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:310:29: 310:42 (#0),
                    scope: scope[0],
                },
                kind: _133 = dfa::special::Special::starts(move _134) -> [return: bb109, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:310:29: 310:42 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _133) -> [0: bb115, otherwise: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_134),
            StorageLive(_135),
            StorageLive(_136),
            _136 = &((*_1).6: util::primitives::StateID),
            StorageLive(_137),
            _137 = &((*_1).4: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:310:46: 310:77 (#0),
                    scope: scope[0],
                },
                kind: _135 = <util::primitives::StateID as core::cmp::PartialOrd>::lt(move _136, move _137) -> [return: bb111, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:310:46: 310:77 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _135) -> [0: bb114, otherwise: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            StorageDead(_136),
            StorageLive(_139),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#498),
                    scope: scope[0],
                },
                kind: _139 = util::wire::DeserializeError::generic(const "min_accel should not be greater than min_start") -> [return: bb113, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _139),
            StorageDead(_139),
            StorageDead(_135),
            StorageDead(_133),
            StorageDead(_131),
            StorageDead(_130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            StorageDead(_136),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _130 = const (),
            StorageDead(_135),
            StorageDead(_133),
            StorageDead(_131),
            StorageDead(_130),
            StorageLive(_140),
            StorageLive(_141),
            StorageLive(_142),
            _142 = &((*_1).0: util::primitives::StateID),
            StorageLive(_143),
            _143 = &((*_1).1: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:315:12: 315:35 (#0),
                    scope: scope[0],
                },
                kind: _141 = <util::primitives::StateID as core::cmp::PartialOrd>::lt(move _142, move _143) -> [return: bb118, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:315:12: 315:35 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _141) -> [0: bb121, otherwise: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
            StorageDead(_142),
            StorageLive(_145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#499),
                    scope: scope[0],
                },
                kind: _145 = util::wire::DeserializeError::generic(const "quit_id should not be greater than max") -> [return: bb120, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _145),
            StorageDead(_145),
            StorageDead(_141),
            StorageDead(_140),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
            StorageDead(_142),
            _140 = const (),
            StorageDead(_141),
            StorageDead(_140),
            StorageLive(_146),
            StorageLive(_147),
            StorageLive(_148),
            _148 = &((*_1).0: util::primitives::StateID),
            StorageLive(_149),
            _149 = &((*_1).3: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:318:12: 318:37 (#0),
                    scope: scope[0],
                },
                kind: _147 = <util::primitives::StateID as core::cmp::PartialOrd>::lt(move _148, move _149) -> [return: bb122, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:318:12: 318:37 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _147) -> [0: bb125, otherwise: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_149),
            StorageDead(_148),
            StorageLive(_151),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#500),
                    scope: scope[0],
                },
                kind: _151 = util::wire::DeserializeError::generic(const "max_match should not be greater than max") -> [return: bb124, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _151),
            StorageDead(_151),
            StorageDead(_147),
            StorageDead(_146),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_149),
            StorageDead(_148),
            _146 = const (),
            StorageDead(_147),
            StorageDead(_146),
            StorageLive(_152),
            StorageLive(_153),
            StorageLive(_154),
            _154 = &((*_1).0: util::primitives::StateID),
            StorageLive(_155),
            _155 = &((*_1).5: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:321:12: 321:37 (#0),
                    scope: scope[0],
                },
                kind: _153 = <util::primitives::StateID as core::cmp::PartialOrd>::lt(move _154, move _155) -> [return: bb126, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:321:12: 321:37 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _153) -> [0: bb129, otherwise: bb127],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_155),
            StorageDead(_154),
            StorageLive(_157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#501),
                    scope: scope[0],
                },
                kind: _157 = util::wire::DeserializeError::generic(const "max_accel should not be greater than max") -> [return: bb128, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _157),
            StorageDead(_157),
            StorageDead(_153),
            StorageDead(_152),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_155),
            StorageDead(_154),
            _152 = const (),
            StorageDead(_153),
            StorageDead(_152),
            StorageLive(_158),
            StorageLive(_159),
            StorageLive(_160),
            _160 = &((*_1).0: util::primitives::StateID),
            StorageLive(_161),
            _161 = &((*_1).7: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:324:12: 324:37 (#0),
                    scope: scope[0],
                },
                kind: _159 = <util::primitives::StateID as core::cmp::PartialOrd>::lt(move _160, move _161) -> [return: bb130, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:324:12: 324:37 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _159) -> [0: bb133, otherwise: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_161),
            StorageDead(_160),
            StorageLive(_163),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#502),
                    scope: scope[0],
                },
                kind: _163 = util::wire::DeserializeError::generic(const "max_start should not be greater than max") -> [return: bb132, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _163),
            StorageDead(_163),
            StorageDead(_159),
            StorageDead(_158),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_161),
            StorageDead(_160),
            _158 = const (),
            StorageDead(_159),
            StorageDead(_158),
            StorageLive(_164),
            _164 = (),
            _0 = core::result::Result::<(), util::wire::DeserializeError>::Ok(move _164),
            StorageDead(_164),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:329:6: 329:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:329:6: 329:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:262:5: 329:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:262:38: 262:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:262:28: 262:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:264:9: 266:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:264:12: 264:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:264:12: 264:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:264:30: 264:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:264:30: 264:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:264:38: 264:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:264:38: 264:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:264:56: 264:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:264:56: 264:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:264:61: 266:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#484),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:267:9: 269:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:267:12: 267:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:267:12: 267:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:267:30: 267:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:267:30: 267:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:267:38: 267:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:267:38: 267:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:267:56: 267:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:267:56: 267:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:267:61: 269:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#485),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:270:9: 272:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:270:12: 270:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:270:12: 270:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:270:30: 270:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:270:30: 270:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:270:38: 270:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:270:38: 270:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:270:56: 270:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:270:56: 270:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:270:61: 272:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#486),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:273:9: 275:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:273:12: 273:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:273:12: 273:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:273:30: 273:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:273:30: 273:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:273:38: 273:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:273:38: 273:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:273:56: 273:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:273:56: 273:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:273:61: 275:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#487),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:276:9: 278:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:276:12: 276:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:276:12: 276:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:276:30: 276:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:276:30: 276:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:276:38: 276:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:276:38: 276:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:276:56: 276:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:276:56: 276:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:276:61: 278:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#488),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:279:9: 281:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:279:12: 279:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:279:12: 279:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:279:30: 279:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:279:30: 279:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:279:38: 279:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:279:38: 279:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:279:56: 279:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:279:56: 279:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:279:61: 281:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#489),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:284:9: 286:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:284:12: 284:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:284:12: 284:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:284:29: 284:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:284:44: 286:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#490),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:287:9: 289:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:287:12: 287:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:287:12: 287:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:287:29: 287:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:287:44: 289:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#491),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:290:9: 292:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:290:12: 290:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:290:12: 290:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:290:29: 290:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:290:44: 292:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#492),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:295:9: 297:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:295:12: 295:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:295:12: 295:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:295:30: 295:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:295:30: 295:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:295:46: 295:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:295:61: 297:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#493),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:298:9: 300:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:298:12: 298:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:298:12: 298:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:298:29: 298:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:298:29: 298:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:298:45: 298:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:298:60: 300:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#494),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:301:9: 303:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:301:12: 301:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:301:12: 301:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:301:29: 301:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:301:29: 301:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:301:45: 301:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:301:60: 303:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#495),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:304:9: 306:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:304:12: 304:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:304:12: 304:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:304:30: 304:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:304:30: 304:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:304:47: 304:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:304:47: 304:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:304:64: 304:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:304:79: 306:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#496),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:307:9: 309:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:307:12: 307:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:307:12: 307:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:307:30: 307:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:307:30: 307:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:307:47: 307:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:307:47: 307:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:307:64: 307:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:307:79: 309:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#497),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:310:9: 312:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:310:12: 310:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:310:12: 310:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:310:29: 310:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:310:29: 310:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:310:46: 310:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:310:46: 310:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:310:63: 310:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:310:78: 312:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#498),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:315:9: 317:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:315:12: 315:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:315:12: 315:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:315:23: 315:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:315:36: 317:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#499),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:318:9: 320:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:318:12: 318:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:318:12: 318:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:318:23: 318:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:318:38: 320:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#500),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:321:9: 323:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:321:12: 321:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:321:12: 321:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:321:23: 321:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:321:38: 323:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#501),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:324:9: 326:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:324:12: 324:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:324:12: 324:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:324:23: 324:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:324:38: 326:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:11:20: 11:51 (#502),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:328:12: 328:14 (#0),
            scope: scope[0],
        },
    },
]