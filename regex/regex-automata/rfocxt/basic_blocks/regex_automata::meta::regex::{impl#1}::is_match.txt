[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:531:21: 531:33 (#0),
                    scope: scope[0],
                },
                kind: _4 = <I as core::convert::Into<util::search::Input<'_>>>::into(move _5) -> [return: bb1, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:531:21: 531:48 (#0),
                    scope: scope[0],
                },
                kind: _3 = util::search::Input::<'_>::earliest(move _4, const true) -> [return: bb2, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_1).0: std::sync::Arc<meta::regex::RegexI>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:532:12: 532:25 (#0),
                    scope: scope[1],
                },
                kind: _9 = <std::sync::Arc<meta::regex::RegexI> as core::ops::Deref>::deref(move _10) -> [return: bb3, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = &((*_9).1: meta::regex::RegexInfo),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &_3,
            _11 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:532:12: 532:47 (#0),
                    scope: scope[1],
                },
                kind: _7 = meta::regex::RegexInfo::is_impossible(move _8, move _11) -> [return: bb4, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:532:12: 532:47 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _7) -> [0: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            _0 = const false,
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:540:5: 540:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            _6 = const (),
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &((*_1).1: util::pool::Pool<meta::regex::Cache, std::boxed::Box<dyn core::ops::Fn() -> meta::regex::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:535:25: 535:40 (#0),
                    scope: scope[1],
                },
                kind: _14 = util::pool::Pool::<meta::regex::Cache, std::boxed::Box<dyn core::ops::Fn() -> meta::regex::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>::get(move _15) -> [return: bb7, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            FakeRead(ForLet(None), _14),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &((*_1).0: std::sync::Arc<meta::regex::RegexI>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:536:22: 536:36 (#0),
                    scope: scope[2],
                },
                kind: _20 = <std::sync::Arc<meta::regex::RegexI> as core::ops::Deref>::deref(move _21) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _19 = &((*_20).0: std::sync::Arc<dyn meta::strategy::Strategy>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:536:22: 536:65 (#0),
                    scope: scope[2],
                },
                kind: _18 = <std::sync::Arc<dyn meta::strategy::Strategy> as core::ops::Deref>::deref(move _19) -> [return: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = &(*_18),
            StorageDead(_19),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut _14,
            _24 = &mut (*_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:536:46: 536:56 (#0),
                    scope: scope[2],
                },
                kind: _23 = <util::pool::PoolGuard<'_, meta::regex::Cache, std::boxed::Box<dyn core::ops::Fn() -> meta::regex::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>> as core::ops::DerefMut>::deref_mut(move _24) -> [return: bb10, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = &mut (*_23),
            StorageDead(_24),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &_3,
            _26 = &(*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:536:22: 536:65 (#0),
                    scope: scope[2],
                },
                kind: _16 = <dyn meta::strategy::Strategy as meta::strategy::Strategy>::is_match(move _17, move _22, move _26) -> [return: bb11, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_22),
            StorageDead(_17),
            FakeRead(ForLet(None), _16),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_18),
            StorageLive(_28),
            StorageLive(_29),
            _29 = move _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:538:9: 538:30 (#0),
                    scope: scope[3],
                },
                kind: _28 = util::pool::PoolGuard::<'_, meta::regex::Cache, std::boxed::Box<dyn core::ops::Fn() -> meta::regex::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>::put(move _29) -> [return: bb12, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            _0 = _16,
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:540:5: 540:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb13, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:540:5: 540:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:540:6: 540:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:538:29: 538:30 (#0),
                    scope: scope[3],
                },
                kind: drop(_29) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:540:5: 540:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:531:32: 531:33 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:540:5: 540:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:530:5: 540:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:530:65: 530:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} meta::regex::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:530:45: 530:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/regex.rs:530:59: 530:60 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:530:52: 530:57 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:530:52: 530:57 (#0),
                    },
                ),
            ),
        ),
        ty: I/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:530:52: 530:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:531:21: 531:48 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:531:13: 531:18 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:531:13: 531:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:531:21: 531:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:531:21: 531:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:532:9: 534:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:532:12: 532:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:532:12: 532:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexI,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:532:12: 532:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::Arc<meta::regex::RegexI, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:532:12: 532:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:532:40: 532:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:532:40: 532:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:532:48: 534:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:535:25: 535:40 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:535:13: 535:22 (#0),
                    },
                ),
            ),
        ),
        ty: util::pool::PoolGuard<'{erased}, meta::regex::Cache, std::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = meta::regex::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:535:13: 535:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::pool::Pool<meta::regex::Cache, std::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = meta::regex::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:535:25: 535:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:536:22: 536:65 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:536:13: 536:19 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:536:13: 536:19 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:536:22: 536:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:536:22: 536:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:536:22: 536:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexI,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:536:22: 536:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::Arc<meta::regex::RegexI, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:536:22: 536:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:536:46: 536:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:536:46: 536:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::pool::PoolGuard<'{erased}, meta::regex::Cache, std::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = meta::regex::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:536:46: 536:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::pool::PoolGuard<'{erased}, meta::regex::Cache, std::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = meta::regex::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:536:46: 536:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:536:58: 536:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:536:58: 536:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:538:9: 538:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::pool::PoolGuard<'{erased}, meta::regex::Cache, std::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = meta::regex::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:538:24: 538:29 (#0),
            scope: scope[0],
        },
    },
]