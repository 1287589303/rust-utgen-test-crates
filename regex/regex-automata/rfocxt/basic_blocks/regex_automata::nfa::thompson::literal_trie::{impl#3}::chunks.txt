[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: std::vec::Vec<nfa::thompson::literal_trie::Transition>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:399:27: 399:44 (#0),
                    scope: scope[0],
                },
                kind: _4 = <std::vec::Vec<nfa::thompson::literal_trie::Transition> as core::ops::Deref>::deref(move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = &(*_4),
            _2 = &(*_3),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &((*_1).1: std::vec::Vec<(usize, usize)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:400:21: 400:39 (#0),
                    scope: scope[0],
                },
                kind: _8 = <std::vec::Vec<(usize, usize)> as core::ops::Deref>::deref(move _9) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &(*_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:400:21: 400:39 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::slice::<impl [(usize, usize)]>::iter(move _7) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:401:26: 401:45 (#0),
                    scope: scope[0],
                },
                kind: _12 = nfa::thompson::literal_trie::State::active_chunk(move _13) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = &(*_12),
            StorageDead(_13),
            _10 = core::option::Option::<&[nfa::thompson::literal_trie::Transition]>::Some(move _11),
            StorageDead(_11),
            _0 = nfa::thompson::literal_trie::StateChunksIter::<'_> { transitions: move _2, chunks: move _6, active: move _10 },
            StorageDead(_10),
            StorageDead(_6),
            StorageDead(_2),
            StorageDead(_12),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:403:6: 403:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:397:5: 403:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::literal_trie::StateChunksIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:397:25: 397:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:397:15: 397:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [nfa::thompson::literal_trie::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:399:26: 399:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:398:9: 402:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [nfa::thompson::literal_trie::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:399:26: 399:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:398:9: 402:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [nfa::thompson::literal_trie::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:399:27: 399:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:398:9: 402:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::literal_trie::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:399:28: 399:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::slice::Iter<'{erased}, (usize, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:400:21: 400:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:398:9: 402:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [(usize, usize)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:400:21: 400:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:398:9: 402:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [(usize, usize)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:400:21: 400:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:398:9: 402:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<(usize, usize), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:400:21: 400:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} [nfa::thompson::literal_trie::Transition]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:401:21: 401:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [nfa::thompson::literal_trie::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:401:26: 401:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:398:9: 402:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [nfa::thompson::literal_trie::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:401:26: 401:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:398:9: 402:10 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:401:26: 401:30 (#0),
            scope: scope[0],
        },
    },
]