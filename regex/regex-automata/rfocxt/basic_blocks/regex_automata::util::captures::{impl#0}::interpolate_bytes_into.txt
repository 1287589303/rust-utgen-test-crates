[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_3),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_1),
            StorageLive(_9),
            _9 = &(*_2),
            _7 = {closure@regex-automata/src/util/captures.rs:882:13: 882:25} { self: move _8, haystack: move _9 },
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_1),
            _10 = {closure@regex-automata/src/util/captures.rs:889:13: 889:19} { self: move _11 },
            StorageDead(_11),
            StorageLive(_12),
            _12 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:880:9: 891:10 (#0),
                    scope: scope[0],
                },
                kind: _5 = util::interpolate::bytes::<{closure@regex-automata/src/util/captures.rs:882:13: 882:25}, {closure@regex-automata/src/util/captures.rs:889:13: 889:19}>(move _6, move _7, move _10, move _12) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:892:6: 892:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:874:5: 892:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:879:6: 879:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:875:9: 875:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/captures.rs:876:19: 876:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:876:9: 876:17 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:876:9: 876:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:876:9: 876:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/captures.rs:877:22: 877:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:877:9: 877:20 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:877:9: 877:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:877:9: 877:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/captures.rs:878:14: 878:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:878:9: 878:12 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:878:9: 878:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:878:9: 878:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:880:9: 891:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:881:13: 881:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:3169 ~ regex_automata[00dd]::util::captures::{impl#0}::interpolate_bytes_into::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((usize, &'^0 mut std::vec::Vec<u8, std::alloc::Global>)), bound_vars: [Region(BrAnon)] },
                (&'{erased} util::captures::Captures, &'{erased} [u8]),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:882:13: 888:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:882:13: 888:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:882:13: 888:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:3170 ~ regex_automata[00dd]::util::captures::{impl#0}::interpolate_bytes_into::{closure#1}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 str,)) -> core::option::Option<usize>, bound_vars: [Region(BrAnon)] },
                (&'{erased} util::captures::Captures,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:889:13: 889:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:889:13: 889:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:890:13: 890:16 (#0),
            scope: scope[0],
        },
    },
]