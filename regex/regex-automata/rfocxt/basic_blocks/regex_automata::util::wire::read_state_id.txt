[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
            StorageLive(_8),
            _8 = core::ops::RangeTo::<usize> { end: const util::primitives::StateID::SIZE },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:641:14: 641:31 (#0),
                    scope: scope[0],
                },
                kind: _6 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _7, move _8) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:641:9: 641:42 (#0),
                    scope: scope[0],
                },
                kind: _4 = <&[u8] as core::convert::TryInto<[u8; 4]>>::try_into(move _5) -> [return: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:641:9: 641:51 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::result::Result::<[u8; 4], core::array::TryFromSliceError>::unwrap(move _4) -> [return: bb3, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            AscribeUserType(_3, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageDead(_6),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:642:15: 642:44 (#0),
                    scope: scope[1],
                },
                kind: _12 = util::primitives::StateID::from_ne_bytes(move _13) -> [return: bb4, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &_2,
            _14 = {closure@regex-automata/src/util/wire.rs:643:18: 643:23} { what: move _15 },
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:642:15: 643:68 (#0),
                    scope: scope[1],
                },
                kind: _11 = core::result::Result::<util::primitives::StateID, util::primitives::StateIDError>::map_err::<util::wire::DeserializeError, {closure@regex-automata/src/util/wire.rs:643:18: 643:23}>(move _12, move _14) -> [return: bb5, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:642:15: 643:69 (#5013),
                    scope: scope[1],
                },
                kind: _10 = <core::result::Result<util::primitives::StateID, util::wire::DeserializeError> as core::ops::Try>::branch(move _11) -> [return: bb6, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            PlaceMention(_10),
            _16 = discriminant(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:642:15: 643:69 (#5013),
                    scope: scope[1],
                },
                kind: switchInt(move _16) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:642:15: 643:69 (#5013),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:643:68: 643:69 (#5014),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = ((_10 as Continue).0: util::primitives::StateID),
            _9 = _20,
            StorageDead(_20),
            FakeRead(ForLet(None), _9),
            StorageDead(_10),
            StorageLive(_21),
            StorageLive(_22),
            _22 = _9,
            _21 = (move _22, const util::primitives::StateID::SIZE),
            StorageDead(_22),
            _0 = core::result::Result::<(util::primitives::StateID, usize), util::wire::DeserializeError>::Ok(move _21),
            StorageDead(_21),
            StorageDead(_9),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:645:2: 645:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = move ((_10 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_19),
            _19 = move _17,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:642:15: 643:69 (#5013),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<(util::primitives::StateID, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _19) -> [return: bb11, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:645:2: 645:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:645:2: 645:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:636:1: 645:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(util::primitives::StateID, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:639:6: 639:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/wire.rs:637:12: 637:17 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/wire.rs:637:5: 637:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/wire.rs:637:5: 637:10 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:637:5: 637:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/wire.rs:638:11: 638:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/wire.rs:638:5: 638:9 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/wire.rs:638:5: 638:9 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:638:5: 638:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/wire.rs:641:9: 641:51 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/wire.rs:640:9: 640:14 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 4_usize],
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        regex-automata/src/util/wire.rs:640:16: 640:35 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:640:9: 640:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<[u8; 4_usize], core::array::TryFromSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:641:9: 641:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:641:9: 641:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:641:14: 641:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:641:9: 641:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:641:15: 641:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/wire.rs:642:15: 643:69 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/wire.rs:642:9: 642:12 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:642:9: 642:12 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:642:15: 643:69 (#5013),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::StateID, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:642:15: 643:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::StateID, util::primitives::StateIDError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:642:15: 642:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:642:38: 642:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4069 ~ regex_automata[00dd]::util::wire::read_state_id::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((util::primitives::StateIDError,)) -> util::wire::DeserializeError, bound_vars: [] },
                (&'{erased} &'{erased} str,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:643:18: 643:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:643:18: 643:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:643:68: 643:69 (#5014),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                regex-automata/src/util/wire.rs:642:15: 643:69 (#5013),
                            ),
                        ),
                        pat_span: regex-automata/src/util/wire.rs:643:68: 643:69 (#5014),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:643:68: 643:69 (#5014),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:643:68: 643:69 (#5014),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:643:68: 643:69 (#5014),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                regex-automata/src/util/wire.rs:642:15: 643:69 (#5013),
                            ),
                        ),
                        pat_span: regex-automata/src/util/wire.rs:642:15: 643:69 (#5013),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:642:15: 643:69 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (util::primitives::StateID, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:644:8: 644:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/wire.rs:644:5: 644:29 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:644:9: 644:12 (#0),
            scope: scope[0],
        },
    },
]