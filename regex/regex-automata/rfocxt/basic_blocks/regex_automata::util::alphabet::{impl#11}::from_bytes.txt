[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            StorageLive(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:813:42: 813:59 (#0),
                    scope: scope[0],
                },
                kind: _7 = core::mem::size_of::<u128>() -> [return: bb1, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = MulWithOverflow(const 2_usize, _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:813:38: 813:59 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _7) -> [success: bb2, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = move (_8.0: usize),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:813:9: 813:72 (#0),
                    scope: scope[0],
                },
                kind: _4 = util::wire::check_slice_len::<u8>(move _5, move _6, const "byte set") -> [return: bb3, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:813:9: 813:73 (#4627),
                    scope: scope[0],
                },
                kind: _3 = <core::result::Result<(), util::wire::DeserializeError> as core::ops::Try>::branch(move _4) -> [return: bb4, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _9 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:813:9: 813:73 (#4627),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb7, 1: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:813:9: 813:73 (#4627),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:813:72: 813:73 (#4628),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = ((_3 as Continue).0: ()),
            _2 = _13,
            StorageDead(_13),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_14),
            _14 = const 0_usize,
            FakeRead(ForLet(None), _14),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:815:25: 815:74 (#0),
                    scope: scope[5],
                },
                kind: _19 = util::wire::try_read_u128(move _20, const "byte set low bucket") -> [return: bb10, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = move ((_3 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_12),
            _12 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:813:9: 813:73 (#4627),
                    scope: scope[2],
                },
                kind: _0 = <core::result::Result<(util::alphabet::ByteSet, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _12) -> [return: bb9, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:815:25: 815:75 (#4629),
                    scope: scope[5],
                },
                kind: _18 = <core::result::Result<(u128, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _19) -> [return: bb11, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            PlaceMention(_18),
            _21 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:815:25: 815:75 (#4629),
                    scope: scope[5],
                },
                kind: switchInt(move _21) -> [0: bb14, 1: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:815:25: 815:75 (#4629),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:815:74: 815:75 (#4630),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = ((_18 as Continue).0: (u128, usize)),
            _17 = _25,
            StorageDead(_25),
            PlaceMention(_17),
            StorageLive(_15),
            _15 = (_17.0: u128),
            StorageLive(_16),
            _16 = (_17.1: usize),
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_26),
            _26 = _16,
            _27 = AddWithOverflow(_14, _26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:816:9: 816:20 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_27.1: bool), "attempt to compute `{} + {}`, which would overflow", _14, move _26) -> [success: bb17, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_18 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_24),
            _24 = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:815:25: 815:75 (#4629),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<(util::alphabet::ByteSet, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _24) -> [return: bb16, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = move (_27.0: usize),
            StorageDead(_26),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:817:26: 817:76 (#0),
                    scope: scope[6],
                },
                kind: _32 = util::wire::try_read_u128(move _33, const "byte set high bucket") -> [return: bb18, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:817:26: 817:77 (#4631),
                    scope: scope[6],
                },
                kind: _31 = <core::result::Result<(u128, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _32) -> [return: bb19, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            PlaceMention(_31),
            _34 = discriminant(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:817:26: 817:77 (#4631),
                    scope: scope[6],
                },
                kind: switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:817:26: 817:77 (#4631),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:817:76: 817:77 (#4632),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb23, imaginary: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = ((_31 as Continue).0: (u128, usize)),
            _30 = _38,
            StorageDead(_38),
            PlaceMention(_30),
            StorageLive(_28),
            _28 = (_30.0: u128),
            StorageLive(_29),
            _29 = (_30.1: usize),
            StorageDead(_31),
            StorageDead(_30),
            StorageLive(_39),
            _39 = _29,
            _40 = AddWithOverflow(_14, _39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:818:9: 818:20 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", _14, move _39) -> [success: bb25, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            _35 = move ((_31 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_37),
            _37 = move _35,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:817:26: 817:77 (#4631),
                    scope: scope[13],
                },
                kind: _0 = <core::result::Result<(util::alphabet::ByteSet, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _37) -> [return: bb24, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = move (_40.0: usize),
            StorageDead(_39),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = _15,
            StorageLive(_46),
            _46 = _28,
            _44 = [move _45, move _46],
            StorageDead(_46),
            StorageDead(_45),
            _43 = util::alphabet::BitSet(move _44),
            StorageDead(_44),
            _42 = util::alphabet::ByteSet { bits: move _43 },
            StorageDead(_43),
            StorageLive(_47),
            _47 = _14,
            _41 = (move _42, move _47),
            StorageDead(_47),
            StorageDead(_42),
            _0 = core::result::Result::<(util::alphabet::ByteSet, usize), util::wire::DeserializeError>::Ok(move _41),
            StorageDead(_41),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:820:6: 820:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:820:6: 820:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:808:5: 820:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(util::alphabet::ByteSet, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:810:10: 810:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/alphabet.rs:809:16: 809:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/alphabet.rs:809:9: 809:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:809:9: 809:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:809:9: 809:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:813:9: 813:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:813:9: 813:73 (#4627),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:813:9: 813:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:813:31: 813:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:813:38: 813:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:813:42: 813:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:813:38: 813:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:813:72: 813:73 (#4628),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-automata/src/util/alphabet.rs:813:9: 813:73 (#4627),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:813:72: 813:73 (#4628),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:813:72: 813:73 (#4628),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:813:72: 813:73 (#4628),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:813:72: 813:73 (#4628),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-automata/src/util/alphabet.rs:813:9: 813:73 (#4627),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:813:9: 813:73 (#4627),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:813:9: 813:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/alphabet.rs:814:25: 814:26 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:814:13: 814:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:814:13: 814:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                regex-automata/src/util/alphabet.rs:815:25: 815:75 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:815:13: 815:22 (#0),
                    },
                ),
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:815:14: 815:17 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                regex-automata/src/util/alphabet.rs:815:25: 815:75 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:815:13: 815:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:815:19: 815:21 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u128, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:815:25: 815:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, (u128, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:815:25: 815:75 (#4629),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(u128, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:815:25: 815:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:815:45: 815:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:815:74: 815:75 (#4630),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                regex-automata/src/util/alphabet.rs:815:25: 815:75 (#4629),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:815:74: 815:75 (#4630),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:815:74: 815:75 (#4630),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:815:74: 815:75 (#4630),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:815:74: 815:75 (#4630),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                regex-automata/src/util/alphabet.rs:815:25: 815:75 (#4629),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:815:25: 815:75 (#4629),
                    },
                ),
            ),
        ),
        ty: (u128, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:815:25: 815:75 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:816:18: 816:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:816:9: 816:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _30,
                                ),
                                regex-automata/src/util/alphabet.rs:817:26: 817:77 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:817:13: 817:23 (#0),
                    },
                ),
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:817:14: 817:18 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _30,
                                ),
                                regex-automata/src/util/alphabet.rs:817:26: 817:77 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:817:13: 817:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:817:20: 817:22 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u128, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:817:26: 817:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, (u128, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:817:26: 817:77 (#4631),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(u128, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:817:26: 817:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:817:46: 817:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:817:76: 817:77 (#4632),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                regex-automata/src/util/alphabet.rs:817:26: 817:77 (#4631),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:817:76: 817:77 (#4632),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:817:76: 817:77 (#4632),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:817:76: 817:77 (#4632),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:817:76: 817:77 (#4632),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                regex-automata/src/util/alphabet.rs:817:26: 817:77 (#4631),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:817:26: 817:77 (#4631),
                    },
                ),
            ),
        ),
        ty: (u128, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:817:26: 817:77 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:818:18: 818:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:818:9: 818:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (util::alphabet::ByteSet, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:819:12: 819:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:819:9: 819:59 (#0),
                },
            ),
        ),
        ty: util::alphabet::ByteSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:819:13: 819:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::alphabet::BitSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:819:29: 819:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [u128; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:819:36: 819:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:819:9: 819:59 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:819:37: 819:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:819:9: 819:59 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:819:42: 819:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:819:9: 819:59 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:819:52: 819:57 (#0),
            scope: scope[0],
        },
    },
]