[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:455:19: 455:33 (#0),
                    scope: scope[0],
                },
                kind: _5 = util::captures::Captures::pattern(move _6) -> [return: bb1, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:455:19: 455:34 (#4654),
                    scope: scope[0],
                },
                kind: _4 = <core::option::Option<util::primitives::PatternID> as core::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _7 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:455:19: 455:34 (#4654),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:455:19: 455:34 (#4654),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:455:33: 455:34 (#4655),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = ((_4 as Continue).0: util::primitives::PatternID),
            _3 = _11,
            StorageDead(_11),
            FakeRead(ForLet(None), _3),
            StorageDead(_4),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:459:41: 459:58 (#0),
                    scope: scope[1],
                },
                kind: _18 = util::captures::Captures::group_info(move _19) -> [return: bb8, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = ((_4 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_10),
            _10 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:455:19: 455:34 (#4654),
                    scope: scope[3],
                },
                kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _10) -> [return: bb7, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = &(*_18),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:459:41: 459:72 (#0),
                    scope: scope[1],
                },
                kind: _16 = util::captures::GroupInfo::pattern_len(move _17) -> [return: bb9, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            _15 = Eq(move _16, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:459:41: 459:77 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _15) -> [0: bb32, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_16),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:14: 460:34 (#0),
                    scope: scope[1],
                },
                kind: _22 = core::num::<impl usize>::checked_mul(move _23, const 2_usize) -> [return: bb11, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:14: 460:35 (#4657),
                    scope: scope[1],
                },
                kind: _21 = <core::option::Option<usize> as core::ops::Try>::branch(move _22) -> [return: bb12, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            PlaceMention(_21),
            _24 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:14: 460:35 (#4657),
                    scope: scope[1],
                },
                kind: switchInt(move _24) -> [0: bb15, 1: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:14: 460:35 (#4657),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:34: 460:35 (#4658),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = ((_21 as Continue).0: usize),
            _20 = _28,
            StorageDead(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:37: 460:57 (#0),
                    scope: scope[1],
                },
                kind: _34 = core::num::<impl usize>::checked_mul(move _35, const 2_usize) -> [return: bb18, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = ((_21 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_27),
            _27 = _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:14: 460:35 (#4657),
                    scope: scope[8],
                },
                kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _27) -> [return: bb17, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:37: 460:58 (#4661),
                    scope: scope[1],
                },
                kind: _33 = <core::option::Option<usize> as core::ops::Try>::branch(move _34) -> [return: bb19, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            PlaceMention(_33),
            _36 = discriminant(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:37: 460:58 (#4661),
                    scope: scope[1],
                },
                kind: switchInt(move _36) -> [0: bb22, 1: bb21, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:37: 460:58 (#4661),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:57: 460:58 (#4662),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb23, imaginary: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _40 = ((_33 as Continue).0: usize),
            _32 = _40,
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:37: 460:73 (#0),
                    scope: scope[1],
                },
                kind: _31 = core::num::<impl usize>::checked_add(move _32, const 1_usize) -> [return: bb25, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            _37 = ((_33 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_39),
            _39 = _37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:37: 460:58 (#4661),
                    scope: scope[12],
                },
                kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _39) -> [return: bb24, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:37: 460:74 (#4659),
                    scope: scope[1],
                },
                kind: _30 = <core::option::Option<usize> as core::ops::Try>::branch(move _31) -> [return: bb26, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            PlaceMention(_30),
            _41 = discriminant(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:37: 460:74 (#4659),
                    scope: scope[1],
                },
                kind: switchInt(move _41) -> [0: bb29, 1: bb28, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:37: 460:74 (#4659),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:73: 460:74 (#4660),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb30, imaginary: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_45),
            _45 = ((_30 as Continue).0: usize),
            _29 = _45,
            StorageDead(_45),
            _14 = (move _20, move _29),
            StorageDead(_29),
            StorageDead(_20),
            StorageDead(_33),
            StorageDead(_30),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:459:38: 463:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            _42 = ((_30 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_44),
            _44 = _42,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:460:37: 460:74 (#4659),
                    scope: scope[16],
                },
                kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _44) -> [return: bb31, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_16),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            _50 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:462:13: 462:30 (#0),
                    scope: scope[1],
                },
                kind: _49 = util::captures::Captures::group_info(move _50) -> [return: bb33, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = &(*_49),
            StorageDead(_50),
            StorageLive(_51),
            _51 = _3,
            StorageLive(_52),
            _52 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:462:13: 462:48 (#0),
                    scope: scope[1],
                },
                kind: _47 = util::captures::GroupInfo::slots(move _48, move _51, move _52) -> [return: bb34, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#4663),
                    scope: scope[1],
                },
                kind: _46 = <core::option::Option<(usize, usize)> as core::ops::Try>::branch(move _47) -> [return: bb35, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            PlaceMention(_46),
            _53 = discriminant(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#4663),
                    scope: scope[1],
                },
                kind: switchInt(move _53) -> [0: bb38, 1: bb37, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#4663),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:462:48: 462:49 (#4664),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb39, imaginary: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_57),
            _57 = ((_46 as Continue).0: (usize, usize)),
            _14 = _57,
            StorageDead(_57),
            StorageDead(_49),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:459:38: 463:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_54),
            _54 = ((_46 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_56),
            _56 = _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#4663),
                    scope: scope[20],
                },
                kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _56) -> [return: bb40, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_54),
            StorageDead(_49),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            StorageLive(_12),
            _12 = (_14.0: usize),
            StorageLive(_13),
            _13 = (_14.1: usize),
            StorageDead(_14),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            _66 = &((*_1).2: std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:21: 464:47 (#0),
                    scope: scope[6],
                },
                kind: _65 = <std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>> as core::ops::Deref>::deref(move _66) -> [return: bb42, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _64 = &(*_65),
            StorageDead(_66),
            StorageLive(_67),
            _67 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:21: 464:47 (#0),
                    scope: scope[6],
                },
                kind: _63 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::get::<usize>(move _64, move _67) -> [return: bb43, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:21: 464:56 (#0),
                    scope: scope[6],
                },
                kind: _62 = core::option::Option::<&core::option::Option<util::primitives::NonMaxUsize>>::copied(move _63) -> [return: bb44, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:21: 464:57 (#4667),
                    scope: scope[6],
                },
                kind: _61 = <core::option::Option<core::option::Option<util::primitives::NonMaxUsize>> as core::ops::Try>::branch(move _62) -> [return: bb45, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            PlaceMention(_61),
            _68 = discriminant(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:21: 464:57 (#4667),
                    scope: scope[6],
                },
                kind: switchInt(move _68) -> [0: bb48, 1: bb47, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:21: 464:57 (#4667),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:56: 464:57 (#4668),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb49, imaginary: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_72),
            _72 = ((_61 as Continue).0: core::option::Option<util::primitives::NonMaxUsize>),
            _60 = _72,
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:21: 464:58 (#4665),
                    scope: scope[6],
                },
                kind: _59 = <core::option::Option<util::primitives::NonMaxUsize> as core::ops::Try>::branch(move _60) -> [return: bb51, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_69),
            _69 = ((_61 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_71),
            _71 = _69,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:21: 464:57 (#4667),
                    scope: scope[25],
                },
                kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _71) -> [return: bb50, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_69),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            PlaceMention(_59),
            _73 = discriminant(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:21: 464:58 (#4665),
                    scope: scope[6],
                },
                kind: switchInt(move _73) -> [0: bb54, 1: bb53, otherwise: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:21: 464:58 (#4665),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:57: 464:58 (#4666),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb55, imaginary: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_77),
            _77 = ((_59 as Continue).0: util::primitives::NonMaxUsize),
            _58 = _77,
            StorageDead(_77),
            FakeRead(ForLet(None), _58),
            StorageDead(_65),
            StorageDead(_61),
            StorageDead(_59),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            StorageLive(_82),
            StorageLive(_83),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            _86 = &((*_1).2: std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:19: 465:43 (#0),
                    scope: scope[23],
                },
                kind: _85 = <std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>> as core::ops::Deref>::deref(move _86) -> [return: bb57, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_74),
            _74 = ((_59 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_76),
            _76 = _74,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:464:21: 464:58 (#4665),
                    scope: scope[29],
                },
                kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _76) -> [return: bb56, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _84 = &(*_85),
            StorageDead(_86),
            StorageLive(_87),
            _87 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:19: 465:43 (#0),
                    scope: scope[23],
                },
                kind: _83 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::get::<usize>(move _84, move _87) -> [return: bb58, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:19: 465:52 (#0),
                    scope: scope[23],
                },
                kind: _82 = core::option::Option::<&core::option::Option<util::primitives::NonMaxUsize>>::copied(move _83) -> [return: bb59, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:19: 465:53 (#4671),
                    scope: scope[23],
                },
                kind: _81 = <core::option::Option<core::option::Option<util::primitives::NonMaxUsize>> as core::ops::Try>::branch(move _82) -> [return: bb60, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            PlaceMention(_81),
            _88 = discriminant(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:19: 465:53 (#4671),
                    scope: scope[23],
                },
                kind: switchInt(move _88) -> [0: bb63, 1: bb62, otherwise: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:19: 465:53 (#4671),
                    scope: scope[23],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:52: 465:53 (#4672),
                    scope: scope[23],
                },
                kind: falseEdge -> [real: bb64, imaginary: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_92),
            _92 = ((_81 as Continue).0: core::option::Option<util::primitives::NonMaxUsize>),
            _80 = _92,
            StorageDead(_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:19: 465:54 (#4669),
                    scope: scope[23],
                },
                kind: _79 = <core::option::Option<util::primitives::NonMaxUsize> as core::ops::Try>::branch(move _80) -> [return: bb66, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_89),
            _89 = ((_81 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_91),
            _91 = _89,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:19: 465:53 (#4671),
                    scope: scope[34],
                },
                kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _91) -> [return: bb65, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageDead(_89),
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[23],
                },
                kind: goto -> bb74,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            PlaceMention(_79),
            _93 = discriminant(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:19: 465:54 (#4669),
                    scope: scope[23],
                },
                kind: switchInt(move _93) -> [0: bb69, 1: bb68, otherwise: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:19: 465:54 (#4669),
                    scope: scope[23],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:53: 465:54 (#4670),
                    scope: scope[23],
                },
                kind: falseEdge -> [real: bb70, imaginary: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_97),
            _97 = ((_79 as Continue).0: util::primitives::NonMaxUsize),
            _78 = _97,
            StorageDead(_97),
            FakeRead(ForLet(None), _78),
            StorageDead(_85),
            StorageDead(_81),
            StorageDead(_79),
            StorageLive(_98),
            StorageLive(_99),
            StorageLive(_100),
            _100 = _58,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:466:28: 466:39 (#0),
                    scope: scope[32],
                },
                kind: _99 = util::primitives::NonMaxUsize::get(move _100) -> [return: bb72, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_94),
            _94 = ((_79 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_96),
            _96 = _94,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:465:19: 465:54 (#4669),
                    scope: scope[38],
                },
                kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _96) -> [return: bb71, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            StorageDead(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[23],
                },
                kind: goto -> bb74,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
            StorageLive(_101),
            StorageLive(_102),
            _102 = _78,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:466:46: 466:55 (#0),
                    scope: scope[32],
                },
                kind: _101 = util::primitives::NonMaxUsize::get(move _102) -> [return: bb73, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            _98 = util::search::Span { start: move _99, end: move _101 },
            StorageDead(_101),
            StorageDead(_99),
            _0 = core::option::Option::<util::search::Span>::Some(move _98),
            StorageDead(_98),
            StorageDead(_78),
            StorageDead(_58),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:467:6: 467:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_81),
            StorageDead(_79),
            StorageDead(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[23],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageDead(_61),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_20),
            StorageDead(_33),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:467:6: 467:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:467:6: 467:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:454:5: 467:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::search::Span>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:454:46: 454:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:454:22: 454:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/captures.rs:454:36: 454:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:454:29: 454:34 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:454:29: 454:34 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:454:29: 454:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:455:19: 455:34 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:455:13: 455:16 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:455:13: 455:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:455:19: 455:34 (#4654),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:455:19: 455:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:455:19: 455:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:455:33: 455:34 (#4655),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/util/captures.rs:455:19: 455:34 (#4654),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:455:33: 455:34 (#4655),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:455:33: 455:34 (#4655),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:455:33: 455:34 (#4655),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:455:33: 455:34 (#4655),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/util/captures.rs:455:19: 455:34 (#4654),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:455:19: 455:34 (#4654),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:455:19: 455:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/util/captures.rs:459:38: 463:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:459:13: 459:35 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:459:14: 459:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/util/captures.rs:459:38: 463:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:459:13: 459:35 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:459:26: 459:34 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:459:38: 463:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:459:41: 459:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:459:41: 459:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:459:41: 459:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:459:41: 459:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:459:41: 459:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:14: 460:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:14: 460:35 (#4657),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:14: 460:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:14: 460:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:34: 460:35 (#4658),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                regex-automata/src/util/captures.rs:460:14: 460:35 (#4657),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:460:34: 460:35 (#4658),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:34: 460:35 (#4658),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:34: 460:35 (#4658),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:34: 460:35 (#4658),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                regex-automata/src/util/captures.rs:460:14: 460:35 (#4657),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:460:14: 460:35 (#4657),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:14: 460:35 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:37: 460:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:37: 460:74 (#4659),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:37: 460:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:37: 460:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:37: 460:58 (#4661),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:37: 460:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:37: 460:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:57: 460:58 (#4662),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                regex-automata/src/util/captures.rs:460:37: 460:58 (#4661),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:460:57: 460:58 (#4662),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:57: 460:58 (#4662),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:57: 460:58 (#4662),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:57: 460:58 (#4662),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                regex-automata/src/util/captures.rs:460:37: 460:58 (#4661),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:460:37: 460:58 (#4661),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:37: 460:58 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:73: 460:74 (#4660),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _30,
                                ),
                                regex-automata/src/util/captures.rs:460:37: 460:74 (#4659),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:460:73: 460:74 (#4660),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:73: 460:74 (#4660),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:73: 460:74 (#4660),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:460:13: 460:75 (#0),
                },
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:73: 460:74 (#4660),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _30,
                                ),
                                regex-automata/src/util/captures.rs:460:37: 460:74 (#4659),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:460:37: 460:74 (#4659),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:460:37: 460:74 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, (usize, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:462:13: 462:49 (#4663),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#0),
                },
            ),
        ),
        ty: core::option::Option<(usize, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:462:13: 462:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#0),
                },
            ),
        ),
        ty: &'{erased} util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:462:13: 462:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#0),
                },
            ),
        ),
        ty: &'{erased} util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:462:13: 462:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#0),
                },
            ),
        ),
        ty: &'{erased} util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:462:13: 462:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#0),
                },
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:462:37: 462:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:462:42: 462:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:462:48: 462:49 (#4664),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-automata/src/util/captures.rs:462:13: 462:49 (#4663),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:462:48: 462:49 (#4664),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:462:48: 462:49 (#4664),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:462:48: 462:49 (#4664),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:462:13: 462:49 (#0),
                },
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:462:48: 462:49 (#4664),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-automata/src/util/captures.rs:462:13: 462:49 (#4663),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:462:13: 462:49 (#4663),
                    },
                ),
            ),
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:462:13: 462:49 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:464:21: 464:58 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:464:13: 464:18 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::NonMaxUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:13: 464:18 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:21: 464:58 (#4665),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:21: 464:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, core::option::Option<util::primitives::NonMaxUsize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:21: 464:57 (#4667),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::option::Option<util::primitives::NonMaxUsize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:21: 464:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} core::option::Option<util::primitives::NonMaxUsize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:21: 464:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::option::Option<util::primitives::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:21: 464:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::option::Option<util::primitives::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:21: 464:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:21: 464:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:36: 464:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:56: 464:57 (#4668),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _61,
                                ),
                                regex-automata/src/util/captures.rs:464:21: 464:57 (#4667),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:464:56: 464:57 (#4668),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:56: 464:57 (#4668),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:56: 464:57 (#4668),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:56: 464:57 (#4668),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _61,
                                ),
                                regex-automata/src/util/captures.rs:464:21: 464:57 (#4667),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:464:21: 464:57 (#4667),
                    },
                ),
            ),
        ),
        ty: core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:21: 464:57 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:57: 464:58 (#4666),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _59,
                                ),
                                regex-automata/src/util/captures.rs:464:21: 464:58 (#4665),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:464:57: 464:58 (#4666),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:57: 464:58 (#4666),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:57: 464:58 (#4666),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:57: 464:58 (#4666),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _59,
                                ),
                                regex-automata/src/util/captures.rs:464:21: 464:58 (#4665),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:464:21: 464:58 (#4665),
                    },
                ),
            ),
        ),
        ty: util::primitives::NonMaxUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:464:21: 464:58 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:465:19: 465:54 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:465:13: 465:16 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::NonMaxUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:13: 465:16 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:19: 465:54 (#4669),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:19: 465:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, core::option::Option<util::primitives::NonMaxUsize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:19: 465:53 (#4671),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::option::Option<util::primitives::NonMaxUsize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:19: 465:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} core::option::Option<util::primitives::NonMaxUsize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:19: 465:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::option::Option<util::primitives::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:19: 465:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::option::Option<util::primitives::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:19: 465:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:19: 465:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:34: 465:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:52: 465:53 (#4672),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _81,
                                ),
                                regex-automata/src/util/captures.rs:465:19: 465:53 (#4671),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:465:52: 465:53 (#4672),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:52: 465:53 (#4672),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:52: 465:53 (#4672),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:52: 465:53 (#4672),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _81,
                                ),
                                regex-automata/src/util/captures.rs:465:19: 465:53 (#4671),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:465:19: 465:53 (#4671),
                    },
                ),
            ),
        ),
        ty: core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:19: 465:53 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:53: 465:54 (#4670),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _79,
                                ),
                                regex-automata/src/util/captures.rs:465:19: 465:54 (#4669),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:465:53: 465:54 (#4670),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:53: 465:54 (#4670),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:53: 465:54 (#4670),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:53: 465:54 (#4670),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _79,
                                ),
                                regex-automata/src/util/captures.rs:465:19: 465:54 (#4669),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:465:19: 465:54 (#4669),
                    },
                ),
            ),
        ),
        ty: util::primitives::NonMaxUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:465:19: 465:54 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::search::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:466:14: 466:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:466:28: 466:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:466:9: 466:58 (#0),
                },
            ),
        ),
        ty: util::primitives::NonMaxUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:466:28: 466:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:466:46: 466:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:466:9: 466:58 (#0),
                },
            ),
        ),
        ty: util::primitives::NonMaxUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:466:46: 466:49 (#0),
            scope: scope[0],
        },
    },
]