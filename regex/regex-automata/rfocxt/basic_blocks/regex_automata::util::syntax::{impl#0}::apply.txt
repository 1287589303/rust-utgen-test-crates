[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &mut (*_2),
            StorageLive(_25),
            _25 = ((*_1).7: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:439:9: 440:35 (#0),
                    scope: scope[0],
                },
                kind: _23 = regex_syntax::ParserBuilder::unicode(move _24, move _25) -> [return: bb1, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = &mut (*_23),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_26),
            _26 = ((*_1).0: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:439:9: 441:53 (#0),
                    scope: scope[0],
                },
                kind: _21 = regex_syntax::ParserBuilder::case_insensitive(move _22, move _26) -> [return: bb2, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = &mut (*_21),
            StorageDead(_26),
            StorageDead(_22),
            StorageLive(_27),
            _27 = ((*_1).1: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:439:9: 442:41 (#0),
                    scope: scope[0],
                },
                kind: _19 = regex_syntax::ParserBuilder::multi_line(move _20, move _27) -> [return: bb3, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = &mut (*_19),
            StorageDead(_27),
            StorageDead(_20),
            StorageLive(_28),
            _28 = ((*_1).2: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:439:9: 443:61 (#0),
                    scope: scope[0],
                },
                kind: _17 = regex_syntax::ParserBuilder::dot_matches_new_line(move _18, move _28) -> [return: bb4, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = &mut (*_17),
            StorageDead(_28),
            StorageDead(_18),
            StorageLive(_29),
            _29 = ((*_1).3: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:439:9: 444:29 (#0),
                    scope: scope[0],
                },
                kind: _15 = regex_syntax::ParserBuilder::crlf(move _16, move _29) -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = &mut (*_15),
            StorageDead(_29),
            StorageDead(_16),
            StorageLive(_30),
            _30 = ((*_1).4: u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:439:9: 445:51 (#0),
                    scope: scope[0],
                },
                kind: _13 = regex_syntax::ParserBuilder::line_terminator(move _14, move _30) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = &mut (*_13),
            StorageDead(_30),
            StorageDead(_14),
            StorageLive(_31),
            _31 = ((*_1).5: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:439:9: 446:41 (#0),
                    scope: scope[0],
                },
                kind: _11 = regex_syntax::ParserBuilder::swap_greed(move _12, move _31) -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &mut (*_11),
            StorageDead(_31),
            StorageDead(_12),
            StorageLive(_32),
            _32 = ((*_1).6: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:439:9: 447:55 (#0),
                    scope: scope[0],
                },
                kind: _9 = regex_syntax::ParserBuilder::ignore_whitespace(move _10, move _32) -> [return: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut (*_9),
            StorageDead(_32),
            StorageDead(_10),
            StorageLive(_33),
            _33 = ((*_1).8: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:439:9: 448:29 (#0),
                    scope: scope[0],
                },
                kind: _7 = regex_syntax::ParserBuilder::utf8(move _8, move _33) -> [return: bb9, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &mut (*_7),
            StorageDead(_33),
            StorageDead(_8),
            StorageLive(_34),
            _34 = ((*_1).9: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:439:9: 449:41 (#0),
                    scope: scope[0],
                },
                kind: _5 = regex_syntax::ParserBuilder::nest_limit(move _6, move _34) -> [return: bb10, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut (*_5),
            StorageDead(_34),
            StorageDead(_6),
            StorageLive(_35),
            _35 = ((*_1).10: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:439:9: 450:31 (#0),
                    scope: scope[0],
                },
                kind: _3 = regex_syntax::ParserBuilder::octal(move _4, move _35) -> [return: bb11, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_4),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_3),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:451:6: 451:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:438:5: 451:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:438:60: 438:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:438:25: 438:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/syntax.rs:438:41: 438:59 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/syntax.rs:438:32: 438:39 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:438:32: 438:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:438:32: 438:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 450:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 449:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 449:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 448:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 448:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 447:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 447:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 446:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 446:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 445:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 445:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 444:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 444:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 443:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 443:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 442:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 442:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 441:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 441:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 440:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 440:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:439:9: 439:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:440:22: 440:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:441:31: 441:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:442:25: 442:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:443:35: 443:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:444:19: 444:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:445:30: 445:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:446:25: 446:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:447:32: 447:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:448:19: 448:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:449:25: 449:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:450:20: 450:30 (#0),
            scope: scope[0],
        },
    },
]