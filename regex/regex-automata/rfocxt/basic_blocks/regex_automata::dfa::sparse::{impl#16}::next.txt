[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = ((*_1).1: usize),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*((*_1).0: &dfa::sparse::Transitions<T>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2223:23: 2223:42 (#0),
                    scope: scope[0],
                },
                kind: _7 = dfa::sparse::Transitions::<T>::sparse(move _8) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &(*_7),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2223:23: 2223:48 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [u8]>::len(move _6) -> [return: bb2, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _3 = Ge(move _4, move _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2223:12: 2223:48 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_4),
            _0 = core::option::Option::<dfa::sparse::State<'_>>::None,
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2229:6: 2229:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*((*_1).0: &dfa::sparse::Transitions<T>)),
            StorageLive(_12),
            StorageLive(_13),
            _13 = ((*_1).1: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2226:38: 2226:69 (#0),
                    scope: scope[0],
                },
                kind: _12 = util::primitives::StateID::new_unchecked(move _13) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2226:21: 2226:70 (#0),
                    scope: scope[0],
                },
                kind: _10 = dfa::sparse::Transitions::<T>::state(move _11, move _12) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageLive(_14),
            _14 = ((*_1).1: usize),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2227:29: 2227:49 (#0),
                    scope: scope[1],
                },
                kind: _15 = dfa::sparse::State::<'_>::write_to_len(move _16) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            _17 = AddWithOverflow(_14, _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2227:19: 2227:49 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _14, move _15) -> [success: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_17.0: usize),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_18),
            _18 = move _10,
            _0 = core::option::Option::<dfa::sparse::State<'_>>::Some(move _18),
            StorageDead(_18),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2229:6: 2229:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2229:6: 2229:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2222:5: 2229:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<dfa::sparse::State<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2222:27: 2222:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut dfa::sparse::StateIter<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2222:13: 2222:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2223:9: 2225:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2223:12: 2223:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2223:12: 2223:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2223:23: 2223:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2223:23: 2223:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2223:23: 2223:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::sparse::Transitions<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2223:23: 2223:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2223:49: 2225:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:2226:21: 2226:70 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:2226:13: 2226:18 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::sparse::State<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2226:13: 2226:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::sparse::Transitions<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2226:21: 2226:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2226:38: 2226:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2226:61: 2226:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2227:19: 2227:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2227:29: 2227:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::sparse::State<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2227:29: 2227:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2227:19: 2227:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: dfa::sparse::State<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2228:14: 2228:19 (#0),
            scope: scope[0],
        },
    },
]