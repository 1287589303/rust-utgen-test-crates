[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:253:9: 253:24 (#0),
                    scope: scope[0],
                },
                kind: _4 = util::determinize::state::StateBuilderMatches::repr_vec(move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut _4,
            StorageDead(_5),
            StorageLive(_6),
            _6 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:253:9: 253:50 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::determinize::state::ReprVec::<'_>::add_match_pattern_id(move _3, move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:254:6: 254:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:252:5: 254:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:252:66: 252:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:252:40: 252:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/state.rs:252:56: 252:65 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/state.rs:252:51: 252:54 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/state.rs:252:51: 252:54 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:252:51: 252:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/state.rs:253:9: 253:50 (#0),
                },
            ),
        ),
        ty: &'{erased} mut util::determinize::state::ReprVec<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:253:9: 253:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/state.rs:253:9: 253:50 (#0),
                },
            ),
        ),
        ty: util::determinize::state::ReprVec<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:253:9: 253:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/state.rs:253:9: 253:50 (#0),
                },
            ),
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:253:9: 253:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/state.rs:253:9: 253:50 (#0),
                },
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:253:46: 253:49 (#0),
            scope: scope[0],
        },
    },
]