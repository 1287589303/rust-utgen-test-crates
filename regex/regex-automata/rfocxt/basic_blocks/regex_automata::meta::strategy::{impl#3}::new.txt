[
    BasicBlockData {
        statements: [
            StorageLive(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:461:25: 461:43 (#0),
                    scope: scope[0],
                },
                kind: _4 = util::look::LookMatcher::new() -> [return: bb1, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut _4,
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:462:35: 462:48 (#0),
                    scope: scope[1],
                },
                kind: _9 = meta::regex::RegexInfo::config(move _10) -> [return: bb2, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &(*_9),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:462:35: 462:70 (#0),
                    scope: scope[1],
                },
                kind: _7 = meta::regex::Config::get_line_terminator(move _8) -> [return: bb3, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:462:9: 462:71 (#0),
                    scope: scope[1],
                },
                kind: _5 = util::look::LookMatcher::set_line_terminator(move _6, move _7) -> [return: bb4, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_9),
            StorageDead(_5),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:463:31: 463:54 (#0),
                    scope: scope[1],
                },
                kind: _16 = nfa::thompson::compiler::Config::new() -> [return: bb5, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:464:19: 464:32 (#0),
                    scope: scope[1],
                },
                kind: _19 = meta::regex::RegexInfo::config(move _20) -> [return: bb6, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = &(*_19),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:464:19: 464:49 (#0),
                    scope: scope[1],
                },
                kind: _17 = meta::regex::Config::get_utf8_empty(move _18) -> [return: bb7, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:463:31: 464:50 (#0),
                    scope: scope[1],
                },
                kind: _15 = nfa::thompson::compiler::Config::utf8(move _16, move _17) -> [return: bb8, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:465:29: 465:42 (#0),
                    scope: scope[1],
                },
                kind: _23 = meta::regex::RegexInfo::config(move _24) -> [return: bb9, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = &(*_23),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:465:29: 465:63 (#0),
                    scope: scope[1],
                },
                kind: _21 = meta::regex::Config::get_nfa_size_limit(move _22) -> [return: bb10, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:463:31: 465:64 (#0),
                    scope: scope[1],
                },
                kind: _14 = nfa::thompson::compiler::Config::nfa_size_limit(move _15, move _21) -> [return: bb11, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:463:31: 466:27 (#0),
                    scope: scope[1],
                },
                kind: _13 = nfa::thompson::compiler::Config::shrink(move _14, const false) -> [return: bb12, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:467:29: 467:42 (#0),
                    scope: scope[1],
                },
                kind: _27 = meta::regex::RegexInfo::config(move _28) -> [return: bb13, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = &(*_27),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:467:29: 467:63 (#0),
                    scope: scope[1],
                },
                kind: _25 = meta::regex::Config::get_which_captures(move _26) -> [return: bb14, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:463:31: 467:64 (#0),
                    scope: scope[1],
                },
                kind: _12 = nfa::thompson::compiler::Config::which_captures(move _13, move _25) -> [return: bb15, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_13),
            StorageLive(_29),
            _29 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:463:31: 468:33 (#0),
                    scope: scope[1],
                },
                kind: _11 = nfa::thompson::compiler::Config::look_matcher(move _12, move _29) -> [return: bb16, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageDead(_27),
            StorageDead(_23),
            StorageDead(_19),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:469:19: 469:44 (#0),
                    scope: scope[2],
                },
                kind: _37 = nfa::thompson::compiler::Compiler::new() -> [return: bb17, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = &mut _37,
            StorageLive(_38),
            StorageLive(_39),
            _39 = &_11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:470:24: 470:47 (#0),
                    scope: scope[2],
                },
                kind: _38 = <nfa::thompson::compiler::Config as core::clone::Clone>::clone(move _39) -> [return: bb18, unwind: bb191],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:469:19: 470:48 (#0),
                    scope: scope[2],
                },
                kind: _35 = nfa::thompson::compiler::Compiler::configure(move _36, move _38) -> [return: bb19, unwind: bb191],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = &(*_35),
            StorageDead(_38),
            StorageDead(_36),
            StorageLive(_40),
            _40 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:469:19: 471:39 (#0),
                    scope: scope[2],
                },
                kind: _33 = nfa::thompson::compiler::Compiler::build_many_from_hir::<&regex_syntax::hir::Hir>(move _34, move _40) -> [return: bb20, unwind: bb191],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:469:19: 472:38 (#0),
                    scope: scope[2],
                },
                kind: _32 = core::result::Result::<nfa::thompson::nfa::NFA, nfa::thompson::error::BuildError>::map_err::<meta::error::BuildError, fn(nfa::thompson::error::BuildError) -> meta::error::BuildError {meta::error::BuildError::nfa}>(move _33, meta::error::BuildError::nfa) -> [return: bb21, unwind: bb190],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:469:19: 472:39 (#3872),
                    scope: scope[2],
                },
                kind: _31 = <core::result::Result<nfa::thompson::nfa::NFA, meta::error::BuildError> as core::ops::Try>::branch(move _32) -> [return: bb22, unwind: bb189],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            PlaceMention(_31),
            _41 = discriminant(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:469:19: 472:39 (#3872),
                    scope: scope[2],
                },
                kind: switchInt(move _41) -> [0: bb25, 1: bb24, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:469:19: 472:39 (#3872),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:38: 472:39 (#3873),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb26, imaginary: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_45),
            _45 = move ((_31 as Continue).0: nfa::thompson::nfa::NFA),
            _30 = move _45,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:38: 472:39 (#0),
                    scope: scope[2],
                },
                kind: drop(_45) -> [return: bb28, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            _42 = move ((_31 as Break).0: core::result::Result<core::convert::Infallible, meta::error::BuildError>),
            StorageLive(_44),
            _44 = move _42,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:469:19: 472:39 (#3872),
                    scope: scope[5],
                },
                kind: _0 = <core::result::Result<meta::strategy::Core, meta::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, meta::error::BuildError>>>::from_residual(move _44) -> [return: bb27, unwind: bb186],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:38: 472:39 (#3873),
                    scope: scope[2],
                },
                kind: drop(_42) -> [return: bb137, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            FakeRead(ForLet(None), _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:39: 472:40 (#0),
                    scope: scope[2],
                },
                kind: drop(_31) -> [return: bb29, unwind: bb184],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:39: 472:40 (#0),
                    scope: scope[2],
                },
                kind: drop(_37) -> [return: bb30, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_31),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            _50 = &_1,
            _49 = &(*_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:51: 479:62 (#0),
                    scope: scope[3],
                },
                kind: _51 = <core::option::Option<util::prefilter::Prefilter> as core::clone::Clone>::clone(move _52) -> [return: bb31, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &_30,
            _53 = &(*_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:22: 479:69 (#0),
                    scope: scope[3],
                },
                kind: _48 = meta::wrappers::PikeVM::new(move _49, move _51, move _53) -> [return: bb32, unwind: bb183],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_51),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:22: 479:70 (#3874),
                    scope: scope[3],
                },
                kind: _47 = <core::result::Result<meta::wrappers::PikeVM, meta::error::BuildError> as core::ops::Try>::branch(move _48) -> [return: bb33, unwind: bb182],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            PlaceMention(_47),
            _55 = discriminant(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:22: 479:70 (#3874),
                    scope: scope[3],
                },
                kind: switchInt(move _55) -> [0: bb36, 1: bb35, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:22: 479:70 (#3874),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:69: 479:70 (#3875),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb37, imaginary: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_59),
            _59 = move ((_47 as Continue).0: meta::wrappers::PikeVM),
            _46 = move _59,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:69: 479:70 (#0),
                    scope: scope[3],
                },
                kind: drop(_59) -> [return: bb39, unwind: bb181],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_56),
            _56 = move ((_47 as Break).0: core::result::Result<core::convert::Infallible, meta::error::BuildError>),
            StorageLive(_58),
            _58 = move _56,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:22: 479:70 (#3874),
                    scope: scope[10],
                },
                kind: _0 = <core::result::Result<meta::strategy::Core, meta::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, meta::error::BuildError>>>::from_residual(move _58) -> [return: bb38, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:69: 479:70 (#3875),
                    scope: scope[3],
                },
                kind: drop(_56) -> [return: bb134, unwind: bb181],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            FakeRead(ForLet(None), _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:70: 479:71 (#0),
                    scope: scope[3],
                },
                kind: drop(_47) -> [return: bb40, unwind: bb178],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_50),
            StorageDead(_47),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            _64 = &_1,
            _63 = &(*_64),
            StorageLive(_65),
            StorageLive(_66),
            _66 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:54: 481:65 (#0),
                    scope: scope[8],
                },
                kind: _65 = <core::option::Option<util::prefilter::Prefilter> as core::clone::Clone>::clone(move _66) -> [return: bb41, unwind: bb178],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            StorageLive(_67),
            StorageLive(_68),
            _68 = &_30,
            _67 = &(*_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:13: 481:72 (#0),
                    scope: scope[8],
                },
                kind: _62 = meta::wrappers::BoundedBacktracker::new(move _63, move _65, move _67) -> [return: bb42, unwind: bb177],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_65),
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:13: 481:73 (#3876),
                    scope: scope[8],
                },
                kind: _61 = <core::result::Result<meta::wrappers::BoundedBacktracker, meta::error::BuildError> as core::ops::Try>::branch(move _62) -> [return: bb43, unwind: bb176],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            PlaceMention(_61),
            _69 = discriminant(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:13: 481:73 (#3876),
                    scope: scope[8],
                },
                kind: switchInt(move _69) -> [0: bb46, 1: bb45, otherwise: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:13: 481:73 (#3876),
                    scope: scope[8],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:72: 481:73 (#3877),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb47, imaginary: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_73),
            _73 = move ((_61 as Continue).0: meta::wrappers::BoundedBacktracker),
            _60 = move _73,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:72: 481:73 (#0),
                    scope: scope[8],
                },
                kind: drop(_73) -> [return: bb49, unwind: bb175],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_70),
            _70 = move ((_61 as Break).0: core::result::Result<core::convert::Infallible, meta::error::BuildError>),
            StorageLive(_72),
            _72 = move _70,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:13: 481:73 (#3876),
                    scope: scope[15],
                },
                kind: _0 = <core::result::Result<meta::strategy::Core, meta::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, meta::error::BuildError>>>::from_residual(move _72) -> [return: bb48, unwind: bb173],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:72: 481:73 (#3877),
                    scope: scope[8],
                },
                kind: drop(_70) -> [return: bb131, unwind: bb175],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            FakeRead(ForLet(None), _60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:73: 481:74 (#0),
                    scope: scope[8],
                },
                kind: drop(_61) -> [return: bb50, unwind: bb172],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_64),
            StorageDead(_61),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            _76 = &_1,
            _75 = &(*_76),
            StorageLive(_77),
            StorageLive(_78),
            _78 = &_30,
            _77 = &(*_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:486:23: 486:58 (#0),
                    scope: scope[13],
                },
                kind: _74 = meta::wrappers::OnePass::new(move _75, move _77) -> [return: bb51, unwind: bb172],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_75),
            FakeRead(ForLet(None), _74),
            StorageDead(_78),
            StorageDead(_76),
            StorageLive(_82),
            StorageLive(_83),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            _86 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:494:17: 494:30 (#0),
                    scope: scope[18],
                },
                kind: _85 = meta::regex::RegexInfo::config(move _86) -> [return: bb52, unwind: bb171],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _84 = &(*_85),
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:494:17: 494:43 (#0),
                    scope: scope[18],
                },
                kind: _83 = meta::regex::Config::get_hybrid(move _84) -> [return: bb53, unwind: bb171],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:494:17: 494:43 (#0),
                    scope: scope[18],
                },
                kind: switchInt(move _83) -> [0: bb55, otherwise: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[18],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_85),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            StorageLive(_90),
            _90 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:494:48: 494:61 (#0),
                    scope: scope[18],
                },
                kind: _89 = meta::regex::RegexInfo::config(move _90) -> [return: bb56, unwind: bb171],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _88 = &(*_89),
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:494:48: 494:71 (#0),
                    scope: scope[18],
                },
                kind: _87 = meta::regex::Config::get_dfa(move _88) -> [return: bb57, unwind: bb171],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:494:48: 494:71 (#0),
                    scope: scope[18],
                },
                kind: switchInt(move _87) -> [0: bb59, otherwise: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[18],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_89),
            StorageLive(_91),
            _91 = core::option::Option::<nfa::thompson::nfa::NFA>::None,
            StorageLive(_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:495:24: 495:48 (#0),
                    scope: scope[18],
                },
                kind: _92 = meta::wrappers::Hybrid::none() -> [return: bb60, unwind: bb170],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:495:50: 495:71 (#0),
                    scope: scope[18],
                },
                kind: _93 = meta::wrappers::DFA::none() -> [return: bb61, unwind: bb169],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _82 = (move _91, move _92, move _93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:495:71: 495:72 (#0),
                    scope: scope[18],
                },
                kind: drop(_93) -> [return: bb62, unwind: bb169],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:495:71: 495:72 (#0),
                    scope: scope[18],
                },
                kind: drop(_92) -> [return: bb63, unwind: bb170],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:495:71: 495:72 (#0),
                    scope: scope[18],
                },
                kind: drop(_91) -> [return: bb64, unwind: bb171],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:494:13: 535:14 (#0),
                    scope: scope[18],
                },
                kind: goto -> bb107,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            StorageLive(_99),
            StorageLive(_100),
            StorageLive(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:507:30: 507:55 (#0),
                    scope: scope[18],
                },
                kind: _101 = nfa::thompson::compiler::Compiler::new() -> [return: bb66, unwind: bb171],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _100 = &mut _101,
            StorageLive(_102),
            StorageLive(_103),
            StorageLive(_104),
            StorageLive(_105),
            _105 = &_11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:514:25: 515:37 (#0),
                    scope: scope[18],
                },
                kind: _104 = <nfa::thompson::compiler::Config as core::clone::Clone>::clone(move _105) -> [return: bb67, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            StorageLive(_106),
            _106 = nfa::thompson::compiler::WhichCaptures::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:514:25: 516:65 (#0),
                    scope: scope[18],
                },
                kind: _103 = nfa::thompson::compiler::Config::which_captures(move _104, move _106) -> [return: bb68, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            StorageDead(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:514:25: 517:43 (#0),
                    scope: scope[18],
                },
                kind: _102 = nfa::thompson::compiler::Config::reverse(move _103, const true) -> [return: bb69, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:507:30: 518:22 (#0),
                    scope: scope[18],
                },
                kind: _99 = nfa::thompson::compiler::Compiler::configure(move _100, move _102) -> [return: bb70, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _98 = &(*_99),
            StorageDead(_102),
            StorageDead(_100),
            StorageLive(_107),
            _107 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:507:30: 519:47 (#0),
                    scope: scope[18],
                },
                kind: _97 = nfa::thompson::compiler::Compiler::build_many_from_hir::<&regex_syntax::hir::Hir>(move _98, move _107) -> [return: bb71, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
            StorageDead(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:507:30: 520:46 (#0),
                    scope: scope[18],
                },
                kind: _96 = core::result::Result::<nfa::thompson::nfa::NFA, nfa::thompson::error::BuildError>::map_err::<meta::error::BuildError, fn(nfa::thompson::error::BuildError) -> meta::error::BuildError {meta::error::BuildError::nfa}>(move _97, meta::error::BuildError::nfa) -> [return: bb72, unwind: bb167],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:507:30: 520:47 (#3879),
                    scope: scope[18],
                },
                kind: _95 = <core::result::Result<nfa::thompson::nfa::NFA, meta::error::BuildError> as core::ops::Try>::branch(move _96) -> [return: bb73, unwind: bb166],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            PlaceMention(_95),
            _108 = discriminant(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:507:30: 520:47 (#3879),
                    scope: scope[18],
                },
                kind: switchInt(move _108) -> [0: bb76, 1: bb75, otherwise: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:507:30: 520:47 (#3879),
                    scope: scope[18],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:46: 520:47 (#3880),
                    scope: scope[18],
                },
                kind: falseEdge -> [real: bb77, imaginary: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_112),
            _112 = move ((_95 as Continue).0: nfa::thompson::nfa::NFA),
            _94 = move _112,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:46: 520:47 (#0),
                    scope: scope[18],
                },
                kind: drop(_112) -> [return: bb79, unwind: bb165],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_109),
            _109 = move ((_95 as Break).0: core::result::Result<core::convert::Infallible, meta::error::BuildError>),
            StorageLive(_111),
            _111 = move _109,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:507:30: 520:47 (#3879),
                    scope: scope[22],
                },
                kind: _0 = <core::result::Result<meta::strategy::Core, meta::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, meta::error::BuildError>>>::from_residual(move _111) -> [return: bb78, unwind: bb163],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:46: 520:47 (#3880),
                    scope: scope[18],
                },
                kind: drop(_109) -> [return: bb127, unwind: bb165],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            FakeRead(ForLet(None), _94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:47: 520:48 (#0),
                    scope: scope[18],
                },
                kind: drop(_95) -> [return: bb80, unwind: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:47: 520:48 (#0),
                    scope: scope[18],
                },
                kind: drop(_101) -> [return: bb81, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageDead(_99),
            StorageDead(_95),
            StorageLive(_113),
            StorageLive(_114),
            StorageLive(_115),
            StorageLive(_116),
            StorageLive(_117),
            _117 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:521:31: 521:44 (#0),
                    scope: scope[20],
                },
                kind: _116 = meta::regex::RegexInfo::config(move _117) -> [return: bb82, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _115 = &(*_116),
            StorageDead(_117),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:521:31: 521:54 (#0),
                    scope: scope[20],
                },
                kind: _114 = meta::regex::Config::get_dfa(move _115) -> [return: bb83, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:521:31: 521:54 (#0),
                    scope: scope[20],
                },
                kind: switchInt(move _114) -> [0: bb85, otherwise: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            StorageDead(_116),
            StorageLive(_118),
            StorageLive(_119),
            _119 = &_1,
            _118 = &(*_119),
            StorageLive(_120),
            StorageLive(_121),
            _121 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:524:47: 524:58 (#0),
                    scope: scope[20],
                },
                kind: _120 = <core::option::Option<util::prefilter::Prefilter> as core::clone::Clone>::clone(move _121) -> [return: bb86, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            StorageDead(_116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:522:21: 522:42 (#0),
                    scope: scope[20],
                },
                kind: _113 = meta::wrappers::DFA::none() -> [return: bb88, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_121),
            StorageLive(_122),
            StorageLive(_123),
            _123 = &_30,
            _122 = &(*_123),
            StorageLive(_124),
            StorageLive(_125),
            _125 = &_94,
            _124 = &(*_125),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:524:21: 524:74 (#0),
                    scope: scope[20],
                },
                kind: _113 = meta::wrappers::DFA::new(move _118, move _120, move _122, move _124) -> [return: bb87, unwind: bb160],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageDead(_122),
            StorageDead(_120),
            StorageDead(_118),
            StorageDead(_125),
            StorageDead(_123),
            StorageDead(_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:521:27: 525:18 (#0),
                    scope: scope[20],
                },
                kind: goto -> bb88,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
            FakeRead(ForLet(None), _113),
            StorageLive(_126),
            StorageLive(_127),
            StorageLive(_128),
            StorageLive(_129),
            StorageLive(_130),
            _130 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:526:34: 526:47 (#0),
                    scope: scope[25],
                },
                kind: _129 = meta::regex::RegexInfo::config(move _130) -> [return: bb89, unwind: bb159],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _128 = &(*_129),
            StorageDead(_130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:526:34: 526:60 (#0),
                    scope: scope[25],
                },
                kind: _127 = meta::regex::Config::get_hybrid(move _128) -> [return: bb90, unwind: bb159],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:526:34: 526:60 (#0),
                    scope: scope[25],
                },
                kind: switchInt(move _127) -> [0: bb92, otherwise: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            StorageDead(_129),
            StorageLive(_131),
            StorageLive(_132),
            _132 = &_113,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:528:27: 528:40 (#0),
                    scope: scope[25],
                },
                kind: _131 = meta::wrappers::DFA::is_some(move _132) -> [return: bb93, unwind: bb159],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            StorageDead(_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:527:21: 527:45 (#0),
                    scope: scope[25],
                },
                kind: _126 = meta::wrappers::Hybrid::none() -> [return: bb99, unwind: bb159],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:528:27: 528:40 (#0),
                    scope: scope[25],
                },
                kind: switchInt(move _131) -> [0: bb95, otherwise: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:530:21: 530:45 (#0),
                    scope: scope[25],
                },
                kind: _126 = meta::wrappers::Hybrid::none() -> [return: bb98, unwind: bb159],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_132),
            StorageLive(_133),
            StorageLive(_134),
            _134 = &_1,
            _133 = &(*_134),
            StorageLive(_135),
            StorageLive(_136),
            _136 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:532:50: 532:61 (#0),
                    scope: scope[25],
                },
                kind: _135 = <core::option::Option<util::prefilter::Prefilter> as core::clone::Clone>::clone(move _136) -> [return: bb96, unwind: bb159],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageLive(_137),
            StorageLive(_138),
            _138 = &_30,
            _137 = &(*_138),
            StorageLive(_139),
            StorageLive(_140),
            _140 = &_94,
            _139 = &(*_140),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:532:21: 532:77 (#0),
                    scope: scope[25],
                },
                kind: _126 = meta::wrappers::Hybrid::new(move _133, move _135, move _137, move _139) -> [return: bb97, unwind: bb158],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_139),
            StorageDead(_137),
            StorageDead(_135),
            StorageDead(_133),
            StorageDead(_140),
            StorageDead(_138),
            StorageDead(_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:528:24: 533:18 (#0),
                    scope: scope[25],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_131),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:526:30: 533:18 (#0),
                    scope: scope[25],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            FakeRead(ForLet(None), _126),
            StorageLive(_141),
            StorageLive(_142),
            _142 = move _94,
            _141 = core::option::Option::<nfa::thompson::nfa::NFA>::Some(move _142),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:534:29: 534:30 (#0),
                    scope: scope[26],
                },
                kind: drop(_142) -> [return: bb100, unwind: bb156],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageLive(_143),
            _143 = move _126,
            StorageLive(_144),
            _144 = move _113,
            _82 = (move _141, move _143, move _144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:534:43: 534:44 (#0),
                    scope: scope[26],
                },
                kind: drop(_144) -> [return: bb101, unwind: bb155],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:534:43: 534:44 (#0),
                    scope: scope[26],
                },
                kind: drop(_143) -> [return: bb102, unwind: bb156],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:534:43: 534:44 (#0),
                    scope: scope[26],
                },
                kind: drop(_141) -> [return: bb103, unwind: bb157],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:535:13: 535:14 (#0),
                    scope: scope[25],
                },
                kind: drop(_126) -> [return: bb104, unwind: bb159],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:535:13: 535:14 (#0),
                    scope: scope[20],
                },
                kind: drop(_113) -> [return: bb105, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:535:13: 535:14 (#0),
                    scope: scope[18],
                },
                kind: drop(_94) -> [return: bb106, unwind: bb171],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:494:13: 535:14 (#0),
                    scope: scope[18],
                },
                kind: goto -> bb107,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageDead(_83),
            PlaceMention(_82),
            StorageLive(_79),
            _79 = move (_82.0: core::option::Option<nfa::thompson::nfa::NFA>),
            StorageLive(_80),
            _80 = move (_82.1: meta::wrappers::Hybrid),
            StorageLive(_81),
            _81 = move (_82.2: meta::wrappers::DFA),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:535:14: 535:15 (#0),
                    scope: scope[18],
                },
                kind: drop(_82) -> [return: bb108, unwind: bb152],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            StorageLive(_145),
            StorageLive(_146),
            _146 = move _1,
            StorageLive(_147),
            _147 = move _2,
            StorageLive(_148),
            _148 = move _30,
            StorageLive(_149),
            _149 = move _79,
            StorageLive(_150),
            _150 = move _46,
            StorageLive(_151),
            _151 = move _60,
            StorageLive(_152),
            _152 = move _74,
            StorageLive(_153),
            _153 = move _80,
            StorageLive(_154),
            _154 = move _81,
            _145 = meta::strategy::Core { info: move _146, pre: move _147, nfa: move _148, nfarev: move _149, pikevm: move _150, backtrack: move _151, onepass: move _152, hybrid: move _153, dfa: move _154 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_154) -> [return: bb109, unwind: bb143],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_154),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_153) -> [return: bb110, unwind: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_152) -> [return: bb111, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_152),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_151) -> [return: bb112, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_151),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_150) -> [return: bb113, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_150),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_149) -> [return: bb114, unwind: bb148],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_149),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_148) -> [return: bb115, unwind: bb149],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_148),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_147) -> [return: bb116, unwind: bb150],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_147),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_146) -> [return: bb117, unwind: bb151],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_146),
            _0 = core::result::Result::<meta::strategy::Core, meta::error::BuildError>::Ok(move _145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:10: 546:11 (#0),
                    scope: scope[19],
                },
                kind: drop(_145) -> [return: bb118, unwind: bb152],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[18],
                },
                kind: drop(_81) -> [return: bb119, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[18],
                },
                kind: drop(_80) -> [return: bb120, unwind: bb154],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[18],
                },
                kind: drop(_79) -> [return: bb121, unwind: bb171],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[13],
                },
                kind: drop(_74) -> [return: bb122, unwind: bb172],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[8],
                },
                kind: drop(_60) -> [return: bb123, unwind: bb178],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_46) -> [return: bb124, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_30) -> [return: bb125, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_11),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb126, unwind: bb193],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb142, unwind: bb194],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:47: 520:48 (#0),
                    scope: scope[18],
                },
                kind: drop(_95) -> [return: bb128, unwind: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:47: 520:48 (#0),
                    scope: scope[18],
                },
                kind: drop(_101) -> [return: bb129, unwind: bb171],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageDead(_99),
            StorageDead(_95),
            StorageDead(_94),
            StorageDead(_87),
            StorageDead(_83),
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[13],
                },
                kind: drop(_74) -> [return: bb130, unwind: bb172],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[8],
                },
                kind: drop(_60) -> [return: bb133, unwind: bb178],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:73: 481:74 (#0),
                    scope: scope[8],
                },
                kind: drop(_61) -> [return: bb132, unwind: bb178],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_64),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[8],
                },
                kind: goto -> bb133,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_46) -> [return: bb136, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:70: 479:71 (#0),
                    scope: scope[3],
                },
                kind: drop(_47) -> [return: bb135, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_50),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb136,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_30) -> [return: bb140, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:39: 472:40 (#0),
                    scope: scope[2],
                },
                kind: drop(_31) -> [return: bb138, unwind: bb191],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:39: 472:40 (#0),
                    scope: scope[2],
                },
                kind: drop(_37) -> [return: bb139, unwind: bb192],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb140,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_11),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb141, unwind: bb193],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb142, unwind: bb194],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:6: 547:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_153) -> [return: bb144, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_152) -> [return: bb145, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_151) -> [return: bb146, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_150) -> [return: bb147, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_149) -> [return: bb148, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_148) -> [return: bb149, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_147) -> [return: bb150, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:9: 546:10 (#0),
                    scope: scope[19],
                },
                kind: drop(_146) -> [return: bb151, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:546:10: 546:11 (#0),
                    scope: scope[19],
                },
                kind: drop(_145) -> [return: bb152, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[18],
                },
                kind: drop(_81) -> [return: bb153, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[18],
                },
                kind: drop(_80) -> [return: bb154, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[18],
                },
                kind: drop(_79) -> [return: bb171, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:534:43: 534:44 (#0),
                    scope: scope[26],
                },
                kind: drop(_143) -> [return: bb156, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:534:43: 534:44 (#0),
                    scope: scope[26],
                },
                kind: drop(_141) -> [return: bb157, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:535:13: 535:14 (#0),
                    scope: scope[25],
                },
                kind: drop(_126) -> [return: bb159, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:532:76: 532:77 (#0),
                    scope: scope[25],
                },
                kind: drop(_135) -> [return: bb159, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:535:13: 535:14 (#0),
                    scope: scope[20],
                },
                kind: drop(_113) -> [return: bb162, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:524:73: 524:74 (#0),
                    scope: scope[20],
                },
                kind: drop(_120) -> [return: bb162, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:47: 520:48 (#0),
                    scope: scope[18],
                },
                kind: drop(_101) -> [return: bb162, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:535:13: 535:14 (#0),
                    scope: scope[18],
                },
                kind: drop(_94) -> [return: bb171, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:46: 520:47 (#3879),
                    scope: scope[22],
                },
                kind: drop(_111) -> [return: bb164, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:46: 520:47 (#3880),
                    scope: scope[18],
                },
                kind: drop(_109) -> [return: bb165, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:47: 520:48 (#0),
                    scope: scope[18],
                },
                kind: drop(_95) -> [return: bb168, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:46: 520:47 (#3879),
                    scope: scope[18],
                },
                kind: drop(_96) -> [return: bb168, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:45: 520:46 (#0),
                    scope: scope[18],
                },
                kind: drop(_97) -> [return: bb168, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:520:47: 520:48 (#0),
                    scope: scope[18],
                },
                kind: drop(_101) -> [return: bb171, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:495:71: 495:72 (#0),
                    scope: scope[18],
                },
                kind: drop(_92) -> [return: bb170, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:495:71: 495:72 (#0),
                    scope: scope[18],
                },
                kind: drop(_91) -> [return: bb171, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[13],
                },
                kind: drop(_74) -> [return: bb172, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[8],
                },
                kind: drop(_60) -> [return: bb178, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:72: 481:73 (#3876),
                    scope: scope[15],
                },
                kind: drop(_72) -> [return: bb174, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:72: 481:73 (#3877),
                    scope: scope[8],
                },
                kind: drop(_70) -> [return: bb175, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:73: 481:74 (#0),
                    scope: scope[8],
                },
                kind: drop(_61) -> [return: bb178, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:72: 481:73 (#3876),
                    scope: scope[8],
                },
                kind: drop(_62) -> [return: bb178, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:481:71: 481:72 (#0),
                    scope: scope[8],
                },
                kind: drop(_65) -> [return: bb178, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_46) -> [return: bb185, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:69: 479:70 (#3874),
                    scope: scope[10],
                },
                kind: drop(_58) -> [return: bb180, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:69: 479:70 (#3875),
                    scope: scope[3],
                },
                kind: drop(_56) -> [return: bb181, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:70: 479:71 (#0),
                    scope: scope[3],
                },
                kind: drop(_47) -> [return: bb185, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:69: 479:70 (#3874),
                    scope: scope[3],
                },
                kind: drop(_48) -> [return: bb185, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:479:68: 479:69 (#0),
                    scope: scope[3],
                },
                kind: drop(_51) -> [return: bb185, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:39: 472:40 (#0),
                    scope: scope[2],
                },
                kind: drop(_37) -> [return: bb185, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_30) -> [return: bb192, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:38: 472:39 (#3872),
                    scope: scope[5],
                },
                kind: drop(_44) -> [return: bb187, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:38: 472:39 (#3873),
                    scope: scope[2],
                },
                kind: drop(_42) -> [return: bb188, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:39: 472:40 (#0),
                    scope: scope[2],
                },
                kind: drop(_31) -> [return: bb191, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:38: 472:39 (#3872),
                    scope: scope[2],
                },
                kind: drop(_32) -> [return: bb191, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:37: 472:38 (#0),
                    scope: scope[2],
                },
                kind: drop(_33) -> [return: bb191, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:472:39: 472:40 (#0),
                    scope: scope[2],
                },
                kind: drop(_37) -> [return: bb192, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb193, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:547:5: 547:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb194, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:456:5: 547:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<meta::strategy::Core, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:460:10: 460:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:457:15: 457:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:457:9: 457:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:457:9: 457:13 (#0),
                    },
                ),
            ),
        ),
        ty: meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:457:9: 457:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:458:14: 458:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:458:9: 458:12 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:458:9: 458:12 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:458:9: 458:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:459:15: 459:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:459:9: 459:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:459:9: 459:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [&'{erased} regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:459:9: 459:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:461:25: 461:43 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:461:13: 461:22 (#0),
                    },
                ),
            ),
        ),
        ty: util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:461:13: 461:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:462:9: 462:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:462:9: 462:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:462:35: 462:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:462:35: 462:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:462:35: 462:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:462:35: 462:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:463:31: 468:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:463:13: 463:28 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:463:13: 463:28 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:463:31: 467:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:463:31: 466:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:463:31: 465:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:463:31: 464:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:463:31: 463:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:464:19: 464:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:464:19: 464:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:464:19: 464:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:464:19: 464:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:465:29: 465:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:465:29: 465:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:465:29: 465:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:465:29: 465:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::WhichCaptures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:467:29: 467:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:467:29: 467:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:467:29: 467:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:467:29: 467:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:468:27: 468:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:469:19: 472:39 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:469:13: 469:16 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:469:13: 469:16 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, meta::error::BuildError>, nfa::thompson::nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:469:19: 472:39 (#3872),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::thompson::nfa::NFA, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:469:19: 472:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::thompson::nfa::NFA, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:469:19: 471:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::compiler::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:469:19: 470:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::compiler::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:469:19: 470:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::compiler::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:469:19: 469:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:469:19: 469:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:470:24: 470:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:470:24: 470:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:471:34: 471:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:472:38: 472:39 (#3873),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                regex-automata/src/meta/strategy.rs:469:19: 472:39 (#3872),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:472:38: 472:39 (#3873),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:472:38: 472:39 (#3873),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:472:38: 472:39 (#3873),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:472:38: 472:39 (#3873),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                regex-automata/src/meta/strategy.rs:469:19: 472:39 (#3872),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:469:19: 472:39 (#3872),
                    },
                ),
            ),
        ),
        ty: nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:469:19: 472:39 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:479:22: 479:70 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:479:13: 479:19 (#0),
                    },
                ),
            ),
        ),
        ty: meta::wrappers::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:13: 479:19 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, meta::error::BuildError>, meta::wrappers::PikeVM>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:22: 479:70 (#3874),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<meta::wrappers::PikeVM, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:22: 479:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:44: 479:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:44: 479:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:51: 479:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:51: 479:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:64: 479:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:64: 479:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:69: 479:70 (#3875),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _47,
                                ),
                                regex-automata/src/meta/strategy.rs:479:22: 479:70 (#3874),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:479:69: 479:70 (#3875),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:69: 479:70 (#3875),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:69: 479:70 (#3875),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:69: 479:70 (#3875),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _47,
                                ),
                                regex-automata/src/meta/strategy.rs:479:22: 479:70 (#3874),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:479:22: 479:70 (#3874),
                    },
                ),
            ),
        ),
        ty: meta::wrappers::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:479:22: 479:70 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:481:13: 481:73 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:480:13: 480:22 (#0),
                    },
                ),
            ),
        ),
        ty: meta::wrappers::BoundedBacktracker,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:480:13: 480:22 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, meta::error::BuildError>, meta::wrappers::BoundedBacktracker>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:13: 481:73 (#3876),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<meta::wrappers::BoundedBacktracker, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:13: 481:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:47: 481:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:47: 481:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:54: 481:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:54: 481:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:67: 481:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:67: 481:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:72: 481:73 (#3877),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _61,
                                ),
                                regex-automata/src/meta/strategy.rs:481:13: 481:73 (#3876),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:481:72: 481:73 (#3877),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:72: 481:73 (#3877),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:72: 481:73 (#3877),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:72: 481:73 (#3877),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _61,
                                ),
                                regex-automata/src/meta/strategy.rs:481:13: 481:73 (#3876),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:481:13: 481:73 (#3876),
                    },
                ),
            ),
        ),
        ty: meta::wrappers::BoundedBacktracker,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:481:13: 481:73 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:486:23: 486:58 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:486:13: 486:20 (#0),
                    },
                ),
            ),
        ),
        ty: meta::wrappers::OnePass,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:486:13: 486:20 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:486:46: 486:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:486:46: 486:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:486:53: 486:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:486:53: 486:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _82,
                                ),
                                regex-automata/src/meta/strategy.rs:494:13: 535:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:493:13: 493:34 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<nfa::thompson::nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:493:14: 493:20 (#0),
            scope: scope[18],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _82,
                                ),
                                regex-automata/src/meta/strategy.rs:494:13: 535:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:493:13: 493:34 (#0),
                    },
                ),
            ),
        ),
        ty: meta::wrappers::Hybrid,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:493:22: 493:28 (#0),
            scope: scope[18],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _82,
                                ),
                                regex-automata/src/meta/strategy.rs:494:13: 535:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:493:13: 493:34 (#0),
                    },
                ),
            ),
        ),
        ty: meta::wrappers::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:493:30: 493:33 (#0),
            scope: scope[18],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<nfa::thompson::nfa::NFA>, meta::wrappers::Hybrid, meta::wrappers::DFA),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:494:13: 535:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:494:17: 494:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:494:17: 494:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:494:17: 494:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:494:17: 494:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:494:48: 494:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:494:48: 494:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:494:48: 494:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:494:48: 494:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:495:17: 495:72 (#0),
                },
            ),
        ),
        ty: core::option::Option<nfa::thompson::nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:495:18: 495:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:495:17: 495:72 (#0),
                },
            ),
        ),
        ty: meta::wrappers::Hybrid,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:495:24: 495:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:495:17: 495:72 (#0),
                },
            ),
        ),
        ty: meta::wrappers::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:495:50: 495:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:507:30: 520:47 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:507:21: 507:27 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:507:21: 507:27 (#0),
            scope: scope[18],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, meta::error::BuildError>, nfa::thompson::nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:507:30: 520:47 (#3879),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::thompson::nfa::NFA, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:507:30: 520:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::thompson::nfa::NFA, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:507:30: 519:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::compiler::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:507:30: 518:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::compiler::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:507:30: 518:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::compiler::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:507:30: 507:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:507:30: 507:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:514:25: 517:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:514:25: 516:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:514:25: 515:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:514:25: 514:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::WhichCaptures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:516:45: 516:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:519:42: 519:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:520:46: 520:47 (#3880),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _95,
                                ),
                                regex-automata/src/meta/strategy.rs:507:30: 520:47 (#3879),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:520:46: 520:47 (#3880),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:520:46: 520:47 (#3880),
            scope: scope[18],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:520:46: 520:47 (#3880),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:520:46: 520:47 (#3880),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _95,
                                ),
                                regex-automata/src/meta/strategy.rs:507:30: 520:47 (#3879),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:507:30: 520:47 (#3879),
                    },
                ),
            ),
        ),
        ty: nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:507:30: 520:47 (#0),
            scope: scope[18],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:521:27: 525:18 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:521:21: 521:24 (#0),
                    },
                ),
            ),
        ),
        ty: meta::wrappers::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:521:21: 521:24 (#0),
            scope: scope[20],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:521:31: 521:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:521:31: 521:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:521:31: 521:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:521:31: 521:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:524:21: 524:74 (#0),
                },
            ),
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:524:40: 524:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:524:21: 524:74 (#0),
                },
            ),
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:524:40: 524:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:524:21: 524:74 (#0),
                },
            ),
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:524:47: 524:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:524:21: 524:74 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:524:47: 524:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:524:21: 524:74 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:524:60: 524:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:524:21: 524:74 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:524:60: 524:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:524:21: 524:74 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:524:66: 524:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:524:21: 524:74 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:524:66: 524:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:526:30: 533:18 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:526:21: 526:27 (#0),
                    },
                ),
            ),
        ),
        ty: meta::wrappers::Hybrid,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:526:21: 526:27 (#0),
            scope: scope[25],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:526:34: 526:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:526:34: 526:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:526:34: 526:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:526:34: 526:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:528:27: 528:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::wrappers::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:528:27: 528:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:532:21: 532:77 (#0),
                },
            ),
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:532:43: 532:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:532:21: 532:77 (#0),
                },
            ),
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:532:43: 532:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:532:21: 532:77 (#0),
                },
            ),
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:532:50: 532:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:532:21: 532:77 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:532:50: 532:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:532:21: 532:77 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:532:63: 532:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:532:21: 532:77 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:532:63: 532:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:532:21: 532:77 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:532:69: 532:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:532:21: 532:77 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:532:69: 532:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:534:17: 534:44 (#0),
                },
            ),
        ),
        ty: core::option::Option<nfa::thompson::nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:534:18: 534:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:534:23: 534:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:534:17: 534:44 (#0),
                },
            ),
        ),
        ty: meta::wrappers::Hybrid,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:534:32: 534:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:534:17: 534:44 (#0),
                },
            ),
        ),
        ty: meta::wrappers::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:534:40: 534:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:536:12: 546:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:537:13: 537:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:538:13: 538:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:539:13: 539:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<nfa::thompson::nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:540:13: 540:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: meta::wrappers::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:541:13: 541:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: meta::wrappers::BoundedBacktracker,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:542:13: 542:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: meta::wrappers::OnePass,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:543:13: 543:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: meta::wrappers::Hybrid,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:544:13: 544:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: meta::wrappers::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:545:13: 545:16 (#0),
            scope: scope[0],
        },
    },
]