[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:128:25: 128:50 (#0),
                    scope: scope[0],
                },
                kind: _2 = regex_syntax::hir::literal::Extractor::new() -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut _2,
            StorageLive(_5),
            _5 = regex_syntax::hir::literal::ExtractKind::Prefix,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:129:5: 129:49 (#0),
                    scope: scope[1],
                },
                kind: _3 = regex_syntax::hir::literal::Extractor::kind(move _4, move _5) -> [return: bb2, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            StorageLive(_8),
            _8 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:130:24: 130:46 (#0),
                    scope: scope[1],
                },
                kind: _6 = regex_syntax::hir::literal::Extractor::extract(move _7, move _8) -> [return: bb3, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:144:5: 144:28 (#0),
                    scope: scope[2],
                },
                kind: _9 = regex_syntax::hir::literal::Seq::make_inexact(move _10) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:145:5: 145:49 (#0),
                    scope: scope[2],
                },
                kind: _11 = regex_syntax::hir::literal::Seq::optimize_for_prefix_by_preference(move _12) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &_6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:151:5: 152:20 (#0),
                    scope: scope[2],
                },
                kind: _13 = regex_syntax::hir::literal::Seq::literals(move _14) -> [return: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            _15 = {closure@regex-automata/src/meta/reverse_inner.rs:153:19: 153:25},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:151:5: 153:73 (#0),
                    scope: scope[2],
                },
                kind: _0 = core::option::Option::<&[regex_syntax::hir::literal::Literal]>::and_then::<util::prefilter::Prefilter, {closure@regex-automata/src/meta/reverse_inner.rs:153:19: 153:25}>(move _13, move _15) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:154:1: 154:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:154:2: 154:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:154:1: 154:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:127:1: 154:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:127:28: 127:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/reverse_inner.rs:127:19: 127:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/reverse_inner.rs:127:14: 127:17 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/reverse_inner.rs:127:14: 127:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:127:14: 127:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/reverse_inner.rs:128:25: 128:50 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/reverse_inner.rs:128:9: 128:22 (#0),
                    },
                ),
            ),
        ),
        ty: regex_syntax::hir::literal::Extractor,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:128:9: 128:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::hir::literal::Extractor,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:129:5: 129:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::hir::literal::Extractor,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:129:5: 129:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_syntax::hir::literal::ExtractKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:129:20: 129:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/reverse_inner.rs:130:24: 130:46 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/reverse_inner.rs:130:9: 130:21 (#0),
                    },
                ),
            ),
        ),
        ty: regex_syntax::hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:130:9: 130:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_syntax::hir::literal::Extractor,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:130:24: 130:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_syntax::hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:130:42: 130:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:144:5: 144:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:144:5: 144:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:145:5: 145:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:145:5: 145:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:151:5: 153:73 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} [regex_syntax::hir::literal::Literal]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:151:5: 152:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:151:5: 153:73 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:151:5: 151:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:151:5: 153:73 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1973 ~ regex_automata[00dd]::meta::reverse_inner::prefilter::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} [regex_syntax::hir::literal::Literal],)) -> core::option::Option<util::prefilter::Prefilter>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:153:19: 153:72 (#0),
            scope: scope[0],
        },
    },
]