[
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:736:14: 736:30 (#0),
                    scope: scope[0],
                },
                kind: _6 = util::search::Input::<'_>::get_span(move _7) -> [return: bb1, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = (_6.0: usize),
            _9 = Gt(move _10, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:737:8: 737:20 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _9) -> [0: bb27, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:738:20: 738:36 (#0),
                    scope: scope[1],
                },
                kind: _12 = util::search::Input::<'_>::haystack(move _13) -> [return: bb3, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = (_6.0: usize),
            _16 = SubWithOverflow(_15, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:738:37: 738:49 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_16.1: bool), "attempt to compute `{} - {}`, which would overflow", move _15, const 1_usize) -> [success: bb4, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = move (_16.0: usize),
            StorageDead(_15),
            _17 = Len((*_12)),
            _18 = Lt(_14, _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:738:20: 738:50 (#0),
                    scope: scope[1],
                },
                kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _14) -> [success: bb5, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = (*_12)[_14],
            FakeRead(ForLet(None), _11),
            StorageDead(_14),
            StorageDead(_12),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &(*_1),
            StorageLive(_24),
            _24 = &mut (*_2),
            StorageLive(_25),
            _25 = (*_4),
            StorageLive(_26),
            _26 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:739:16: 740:43 (#0),
                    scope: scope[2],
                },
                kind: _22 = hybrid::dfa::DFA::next_state(move _23, move _24, move _25, move _26) -> [return: bb6, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_23),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &(_6.0: usize),
            _27 = {closure@regex-automata/src/hybrid/search.rs:741:22: 741:25} { sp: move _28 },
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:739:16: 741:44 (#0),
                    scope: scope[2],
                },
                kind: _21 = core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::map_err::<util::search::MatchError, {closure@regex-automata/src/hybrid/search.rs:741:22: 741:25}>(move _22, move _27) -> [return: bb7, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:739:16: 741:45 (#3680),
                    scope: scope[2],
                },
                kind: _20 = <core::result::Result<hybrid::id::LazyStateID, util::search::MatchError> as core::ops::Try>::branch(move _21) -> [return: bb8, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            PlaceMention(_20),
            _29 = discriminant(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:739:16: 741:45 (#3680),
                    scope: scope[2],
                },
                kind: switchInt(move _29) -> [0: bb11, 1: bb10, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:739:16: 741:45 (#3680),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:741:44: 741:45 (#3681),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            _33 = ((_20 as Continue).0: hybrid::id::LazyStateID),
            _19 = _33,
            StorageDead(_33),
            (*_4) = move _19,
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:741:45: 741:46 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb14, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = move ((_20 as Break).0: core::result::Result<core::convert::Infallible, util::search::MatchError>),
            StorageLive(_32),
            _32 = move _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:739:16: 741:45 (#3680),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<(), util::search::MatchError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual(move _32) -> [return: bb13, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:741:44: 741:45 (#3681),
                    scope: scope[2],
                },
                kind: drop(_30) -> [return: bb52, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:742:12: 742:26 (#0),
                    scope: scope[2],
                },
                kind: _34 = hybrid::id::LazyStateID::is_match(move _35) -> [return: bb15, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:742:12: 742:26 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _34) -> [0: bb19, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &(*_1),
            StorageLive(_38),
            _38 = &(*_2),
            StorageLive(_39),
            _39 = (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:743:27: 743:60 (#0),
                    scope: scope[2],
                },
                kind: _36 = hybrid::dfa::DFA::match_pattern(move _37, move _38, move _39, const 0_usize) -> [return: bb17, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
            FakeRead(ForLet(None), _36),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = _36,
            StorageLive(_43),
            _43 = (_6.0: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:744:25: 744:58 (#0),
                    scope: scope[7],
                },
                kind: _41 = util::search::HalfMatch::new(move _42, move _43) -> [return: bb18, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            _40 = core::option::Option::<util::search::HalfMatch>::Some(move _41),
            StorageDead(_41),
            (*_5) = move _40,
            StorageDead(_40),
            _8 = const (),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:742:9: 747:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:745:19: 745:32 (#0),
                    scope: scope[2],
                },
                kind: _44 = hybrid::id::LazyStateID::is_quit(move _45) -> [return: bb20, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:745:19: 745:32 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _44) -> [0: bb25, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageLive(_47),
            StorageLive(_48),
            _48 = _11,
            StorageLive(_49),
            StorageLive(_50),
            _50 = (_6.0: usize),
            _51 = SubWithOverflow(_50, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:746:47: 746:59 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_51.1: bool), "attempt to compute `{} - {}`, which would overflow", move _50, const 1_usize) -> [success: bb22, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _49 = move (_51.0: usize),
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:746:24: 746:60 (#0),
                    scope: scope[2],
                },
                kind: _47 = util::search::MatchError::quit(move _48, move _49) -> [return: bb23, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_48),
            _0 = core::result::Result::<(), util::search::MatchError>::Err(move _47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:746:60: 746:61 (#0),
                    scope: scope[2],
                },
                kind: drop(_47) -> [return: bb24, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_44),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb54,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            _8 = const (),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:742:9: 747:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:737:5: 758:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            _56 = &(*_1),
            StorageLive(_57),
            _57 = &mut (*_2),
            StorageLive(_58),
            _58 = (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:13: 750:44 (#0),
                    scope: scope[1],
                },
                kind: _55 = hybrid::dfa::DFA::next_eoi_state(move _56, move _57, move _58) -> [return: bb28, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &(_6.0: usize),
            _59 = {closure@regex-automata/src/hybrid/search.rs:750:53: 750:56} { sp: move _60 },
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:13: 750:75 (#0),
                    scope: scope[1],
                },
                kind: _54 = core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::map_err::<util::search::MatchError, {closure@regex-automata/src/hybrid/search.rs:750:53: 750:56}>(move _55, move _59) -> [return: bb29, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:13: 750:76 (#3684),
                    scope: scope[1],
                },
                kind: _53 = <core::result::Result<hybrid::id::LazyStateID, util::search::MatchError> as core::ops::Try>::branch(move _54) -> [return: bb30, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            PlaceMention(_53),
            _61 = discriminant(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:13: 750:76 (#3684),
                    scope: scope[1],
                },
                kind: switchInt(move _61) -> [0: bb33, 1: bb32, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:13: 750:76 (#3684),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:75: 750:76 (#3685),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            _65 = ((_53 as Continue).0: hybrid::id::LazyStateID),
            _52 = _65,
            StorageDead(_65),
            (*_4) = move _52,
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:76: 750:77 (#0),
                    scope: scope[1],
                },
                kind: drop(_53) -> [return: bb36, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_62),
            _62 = move ((_53 as Break).0: core::result::Result<core::convert::Infallible, util::search::MatchError>),
            StorageLive(_64),
            _64 = move _62,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:13: 750:76 (#3684),
                    scope: scope[9],
                },
                kind: _0 = <core::result::Result<(), util::search::MatchError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual(move _64) -> [return: bb35, unwind: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:75: 750:76 (#3685),
                    scope: scope[1],
                },
                kind: drop(_62) -> [return: bb50, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            _68 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:751:12: 751:26 (#0),
                    scope: scope[1],
                },
                kind: _67 = hybrid::id::LazyStateID::is_match(move _68) -> [return: bb37, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:751:12: 751:26 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _67) -> [0: bb41, otherwise: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageLive(_69),
            StorageLive(_70),
            _70 = &(*_1),
            StorageLive(_71),
            _71 = &(*_2),
            StorageLive(_72),
            _72 = (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:752:27: 752:60 (#0),
                    scope: scope[1],
                },
                kind: _69 = hybrid::dfa::DFA::match_pattern(move _70, move _71, move _72, const 0_usize) -> [return: bb39, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageDead(_71),
            StorageDead(_70),
            FakeRead(ForLet(None), _69),
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            _75 = _69,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:753:25: 753:51 (#0),
                    scope: scope[12],
                },
                kind: _74 = util::search::HalfMatch::new(move _75, const 0_usize) -> [return: bb40, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            _73 = core::option::Option::<util::search::HalfMatch>::Some(move _74),
            StorageDead(_74),
            (*_5) = move _73,
            StorageDead(_73),
            _66 = const (),
            StorageDead(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:751:9: 754:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            _66 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:751:9: 754:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_66),
            StorageLive(_76),
            StorageLive(_77),
            _77 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#720),
                    scope: scope[1],
                },
                kind: switchInt(move _77) -> [0: bb47, otherwise: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            _80 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:757:24: 757:37 (#0),
                    scope: scope[1],
                },
                kind: _79 = hybrid::id::LazyStateID::is_quit(move _80) -> [return: bb44, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:757:24: 757:37 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _79) -> [0: bb46, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageLive(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#721),
                    scope: scope[1],
                },
                kind: _81 = core::panicking::panic(const "assertion failed: !sid.is_quit()") -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            _78 = const (),
            StorageDead(_79),
            StorageDead(_78),
            _76 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#719),
                    scope: scope[1],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _76 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#719),
                    scope: scope[1],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_76),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:737:5: 758:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_82),
            _82 = (),
            _0 = core::result::Result::<(), util::search::MatchError>::Ok(move _82),
            StorageDead(_82),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:760:2: 760:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:76: 750:77 (#0),
                    scope: scope[1],
                },
                kind: drop(_53) -> [return: bb51, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb55,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:741:45: 741:46 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb53, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb54,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb55,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:760:2: 760:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:760:2: 760:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:75: 750:76 (#3684),
                    scope: scope[9],
                },
                kind: drop(_64) -> [return: bb58, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:75: 750:76 (#3685),
                    scope: scope[1],
                },
                kind: drop(_62) -> [return: bb59, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:76: 750:77 (#0),
                    scope: scope[1],
                },
                kind: drop(_53) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:750:75: 750:76 (#3684),
                    scope: scope[1],
                },
                kind: drop(_54) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:741:44: 741:45 (#3680),
                    scope: scope[4],
                },
                kind: drop(_32) -> [return: bb62, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:741:44: 741:45 (#3681),
                    scope: scope[2],
                },
                kind: drop(_30) -> [return: bb63, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:741:45: 741:46 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:741:44: 741:45 (#3680),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/search.rs:729:1: 760:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:735:6: 735:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/search.rs:730:10: 730:14 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/search.rs:730:5: 730:8 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:730:5: 730:8 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:730:5: 730:8 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/search.rs:731:12: 731:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/search.rs:731:5: 731:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:731:5: 731:10 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:731:5: 731:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/search.rs:732:12: 732:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/search.rs:732:5: 732:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:732:5: 732:10 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:732:5: 732:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/search.rs:733:10: 733:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/search.rs:733:5: 733:8 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:733:5: 733:8 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:733:5: 733:8 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/search.rs:734:10: 734:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/search.rs:734:5: 734:8 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:734:5: 734:8 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::option::Option<util::search::HalfMatch>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:734:5: 734:8 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/search.rs:736:14: 736:30 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:736:9: 736:11 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:736:9: 736:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:736:14: 736:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:737:5: 758:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:737:8: 737:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:737:8: 737:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/search.rs:738:20: 738:50 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:738:13: 738:17 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:738:13: 738:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:738:20: 738:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:738:20: 738:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:738:37: 738:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:738:37: 738:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:738:37: 738:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:738:20: 738:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:738:20: 738:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:739:16: 741:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::search::MatchError>, hybrid::id::LazyStateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:739:16: 741:45 (#3680),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hybrid::id::LazyStateID, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:739:16: 741:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hybrid::id::LazyStateID, hybrid::error::CacheError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:739:16: 740:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:739:16: 739:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:740:25: 740:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:740:32: 740:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:740:38: 740:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1638 ~ regex_automata[00dd]::hybrid::search::eoi_rev::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((hybrid::error::CacheError,)) -> util::search::MatchError, bound_vars: [] },
                (&'{erased} usize,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:741:22: 741:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:741:22: 741:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:741:44: 741:45 (#3681),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                regex-automata/src/hybrid/search.rs:739:16: 741:45 (#3680),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:741:44: 741:45 (#3681),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:741:44: 741:45 (#3681),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:741:44: 741:45 (#3681),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:741:44: 741:45 (#3681),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                regex-automata/src/hybrid/search.rs:739:16: 741:45 (#3680),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:739:16: 741:45 (#3680),
                    },
                ),
            ),
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:739:16: 741:45 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/hybrid/search.rs:742:9: 747:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:742:12: 742:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/hybrid/search.rs:742:9: 747:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:742:12: 742:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/search.rs:743:27: 743:60 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:743:17: 743:24 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:743:17: 743:24 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:743:27: 743:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:743:45: 743:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:743:52: 743:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::search::HalfMatch>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:744:20: 744:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::search::HalfMatch,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:744:25: 744:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:744:40: 744:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:744:49: 744:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/hybrid/search.rs:742:9: 747:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:745:19: 745:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/hybrid/search.rs:742:9: 747:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:745:19: 745:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/hybrid/search.rs:742:9: 747:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:745:33: 747:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::search::MatchError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:746:24: 746:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:746:41: 746:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:746:47: 746:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:746:47: 746:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:746:47: 746:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:13: 750:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::search::MatchError>, hybrid::id::LazyStateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:13: 750:76 (#3684),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hybrid::id::LazyStateID, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:13: 750:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hybrid::id::LazyStateID, hybrid::error::CacheError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:13: 750:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:13: 750:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:32: 750:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:39: 750:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1639 ~ regex_automata[00dd]::hybrid::search::eoi_rev::{closure#1}),
            [
                i32,
                Binder { value: extern "RustCall" fn((hybrid::error::CacheError,)) -> util::search::MatchError, bound_vars: [] },
                (&'{erased} usize,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:53: 750:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:53: 750:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:75: 750:76 (#3685),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _53,
                                ),
                                regex-automata/src/hybrid/search.rs:750:13: 750:76 (#3684),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:750:75: 750:76 (#3685),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:75: 750:76 (#3685),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:75: 750:76 (#3685),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:75: 750:76 (#3685),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _53,
                                ),
                                regex-automata/src/hybrid/search.rs:750:13: 750:76 (#3684),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:750:13: 750:76 (#3684),
                    },
                ),
            ),
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:750:13: 750:76 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:751:9: 754:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:751:12: 751:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:751:12: 751:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/search.rs:752:27: 752:60 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/search.rs:752:17: 752:24 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:752:17: 752:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:752:27: 752:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:752:45: 752:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:752:52: 752:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::search::HalfMatch>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:753:20: 753:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::search::HalfMatch,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:753:25: 753:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:753:40: 753:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#719),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#720),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#721),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:757:24: 757:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:757:24: 757:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#721),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#721),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/search.rs:759:8: 759:10 (#0),
            scope: scope[0],
        },
    },
]