[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &(((*_1).0: util::alphabet::BitSet).0: [u128; 2]),
            StorageLive(_3),
            StorageLive(_4),
            _4 = [const 0_u128, const 0_u128],
            _3 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:801:9: 801:30 (#0),
                    scope: scope[0],
                },
                kind: _0 = <[u128; 2] as core::cmp::PartialEq>::eq(move _2, move _3) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:802:6: 802:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:800:5: 802:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:800:38: 800:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::alphabet::ByteSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:800:28: 800:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:801:9: 801:30 (#0),
                },
            ),
        ),
        ty: &'{erased} [u128; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:801:9: 801:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:801:9: 801:30 (#0),
                },
            ),
        ),
        ty: &'{erased} [u128; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:801:24: 801:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:801:9: 801:30 (#0),
                },
            ),
        ),
        ty: [u128; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:801:24: 801:30 (#0),
            scope: scope[0],
        },
    },
]