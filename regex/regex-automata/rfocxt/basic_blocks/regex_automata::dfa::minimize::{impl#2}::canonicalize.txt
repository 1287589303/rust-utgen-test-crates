[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &((*_1).0: std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:359:9: 359:30 (#0),
                    scope: scope[0],
                },
                kind: _10 = <std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID>>> as core::ops::Deref>::deref(move _11) -> [return: bb1, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &(*_10),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:359:9: 359:30 (#0),
                    scope: scope[0],
                },
                kind: _8 = core::cell::RefCell::<std::vec::Vec<util::primitives::StateID>>::borrow_mut(move _9) -> [return: bb2, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &mut _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:359:9: 359:37 (#0),
                    scope: scope[0],
                },
                kind: _6 = <core::cell::RefMut<'_, std::vec::Vec<util::primitives::StateID>> as core::ops::DerefMut>::deref_mut(move _7) -> [return: bb3, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &mut (*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:359:9: 359:37 (#0),
                    scope: scope[0],
                },
                kind: _4 = <std::vec::Vec<util::primitives::StateID> as core::ops::DerefMut>::deref_mut(move _5) -> [return: bb4, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_4),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:359:9: 359:37 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::slice::<impl [util::primitives::StateID]>::sort(move _3) -> [return: bb5, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:359:37: 359:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb6, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_2),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &((*_1).0: std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:360:9: 360:30 (#0),
                    scope: scope[0],
                },
                kind: _18 = <std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID>>> as core::ops::Deref>::deref(move _19) -> [return: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = &(*_18),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:360:9: 360:30 (#0),
                    scope: scope[0],
                },
                kind: _16 = core::cell::RefCell::<std::vec::Vec<util::primitives::StateID>>::borrow_mut(move _17) -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = &mut _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:360:9: 360:38 (#0),
                    scope: scope[0],
                },
                kind: _14 = <core::cell::RefMut<'_, std::vec::Vec<util::primitives::StateID>> as core::ops::DerefMut>::deref_mut(move _15) -> [return: bb9, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = &mut (*_14),
            StorageDead(_17),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:360:9: 360:38 (#0),
                    scope: scope[0],
                },
                kind: _12 = std::vec::Vec::<util::primitives::StateID>::dedup(move _13) -> [return: bb10, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:360:38: 360:39 (#0),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_12),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:361:6: 361:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:360:38: 360:39 (#0),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:359:37: 359:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:358:5: 361:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:358:31: 358:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:358:21: 358:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:359:9: 359:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:359:9: 359:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:359:9: 359:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:359:9: 359:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:359:9: 359:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:359:9: 359:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::cell::RefMut<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:359:9: 359:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:359:9: 359:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:359:9: 359:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:359:9: 359:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:360:9: 360:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:360:9: 360:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:360:9: 360:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:360:9: 360:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::cell::RefMut<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:360:9: 360:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:360:9: 360:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:360:9: 360:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:360:9: 360:17 (#0),
            scope: scope[0],
        },
    },
]