[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1906:22: 1906:33 (#0),
                    scope: scope[0],
                },
                kind: _6 = util::search::Match::pattern(move _7) -> [return: bb1, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &_6,
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1906:22: 1906:44 (#0),
                    scope: scope[0],
                },
                kind: _4 = util::primitives::PatternID::as_usize(move _5) -> [return: bb2, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _8 = MulWithOverflow(_4, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1906:22: 1906:48 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, const 2_usize) -> [success: bb3, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_8.0: usize),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_6),
            StorageLive(_9),
            StorageLive(_10),
            _10 = _3,
            _11 = AddWithOverflow(_10, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1907:20: 1907:34 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_usize) -> [success: bb4, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = move (_11.0: usize),
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut (*_2),
            StorageLive(_15),
            _15 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1908:25: 1908:50 (#0),
                    scope: scope[3],
                },
                kind: _13 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::get_mut::<usize>(move _14, move _15) -> [return: bb5, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            PlaceMention(_13),
            _16 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1908:12: 1908:22 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _16) -> [1: bb6, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1908:12: 1908:22 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = move ((_13 as Some).0: &mut core::option::Option<util::primitives::NonMaxUsize>),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1909:34: 1909:43 (#0),
                    scope: scope[3],
                },
                kind: _19 = util::search::Match::start(move _20) -> [return: bb8, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1909:17: 1909:44 (#0),
                    scope: scope[3],
                },
                kind: _18 = util::primitives::NonMaxUsize::new(move _19) -> [return: bb9, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            (*_17) = move _18,
            StorageDead(_18),
            _12 = const (),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1908:5: 1910:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1908:5: 1910:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut (*_2),
            StorageLive(_23),
            _23 = _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1911:25: 1911:48 (#0),
                    scope: scope[4],
                },
                kind: _21 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::get_mut::<usize>(move _22, move _23) -> [return: bb12, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            PlaceMention(_21),
            _24 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1911:12: 1911:22 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _24) -> [1: bb13, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1911:12: 1911:22 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = move ((_21 as Some).0: &mut core::option::Option<util::primitives::NonMaxUsize>),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1912:34: 1912:41 (#0),
                    scope: scope[4],
                },
                kind: _27 = util::search::Match::end(move _28) -> [return: bb15, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1912:17: 1912:42 (#0),
                    scope: scope[4],
                },
                kind: _26 = util::primitives::NonMaxUsize::new(move _27) -> [return: bb16, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            (*_25) = move _26,
            StorageDead(_26),
            _0 = const (),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1911:5: 1913:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1911:5: 1913:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_3),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1914:2: 1914:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1905:1: 1914:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1905:68: 1905:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:1905:27: 1905:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:1905:24: 1905:25 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:1905:24: 1905:25 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::Match,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1905:24: 1905:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:1905:41: 1905:67 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:1905:34: 1905:39 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:1905:34: 1905:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [core::option::Option<util::primitives::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1905:34: 1905:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:1906:22: 1906:48 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:1906:9: 1906:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1906:9: 1906:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1906:22: 1906:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1906:22: 1906:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1906:22: 1906:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Match,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1906:22: 1906:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1906:22: 1906:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:1907:20: 1907:34 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:1907:9: 1907:17 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1907:9: 1907:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1907:20: 1907:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1907:20: 1907:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1908:5: 1910:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut core::option::Option<util::primitives::NonMaxUsize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1908:25: 1908:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<util::primitives::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1908:25: 1908:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1908:39: 1908:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1908:12: 1908:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                regex-automata/src/meta/strategy.rs:1908:25: 1908:50 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:1908:12: 1908:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1908:17: 1908:21 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1909:17: 1909:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1909:34: 1909:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Match,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1909:34: 1909:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/strategy.rs:1911:5: 1913:6 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} mut core::option::Option<util::primitives::NonMaxUsize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1911:25: 1911:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/strategy.rs:1911:5: 1913:6 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [core::option::Option<util::primitives::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1911:25: 1911:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/strategy.rs:1911:5: 1913:6 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1911:39: 1911:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1911:12: 1911:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                regex-automata/src/meta/strategy.rs:1911:25: 1911:48 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:1911:12: 1911:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1911:17: 1911:21 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1912:17: 1912:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1912:34: 1912:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Match,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1912:34: 1912:35 (#0),
            scope: scope[0],
        },
    },
]