[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(_1.0: std::vec::Vec<util::primitives::StateID>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:133:22: 133:38 (#0),
                    scope: scope[0],
                },
                kind: _3 = <std::vec::Vec<util::primitives::StateID> as core::clone::Clone>::clone(move _4) -> [return: bb1, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:134:21: 134:34 (#0),
                    scope: scope[1],
                },
                kind: _8 = <impl Remappable as dfa::remapper::Remappable>::state_len(move _9) -> [return: bb2, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = core::ops::Range::<usize> { start: const 0_usize, end: move _8 },
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
                    scope: scope[1],
                },
                kind: _6 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _7) -> [return: bb3, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            StorageLive(_10),
            _10 = move _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:134:9: 148:10 (#3229),
                    scope: scope[2],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:134:9: 148:10 (#3229),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb5, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut _10,
            _14 = &mut (*_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
                    scope: scope[2],
                },
                kind: _13 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _14) -> [return: bb6, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            _16 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
                    scope: scope[2],
                },
                kind: switchInt(move _16) -> [0: bb8, 1: bb9, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:134:9: 148:10 (#3229),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = ((_13 as Some).0: usize),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(_1.1: dfa::remapper::IndexMapper),
            StorageLive(_21),
            _21 = _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:135:26: 135:52 (#0),
                    scope: scope[3],
                },
                kind: _19 = dfa::remapper::IndexMapper::to_state_id(move _20, move _21) -> [return: bb11, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_47),
            StorageLive(_48),
            _48 = &mut (*_2),
            StorageLive(_49),
            StorageLive(_50),
            _50 = &(_1.0: std::vec::Vec<util::primitives::StateID>),
            StorageLive(_51),
            _51 = &(_1.1: dfa::remapper::IndexMapper),
            _49 = {closure@regex-automata/src/dfa/remapper.rs:149:17: 149:23} { self: move _50 },
            StorageDead(_51),
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:149:9: 149:61 (#0),
                    scope: scope[1],
                },
                kind: _47 = <impl Remappable as dfa::remapper::Remappable>::remap::<{closure@regex-automata/src/dfa/remapper.rs:149:17: 149:23}>(move _48, move _49) -> [return: bb24, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            FakeRead(ForLet(None), _19),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_3,
            StorageLive(_25),
            _25 = _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:136:36: 136:39 (#0),
                    scope: scope[4],
                },
                kind: _23 = <std::vec::Vec<util::primitives::StateID> as core::ops::Index<usize>>::index(move _24, move _25) -> [return: bb12, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = (*_23),
            StorageDead(_25),
            StorageDead(_24),
            FakeRead(ForLet(None), _22),
            StorageDead(_23),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &_19,
            StorageLive(_29),
            _29 = &_22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:137:16: 137:32 (#0),
                    scope: scope[5],
                },
                kind: _27 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _28, move _29) -> [return: bb13, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:137:16: 137:32 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _27) -> [0: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            _26 = const (),
            StorageDead(_27),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:140:13: 147:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:140:13: 147:14 (#0),
                    scope: scope[5],
                },
                kind: falseUnwind -> [real: bb17, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &_3,
            StorageLive(_34),
            StorageLive(_35),
            _35 = &(_1.1: dfa::remapper::IndexMapper),
            StorageLive(_36),
            _36 = _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:141:33: 141:61 (#0),
                    scope: scope[5],
                },
                kind: _34 = dfa::remapper::IndexMapper::to_index(move _35, move _36) -> [return: bb18, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:141:32: 141:62 (#0),
                    scope: scope[5],
                },
                kind: _32 = <std::vec::Vec<util::primitives::StateID> as core::ops::Index<usize>>::index(move _33, move _34) -> [return: bb19, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = (*_32),
            StorageDead(_34),
            StorageDead(_33),
            FakeRead(ForLet(None), _31),
            StorageDead(_32),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &_19,
            StorageLive(_40),
            _40 = &_31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:142:20: 142:32 (#0),
                    scope: scope[6],
                },
                kind: _38 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _39, move _40) -> [return: bb20, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:142:20: 142:32 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _38) -> [0: bb23, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageLive(_42),
            _42 = _22,
            StorageLive(_43),
            StorageLive(_44),
            _44 = &mut (_1.0: std::vec::Vec<util::primitives::StateID>),
            StorageLive(_45),
            _45 = _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:143:29: 143:32 (#0),
                    scope: scope[6],
                },
                kind: _43 = <std::vec::Vec<util::primitives::StateID> as core::ops::IndexMut<usize>>::index_mut(move _44, move _45) -> [return: bb22, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
            (*_43) = move _42,
            StorageDead(_42),
            StorageDead(_43),
            _12 = const (),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_31),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:134:9: 148:10 (#3229),
                    scope: scope[2],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            _37 = const (),
            StorageDead(_38),
            StorageDead(_37),
            StorageLive(_46),
            _46 = _31,
            _22 = move _46,
            StorageDead(_46),
            _11 = const (),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:140:13: 147:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_47),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:150:5: 150:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb25, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:150:5: 150:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb26, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:150:6: 150:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:150:5: 150:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:150:5: 150:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:115:5: 150:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:115:59: 115:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                ImplicitSelf(
                    Mut,
                ),
            ),
        ),
        ty: dfa::remapper::Remapper,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:115:25: 115:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/remapper.rs:115:38: 115:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/remapper.rs:115:35: 115:36 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/remapper.rs:115:35: 115:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut impl Remappable/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:115:35: 115:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/remapper.rs:133:22: 133:38 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/remapper.rs:133:13: 133:19 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:133:13: 133:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:133:22: 133:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:9: 148:10 (#3229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:21: 134:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} impl Remappable/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:21: 134:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:115:5: 150:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:9: 148:10 (#3229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:9: 148:10 (#3229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                regex-automata/src/dfa/remapper.rs:134:18: 134:34 (#3230),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/remapper.rs:134:13: 134:14 (#3231),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:134:13: 134:14 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/remapper.rs:135:26: 135:52 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/remapper.rs:135:17: 135:23 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:135:17: 135:23 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::remapper::IndexMapper,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:135:26: 135:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:135:50: 135:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/remapper.rs:136:30: 136:39 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/remapper.rs:136:17: 136:27 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:136:17: 136:27 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:136:36: 136:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:136:30: 136:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:136:37: 136:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:137:13: 139:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:137:16: 137:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:137:16: 137:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:137:26: 137:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:137:33: 139:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/remapper.rs:141:26: 141:62 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/remapper.rs:141:21: 141:23 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:141:21: 141:23 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:141:32: 141:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:141:26: 141:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:141:33: 141:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::remapper::IndexMapper,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:141:33: 141:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:141:54: 141:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:142:17: 145:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:142:20: 142:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:142:20: 142:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:142:30: 142:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:142:33: 145:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:143:35: 143:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:143:29: 143:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:143:21: 143:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:143:30: 143:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:146:26: 146:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:149:9: 149:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut impl Remappable/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:149:9: 149:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1148 ~ regex_automata[00dd]::dfa::remapper::{impl#0}::remap::{closure#0}),
            [
                impl Remappable/#0,
                i8,
                Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> util::primitives::StateID, bound_vars: [] },
                (&'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>, &'{erased} dfa::remapper::IndexMapper),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:149:17: 149:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:149:17: 149:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::remapper::IndexMapper,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:149:17: 149:60 (#0),
            scope: scope[0],
        },
    },
]