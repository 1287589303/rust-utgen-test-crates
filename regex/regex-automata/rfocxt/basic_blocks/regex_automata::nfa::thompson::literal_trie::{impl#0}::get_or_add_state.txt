[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).0: std::vec::Vec<nfa::thompson::literal_trie::State>),
            StorageLive(_8),
            _8 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:129:33: 129:39 (#0),
                    scope: scope[0],
                },
                kind: _6 = <std::vec::Vec<nfa::thompson::literal_trie::State> as core::ops::Index<util::primitives::StateID>>::index(move _7, move _8) -> [return: bb1, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:129:22: 129:54 (#0),
                    scope: scope[0],
                },
                kind: _4 = nfa::thompson::literal_trie::State::active_chunk(move _5) -> [return: bb2, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageDead(_6),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_4),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &_3,
            _11 = &(*_12),
            StorageLive(_13),
            _13 = {closure@regex-automata/src/nfa/thompson/literal_trie.rs:130:50: 130:53},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:130:15: 130:61 (#0),
                    scope: scope[1],
                },
                kind: _9 = core::slice::<impl [nfa::thompson::literal_trie::Transition]>::binary_search_by_key::<'_, u8, {closure@regex-automata/src/nfa/thompson/literal_trie.rs:130:50: 130:53}>(move _10, move _11, move _13) -> [return: bb3, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            PlaceMention(_9),
            _14 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:130:9: 130:61 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _14) -> [0: bb5, 1: bb6, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:130:15: 130:61 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:131:13: 131:18 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = ((_9 as Err).0: usize),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &((*_1).0: std::vec::Vec<nfa::thompson::literal_trie::State>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:134:41: 134:58 (#0),
                    scope: scope[3],
                },
                kind: _25 = std::vec::Vec::<nfa::thompson::literal_trie::State>::len(move _26) -> [return: bb9, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = ((_9 as Ok).0: usize),
            StorageLive(_16),
            StorageLive(_17),
            _17 = _15,
            _18 = Len((*_4)),
            _19 = Lt(_17, _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:131:25: 131:34 (#0),
                    scope: scope[2],
                },
                kind: assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> [success: bb8, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = ((*_4)[_17].1: util::primitives::StateID),
            _0 = core::result::Result::<util::primitives::StateID, nfa::thompson::error::BuildError>::Ok(move _16),
            StorageDead(_16),
            StorageDead(_17),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:131:39: 131:40 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 134:59 (#0),
                    scope: scope[3],
                },
                kind: _24 = util::primitives::StateID::new(move _25) -> [return: bb10, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &((*_1).0: std::vec::Vec<nfa::thompson::literal_trie::State>),
            _27 = {closure@regex-automata/src/nfa/thompson/literal_trie.rs:134:68: 134:71} { self: move _28 },
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 136:19 (#0),
                    scope: scope[3],
                },
                kind: _23 = core::result::Result::<util::primitives::StateID, util::primitives::StateIDError>::map_err::<nfa::thompson::error::BuildError, {closure@regex-automata/src/nfa/thompson/literal_trie.rs:134:68: 134:71}>(move _24, move _27) -> [return: bb11, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 136:20 (#4329),
                    scope: scope[3],
                },
                kind: _22 = <core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError> as core::ops::Try>::branch(move _23) -> [return: bb12, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            PlaceMention(_22),
            _29 = discriminant(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 136:20 (#4329),
                    scope: scope[3],
                },
                kind: switchInt(move _29) -> [0: bb15, 1: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 136:20 (#4329),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:136:19: 136:20 (#4330),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            _33 = ((_22 as Continue).0: util::primitives::StateID),
            _21 = _33,
            StorageDead(_33),
            FakeRead(ForLet(None), _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:136:20: 136:21 (#0),
                    scope: scope[3],
                },
                kind: drop(_22) -> [return: bb18, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = move ((_22 as Break).0: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>),
            StorageLive(_32),
            _32 = move _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 136:20 (#4329),
                    scope: scope[6],
                },
                kind: _0 = <core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>>>::from_residual(move _32) -> [return: bb17, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:136:19: 136:20 (#4330),
                    scope: scope[3],
                },
                kind: drop(_30) -> [return: bb27, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &mut ((*_1).0: std::vec::Vec<nfa::thompson::literal_trie::State>),
            StorageLive(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:137:34: 137:50 (#0),
                    scope: scope[4],
                },
                kind: _36 = <nfa::thompson::literal_trie::State as core::default::Default>::default() -> [return: bb19, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:137:17: 137:51 (#0),
                    scope: scope[4],
                },
                kind: _34 = std::vec::Vec::<nfa::thompson::literal_trie::State>::push(move _35, move _36) -> [return: bb20, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            StorageDead(_34),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &((*_1).0: std::vec::Vec<nfa::thompson::literal_trie::State>),
            StorageLive(_42),
            _42 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:140:36: 140:42 (#0),
                    scope: scope[4],
                },
                kind: _40 = <std::vec::Vec<nfa::thompson::literal_trie::State> as core::ops::Index<util::primitives::StateID>>::index(move _41, move _42) -> [return: bb21, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _39 = &(*_40),
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:140:25: 140:63 (#0),
                    scope: scope[4],
                },
                kind: _38 = nfa::thompson::literal_trie::State::active_chunk_start(move _39) -> [return: bb22, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageLive(_43),
            _43 = _20,
            _44 = AddWithOverflow(_38, _43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:140:25: 140:67 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_44.1: bool), "attempt to compute `{} + {}`, which would overflow", move _38, move _43) -> [success: bb23, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _37 = move (_44.0: usize),
            StorageDead(_43),
            StorageDead(_38),
            FakeRead(ForLet(None), _37),
            StorageDead(_40),
            StorageLive(_45),
            StorageLive(_46),
            _46 = _3,
            StorageLive(_47),
            _47 = _21,
            _45 = nfa::thompson::literal_trie::Transition { byte: move _46, next: move _47 },
            StorageDead(_47),
            StorageDead(_46),
            FakeRead(ForLet(None), _45),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &mut ((*_1).0: std::vec::Vec<nfa::thompson::literal_trie::State>),
            StorageLive(_52),
            _52 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:142:28: 142:34 (#0),
                    scope: scope[10],
                },
                kind: _50 = <std::vec::Vec<nfa::thompson::literal_trie::State> as core::ops::IndexMut<util::primitives::StateID>>::index_mut(move _51, move _52) -> [return: bb24, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            _49 = &mut ((*_50).0: std::vec::Vec<nfa::thompson::literal_trie::Transition>),
            StorageLive(_53),
            _53 = _37,
            StorageLive(_54),
            _54 = _45,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:142:17: 142:59 (#0),
                    scope: scope[10],
                },
                kind: _48 = std::vec::Vec::<nfa::thompson::literal_trie::Transition>::insert(move _49, move _53, move _54) -> [return: bb25, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
            StorageDead(_49),
            StorageDead(_50),
            StorageDead(_48),
            StorageLive(_55),
            _55 = _21,
            _0 = core::result::Result::<util::primitives::StateID, nfa::thompson::error::BuildError>::Ok(move _55),
            StorageDead(_55),
            StorageDead(_45),
            StorageDead(_37),
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:144:13: 144:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_12),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:146:6: 146:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:136:20: 136:21 (#0),
                    scope: scope[3],
                },
                kind: drop(_22) -> [return: bb28, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_4),
            StorageDead(_12),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:146:6: 146:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:146:6: 146:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:137:50: 137:51 (#0),
                    scope: scope[4],
                },
                kind: drop(_36) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:136:19: 136:20 (#4329),
                    scope: scope[6],
                },
                kind: drop(_32) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:136:19: 136:20 (#4330),
                    scope: scope[3],
                },
                kind: drop(_30) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:136:20: 136:21 (#0),
                    scope: scope[3],
                },
                kind: drop(_22) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:136:19: 136:20 (#4329),
                    scope: scope[3],
                },
                kind: drop(_23) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:124:5: 146:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:128:10: 128:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::literal_trie::LiteralTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:125:9: 125:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/literal_trie.rs:126:15: 126:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/literal_trie.rs:126:9: 126:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:126:9: 126:13 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:126:9: 126:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/literal_trie.rs:127:15: 127:17 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/literal_trie.rs:127:9: 127:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:127:9: 127:13 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:127:9: 127:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/literal_trie.rs:129:22: 129:54 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:129:13: 129:19 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [nfa::thompson::literal_trie::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:129:13: 129:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:129:22: 129:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:129:33: 129:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::literal_trie::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:129:22: 129:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:129:34: 129:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:130:9: 145:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<usize, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:130:15: 130:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:130:9: 145:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [nfa::thompson::literal_trie::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:130:15: 130:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:130:9: 145:10 (#0),
                },
            ),
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:130:43: 130:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:130:9: 145:10 (#0),
                },
            ),
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:130:43: 130:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:130:9: 145:10 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2662 ~ regex_automata[00dd]::nfa::thompson::literal_trie::{impl#0}::get_or_add_state::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} nfa::thompson::literal_trie::Transition,)) -> u8, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:130:50: 130:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:131:13: 131:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:130:15: 130:61 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:131:13: 131:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:131:16: 131:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:131:25: 131:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:130:9: 145:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:131:32: 131:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:131:25: 131:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:131:25: 131:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:130:15: 130:61 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:132:13: 132:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:132:17: 132:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 136:20 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:134:21: 134:25 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:134:21: 134:25 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 136:20 (#4329),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 136:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::StateID, util::primitives::StateIDError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 134:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:134:41: 134:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::literal_trie::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:134:41: 134:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:2663 ~ regex_automata[00dd]::nfa::thompson::literal_trie::{impl#0}::get_or_add_state::{closure#1}),
            [
                i32,
                Binder { value: extern "RustCall" fn((util::primitives::StateIDError,)) -> nfa::thompson::error::BuildError, bound_vars: [] },
                (&'{erased} std::vec::Vec<nfa::thompson::literal_trie::State, std::alloc::Global>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:134:68: 136:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::literal_trie::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:134:68: 136:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:136:19: 136:20 (#4330),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _22,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 136:20 (#4329),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:136:19: 136:20 (#4330),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:136:19: 136:20 (#4330),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:136:19: 136:20 (#4330),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:136:19: 136:20 (#4330),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _22,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 136:20 (#4329),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 136:20 (#4329),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:134:28: 136:20 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:137:17: 137:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::literal_trie::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:137:17: 137:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:137:34: 137:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/literal_trie.rs:140:25: 140:67 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:140:21: 140:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:140:21: 140:22 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:140:25: 140:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:140:25: 140:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:140:36: 140:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::literal_trie::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:140:25: 140:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:140:37: 140:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:140:66: 140:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:140:25: 140:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/literal_trie.rs:141:25: 141:50 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:141:21: 141:22 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::thompson::literal_trie::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:141:21: 141:22 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:141:38: 141:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:141:44: 141:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:142:17: 142:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::literal_trie::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:142:17: 142:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:142:28: 142:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::literal_trie::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:142:17: 142:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:142:29: 142:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:142:54: 142:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::literal_trie::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:142:57: 142:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:143:20: 143:24 (#0),
            scope: scope[0],
        },
    },
]