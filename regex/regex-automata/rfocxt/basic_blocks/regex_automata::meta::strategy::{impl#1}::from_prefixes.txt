[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:228:20: 228:33 (#0),
                    scope: scope[0],
                },
                kind: _5 = meta::regex::RegexInfo::config(move _6) -> [return: bb1, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &(*_5),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:228:20: 228:50 (#0),
                    scope: scope[0],
                },
                kind: _3 = meta::regex::Config::get_match_kind(move _4) -> [return: bb2, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:232:13: 232:32 (#0),
                    scope: scope[1],
                },
                kind: _8 = regex_syntax::hir::literal::Seq::is_exact(move _9) -> [return: bb3, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:232:13: 232:32 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _8) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = const (),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:241:12: 241:30 (#0),
                    scope: scope[1],
                },
                kind: _13 = meta::regex::RegexInfo::pattern_len(move _14) -> [return: bb6, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::None,
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            _12 = Ne(move _13, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:241:12: 241:35 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::None,
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _11 = const (),
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:248:12: 248:24 (#0),
                    scope: scope[1],
                },
                kind: _20 = meta::regex::RegexInfo::props(move _21) -> [return: bb9, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_22),
            _22 = const 0_usize,
            _23 = Len((*_20)),
            _24 = Lt(_22, _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:248:12: 248:27 (#0),
                    scope: scope[1],
                },
                kind: assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> [success: bb10, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = &(*_20)[_22],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:248:12: 248:51 (#0),
                    scope: scope[1],
                },
                kind: _18 = regex_syntax::hir::Properties::explicit_captures_len(move _19) -> [return: bb11, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            _17 = Ne(move _18, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:248:12: 248:56 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _17) -> [0: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_18),
            _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::None,
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_18),
            _16 = const (),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:258:13: 258:25 (#0),
                    scope: scope[1],
                },
                kind: _30 = meta::regex::RegexInfo::props(move _31) -> [return: bb14, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageLive(_32),
            _32 = const 0_usize,
            _33 = Len((*_30)),
            _34 = Lt(_32, _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:258:13: 258:28 (#0),
                    scope: scope[1],
                },
                kind: assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> [success: bb15, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = &(*_30)[_32],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:258:13: 258:39 (#0),
                    scope: scope[1],
                },
                kind: _28 = regex_syntax::hir::Properties::look_set(move _29) -> [return: bb16, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:258:13: 258:50 (#0),
                    scope: scope[1],
                },
                kind: _27 = regex_syntax::hir::LookSet::is_empty(move _28) -> [return: bb17, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:258:13: 258:50 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _27) -> [0: bb19, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_32),
            StorageDead(_30),
            _26 = const (),
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &_3,
            StorageLive(_39),
            StorageLive(_40),
            _40 = util::search::MatchKind::LeftmostFirst,
            _39 = &_40,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:264:12: 264:44 (#0),
                    scope: scope[1],
                },
                kind: _37 = <util::search::MatchKind as core::cmp::PartialEq>::ne(move _38, move _39) -> [return: bb20, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_32),
            StorageDead(_30),
            _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::None,
            StorageDead(_27),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:264:12: 264:44 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _37) -> [0: bb22, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::None,
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            _36 = const (),
            StorageDead(_37),
            StorageDead(_36),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:279:24: 279:43 (#0),
                    scope: scope[1],
                },
                kind: _43 = regex_syntax::hir::literal::Seq::literals(move _44) -> [return: bb23, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:279:24: 279:52 (#0),
                    scope: scope[1],
                },
                kind: _42 = core::option::Option::<&[regex_syntax::hir::literal::Literal]>::unwrap(move _43) -> [return: bb24, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            FakeRead(ForLet(None), _42),
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            _47 = _3,
            StorageLive(_48),
            _48 = &(*_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:286:28: 286:66 (#0),
                    scope: scope[2],
                },
                kind: _46 = util::prefilter::Choice::new::<regex_syntax::hir::literal::Literal>(move _47, move _48) -> [return: bb25, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_47),
            PlaceMention(_46),
            _49 = discriminant(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:286:22: 286:66 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _49) -> [0: bb28, 1: bb27, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:286:28: 286:66 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:287:13: 287:25 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb29, imaginary: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:294:10: 294:11 (#0),
                    scope: scope[2],
                },
                kind: drop(_46) -> [return: bb63, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            _50 = move ((_46 as Some).0: util::prefilter::Choice),
            _45 = move _50,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:287:34: 287:35 (#0),
                    scope: scope[2],
                },
                kind: drop(_50) -> [return: bb30, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            FakeRead(ForLet(None), _45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:294:10: 294:11 (#0),
                    scope: scope[2],
                },
                kind: drop(_46) -> [return: bb31, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageLive(_52),
            StorageLive(_53),
            PlaceMention(_45),
            _54 = discriminant(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:295:40: 295:52 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _54) -> [0: bb33, 1: bb34, 2: bb35, 3: bb36, 4: bb37, 5: bb38, 6: bb39, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:295:46: 295:52 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:296:13: 296:43 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb40, imaginary: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:297:13: 297:44 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb43, imaginary: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:298:13: 298:44 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb45, imaginary: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:299:13: 299:43 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb47, imaginary: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:300:13: 300:42 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb50, imaginary: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:301:13: 301:44 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb53, imaginary: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_68),
            _68 = move ((_45 as AhoCorasick).0: util::prefilter::aho_corasick::AhoCorasick),
            StorageLive(_69),
            _69 = move _68,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:302:52: 302:65 (#0),
                    scope: scope[12],
                },
                kind: _53 = meta::strategy::Pre::<util::prefilter::aho_corasick::AhoCorasick>::new(move _69) -> [return: bb55, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            _55 = move ((_45 as Memchr).0: util::prefilter::memchr::Memchr),
            StorageLive(_56),
            StorageLive(_57),
            _57 = move _55,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:296:47: 296:60 (#0),
                    scope: scope[6],
                },
                kind: _56 = meta::strategy::Pre::<util::prefilter::memchr::Memchr>::new(move _57) -> [return: bb41, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _53 = move _56 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:296:59: 296:60 (#0),
                    scope: scope[6],
                },
                kind: drop(_56) -> [return: bb42, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_56),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:296:59: 296:60 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_58),
            _58 = move ((_45 as Memchr2).0: util::prefilter::memchr::Memchr2),
            StorageLive(_59),
            _59 = move _58,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:297:48: 297:61 (#0),
                    scope: scope[7],
                },
                kind: _53 = meta::strategy::Pre::<util::prefilter::memchr::Memchr2>::new(move _59) -> [return: bb44, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:297:60: 297:61 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_60),
            _60 = move ((_45 as Memchr3).0: util::prefilter::memchr::Memchr3),
            StorageLive(_61),
            _61 = move _60,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:298:48: 298:61 (#0),
                    scope: scope[8],
                },
                kind: _53 = meta::strategy::Pre::<util::prefilter::memchr::Memchr3>::new(move _61) -> [return: bb46, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:298:60: 298:61 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_62),
            _62 = move ((_45 as Memmem).0: util::prefilter::memmem::Memmem),
            StorageLive(_63),
            _63 = move _62,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:299:47: 299:60 (#0),
                    scope: scope[9],
                },
                kind: _53 = meta::strategy::Pre::<util::prefilter::memmem::Memmem>::new(move _63) -> [return: bb48, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:299:59: 299:60 (#0),
                    scope: scope[3],
                },
                kind: drop(_62) -> [return: bb49, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:299:59: 299:60 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_64),
            _64 = move ((_45 as Teddy).0: util::prefilter::teddy::Teddy),
            StorageLive(_65),
            _65 = move _64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:300:46: 300:59 (#0),
                    scope: scope[10],
                },
                kind: _53 = meta::strategy::Pre::<util::prefilter::teddy::Teddy>::new(move _65) -> [return: bb51, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:300:58: 300:59 (#0),
                    scope: scope[3],
                },
                kind: drop(_64) -> [return: bb52, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:300:58: 300:59 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            _66 = move ((_45 as ByteSet).0: util::prefilter::byteset::ByteSet),
            StorageLive(_67),
            _67 = move _66,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:301:48: 301:61 (#0),
                    scope: scope[11],
                },
                kind: _53 = meta::strategy::Pre::<util::prefilter::byteset::ByteSet>::new(move _67) -> [return: bb54, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:301:60: 301:61 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:302:64: 302:65 (#0),
                    scope: scope[3],
                },
                kind: drop(_68) -> [return: bb56, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:302:64: 302:65 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _52 = move _53 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:303:9: 303:10 (#0),
                    scope: scope[3],
                },
                kind: drop(_53) -> [return: bb58, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            FakeRead(ForLet(None), _52),
            AscribeUserType(_52, o, UserTypeProjection { base: UserType(9), projs: [] }),
            StorageLive(_70),
            StorageLive(_71),
            _71 = move _52,
            _70 = move _71 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:304:18: 304:19 (#0),
                    scope: scope[5],
                },
                kind: drop(_71) -> [return: bb59, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::Some(move _70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:304:19: 304:20 (#0),
                    scope: scope[5],
                },
                kind: drop(_70) -> [return: bb60, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:305:5: 305:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_52) -> [return: bb61, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:305:5: 305:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_45) -> [return: bb62, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_42),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:305:6: 305:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:305:6: 305:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:305:6: 305:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:304:19: 304:20 (#0),
                    scope: scope[5],
                },
                kind: drop(_70) -> [return: bb67, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:305:5: 305:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_52) -> [return: bb74, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:302:64: 302:65 (#0),
                    scope: scope[12],
                },
                kind: drop(_69) -> [return: bb69, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:302:64: 302:65 (#0),
                    scope: scope[3],
                },
                kind: drop(_68) -> [return: bb74, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:300:58: 300:59 (#0),
                    scope: scope[10],
                },
                kind: drop(_65) -> [return: bb71, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:300:58: 300:59 (#0),
                    scope: scope[3],
                },
                kind: drop(_64) -> [return: bb74, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:299:59: 299:60 (#0),
                    scope: scope[9],
                },
                kind: drop(_63) -> [return: bb73, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:299:59: 299:60 (#0),
                    scope: scope[3],
                },
                kind: drop(_62) -> [return: bb74, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:305:5: 305:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_45) -> [return: bb76, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:294:10: 294:11 (#0),
                    scope: scope[2],
                },
                kind: drop(_46) -> [return: bb76, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:224:5: 305:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:227:10: 227:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:225:15: 225:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:225:9: 225:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:225:9: 225:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:225:9: 225:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:226:19: 226:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:226:9: 226:17 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:226:9: 226:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} regex_syntax::hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:226:9: 226:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:228:20: 228:50 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:228:13: 228:17 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:228:13: 228:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:228:20: 228:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:228:20: 228:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:228:20: 228:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:232:9: 234:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:232:13: 232:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_syntax::hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:232:13: 232:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:232:33: 234:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:241:9: 243:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:241:12: 241:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:241:12: 241:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:241:12: 241:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:241:36: 243:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:248:9: 250:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:248:12: 248:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:248:12: 248:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_syntax::hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:248:12: 248:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [regex_syntax::hir::Properties],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:248:12: 248:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:248:12: 248:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:248:25: 248:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:248:12: 248:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:248:12: 248:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:248:57: 250:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:258:9: 260:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:258:13: 258:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_syntax::hir::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:258:13: 258:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_syntax::hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:258:13: 258:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [regex_syntax::hir::Properties],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:258:13: 258:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:258:13: 258:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:258:26: 258:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:258:13: 258:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:258:13: 258:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:258:51: 260:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:264:9: 266:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:264:12: 264:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:264:12: 264:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:264:20: 264:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:264:20: 264:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:264:45: 266:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:279:24: 279:52 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:279:13: 279:21 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [regex_syntax::hir::literal::Literal],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:279:13: 279:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [regex_syntax::hir::literal::Literal]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:279:24: 279:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_syntax::hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:279:24: 279:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:286:22: 294:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:286:13: 286:19 (#0),
                    },
                ),
            ),
        ),
        ty: util::prefilter::Choice,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:286:13: 286:19 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::prefilter::Choice>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:286:28: 286:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:286:51: 286:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [regex_syntax::hir::literal::Literal],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:286:57: 286:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:287:13: 287:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-automata/src/meta/strategy.rs:286:28: 286:66 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:287:13: 287:25 (#0),
                    },
                ),
            ),
        ),
        ty: util::prefilter::Choice,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:287:18: 287:24 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:288:21: 293:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:295:40: 303:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:295:13: 295:18 (#0),
                    },
                ),
            ),
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(1),
                            projs: [],
                        },
                        regex-automata/src/meta/strategy.rs:295:20: 295:37 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:295:13: 295:18 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:295:40: 303:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:296:13: 296:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _45,
                                ),
                                regex-automata/src/meta/strategy.rs:295:46: 295:52 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:296:13: 296:43 (#0),
                    },
                ),
            ),
        ),
        ty: util::prefilter::memchr::Memchr,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:296:39: 296:42 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:296:47: 296:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::prefilter::memchr::Memchr,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:296:56: 296:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _45,
                                ),
                                regex-automata/src/meta/strategy.rs:295:46: 295:52 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:297:13: 297:44 (#0),
                    },
                ),
            ),
        ),
        ty: util::prefilter::memchr::Memchr2,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:297:40: 297:43 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::prefilter::memchr::Memchr2,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:297:57: 297:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _45,
                                ),
                                regex-automata/src/meta/strategy.rs:295:46: 295:52 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:298:13: 298:44 (#0),
                    },
                ),
            ),
        ),
        ty: util::prefilter::memchr::Memchr3,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:298:40: 298:43 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::prefilter::memchr::Memchr3,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:298:57: 298:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _45,
                                ),
                                regex-automata/src/meta/strategy.rs:295:46: 295:52 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:299:13: 299:43 (#0),
                    },
                ),
            ),
        ),
        ty: util::prefilter::memmem::Memmem,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:299:39: 299:42 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::prefilter::memmem::Memmem,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:299:56: 299:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _45,
                                ),
                                regex-automata/src/meta/strategy.rs:295:46: 295:52 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:300:13: 300:42 (#0),
                    },
                ),
            ),
        ),
        ty: util::prefilter::teddy::Teddy,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:300:38: 300:41 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::prefilter::teddy::Teddy,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:300:55: 300:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _45,
                                ),
                                regex-automata/src/meta/strategy.rs:295:46: 295:52 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:301:13: 301:44 (#0),
                    },
                ),
            ),
        ),
        ty: util::prefilter::byteset::ByteSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:301:40: 301:43 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::prefilter::byteset::ByteSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:301:57: 301:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _45,
                                ),
                                regex-automata/src/meta/strategy.rs:295:46: 295:52 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:302:13: 302:48 (#0),
                    },
                ),
            ),
        ),
        ty: util::prefilter::aho_corasick::AhoCorasick,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:302:44: 302:47 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::prefilter::aho_corasick::AhoCorasick,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:302:61: 302:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:304:14: 304:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:304:9: 304:20 (#0),
                },
            ),
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:304:14: 304:19 (#0),
            scope: scope[0],
        },
    },
]