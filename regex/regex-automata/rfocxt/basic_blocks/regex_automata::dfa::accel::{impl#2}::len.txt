[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: A),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:282:25: 282:45 (#0),
                    scope: scope[0],
                },
                kind: _4 = <A as core::convert::AsRef<[u32]>>::as_ref(move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = const 0_usize,
            _7 = Len((*_4)),
            _8 = Lt(_6, _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:282:25: 282:48 (#0),
                    scope: scope[0],
                },
                kind: assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> [success: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = (*_4)[_6],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:282:9: 282:49 (#0),
                    scope: scope[0],
                },
                kind: _2 = <usize as core::convert::TryFrom<u32>>::try_from(move _3) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:282:9: 282:58 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<usize, core::num::TryFromIntError>::unwrap(move _2) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:283:6: 283:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:279:5: 283:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:279:26: 279:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} dfa::accel::Accels<A/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:279:16: 279:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:282:9: 282:58 (#0),
                },
            ),
        ),
        ty: core::result::Result<usize, core::num::TryFromIntError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:282:9: 282:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:282:9: 282:58 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:282:25: 282:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:282:9: 282:58 (#0),
                },
            ),
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:282:25: 282:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:282:9: 282:58 (#0),
                },
            ),
        ),
        ty: &'{erased} A/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:282:25: 282:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:282:9: 282:58 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:282:46: 282:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:282:25: 282:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:282:25: 282:48 (#0),
            scope: scope[0],
        },
    },
]