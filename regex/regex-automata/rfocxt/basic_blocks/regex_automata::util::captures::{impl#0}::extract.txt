[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:941:27: 941:38 (#0),
                    scope: scope[0],
                },
                kind: _4 = util::captures::Captures::iter(move _5) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:941:27: 941:48 (#0),
                    scope: scope[0],
                },
                kind: _3 = <util::captures::CapturesPatternIter<'_> as core::iter::Iterator>::flatten(move _4) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_2),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:942:37: 942:51 (#0),
                    scope: scope[1],
                },
                kind: _10 = <core::iter::Flatten<util::captures::CapturesPatternIter<'_>> as core::iter::Iterator>::next(move _11) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = const "a match",
            _12 = &(*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:942:37: 942:69 (#0),
                    scope: scope[1],
                },
                kind: _9 = core::option::Option::<util::search::Span>::expect(move _10, move _12) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:942:36: 942:70 (#0),
                    scope: scope[1],
                },
                kind: _7 = <str as core::ops::Index<util::search::Span>>::index(move _8, move _9) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            _6 = &(*_7),
            FakeRead(ForLet(None), _6),
            StorageDead(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = [const 0_i32; N],
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut _3,
            StorageLive(_18),
            _18 = &(*_2),
            _16 = {closure@regex-automata/src/util/captures.rs:943:40: 943:43} { matched: move _17, haystack: move _18 },
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:943:29: 946:11 (#0),
                    scope: scope[2],
                },
                kind: _14 = core::array::<impl [i32; N]>::map::<{closure@regex-automata/src/util/captures.rs:943:40: 943:43}, &str>(move _15, move _16) -> [return: bb6, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            FakeRead(ForLet(None), _14),
            StorageLive(_19),
            _19 = &(*_6),
            StorageLive(_20),
            _20 = _14,
            _0 = (move _19, move _20),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_14),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:948:6: 948:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:937:5: 948:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} str, [&'{erased} str; N/#0]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:940:10: 940:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:938:9: 938:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/captures.rs:939:19: 939:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:939:9: 939:17 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:939:9: 939:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:939:9: 939:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:941:27: 941:48 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:941:13: 941:24 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Flatten<util::captures::CapturesPatternIter<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:941:13: 941:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::captures::CapturesPatternIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:941:27: 941:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:941:27: 941:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:942:27: 942:70 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:942:13: 942:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:942:13: 942:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:942:36: 942:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:942:28: 942:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::search::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:942:37: 942:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::search::Span>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:942:37: 942:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Flatten<util::captures::CapturesPatternIter<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:942:37: 942:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:942:59: 942:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:942:59: 942:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:943:29: 946:11 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:943:13: 943:26 (#0),
                    },
                ),
            ),
        ),
        ty: [&'{erased} str; N/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:943:13: 943:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [i32; N/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:943:29: 943:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:3174 ~ regex_automata[00dd]::util::captures::{impl#0}::extract::{closure#0}),
            [
                N/#0,
                i16,
                Binder { value: extern "RustCall" fn((i32,)) -> &'{erased} str, bound_vars: [] },
                (&'{erased} mut core::iter::Flatten<util::captures::CapturesPatternIter<'{erased}>>, &'{erased} str),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:943:40: 946:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Flatten<util::captures::CapturesPatternIter<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:943:40: 946:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:943:40: 946:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:947:9: 947:37 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:947:10: 947:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:947:9: 947:37 (#0),
                },
            ),
        ),
        ty: [&'{erased} str; N/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:947:23: 947:36 (#0),
            scope: scope[0],
        },
    },
]