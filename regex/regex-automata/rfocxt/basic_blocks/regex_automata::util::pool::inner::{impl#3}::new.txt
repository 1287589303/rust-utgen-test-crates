[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:496:30: 496:65 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::vec::Vec::<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>>>::with_capacity(const util::pool::inner::MAX_POOL_STACKS) -> [return: bb1, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:497:25: 497:42 (#0),
                    scope: scope[1],
                },
                kind: _6 = std::vec::Vec::<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>>>::capacity(move _7) -> [return: bb2, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _5 = core::ops::Range::<usize> { start: const 0_usize, end: move _6 },
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:497:22: 497:42 (#4879),
                    scope: scope[1],
                },
                kind: _4 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _5) -> [return: bb3, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            StorageLive(_8),
            _8 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:497:13: 499:14 (#4878),
                    scope: scope[2],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:497:13: 499:14 (#4878),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb5, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _8,
            _12 = &mut (*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:497:22: 497:42 (#4879),
                    scope: scope[2],
                },
                kind: _11 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _12) -> [return: bb6, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _14 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:497:22: 497:42 (#4879),
                    scope: scope[2],
                },
                kind: switchInt(move _14) -> [0: bb8, 1: bb9, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:497:22: 497:42 (#4879),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:497:13: 499:14 (#4878),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut _2,
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#1713),
                    scope: scope[2],
                },
                kind: _20 = std::vec::Vec::<std::boxed::Box<T>>::new() -> [return: bb11, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = const {alloc48: &usize},
            _22 = (*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:500:25: 500:60 (#0),
                    scope: scope[1],
                },
                kind: _21 = core::sync::atomic::AtomicUsize::new(move _22) -> [return: bb15, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:498:39: 498:57 (#0),
                    scope: scope[2],
                },
                kind: _19 = std::sync::Mutex::<std::vec::Vec<std::boxed::Box<T>>>::new(move _20) -> [return: bb12, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            _18 = util::pool::inner::CacheLine::<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>>(move _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:498:57: 498:58 (#0),
                    scope: scope[2],
                },
                kind: drop(_19) -> [return: bb13, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:498:17: 498:59 (#0),
                    scope: scope[2],
                },
                kind: _16 = std::vec::Vec::<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>>>::push(move _17, move _18) -> [return: bb14, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            _10 = const (),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:497:13: 499:14 (#4878),
                    scope: scope[2],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            FakeRead(ForLet(None), _21),
            StorageDead(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = core::option::Option::<T>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:501:29: 501:50 (#0),
                    scope: scope[3],
                },
                kind: _24 = core::cell::UnsafeCell::<core::option::Option<T>>::new(move _25) -> [return: bb16, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            FakeRead(ForLet(None), _24),
            StorageLive(_26),
            _26 = move _1,
            StorageLive(_27),
            _27 = move _2,
            StorageLive(_28),
            _28 = move _21,
            StorageLive(_29),
            _29 = move _24,
            _0 = util::pool::inner::Pool::<T, F> { create: move _26, stacks: move _27, owner: move _28, owner_val: move _29 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:502:53: 502:54 (#0),
                    scope: scope[4],
                },
                kind: drop(_29) -> [return: bb17, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:502:53: 502:54 (#0),
                    scope: scope[4],
                },
                kind: drop(_27) -> [return: bb18, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:502:53: 502:54 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb19, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:503:9: 503:10 (#0),
                    scope: scope[3],
                },
                kind: drop(_24) -> [return: bb20, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:503:9: 503:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb21, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:503:9: 503:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb22, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:503:10: 503:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:502:53: 502:54 (#0),
                    scope: scope[4],
                },
                kind: drop(_27) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:502:53: 502:54 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:503:9: 503:10 (#0),
                    scope: scope[3],
                },
                kind: drop(_24) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:501:49: 501:50 (#0),
                    scope: scope[3],
                },
                kind: drop(_25) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:498:58: 498:59 (#0),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:498:56: 498:57 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:503:9: 503:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:503:9: 503:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:457:9: 503:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::pool::inner::Pool<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:457:41: 457:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/pool.rs:457:35: 457:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/pool.rs:457:27: 457:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:457:27: 457:33 (#0),
                    },
                ),
            ),
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:457:27: 457:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/pool.rs:496:30: 496:65 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:496:17: 496:27 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:496:17: 496:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:497:13: 499:14 (#4878),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:497:22: 497:42 (#4879),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:497:22: 497:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:497:25: 497:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:497:25: 497:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/util/pool.rs:497:22: 497:42 (#4879),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:497:22: 497:42 (#4879),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:497:22: 497:42 (#4879),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:457:9: 503:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:497:22: 497:42 (#4879),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:497:22: 497:42 (#4879),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:497:22: 497:42 (#4879),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:497:22: 497:42 (#4879),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:497:13: 499:14 (#4878),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:497:13: 499:14 (#4878),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:498:17: 498:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:498:17: 498:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:498:29: 498:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::sync::Mutex<std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:498:39: 498:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#1713),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/pool.rs:500:25: 500:60 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:500:17: 500:22 (#0),
                    },
                ),
            ),
        ),
        ty: core::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:500:17: 500:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:500:42: 500:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:3627 ~ regex_automata[00dd]::util::pool::inner::THREAD_ID_UNOWNED),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:500:42: 500:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/pool.rs:501:29: 501:50 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:501:17: 501:26 (#0),
                    },
                ),
            ),
        ),
        ty: core::cell::UnsafeCell<core::option::Option<T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:501:17: 501:26 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:501:45: 501:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:502:20: 502:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:502:28: 502:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:502:36: 502:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::cell::UnsafeCell<core::option::Option<T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:502:43: 502:52 (#0),
            scope: scope[0],
        },
    },
]