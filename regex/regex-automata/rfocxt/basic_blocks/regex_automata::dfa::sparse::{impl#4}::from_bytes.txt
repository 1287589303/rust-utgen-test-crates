[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:37: 990:69 (#0),
                    scope: scope[0],
                },
                kind: _6 = dfa::sparse::DFA::<&[u8]>::from_bytes_unchecked(move _7) -> [return: bb1, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#2766),
                    scope: scope[0],
                },
                kind: _5 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _6) -> [return: bb2, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            _8 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#2766),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#2766),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:69: 990:70 (#2767),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_5 as Continue).0: (dfa::sparse::DFA<&[u8]>, usize)),
            _4 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:69: 990:70 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb8, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_5 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_11),
            _11 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#2766),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _11) -> [return: bb7, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:72: 990:73 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb34, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_4),
            StorageLive(_2),
            _2 = move (_4.0: dfa::sparse::DFA<&[u8]>),
            StorageLive(_3),
            _3 = (_4.1: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:72: 990:73 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb9, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:72: 990:73 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb10, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(_2.0: dfa::sparse::Transitions<&[u8]>),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(_2.2: dfa::special::Special),
            _17 = &(*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:991:20: 991:49 (#0),
                    scope: scope[1],
                },
                kind: _15 = dfa::sparse::Transitions::<&[u8]>::validate(move _16, move _17) -> [return: bb11, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:991:20: 991:50 (#2768),
                    scope: scope[1],
                },
                kind: _14 = <core::result::Result<dfa::sparse::Seen, util::wire::DeserializeError> as core::ops::Try>::branch(move _15) -> [return: bb12, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _19 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:991:20: 991:50 (#2768),
                    scope: scope[1],
                },
                kind: switchInt(move _19) -> [0: bb15, 1: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:991:20: 991:50 (#2768),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:991:49: 991:50 (#2769),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            _23 = move ((_14 as Continue).0: dfa::sparse::Seen),
            _13 = move _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:991:49: 991:50 (#0),
                    scope: scope[1],
                },
                kind: drop(_23) -> [return: bb18, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = move ((_14 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_22),
            _22 = move _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:991:20: 991:50 (#2768),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _22) -> [return: bb17, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:991:50: 991:51 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb31, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            FakeRead(ForLet(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:991:50: 991:51 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb19, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_14),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(_2.1: dfa::sparse::StartTable<&[u8]>),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &(_2.2: dfa::special::Special),
            _28 = &(*_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &_13,
            _30 = &(*_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:992:9: 992:45 (#0),
                    scope: scope[6],
                },
                kind: _26 = dfa::sparse::StartTable::<&[u8]>::validate(move _27, move _28, move _30) -> [return: bb20, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:992:9: 992:46 (#2770),
                    scope: scope[6],
                },
                kind: _25 = <core::result::Result<(), util::wire::DeserializeError> as core::ops::Try>::branch(move _26) -> [return: bb21, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
            _32 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:992:9: 992:46 (#2770),
                    scope: scope[6],
                },
                kind: switchInt(move _32) -> [0: bb24, 1: bb23, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:992:9: 992:46 (#2770),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:992:45: 992:46 (#2771),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            _36 = ((_25 as Continue).0: ()),
            _24 = _36,
            StorageDead(_36),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_37),
            StorageLive(_38),
            _38 = move _2,
            StorageLive(_39),
            _39 = _3,
            _37 = (move _38, move _39),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:995:23: 995:24 (#0),
                    scope: scope[6],
                },
                kind: drop(_38) -> [return: bb27, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            _33 = move ((_25 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_35),
            _35 = move _33,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:992:9: 992:46 (#2770),
                    scope: scope[12],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _35) -> [return: bb26, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_33),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:996:5: 996:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb32, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            _0 = core::result::Result::<(dfa::sparse::DFA<&[u8]>, usize), util::wire::DeserializeError>::Ok(move _37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:995:24: 995:25 (#0),
                    scope: scope[6],
                },
                kind: drop(_37) -> [return: bb28, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:996:5: 996:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb29, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:996:5: 996:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb30, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:996:6: 996:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:996:5: 996:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb33, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:996:6: 996:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:995:24: 995:25 (#0),
                    scope: scope[6],
                },
                kind: drop(_37) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:996:5: 996:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:991:50: 991:51 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:991:49: 991:50 (#2768),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:72: 990:73 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:996:5: 996:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:72: 990:73 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:990:69: 990:70 (#2766),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:984:5: 996:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(dfa::sparse::DFA<&'{erased} [u8]>, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:986:10: 986:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/sparse.rs:985:16: 985:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:985:9: 985:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:985:9: 985:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:985:9: 985:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/dfa/sparse.rs:990:28: 990:72 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:990:13: 990:25 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::sparse::DFA<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:990:14: 990:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/dfa/sparse.rs:990:28: 990:72 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:990:13: 990:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:990:19: 990:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (dfa::sparse::DFA<&'{erased} [u8]>, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:990:28: 990:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, (dfa::sparse::DFA<&'{erased} [u8]>, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#2766),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#0),
                },
            ),
        ),
        ty: core::result::Result<(dfa::sparse::DFA<&'{erased} [u8]>, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:990:37: 990:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:990:63: 990:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:990:69: 990:70 (#2767),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#2766),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:990:69: 990:70 (#2767),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:990:69: 990:70 (#2767),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:990:69: 990:70 (#2767),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:990:69: 990:70 (#2767),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#2766),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#2766),
                    },
                ),
            ),
        ),
        ty: (dfa::sparse::DFA<&'{erased} [u8]>, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:990:37: 990:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:991:20: 991:50 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:991:13: 991:17 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::sparse::Seen,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:991:13: 991:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, dfa::sparse::Seen>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:991:20: 991:50 (#2768),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<dfa::sparse::Seen, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:991:20: 991:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::sparse::Transitions<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:991:20: 991:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:991:36: 991:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:991:36: 991:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:991:49: 991:50 (#2769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/dfa/sparse.rs:991:20: 991:50 (#2768),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:991:49: 991:50 (#2769),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:991:49: 991:50 (#2769),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:991:49: 991:50 (#2769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:991:49: 991:50 (#2769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/dfa/sparse.rs:991:20: 991:50 (#2768),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:991:20: 991:50 (#2768),
                    },
                ),
            ),
        ),
        ty: dfa::sparse::Seen,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:991:20: 991:50 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:9: 992:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:9: 992:46 (#2770),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:9: 992:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::sparse::StartTable<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:9: 992:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:25: 992:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:25: 992:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::sparse::Seen,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:39: 992:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::sparse::Seen,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:39: 992:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:45: 992:46 (#2771),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-automata/src/dfa/sparse.rs:992:9: 992:46 (#2770),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:992:45: 992:46 (#2771),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:45: 992:46 (#2771),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:45: 992:46 (#2771),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:45: 992:46 (#2771),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-automata/src/dfa/sparse.rs:992:9: 992:46 (#2770),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:992:9: 992:46 (#2770),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:992:9: 992:46 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (dfa::sparse::DFA<&'{erased} [u8]>, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:995:12: 995:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:995:9: 995:25 (#0),
                },
            ),
        ),
        ty: dfa::sparse::DFA<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:995:13: 995:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:995:9: 995:25 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:995:18: 995:23 (#0),
            scope: scope[0],
        },
    },
]