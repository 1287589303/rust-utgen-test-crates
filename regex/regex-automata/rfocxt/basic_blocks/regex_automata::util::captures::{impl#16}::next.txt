[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*((*_1).0: &util::captures::GroupInfo)).0: std::sync::Arc<util::captures::GroupInfoInner>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2528:12: 2528:43 (#0),
                    scope: scope[0],
                },
                kind: _5 = <std::sync::Arc<util::captures::GroupInfoInner> as core::ops::Deref>::deref(move _6) -> [return: bb1, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = &((*_5).2: std::vec::Vec<std::vec::Vec<core::option::Option<std::sync::Arc<str>>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2528:12: 2528:54 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::vec::Vec::<std::vec::Vec<core::option::Option<std::sync::Arc<str>>>>::is_empty(move _4) -> [return: bb2, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2528:12: 2528:54 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            _0 = core::option::Option::<(util::primitives::PatternID, usize, core::option::Option<&str>)>::None,
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_1).2: core::option::Option<util::primitives::PatternID>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2531:12: 2531:38 (#0),
                    scope: scope[0],
                },
                kind: _9 = core::option::Option::<util::primitives::PatternID>::is_none(move _10) -> [return: bb5, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2531:12: 2531:38 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb14, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut ((*_1).1: util::primitives::PatternIDIter),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2532:37: 2532:53 (#0),
                    scope: scope[0],
                },
                kind: _14 = <util::primitives::PatternIDIter as core::iter::Iterator>::next(move _15) -> [return: bb7, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2532:37: 2532:54 (#4735),
                    scope: scope[0],
                },
                kind: _13 = <core::option::Option<util::primitives::PatternID> as core::ops::Try>::branch(move _14) -> [return: bb8, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            _16 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2532:37: 2532:54 (#4735),
                    scope: scope[0],
                },
                kind: switchInt(move _16) -> [0: bb11, 1: bb10, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2532:37: 2532:54 (#4735),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2532:53: 2532:54 (#4736),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = ((_13 as Continue).0: util::primitives::PatternID),
            _12 = _20,
            StorageDead(_20),
            _11 = core::option::Option::<util::primitives::PatternID>::Some(move _12),
            StorageDead(_12),
            ((*_1).2: core::option::Option<util::primitives::PatternID>) = move _11,
            StorageDead(_11),
            StorageDead(_13),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2531:9: 2533:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = ((_13 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_19),
            _19 = _17,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2532:37: 2532:54 (#4735),
                    scope: scope[2],
                },
                kind: _0 = <core::option::Option<(util::primitives::PatternID, usize, core::option::Option<&str>)> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _19) -> [return: bb13, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_13),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2531:9: 2533:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_21),
            StorageLive(_22),
            _22 = ((*_1).2: core::option::Option<util::primitives::PatternID>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2534:19: 2534:44 (#0),
                    scope: scope[0],
                },
                kind: _21 = core::option::Option::<util::primitives::PatternID>::unwrap(move _22) -> [return: bb16, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            FakeRead(ForLet(None), _21),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &((*_1).3: core::option::Option<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'_>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2535:12: 2535:32 (#0),
                    scope: scope[5],
                },
                kind: _24 = core::option::Option::<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'_>>>::is_none(move _25) -> [return: bb17, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2535:12: 2535:32 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _24) -> [0: bb21, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &(*((*_1).0: &util::captures::GroupInfo)),
            StorageLive(_30),
            _30 = _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2536:31: 2536:65 (#0),
                    scope: scope[5],
                },
                kind: _28 = util::captures::GroupInfo::pattern_names(move _29, move _30) -> [return: bb19, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2536:31: 2536:77 (#0),
                    scope: scope[5],
                },
                kind: _27 = <util::captures::GroupInfoPatternNames<'_> as core::iter::Iterator>::enumerate(move _28) -> [return: bb20, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            _26 = core::option::Option::<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'_>>>::Some(move _27),
            StorageDead(_27),
            ((*_1).3: core::option::Option<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'_>>>) = move _26,
            StorageDead(_26),
            _23 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2535:9: 2537:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            _23 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2535:9: 2537:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &mut ((*_1).3: core::option::Option<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'_>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2538:41: 2538:60 (#0),
                    scope: scope[5],
                },
                kind: _37 = core::option::Option::<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'_>>>::as_mut(move _38) -> [return: bb23, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2538:41: 2538:69 (#0),
                    scope: scope[5],
                },
                kind: _36 = core::option::Option::<&mut core::iter::Enumerate<util::captures::GroupInfoPatternNames<'_>>>::unwrap(move _37) -> [return: bb24, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = &mut (*_36),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2538:41: 2538:76 (#0),
                    scope: scope[5],
                },
                kind: _34 = <core::iter::Enumerate<util::captures::GroupInfoPatternNames<'_>> as core::iter::Iterator>::next(move _35) -> [return: bb25, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            PlaceMention(_34),
            _39 = discriminant(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2538:35: 2538:76 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _39) -> [0: bb28, 1: bb27, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2538:41: 2538:76 (#0),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2539:13: 2539:38 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb29, imaginary: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_45),
            _45 = core::option::Option::<util::primitives::PatternID>::None,
            ((*_1).2: core::option::Option<util::primitives::PatternID>) = move _45,
            StorageDead(_45),
            StorageLive(_46),
            _46 = core::option::Option::<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'_>>>::None,
            ((*_1).3: core::option::Option<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'_>>>) = move _46,
            StorageDead(_46),
            StorageLive(_47),
            _47 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2543:24: 2543:35 (#0),
                    scope: scope[5],
                },
                kind: _0 = <util::captures::GroupInfoAllNames<'_> as core::iter::Iterator>::next(move _47) -> [return: bb30, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _40 = (((_34 as Some).0: (usize, core::option::Option<&str>)).0: usize),
            StorageLive(_41),
            _41 = (((_34 as Some).0: (usize, core::option::Option<&str>)).1: core::option::Option<&str>),
            StorageLive(_42),
            _42 = _40,
            StorageLive(_43),
            _43 = _41,
            _33 = (move _42, move _43),
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_40),
            PlaceMention(_33),
            StorageLive(_31),
            _31 = (_33.0: usize),
            StorageLive(_32),
            _32 = (_33.1: core::option::Option<&str>),
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_33),
            StorageLive(_48),
            StorageLive(_49),
            _49 = _21,
            StorageLive(_50),
            _50 = _31,
            StorageLive(_51),
            _51 = _32,
            _48 = (move _49, move _50, move _51),
            StorageDead(_51),
            StorageDead(_50),
            StorageDead(_49),
            _0 = core::option::Option::<(util::primitives::PatternID, usize, core::option::Option<&str>)>::Some(move _48),
            StorageDead(_48),
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2547:6: 2547:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2547:6: 2547:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2523:5: 2547:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(util::primitives::PatternID, usize, core::option::Option<&'{erased} str>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2523:27: 2523:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut util::captures::GroupInfoAllNames<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2523:13: 2523:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2528:9: 2530:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2528:12: 2528:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<std::vec::Vec<core::option::Option<std::sync::Arc<str, std::alloc::Global>>, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2528:12: 2528:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::GroupInfoInner,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2528:12: 2528:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::Arc<util::captures::GroupInfoInner, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2528:12: 2528:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2528:55: 2530:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2531:9: 2533:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2531:12: 2531:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2531:12: 2531:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2532:32: 2532:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2532:37: 2532:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2532:37: 2532:54 (#4735),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2532:37: 2532:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::primitives::PatternIDIter,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2532:37: 2532:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2532:53: 2532:54 (#4736),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                regex-automata/src/util/captures.rs:2532:37: 2532:54 (#4735),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2532:53: 2532:54 (#4736),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2532:53: 2532:54 (#4736),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2532:53: 2532:54 (#4736),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2532:53: 2532:54 (#4736),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                regex-automata/src/util/captures.rs:2532:37: 2532:54 (#4735),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2532:37: 2532:54 (#4735),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2532:37: 2532:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:2534:19: 2534:44 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2534:13: 2534:16 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2534:13: 2534:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2534:19: 2534:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2535:9: 2537:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2535:12: 2535:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2535:12: 2535:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2536:26: 2536:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::iter::Enumerate<util::captures::GroupInfoPatternNames<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2536:31: 2536:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::captures::GroupInfoPatternNames<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2536:31: 2536:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2536:31: 2536:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2536:61: 2536:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                regex-automata/src/util/captures.rs:2538:35: 2545:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2538:13: 2538:32 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2538:14: 2538:25 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                regex-automata/src/util/captures.rs:2538:35: 2545:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2538:13: 2538:32 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2538:27: 2538:31 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, core::option::Option<&'{erased} str>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2538:35: 2545:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, core::option::Option<&'{erased} str>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2538:41: 2538:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<util::captures::GroupInfoPatternNames<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2538:41: 2538:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<util::captures::GroupInfoPatternNames<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2538:41: 2538:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut core::iter::Enumerate<util::captures::GroupInfoPatternNames<'{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2538:41: 2538:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::option::Option<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2538:41: 2538:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2539:13: 2539:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _34,
                                ),
                                regex-automata/src/util/captures.rs:2538:41: 2538:76 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2539:13: 2539:38 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2539:19: 2539:30 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _34,
                                ),
                                regex-automata/src/util/captures.rs:2538:41: 2538:76 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2539:13: 2539:38 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2539:32: 2539:36 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2539:43: 2539:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2539:56: 2539:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2540:21: 2544:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2541:36: 2541:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2542:30: 2542:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::captures::GroupInfoAllNames<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2543:24: 2543:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (util::primitives::PatternID, usize, core::option::Option<&'{erased} str>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2546:14: 2546:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:2546:9: 2546:39 (#0),
                },
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2546:15: 2546:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:2546:9: 2546:39 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2546:20: 2546:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:2546:9: 2546:39 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2546:33: 2546:37 (#0),
            scope: scope[0],
        },
    },
]