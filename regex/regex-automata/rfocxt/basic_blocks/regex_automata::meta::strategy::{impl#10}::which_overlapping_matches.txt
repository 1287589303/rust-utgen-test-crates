[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &((*_1).0: meta::strategy::Core),
            StorageLive(_6),
            _6 = &mut (*_2),
            StorageLive(_7),
            _7 = &(*_3),
            StorageLive(_8),
            _8 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1890:9: 1890:66 (#0),
                    scope: scope[0],
                },
                kind: _0 = <meta::strategy::Core as meta::strategy::Strategy>::which_overlapping_matches(move _5, move _6, move _7, move _8) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1891:6: 1891:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1884:5: 1891:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1889:6: 1889:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} meta::strategy::ReverseInner,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1885:9: 1885:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:1886:16: 1886:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:1886:9: 1886:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:1886:9: 1886:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1886:9: 1886:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:1887:16: 1887:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:1887:9: 1887:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:1887:9: 1887:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1887:9: 1887:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:1888:17: 1888:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:1888:9: 1888:15 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:1888:9: 1888:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::search::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1888:9: 1888:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/strategy.rs:1890:9: 1890:66 (#0),
                },
            ),
        ),
        ty: &'{erased} meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1890:9: 1890:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/strategy.rs:1890:9: 1890:66 (#0),
                },
            ),
        ),
        ty: &'{erased} mut meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1890:45: 1890:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/strategy.rs:1890:9: 1890:66 (#0),
                },
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1890:52: 1890:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/strategy.rs:1890:9: 1890:66 (#0),
                },
            ),
        ),
        ty: &'{erased} mut util::search::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1890:59: 1890:65 (#0),
            scope: scope[0],
        },
    },
]