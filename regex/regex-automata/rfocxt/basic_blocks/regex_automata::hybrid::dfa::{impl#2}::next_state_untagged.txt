[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#518),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:1349:24: 1349:43 (#0),
                    scope: scope[0],
                },
                kind: _8 = hybrid::id::LazyStateID::is_tagged(move _9) -> [return: bb2, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:1349:24: 1349:43 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#519),
                    scope: scope[0],
                },
                kind: _10 = core::panicking::panic(const "assertion failed: !current.is_tagged()") -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = const (),
            StorageDead(_8),
            StorageDead(_7),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#517),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#517),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_1).4: util::alphabet::ByteClasses),
            StorageLive(_14),
            _14 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:1350:33: 1350:56 (#0),
                    scope: scope[0],
                },
                kind: _12 = util::alphabet::ByteClasses::get(move _13, move _14) -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:1350:21: 1350:57 (#0),
                    scope: scope[0],
                },
                kind: _11 = <usize as core::convert::From<u8>>::from(move _12) -> [return: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:1351:22: 1351:50 (#0),
                    scope: scope[1],
                },
                kind: _16 = hybrid::id::LazyStateID::as_usize_unchecked(move _17) -> [return: bb9, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageLive(_18),
            _18 = _11,
            _19 = AddWithOverflow(_16, _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:1351:22: 1351:58 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _16, move _18) -> [success: bb10, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = move (_19.0: usize),
            StorageDead(_18),
            StorageDead(_16),
            FakeRead(ForLet(None), _15),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &((*_2).0: std::vec::Vec<hybrid::id::LazyStateID>),
            StorageLive(_22),
            _22 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:1352:20: 1352:28 (#0),
                    scope: scope[2],
                },
                kind: _20 = <std::vec::Vec<hybrid::id::LazyStateID> as core::ops::Index<usize>>::index(move _21, move _22) -> [return: bb11, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (*_20),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_15),
            StorageDead(_11),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:1353:6: 1353:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:1343:5: 1353:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1348:10: 1348:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1344:9: 1344:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/dfa.rs:1345:16: 1345:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/dfa.rs:1345:9: 1345:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:1345:9: 1345:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1345:9: 1345:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/dfa.rs:1346:18: 1346:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/dfa.rs:1346:9: 1346:16 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:1346:9: 1346:16 (#0),
                    },
                ),
            ),
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1346:9: 1346:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/dfa.rs:1347:16: 1347:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/dfa.rs:1347:9: 1347:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:1347:9: 1347:14 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1347:9: 1347:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#517),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#518),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#519),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1349:24: 1349:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1349:24: 1349:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#519),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#519),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/dfa.rs:1350:21: 1350:57 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:1350:13: 1350:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1350:13: 1350:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1350:33: 1350:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::alphabet::ByteClasses,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1350:33: 1350:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1350:50: 1350:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/dfa.rs:1351:22: 1351:58 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:1351:13: 1351:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1351:13: 1351:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1351:22: 1351:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1351:22: 1351:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1351:53: 1351:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1351:22: 1351:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:1352:9: 1352:28 (#0),
                },
            ),
        ),
        ty: &'{erased} hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1352:20: 1352:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:1352:9: 1352:28 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<hybrid::id::LazyStateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1352:9: 1352:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:1352:9: 1352:28 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:1352:21: 1352:27 (#0),
            scope: scope[0],
        },
    },
]