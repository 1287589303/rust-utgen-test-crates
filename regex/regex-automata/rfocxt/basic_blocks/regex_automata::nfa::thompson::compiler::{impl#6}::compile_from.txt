[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = ((*_1).2: util::primitives::StateID),
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#0),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb2, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _2,
            _9 = AddWithOverflow(_8, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1798:15: 1798:23 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const 1_usize) -> [success: bb3, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = move (_9.0: usize),
            StorageDead(_8),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &((*((*_1).1: &mut nfa::thompson::compiler::Utf8State)).1: std::vec::Vec<nfa::thompson::compiler::Utf8Node>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1798:26: 1798:53 (#0),
                    scope: scope[1],
                },
                kind: _10 = std::vec::Vec::<nfa::thompson::compiler::Utf8Node>::len(move _11) -> [return: bb4, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            _6 = Lt(move _7, move _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1798:15: 1798:53 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [0: bb16, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_7),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut (*_1),
            StorageLive(_14),
            _14 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1799:24: 1799:45 (#0),
                    scope: scope[1],
                },
                kind: _12 = nfa::thompson::compiler::Utf8Compiler::<'_>::pop_freeze(move _13, move _14) -> [return: bb6, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            FakeRead(ForLet(None), _12),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut (*_1),
            StorageLive(_19),
            _19 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:38 (#0),
                    scope: scope[2],
                },
                kind: _17 = nfa::thompson::compiler::Utf8Compiler::<'_>::compile(move _18, move _19) -> [return: bb7, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:39 (#4313),
                    scope: scope[2],
                },
                kind: _16 = <core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError> as core::ops::Try>::branch(move _17) -> [return: bb8, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            PlaceMention(_16),
            _20 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:39 (#4313),
                    scope: scope[2],
                },
                kind: switchInt(move _20) -> [0: bb11, 1: bb10, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:39 (#4313),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:38: 1800:39 (#4314),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = ((_16 as Continue).0: util::primitives::StateID),
            _15 = _24,
            StorageDead(_24),
            _3 = move _15,
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:39: 1800:40 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb14, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = move ((_16 as Break).0: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>),
            StorageLive(_23),
            _23 = move _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:39 (#4313),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<(), nfa::thompson::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>>>::from_residual(move _23) -> [return: bb13, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:38: 1800:39 (#4314),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb18, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1801:9: 1801:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb15, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_7),
            StorageLive(_26),
            _4 = const (),
            StorageDead(_26),
            StorageDead(_6),
            StorageDead(_4),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut (*_1),
            StorageLive(_30),
            _30 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1802:9: 1802:35 (#0),
                    scope: scope[1],
                },
                kind: _28 = nfa::thompson::compiler::Utf8Compiler::<'_>::top_last_freeze(move _29, move _30) -> [return: bb17, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_31),
            _31 = (),
            _0 = core::result::Result::<(), nfa::thompson::error::BuildError>::Ok(move _31),
            StorageDead(_31),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1804:6: 1804:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:39: 1800:40 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb19, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1801:9: 1801:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb20, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1804:6: 1804:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1804:6: 1804:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:38: 1800:39 (#4313),
                    scope: scope[4],
                },
                kind: drop(_23) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:38: 1800:39 (#4314),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:39: 1800:40 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:38: 1800:39 (#4313),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1800:37: 1800:38 (#0),
                    scope: scope[2],
                },
                kind: drop(_19) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1801:9: 1801:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/compiler.rs:1796:5: 1804:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1796:48: 1796:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::compiler::Utf8Compiler<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1796:21: 1796:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/compiler.rs:1796:38: 1796:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/compiler.rs:1796:32: 1796:36 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/compiler.rs:1796:32: 1796:36 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1796:32: 1796:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/compiler.rs:1797:24: 1797:35 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/compiler.rs:1797:13: 1797:21 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1797:13: 1797:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1796:5: 1804:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#4311),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1798:15: 1798:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#4311),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1798:15: 1798:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#4311),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1798:15: 1798:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1798:15: 1798:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#4311),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1798:26: 1798:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#4311),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::compiler::Utf8Node, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1798:26: 1798:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/compiler.rs:1799:24: 1799:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/compiler.rs:1799:17: 1799:21 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1799:17: 1799:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::compiler::Utf8Compiler<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1799:24: 1799:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1799:40: 1799:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:39 (#4313),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::compiler::Utf8Compiler<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1800:33: 1800:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1800:38: 1800:39 (#4314),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:39 (#4313),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/compiler.rs:1800:38: 1800:39 (#4314),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1800:38: 1800:39 (#4314),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1800:38: 1800:39 (#4314),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1800:38: 1800:39 (#4314),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:39 (#4313),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:39 (#4313),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1800:20: 1800:39 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#4311),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#4311),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#4311),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1798:9: 1801:10 (#4311),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1802:9: 1802:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::compiler::Utf8Compiler<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1802:9: 1802:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1802:30: 1802:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/compiler.rs:1803:12: 1803:14 (#0),
            scope: scope[0],
        },
    },
]