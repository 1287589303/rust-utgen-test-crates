[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = const 0_usize,
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).1: meta::wrappers::PikeVMCache),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2394:18: 2394:44 (#0),
                    scope: scope[1],
                },
                kind: _3 = meta::wrappers::PikeVMCache::memory_usage(move _4) -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _5 = AddWithOverflow(_2, _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2394:9: 2394:44 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _3) -> [success: bb2, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move (_5.0: usize),
            StorageDead(_3),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).2: meta::wrappers::BoundedBacktrackerCache),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2395:18: 2395:47 (#0),
                    scope: scope[1],
                },
                kind: _6 = meta::wrappers::BoundedBacktrackerCache::memory_usage(move _7) -> [return: bb3, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _8 = AddWithOverflow(_2, _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2395:9: 2395:47 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _6) -> [success: bb4, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move (_8.0: usize),
            StorageDead(_6),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_1).3: meta::wrappers::OnePassCache),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2396:18: 2396:45 (#0),
                    scope: scope[1],
                },
                kind: _9 = meta::wrappers::OnePassCache::memory_usage(move _10) -> [return: bb5, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _11 = AddWithOverflow(_2, _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2396:9: 2396:45 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _9) -> [success: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move (_11.0: usize),
            StorageDead(_9),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_1).4: meta::wrappers::HybridCache),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2397:18: 2397:44 (#0),
                    scope: scope[1],
                },
                kind: _12 = meta::wrappers::HybridCache::memory_usage(move _13) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _14 = AddWithOverflow(_2, _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2397:9: 2397:44 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _12) -> [success: bb8, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move (_14.0: usize),
            StorageDead(_12),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &((*_1).5: meta::wrappers::ReverseHybridCache),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2398:18: 2398:47 (#0),
                    scope: scope[1],
                },
                kind: _15 = meta::wrappers::ReverseHybridCache::memory_usage(move _16) -> [return: bb9, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            _17 = AddWithOverflow(_2, _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2398:9: 2398:47 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _15) -> [success: bb10, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move (_17.0: usize),
            StorageDead(_15),
            _0 = _2,
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2400:6: 2400:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2392:5: 2400:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2392:35: 2392:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2392:25: 2392:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:2393:25: 2393:26 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:2393:13: 2393:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2393:13: 2393:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2394:18: 2394:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::wrappers::PikeVMCache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2394:18: 2394:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2394:9: 2394:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2395:18: 2395:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::wrappers::BoundedBacktrackerCache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2395:18: 2395:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2395:9: 2395:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2396:18: 2396:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::wrappers::OnePassCache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2396:18: 2396:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2396:9: 2396:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2397:18: 2397:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::wrappers::HybridCache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2397:18: 2397:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2397:9: 2397:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2398:18: 2398:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::wrappers::ReverseHybridCache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2398:18: 2398:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2398:9: 2398:47 (#0),
            scope: scope[0],
        },
    },
]