[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1500:26: 1500:39 (#0),
                    scope: scope[0],
                },
                kind: _6 = dfa::sparse::Transitions::<T>::sparse(move _7) -> [return: bb1, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1500:40: 1500:53 (#0),
                    scope: scope[0],
                },
                kind: _9 = util::primitives::StateID::as_usize(move _10) -> [return: bb2, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = core::ops::RangeFrom::<usize> { start: move _9 },
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1500:39: 1500:56 (#0),
                    scope: scope[0],
                },
                kind: _4 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _5, move _8) -> [return: bb3, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_5),
            _3 = &(*_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &_3,
            _13 = &(*(*_14)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1501:26: 1501:48 (#0),
                    scope: scope[1],
                },
                kind: _12 = util::wire::read_u16(move _13) -> [return: bb4, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1501:26: 1501:59 (#0),
                    scope: scope[1],
                },
                kind: _11 = <u16 as util::int::U16>::as_usize(move _12) -> [return: bb5, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageDead(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _18 = const 15_i32 as u32 (IntToInt),
            _19 = Lt(move _18, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1502:24: 1502:33 (#0),
                    scope: scope[2],
                },
                kind: assert(move _19, "attempt to shift left by `{}`, which would overflow", const 15_i32) -> [success: bb6, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = Shl(const 1_usize, const 15_i32),
            StorageLive(_20),
            _20 = _11,
            _16 = BitAnd(move _17, move _20),
            StorageDead(_20),
            StorageDead(_17),
            _15 = Ne(move _16, const 0_usize),
            StorageDead(_16),
            FakeRead(ForLet(None), _15),
            StorageLive(_21),
            StorageLive(_22),
            _23 = const 15_i32 as u32 (IntToInt),
            _24 = Lt(move _23, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1503:20: 1503:29 (#0),
                    scope: scope[3],
                },
                kind: assert(move _24, "attempt to shift left by `{}`, which would overflow", const 15_i32) -> [success: bb7, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = Shl(const 1_usize, const 15_i32),
            _21 = Not(move _22),
            StorageDead(_22),
            _11 = BitAnd(_11, move _21),
            StorageDead(_21),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &(*_3),
            StorageLive(_29),
            _29 = core::ops::RangeFrom::<usize> { start: const 2_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1504:23: 1504:28 (#0),
                    scope: scope[3],
                },
                kind: _27 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _28, move _29) -> [return: bb8, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            _26 = &(*_27),
            _25 = &(*_26),
            _3 = move _25,
            StorageDead(_25),
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &(*_3),
            StorageLive(_34),
            StorageLive(_35),
            _35 = _11,
            _36 = MulWithOverflow(_35, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1506:52: 1506:62 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_36.1: bool), "attempt to compute `{} * {}`, which would overflow", move _35, const 2_usize) -> [success: bb9, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = move (_36.0: usize),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1506:37: 1506:63 (#0),
                    scope: scope[3],
                },
                kind: _32 = core::slice::<impl [u8]>::split_at(move _33, move _34) -> [return: bb10, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            PlaceMention(_32),
            StorageLive(_30),
            _30 = (_32.0: &[u8]),
            StorageLive(_31),
            _31 = (_32.1: &[u8]),
            StorageDead(_32),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &(*_31),
            StorageLive(_41),
            StorageLive(_42),
            _42 = _11,
            _43 = MulWithOverflow(_42, const util::primitives::StateID::SIZE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1507:44: 1507:66 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_43.1: bool), "attempt to compute `{} * {}`, which would overflow", move _42, const util::primitives::StateID::SIZE) -> [success: bb11, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = move (_43.0: usize),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1507:29: 1507:67 (#0),
                    scope: scope[4],
                },
                kind: _39 = core::slice::<impl [u8]>::split_at(move _40, move _41) -> [return: bb12, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_40),
            PlaceMention(_39),
            StorageLive(_37),
            _37 = (_39.0: &[u8]),
            StorageLive(_38),
            _38 = (_39.1: &[u8]),
            StorageDead(_39),
            StorageLive(_46),
            StorageLive(_47),
            _47 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1508:39: 1508:47 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _47) -> [0: bb19, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &_38,
            _50 = &(*(*_51)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1509:25: 1509:47 (#0),
                    scope: scope[5],
                },
                kind: _49 = util::wire::read_u32(move _50) -> [return: bb14, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1509:25: 1509:58 (#0),
                    scope: scope[5],
                },
                kind: _48 = <u32 as util::int::U32>::as_usize(move _49) -> [return: bb15, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            FakeRead(ForLet(None), _48),
            StorageDead(_51),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &(*_38),
            StorageLive(_55),
            _55 = core::ops::RangeFrom::<usize> { start: const 4_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1510:18: 1510:23 (#0),
                    scope: scope[7],
                },
                kind: _53 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _54, move _55) -> [return: bb16, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _52 = &(*_53),
            StorageDead(_55),
            StorageDead(_54),
            StorageLive(_56),
            StorageLive(_57),
            _57 = _48,
            _58 = MulWithOverflow(_57, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1510:33: 1510:42 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_58.1: bool), "attempt to compute `{} * {}`, which would overflow", move _57, const 4_usize) -> [success: bb17, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = move (_58.0: usize),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1510:13: 1510:43 (#0),
                    scope: scope[7],
                },
                kind: _46 = core::slice::<impl [u8]>::split_at(move _52, move _56) -> [return: bb18, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_52),
            StorageDead(_48),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1508:36: 1513:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = [],
            _61 = &_62,
            StorageLive(_63),
            _63 = core::ops::RangeFull,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1512:17: 1512:21 (#0),
                    scope: scope[5],
                },
                kind: _60 = <[u8; 0] as core::ops::Index<core::ops::RangeFull>>::index(move _61, move _63) -> [return: bb20, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_61),
            _59 = &(*_60),
            StorageLive(_64),
            _64 = _38,
            _46 = (move _59, move _64),
            StorageDead(_64),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1508:36: 1513:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            PlaceMention(_46),
            StorageLive(_44),
            _44 = (_46.0: &[u8]),
            StorageLive(_45),
            _45 = (_46.1: &[u8]),
            StorageDead(_46),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            _67 = const 0_usize,
            _68 = Len((*_45)),
            _69 = Lt(_67, _68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1515:37: 1515:45 (#0),
                    scope: scope[6],
                },
                kind: assert(move _69, "index out of bounds: the length is {} but the index is {}", move _68, _67) -> [success: bb22, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _66 = (*_45)[_67],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1515:25: 1515:46 (#0),
                    scope: scope[6],
                },
                kind: _65 = <usize as core::convert::From<u8>>::from(move _66) -> [return: bb23, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            FakeRead(ForLet(None), _65),
            StorageDead(_67),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            _72 = &(*_45),
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            _75 = _65,
            _76 = AddWithOverflow(_75, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1516:31: 1516:44 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_76.1: bool), "attempt to compute `{} + {}`, which would overflow", move _75, const 1_usize) -> [success: bb24, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _74 = move (_76.0: usize),
            StorageDead(_75),
            _73 = core::ops::Range::<usize> { start: const 1_usize, end: move _74 },
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1516:27: 1516:45 (#0),
                    scope: scope[8],
                },
                kind: _71 = <[u8] as core::ops::Index<core::ops::Range<usize>>>::index(move _72, move _73) -> [return: bb25, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageDead(_72),
            _70 = &(*_71),
            FakeRead(ForLet(None), _70),
            StorageLive(_77),
            _77 = _2,
            StorageLive(_78),
            _78 = _15,
            StorageLive(_79),
            _79 = _11,
            StorageLive(_80),
            _80 = &(*_30),
            StorageLive(_81),
            _81 = &(*_37),
            StorageLive(_82),
            _82 = &(*_44),
            StorageLive(_83),
            _83 = &(*_70),
            _0 = dfa::sparse::State::<'_> { id: move _77, is_match: move _78, ntrans: move _79, input_ranges: move _80, next: move _81, pattern_ids: move _82, accel: move _83 },
            StorageDead(_83),
            StorageDead(_82),
            StorageDead(_81),
            StorageDead(_80),
            StorageDead(_79),
            StorageDead(_78),
            StorageDead(_77),
            StorageDead(_71),
            StorageDead(_70),
            StorageDead(_65),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_62),
            StorageDead(_60),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_15),
            StorageDead(_11),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1518:6: 1518:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1499:5: 1518:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::sparse::State<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1499:37: 1499:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} dfa::sparse::Transitions<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1499:14: 1499:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/sparse.rs:1499:25: 1499:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1499:21: 1499:23 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1499:21: 1499:23 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1499:21: 1499:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1500:25: 1500:56 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1500:13: 1500:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1500:13: 1500:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1500:39: 1500:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1500:26: 1500:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1500:26: 1500:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::sparse::Transitions<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1500:26: 1500:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1500:40: 1500:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1500:40: 1500:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1500:40: 1500:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1501:26: 1501:59 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1501:13: 1501:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1501:13: 1501:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1501:26: 1501:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1501:41: 1501:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1501:41: 1501:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1502:24: 1502:47 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1502:13: 1502:21 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1502:13: 1502:21 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1502:24: 1502:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1502:24: 1502:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1502:24: 1502:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1502:24: 1502:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1502:36: 1502:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1503:19: 1503:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1503:20: 1503:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1503:20: 1503:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1503:20: 1503:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1504:17: 1504:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1504:17: 1504:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1504:23: 1504:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1504:18: 1504:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1504:24: 1504:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _32,
                                ),
                                regex-automata/src/dfa/sparse.rs:1506:37: 1506:63 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1506:13: 1506:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1506:14: 1506:26 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _32,
                                ),
                                regex-automata/src/dfa/sparse.rs:1506:37: 1506:63 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1506:13: 1506:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1506:28: 1506:33 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} [u8], &'{erased} [u8]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1506:37: 1506:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1506:37: 1506:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1506:52: 1506:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1506:52: 1506:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1506:52: 1506:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _39,
                                ),
                                regex-automata/src/dfa/sparse.rs:1507:29: 1507:67 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1507:13: 1507:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1507:14: 1507:18 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _39,
                                ),
                                regex-automata/src/dfa/sparse.rs:1507:29: 1507:67 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1507:13: 1507:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1507:20: 1507:25 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} [u8], &'{erased} [u8]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1507:29: 1507:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1507:29: 1507:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1507:44: 1507:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1507:44: 1507:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1507:44: 1507:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-automata/src/dfa/sparse.rs:1508:36: 1513:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1508:13: 1508:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1508:14: 1508:25 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-automata/src/dfa/sparse.rs:1508:36: 1513:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1508:13: 1508:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1508:27: 1508:32 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} [u8], &'{erased} [u8]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1508:36: 1513:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1508:39: 1508:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1509:25: 1509:58 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1509:17: 1509:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1509:17: 1509:22 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1509:25: 1509:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1509:40: 1509:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1509:40: 1509:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1510:13: 1510:43 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1510:13: 1510:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1510:13: 1510:43 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1510:18: 1510:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1510:13: 1510:43 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1510:13: 1510:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1510:13: 1510:43 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1510:19: 1510:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1510:13: 1510:43 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1510:33: 1510:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1510:13: 1510:43 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1510:33: 1510:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1510:33: 1510:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1512:13: 1512:29 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1512:14: 1512:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1512:13: 1512:29 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1512:17: 1512:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1512:13: 1512:29 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1512:15: 1512:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1512:13: 1512:29 (#0),
                },
            ),
        ),
        ty: [u8; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1512:15: 1512:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1512:13: 1512:29 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFull,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1512:18: 1512:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1512:13: 1512:29 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1512:23: 1512:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1515:25: 1515:46 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1515:13: 1515:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1515:13: 1515:22 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1515:37: 1515:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1515:43: 1515:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1515:37: 1515:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1515:37: 1515:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1516:21: 1516:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1516:13: 1516:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1516:13: 1516:18 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1516:27: 1516:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1516:22: 1516:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1516:28: 1516:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1516:31: 1516:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1516:31: 1516:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1516:31: 1516:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1517:17: 1517:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1517:21: 1517:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1517:31: 1517:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1517:39: 1517:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1517:53: 1517:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1517:59: 1517:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1517:72: 1517:77 (#0),
            scope: scope[0],
        },
    },
]