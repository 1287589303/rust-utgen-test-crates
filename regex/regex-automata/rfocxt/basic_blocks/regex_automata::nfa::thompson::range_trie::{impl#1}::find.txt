[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).0: std::vec::Vec<nfa::thompson::range_trie::Transition>),
            _5 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:598:23: 598:40 (#0),
                    scope: scope[0],
                },
                kind: _4 = <std::vec::Vec<nfa::thompson::range_trie::Transition> as core::ops::Deref>::deref(move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &(*_4),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(_2.0: u8),
            _7 = {closure@regex-automata/src/nfa/thompson/range_trie.rs:598:42: 598:45} { range: move _8 },
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:598:9: 598:73 (#0),
                    scope: scope[0],
                },
                kind: _0 = nfa::thompson::range_trie::State::find::binary_search::<nfa::thompson::range_trie::Transition, {closure@regex-automata/src/nfa/thompson/range_trie.rs:598:42: 598:45}>(move _3, move _7) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_3),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:599:6: 599:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:567:5: 599:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:567:41: 567:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::range_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:567:13: 567:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/range_trie.rs:567:27: 567:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/range_trie.rs:567:20: 567:25 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:567:20: 567:25 (#0),
                    },
                ),
            ),
        ),
        ty: regex_syntax::utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:567:20: 567:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:598:9: 598:73 (#0),
                },
            ),
        ),
        ty: &'{erased} [nfa::thompson::range_trie::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:598:23: 598:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:598:9: 598:73 (#0),
                },
            ),
        ),
        ty: &'{erased} [nfa::thompson::range_trie::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:598:23: 598:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:598:9: 598:73 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::range_trie::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:598:23: 598:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:598:9: 598:73 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::range_trie::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:598:23: 598:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:598:9: 598:73 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2998 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#1}::find::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 nfa::thompson::range_trie::Transition,)) -> bool, bound_vars: [Region(BrAnon)] },
                (&'{erased} u8,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:598:42: 598:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:598:9: 598:73 (#0),
                },
            ),
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:598:42: 598:72 (#0),
            scope: scope[0],
        },
    },
]