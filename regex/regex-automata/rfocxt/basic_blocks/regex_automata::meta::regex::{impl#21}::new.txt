[
    BasicBlockData {
        statements: [
            StorageLive(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:3333:21: 3333:38 (#0),
                    scope: scope[0],
                },
                kind: _1 = <meta::regex::Config as core::default::Default>::default() -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:3334:18: 3334:50 (#0),
                    scope: scope[0],
                },
                kind: _2 = regex_syntax::ast::parse::ParserBuilder::new() -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:3335:18: 3335:58 (#0),
                    scope: scope[0],
                },
                kind: _3 = regex_syntax::hir::translate::TranslatorBuilder::new() -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = meta::regex::Builder { config: move _1, ast: move _2, hir: move _3 },
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:3336:9: 3336:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:3337:6: 3337:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:3336:9: 3336:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:3331:5: 3337:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::regex::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:3331:21: 3331:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:3333:21: 3333:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: regex_syntax::ast::parse::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:3334:18: 3334:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: regex_syntax::hir::translate::TranslatorBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:3335:18: 3335:58 (#0),
            scope: scope[0],
        },
    },
]