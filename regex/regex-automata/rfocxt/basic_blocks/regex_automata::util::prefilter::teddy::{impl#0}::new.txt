[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            PlaceMention(_1),
            _6 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:59:54: 59:64 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb2, 1: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:59:60: 59:64 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = aho_corasick::packed::MatchKind::LeftmostFirst,
            StorageLive(_8),
            _8 = aho_corasick::MatchKind::LeftmostFirst,
            _5 = (move _7, move _8),
            StorageDead(_8),
            StorageDead(_7),
            PlaceMention(_5),
            StorageLive(_3),
            _3 = (_5.0: aho_corasick::packed::MatchKind),
            StorageLive(_4),
            _4 = (_5.1: aho_corasick::MatchKind),
            StorageDead(_5),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:66:17: 66:31 (#0),
                    scope: scope[1],
                },
                kind: _12 = core::slice::<impl [B]>::iter(move _13) -> [return: bb3, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageLive(_14),
            _14 = {closure@regex-automata/src/util/prefilter/teddy.rs:66:36: 66:39},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:66:17: 66:57 (#0),
                    scope: scope[1],
                },
                kind: _11 = <core::slice::Iter<'_, B> as core::iter::Iterator>::map::<usize, {closure@regex-automata/src/util/prefilter/teddy.rs:66:36: 66:39}>(move _12, move _14) -> [return: bb4, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:66:17: 66:63 (#0),
                    scope: scope[1],
                },
                kind: _10 = <core::iter::Map<core::slice::Iter<'_, B>, {closure@regex-automata/src/util/prefilter/teddy.rs:66:36: 66:39}> as core::iter::Iterator>::min(move _11) -> [return: bb5, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:66:17: 66:76 (#0),
                    scope: scope[1],
                },
                kind: _9 = core::option::Option::<usize>::unwrap_or(move _10, const 0_usize) -> [return: bb6, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:67:26: 67:61 (#0),
                    scope: scope[2],
                },
                kind: _25 = aho_corasick::packed::Config::new() -> [return: bb7, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = &mut _25,
            StorageLive(_26),
            _26 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:67:26: 68:47 (#0),
                    scope: scope[2],
                },
                kind: _23 = aho_corasick::packed::Config::match_kind(move _24, move _26) -> [return: bb8, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = &(*_23),
            StorageDead(_26),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:67:26: 69:27 (#0),
                    scope: scope[2],
                },
                kind: _21 = aho_corasick::packed::Config::builder(move _22) -> [return: bb9, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = &mut _21,
            StorageDead(_22),
            StorageLive(_27),
            _27 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:67:26: 70:33 (#0),
                    scope: scope[2],
                },
                kind: _19 = aho_corasick::packed::Builder::extend::<&[B], &B>(move _20, move _27) -> [return: bb10, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = &(*_19),
            StorageDead(_27),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:67:26: 71:25 (#0),
                    scope: scope[2],
                },
                kind: _17 = aho_corasick::packed::Builder::build(move _18) -> [return: bb11, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:67:26: 71:26 (#4926),
                    scope: scope[2],
                },
                kind: _16 = <core::option::Option<aho_corasick::packed::Searcher> as core::ops::Try>::branch(move _17) -> [return: bb12, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            PlaceMention(_16),
            _28 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:67:26: 71:26 (#4926),
                    scope: scope[2],
                },
                kind: switchInt(move _28) -> [0: bb15, 1: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:67:26: 71:26 (#4926),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:71:25: 71:26 (#4927),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            _32 = move ((_16 as Continue).0: aho_corasick::packed::Searcher),
            _15 = move _32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:71:25: 71:26 (#0),
                    scope: scope[2],
                },
                kind: drop(_32) -> [return: bb18, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = ((_16 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_31),
            _31 = _29,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:67:26: 71:26 (#4926),
                    scope: scope[5],
                },
                kind: _0 = <core::option::Option<util::prefilter::teddy::Teddy> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _31) -> [return: bb17, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:71:26: 71:27 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb41, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            FakeRead(ForLet(None), _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:71:26: 71:27 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb19, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:71:26: 71:27 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb20, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_16),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:72:31: 72:64 (#0),
                    scope: scope[3],
                },
                kind: _44 = aho_corasick::dfa::DFA::builder() -> [return: bb21, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = &mut _44,
            StorageLive(_45),
            _45 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:72:31: 73:43 (#0),
                    scope: scope[3],
                },
                kind: _42 = aho_corasick::dfa::Builder::match_kind(move _43, move _45) -> [return: bb22, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = &mut (*_42),
            StorageDead(_45),
            StorageDead(_43),
            StorageLive(_46),
            _46 = aho_corasick::StartKind::Anchored,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:72:31: 74:63 (#0),
                    scope: scope[3],
                },
                kind: _40 = aho_corasick::dfa::Builder::start_kind(move _41, move _46) -> [return: bb23, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _39 = &mut (*_40),
            StorageDead(_46),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:72:31: 75:34 (#0),
                    scope: scope[3],
                },
                kind: _38 = aho_corasick::dfa::Builder::prefilter(move _39, const false) -> [return: bb24, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _37 = &(*_38),
            StorageDead(_39),
            StorageLive(_47),
            _47 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:72:31: 76:32 (#0),
                    scope: scope[3],
                },
                kind: _36 = aho_corasick::dfa::Builder::build::<&[B], &B>(move _37, move _47) -> [return: bb25, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:72:31: 77:22 (#0),
                    scope: scope[3],
                },
                kind: _35 = core::result::Result::<aho_corasick::dfa::DFA, aho_corasick::BuildError>::ok(move _36) -> [return: bb26, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:72:31: 77:23 (#4928),
                    scope: scope[3],
                },
                kind: _34 = <core::option::Option<aho_corasick::dfa::DFA> as core::ops::Try>::branch(move _35) -> [return: bb27, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            PlaceMention(_34),
            _48 = discriminant(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:72:31: 77:23 (#4928),
                    scope: scope[3],
                },
                kind: switchInt(move _48) -> [0: bb30, 1: bb29, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:72:31: 77:23 (#4928),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:77:22: 77:23 (#4929),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb31, imaginary: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            _52 = move ((_34 as Continue).0: aho_corasick::dfa::DFA),
            _33 = move _52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:77:22: 77:23 (#0),
                    scope: scope[3],
                },
                kind: drop(_52) -> [return: bb33, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_49),
            _49 = ((_34 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_51),
            _51 = _49,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:72:31: 77:23 (#4928),
                    scope: scope[10],
                },
                kind: _0 = <core::option::Option<util::prefilter::teddy::Teddy> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _51) -> [return: bb32, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:77:23: 77:24 (#0),
                    scope: scope[3],
                },
                kind: drop(_34) -> [return: bb40, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            FakeRead(ForLet(None), _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:77:23: 77:24 (#0),
                    scope: scope[3],
                },
                kind: drop(_34) -> [return: bb34, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_42),
            StorageDead(_40),
            StorageDead(_38),
            StorageDead(_34),
            StorageLive(_53),
            StorageLive(_54),
            _54 = move _15,
            StorageLive(_55),
            _55 = move _33,
            StorageLive(_56),
            _56 = _9,
            _53 = util::prefilter::teddy::Teddy { searcher: move _54, anchored_ac: move _55, minimum_len: move _56 },
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:78:69: 78:70 (#0),
                    scope: scope[8],
                },
                kind: drop(_55) -> [return: bb35, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:78:69: 78:70 (#0),
                    scope: scope[8],
                },
                kind: drop(_54) -> [return: bb36, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            _0 = core::option::Option::<util::prefilter::teddy::Teddy>::Some(move _53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:78:70: 78:71 (#0),
                    scope: scope[8],
                },
                kind: drop(_53) -> [return: bb37, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:79:9: 79:10 (#0),
                    scope: scope[3],
                },
                kind: drop(_33) -> [return: bb38, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:79:9: 79:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb39, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_9),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:80:6: 80:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_42),
            StorageDead(_40),
            StorageDead(_38),
            StorageDead(_34),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:79:9: 79:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb43, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:71:26: 71:27 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb42, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_9),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:80:6: 80:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:80:6: 80:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:78:69: 78:70 (#0),
                    scope: scope[8],
                },
                kind: drop(_54) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:78:70: 78:71 (#0),
                    scope: scope[8],
                },
                kind: drop(_53) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:79:9: 79:10 (#0),
                    scope: scope[3],
                },
                kind: drop(_33) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:77:23: 77:24 (#0),
                    scope: scope[3],
                },
                kind: drop(_34) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:77:22: 77:23 (#4928),
                    scope: scope[3],
                },
                kind: drop(_35) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:77:21: 77:22 (#0),
                    scope: scope[3],
                },
                kind: drop(_36) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:71:26: 71:27 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:79:9: 79:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb56, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:71:26: 71:27 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:71:25: 71:26 (#4926),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:71:26: 71:27 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb56, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:39:5: 80:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::prefilter::teddy::Teddy>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:42:10: 42:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/prefilter/teddy.rs:40:15: 40:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/teddy.rs:40:9: 40:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:40:9: 40:13 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:40:9: 40:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/prefilter/teddy.rs:41:18: 41:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/teddy.rs:41:9: 41:16 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:41:9: 41:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [B/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:41:9: 41:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                regex-automata/src/util/prefilter/teddy.rs:59:54: 64:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:59:17: 59:51 (#0),
                    },
                ),
            ),
        ),
        ty: aho_corasick::packed::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:59:18: 59:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                regex-automata/src/util/prefilter/teddy.rs:59:54: 64:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:59:17: 59:51 (#0),
                    },
                ),
            ),
        ),
        ty: aho_corasick::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:59:37: 59:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (aho_corasick::packed::MatchKind, aho_corasick::MatchKind),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:59:54: 64:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:60:17: 60:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: aho_corasick::packed::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:61:21: 61:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: aho_corasick::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:62:21: 62:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/teddy.rs:66:17: 66:76 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:65:17: 65:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:65:17: 65:28 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:66:17: 66:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, B/#0>, Closure(DefId(0:3784 ~ regex_automata[00dd]::util::prefilter::teddy::{impl#0}::new::{closure#0}), [B/#0, i16, Binder { value: extern "RustCall" fn((&'{erased} B/#0,)) -> usize, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:66:17: 66:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, B/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:66:17: 66:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [B/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:66:17: 66:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:3784 ~ regex_automata[00dd]::util::prefilter::teddy::{impl#0}::new::{closure#0}),
            [
                B/#0,
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} B/#0,)) -> usize, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:66:36: 66:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/teddy.rs:67:26: 71:26 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:67:17: 67:23 (#0),
                    },
                ),
            ),
        ),
        ty: aho_corasick::packed::Searcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:67:17: 67:23 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, aho_corasick::packed::Searcher>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:67:26: 71:26 (#4926),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<aho_corasick::packed::Searcher>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:67:26: 71:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} aho_corasick::packed::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:67:26: 70:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut aho_corasick::packed::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:67:26: 70:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut aho_corasick::packed::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:67:26: 69:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: aho_corasick::packed::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:67:26: 69:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} aho_corasick::packed::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:67:26: 68:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut aho_corasick::packed::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:67:26: 68:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut aho_corasick::packed::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:67:26: 67:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: aho_corasick::packed::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:67:26: 67:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: aho_corasick::packed::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:68:29: 68:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [B/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:70:25: 70:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:71:25: 71:26 (#4927),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                regex-automata/src/util/prefilter/teddy.rs:67:26: 71:26 (#4926),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:71:25: 71:26 (#4927),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:71:25: 71:26 (#4927),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:71:25: 71:26 (#4927),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:71:25: 71:26 (#4927),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                regex-automata/src/util/prefilter/teddy.rs:67:26: 71:26 (#4926),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:67:26: 71:26 (#4926),
                    },
                ),
            ),
        ),
        ty: aho_corasick::packed::Searcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:67:26: 71:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/teddy.rs:72:31: 77:23 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:72:17: 72:28 (#0),
                    },
                ),
            ),
        ),
        ty: aho_corasick::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:17: 72:28 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, aho_corasick::dfa::DFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:31: 77:23 (#4928),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<aho_corasick::dfa::DFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:31: 77:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<aho_corasick::dfa::DFA, aho_corasick::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:31: 76:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} aho_corasick::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:31: 75:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut aho_corasick::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:31: 75:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut aho_corasick::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:31: 74:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut aho_corasick::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:31: 74:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut aho_corasick::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:31: 73:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut aho_corasick::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:31: 73:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut aho_corasick::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:31: 72:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: aho_corasick::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:31: 72:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: aho_corasick::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:73:29: 73:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: aho_corasick::StartKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:74:29: 74:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [B/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:76:24: 76:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:77:22: 77:23 (#4929),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _34,
                                ),
                                regex-automata/src/util/prefilter/teddy.rs:72:31: 77:23 (#4928),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:77:22: 77:23 (#4929),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:77:22: 77:23 (#4929),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:77:22: 77:23 (#4929),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:77:22: 77:23 (#4929),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _34,
                                ),
                                regex-automata/src/util/prefilter/teddy.rs:72:31: 77:23 (#4928),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:72:31: 77:23 (#4928),
                    },
                ),
            ),
        ),
        ty: aho_corasick::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:72:31: 77:23 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::prefilter::teddy::Teddy,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:78:18: 78:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: aho_corasick::packed::Searcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:78:36: 78:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: aho_corasick::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:78:44: 78:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:78:57: 78:68 (#0),
            scope: scope[0],
        },
    },
]