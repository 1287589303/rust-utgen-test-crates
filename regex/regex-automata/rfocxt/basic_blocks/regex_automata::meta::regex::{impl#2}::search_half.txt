[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).0: std::sync::Arc<meta::regex::RegexI>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:976:12: 976:25 (#0),
                    scope: scope[0],
                },
                kind: _6 = <std::sync::Arc<meta::regex::RegexI> as core::ops::Deref>::deref(move _7) -> [return: bb1, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _5 = &((*_6).1: meta::regex::RegexInfo),
            StorageLive(_8),
            _8 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:976:12: 976:46 (#0),
                    scope: scope[0],
                },
                kind: _4 = meta::regex::RegexInfo::is_impossible(move _5, move _8) -> [return: bb2, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:976:12: 976:46 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            _0 = core::option::Option::<util::search::HalfMatch>::None,
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:984:6: 984:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &((*_1).1: util::pool::Pool<meta::regex::Cache, std::boxed::Box<dyn core::ops::Fn() -> meta::regex::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:979:25: 979:40 (#0),
                    scope: scope[0],
                },
                kind: _10 = util::pool::Pool::<meta::regex::Cache, std::boxed::Box<dyn core::ops::Fn() -> meta::regex::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>::get(move _11) -> [return: bb5, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &((*_1).0: std::sync::Arc<meta::regex::RegexI>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:980:22: 980:36 (#0),
                    scope: scope[1],
                },
                kind: _16 = <std::sync::Arc<meta::regex::RegexI> as core::ops::Deref>::deref(move _17) -> [return: bb6, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            _15 = &((*_16).0: std::sync::Arc<dyn meta::strategy::Strategy>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:980:22: 980:67 (#0),
                    scope: scope[1],
                },
                kind: _14 = <std::sync::Arc<dyn meta::strategy::Strategy> as core::ops::Deref>::deref(move _15) -> [return: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = &(*_14),
            StorageDead(_15),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &mut _10,
            _20 = &mut (*_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:980:49: 980:59 (#0),
                    scope: scope[1],
                },
                kind: _19 = <util::pool::PoolGuard<'_, meta::regex::Cache, std::boxed::Box<dyn core::ops::Fn() -> meta::regex::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>> as core::ops::DerefMut>::deref_mut(move _20) -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = &mut (*_19),
            StorageDead(_20),
            StorageLive(_22),
            _22 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:980:22: 980:67 (#0),
                    scope: scope[1],
                },
                kind: _12 = <dyn meta::strategy::Strategy as meta::strategy::Strategy>::search_half(move _13, move _18, move _22) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_18),
            StorageDead(_13),
            FakeRead(ForLet(None), _12),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_16),
            StorageDead(_14),
            StorageLive(_23),
            StorageLive(_24),
            _24 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:982:9: 982:30 (#0),
                    scope: scope[2],
                },
                kind: _23 = util::pool::PoolGuard::<'_, meta::regex::Cache, std::boxed::Box<dyn core::ops::Fn() -> meta::regex::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>::put(move _24) -> [return: bb10, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            _0 = _12,
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:984:5: 984:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb11, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:984:6: 984:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:984:6: 984:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:982:29: 982:30 (#0),
                    scope: scope[2],
                },
                kind: drop(_24) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:984:5: 984:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:975:5: 984:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::search::HalfMatch>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:975:53: 975:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} meta::regex::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:975:24: 975:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/regex.rs:975:38: 975:48 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:975:31: 975:36 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:975:31: 975:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:975:31: 975:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:976:9: 978:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:976:12: 976:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:976:12: 976:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexI,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:976:12: 976:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::Arc<meta::regex::RegexI, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:976:12: 976:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:976:40: 976:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:976:47: 978:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:979:25: 979:40 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:979:13: 979:22 (#0),
                    },
                ),
            ),
        ),
        ty: util::pool::PoolGuard<'{erased}, meta::regex::Cache, std::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = meta::regex::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:979:13: 979:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::pool::Pool<meta::regex::Cache, std::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = meta::regex::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:979:25: 979:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:980:22: 980:67 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:980:13: 980:19 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<util::search::HalfMatch>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:980:13: 980:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:980:22: 980:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:980:22: 980:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:980:22: 980:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexI,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:980:22: 980:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::Arc<meta::regex::RegexI, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:980:22: 980:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:980:49: 980:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:980:49: 980:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::pool::PoolGuard<'{erased}, meta::regex::Cache, std::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = meta::regex::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:980:49: 980:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::pool::PoolGuard<'{erased}, meta::regex::Cache, std::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = meta::regex::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:980:49: 980:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:980:61: 980:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:982:9: 982:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::pool::PoolGuard<'{erased}, meta::regex::Cache, std::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = meta::regex::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:982:24: 982:29 (#0),
            scope: scope[0],
        },
    },
]