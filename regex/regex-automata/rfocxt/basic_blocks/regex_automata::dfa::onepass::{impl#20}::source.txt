[
    BasicBlockData {
        statements: [
            PlaceMention(((*_1).0: dfa::onepass::BuildErrorKind)),
            _2 = discriminant(((*_1).0: dfa::onepass::BuildErrorKind)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:3036:9: 3036:24 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<&dyn core::error::Error>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:3039:18: 3039:22 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:3037:13: 3037:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:3038:13: 3038:26 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &((((*_1).0: dfa::onepass::BuildErrorKind) as NFA).0: nfa::thompson::error::BuildError),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_3),
            _4 = move _5 as &dyn core::error::Error (PointerCoercion(Unsize)),
            StorageDead(_5),
            _0 = core::option::Option::<&dyn core::error::Error>::Some(move _4),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:3037:37: 3037:38 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = &((((*_1).0: dfa::onepass::BuildErrorKind) as Word).0: util::look::UnicodeWordBoundaryError),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_6),
            _7 = move _8 as &dyn core::error::Error (PointerCoercion(Unsize)),
            StorageDead(_8),
            _0 = core::option::Option::<&dyn core::error::Error>::Some(move _7),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:3038:38: 3038:39 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:3041:6: 3041:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::error::Error), bound_vars: [] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:3033:25: 3033:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} dfa::onepass::BuildError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:3033:15: 3033:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:3037:13: 3037:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).0: dfa::onepass::BuildErrorKind),
                                ),
                                regex-automata/src/dfa/onepass.rs:3036:15: 3036:24 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:3037:13: 3037:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::error::BuildError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:3037:17: 3037:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::error::Error), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:3037:34: 3037:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/onepass.rs:3036:9: 3040:10 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::error::BuildError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:3037:34: 3037:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).0: dfa::onepass::BuildErrorKind),
                                ),
                                regex-automata/src/dfa/onepass.rs:3036:15: 3036:24 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:3038:13: 3038:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::look::UnicodeWordBoundaryError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:3038:18: 3038:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::error::Error), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:3038:35: 3038:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/onepass.rs:3036:9: 3040:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::UnicodeWordBoundaryError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:3038:35: 3038:38 (#0),
            scope: scope[0],
        },
    },
]