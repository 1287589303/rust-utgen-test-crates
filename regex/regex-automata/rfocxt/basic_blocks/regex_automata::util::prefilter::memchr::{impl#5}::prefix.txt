[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_2),
            StorageLive(_9),
            _9 = (_3.0: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:171:18: 171:42 (#0),
                    scope: scope[0],
                },
                kind: _7 = core::slice::<impl [u8]>::get::<usize>(move _8, move _9) -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:171:18: 171:43 (#4921),
                    scope: scope[0],
                },
                kind: _6 = <core::option::Option<&u8> as core::ops::Try>::branch(move _7) -> [return: bb2, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _10 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:171:18: 171:43 (#4921),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:171:18: 171:43 (#4921),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:171:42: 171:43 (#4922),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = ((_6 as Continue).0: &u8),
            _5 = _14,
            StorageDead(_14),
            _4 = (*_5),
            FakeRead(ForLet(None), _4),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_15),
            StorageLive(_16),
            _16 = ((*_1).0: u8),
            StorageLive(_17),
            _17 = _4,
            _15 = Eq(move _16, move _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:172:12: 172:23 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _15) -> [0: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = ((_6 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_13),
            _13 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:171:18: 171:43 (#4921),
                    scope: scope[3],
                },
                kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _13) -> [return: bb7, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:177:6: 177:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:172:54: 174:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_18),
            StorageLive(_19),
            _19 = ((*_1).1: u8),
            StorageLive(_20),
            _20 = _4,
            _18 = Eq(move _19, move _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:172:27: 172:38 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _18) -> [0: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:172:54: 174:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_21),
            StorageLive(_22),
            _22 = ((*_1).2: u8),
            StorageLive(_23),
            _23 = _4,
            _21 = Eq(move _22, move _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:172:42: 172:53 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _21) -> [0: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:172:54: 174:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            _0 = core::option::Option::<util::search::Span>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:172:9: 176:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            StorageLive(_25),
            _25 = (_3.0: usize),
            StorageLive(_26),
            StorageLive(_27),
            _27 = (_3.0: usize),
            _28 = AddWithOverflow(_27, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:173:49: 173:63 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", move _27, const 1_usize) -> [success: bb15, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = move (_28.0: usize),
            StorageDead(_27),
            _24 = util::search::Span { start: move _25, end: move _26 },
            StorageDead(_26),
            StorageDead(_25),
            _0 = core::option::Option::<util::search::Span>::Some(move _24),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:172:9: 176:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:177:6: 177:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:177:6: 177:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memchr.rs:170:5: 177:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::search::Span>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:170:54: 170:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::prefilter::memchr::Memchr3,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:170:15: 170:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/prefilter/memchr.rs:170:32: 170:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/memchr.rs:170:22: 170:30 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/memchr.rs:170:22: 170:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:170:22: 170:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/prefilter/memchr.rs:170:45: 170:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/memchr.rs:170:39: 170:43 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/memchr.rs:170:39: 170:43 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:170:39: 170:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/memchr.rs:171:17: 171:43 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/memchr.rs:171:13: 171:14 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:171:13: 171:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:171:18: 171:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, &'{erased} u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:171:18: 171:43 (#4921),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:171:18: 171:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:171:18: 171:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:171:31: 171:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:171:42: 171:43 (#4922),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-automata/src/util/prefilter/memchr.rs:171:18: 171:43 (#4921),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/memchr.rs:171:42: 171:43 (#4922),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:171:42: 171:43 (#4922),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:171:42: 171:43 (#4922),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:171:42: 171:43 (#4922),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-automata/src/util/prefilter/memchr.rs:171:18: 171:43 (#4921),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/memchr.rs:171:18: 171:43 (#4921),
                    },
                ),
            ),
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:171:18: 171:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/memchr.rs:172:9: 176:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:172:12: 172:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/memchr.rs:172:9: 176:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:172:12: 172:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/memchr.rs:172:9: 176:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:172:22: 172:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/memchr.rs:172:9: 176:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:172:27: 172:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/memchr.rs:172:9: 176:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:172:27: 172:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/memchr.rs:172:9: 176:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:172:37: 172:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/memchr.rs:172:9: 176:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:172:42: 172:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/memchr.rs:172:9: 176:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:172:42: 172:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/memchr.rs:172:9: 176:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:172:52: 172:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::search::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:173:18: 173:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:173:32: 173:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:173:49: 173:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/memchr.rs:173:13: 173:66 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:173:49: 173:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memchr.rs:173:49: 173:63 (#0),
            scope: scope[0],
        },
    },
]