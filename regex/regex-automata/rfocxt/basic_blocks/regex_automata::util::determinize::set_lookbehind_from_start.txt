[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:588:15: 588:31 (#0),
                    scope: scope[0],
                },
                kind: _4 = nfa::thompson::nfa::NFA::is_reverse(move _5) -> [return: bb1, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:589:20: 589:38 (#0),
                    scope: scope[1],
                },
                kind: _8 = nfa::thompson::nfa::NFA::look_matcher(move _9) -> [return: bb2, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &(*_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:589:20: 589:60 (#0),
                    scope: scope[1],
                },
                kind: _6 = util::look::LookMatcher::get_line_terminator(move _7) -> [return: bb3, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageDead(_8),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:590:19: 590:37 (#0),
                    scope: scope[2],
                },
                kind: _10 = nfa::thompson::nfa::NFA::look_set_any(move _11) -> [return: bb4, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            PlaceMention((*_2)),
            _12 = discriminant((*_2)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:591:5: 591:17 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _12) -> [0: bb6, 1: bb7, 2: bb8, 3: bb9, 4: bb10, 5: bb11, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_2)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:591:11: 591:17 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:592:9: 592:27 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:600:9: 600:24 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:605:9: 605:20 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:621:9: 621:22 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb40, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:644:9: 644:22 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb72, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_91),
            StorageLive(_92),
            StorageLive(_93),
            _93 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:663:16: 663:46 (#0),
                    scope: scope[3],
                },
                kind: _92 = util::look::LookSet::contains_anchor_line(move _93) -> [return: bb95, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            _14 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:593:16: 593:39 (#0),
                    scope: scope[3],
                },
                kind: _13 = util::look::LookSet::contains_word(move _14) -> [return: bb13, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:593:16: 593:39 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _13) -> [0: bb16, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut (*_3),
            StorageLive(_17),
            _17 = {closure@regex-automata/src/util/determinize/mod.rs:594:39: 594:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:594:17: 597:19 (#0),
                    scope: scope[3],
                },
                kind: _15 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:594:39: 594:45}>(move _16, move _17) -> [return: bb15, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:593:13: 598:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:593:13: 598:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:598:13: 598:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb110,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            StorageLive(_19),
            _19 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:601:16: 601:39 (#0),
                    scope: scope[3],
                },
                kind: _18 = util::look::LookSet::contains_word(move _19) -> [return: bb19, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:601:16: 601:39 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _18) -> [0: bb22, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:602:17: 602:43 (#0),
                    scope: scope[3],
                },
                kind: _20 = util::determinize::state::StateBuilderMatches::set_is_from_word(move _21) -> [return: bb21, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:601:13: 603:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:601:13: 603:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:603:13: 603:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb110,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:606:16: 606:50 (#0),
                    scope: scope[3],
                },
                kind: _23 = util::look::LookSet::contains_anchor_haystack(move _24) -> [return: bb25, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:606:16: 606:50 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _23) -> [0: bb28, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut (*_3),
            StorageLive(_27),
            _27 = {closure@regex-automata/src/util/determinize/mod.rs:607:39: 607:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:607:17: 607:71 (#0),
                    scope: scope[3],
                },
                kind: _25 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:607:39: 607:45}>(move _26, move _27) -> [return: bb27, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_25),
            _22 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:606:13: 608:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _22 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:606:13: 608:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:609:16: 609:46 (#0),
                    scope: scope[3],
                },
                kind: _29 = util::look::LookSet::contains_anchor_line(move _30) -> [return: bb30, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:609:16: 609:46 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _29) -> [0: bb33, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &mut (*_3),
            StorageLive(_33),
            _33 = {closure@regex-automata/src/util/determinize/mod.rs:610:39: 610:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:610:17: 612:19 (#0),
                    scope: scope[3],
                },
                kind: _31 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:610:39: 610:45}>(move _32, move _33) -> [return: bb32, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:609:13: 613:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:609:13: 613:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_34),
            StorageLive(_35),
            _35 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:614:16: 614:39 (#0),
                    scope: scope[3],
                },
                kind: _34 = util::look::LookSet::contains_word(move _35) -> [return: bb35, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:614:16: 614:39 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _34) -> [0: bb38, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &mut (*_3),
            StorageLive(_38),
            _38 = {closure@regex-automata/src/util/determinize/mod.rs:615:39: 615:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:615:17: 618:19 (#0),
                    scope: scope[3],
                },
                kind: _36 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:615:39: 615:45}>(move _37, move _38) -> [return: bb37, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_36),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:614:13: 619:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:614:13: 619:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:619:13: 619:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb110,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_39),
            StorageLive(_40),
            _40 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:622:16: 622:19 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _40) -> [0: bb52, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            _43 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:623:20: 623:50 (#0),
                    scope: scope[3],
                },
                kind: _42 = util::look::LookSet::contains_anchor_crlf(move _43) -> [return: bb42, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:623:20: 623:50 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _42) -> [0: bb45, otherwise: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:624:21: 624:47 (#0),
                    scope: scope[3],
                },
                kind: _44 = util::determinize::state::StateBuilderMatches::set_is_half_crlf(move _45) -> [return: bb44, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
            _41 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:623:17: 625:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            _41 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:623:17: 625:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
            StorageLive(_46),
            StorageLive(_47),
            _47 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:626:20: 626:50 (#0),
                    scope: scope[3],
                },
                kind: _46 = util::look::LookSet::contains_anchor_line(move _47) -> [return: bb47, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:626:20: 626:50 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _46) -> [0: bb50, otherwise: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &mut (*_3),
            StorageLive(_50),
            _50 = {closure@regex-automata/src/util/determinize/mod.rs:627:43: 627:49},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:627:21: 627:77 (#0),
                    scope: scope[3],
                },
                kind: _48 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:627:43: 627:49}>(move _49, move _50) -> [return: bb49, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_48),
            _39 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:626:17: 628:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            _39 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:626:17: 628:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:622:13: 633:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_51),
            StorageLive(_52),
            _52 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:630:20: 630:50 (#0),
                    scope: scope[3],
                },
                kind: _51 = util::look::LookSet::contains_anchor_line(move _52) -> [return: bb53, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:630:20: 630:50 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _51) -> [0: bb56, otherwise: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &mut (*_3),
            StorageLive(_55),
            _55 = {closure@regex-automata/src/util/determinize/mod.rs:631:43: 631:49},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:631:21: 631:79 (#0),
                    scope: scope[3],
                },
                kind: _53 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:631:43: 631:49}>(move _54, move _55) -> [return: bb55, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_53),
            _39 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:630:17: 632:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            _39 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:630:17: 632:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:622:13: 633:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:634:16: 634:46 (#0),
                    scope: scope[3],
                },
                kind: _57 = util::look::LookSet::contains_anchor_line(move _58) -> [return: bb59, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:634:16: 634:46 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _57) -> [0: bb64, otherwise: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = _6,
            _59 = Eq(move _60, const 10_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:634:50: 634:67 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _59) -> [0: bb63, otherwise: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = &mut (*_3),
            StorageLive(_63),
            _63 = {closure@regex-automata/src/util/determinize/mod.rs:635:39: 635:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:635:17: 635:73 (#0),
                    scope: scope[3],
                },
                kind: _61 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:635:39: 635:45}>(move _62, move _63) -> [return: bb62, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_62),
            StorageDead(_61),
            _56 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:634:13: 636:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb66,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:634:13: 636:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb66,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageDead(_57),
            StorageDead(_56),
            StorageLive(_64),
            StorageLive(_65),
            _65 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:637:16: 637:39 (#0),
                    scope: scope[3],
                },
                kind: _64 = util::look::LookSet::contains_word(move _65) -> [return: bb67, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:637:16: 637:39 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _64) -> [0: bb70, otherwise: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageLive(_66),
            StorageLive(_67),
            _67 = &mut (*_3),
            StorageLive(_68),
            _68 = {closure@regex-automata/src/util/determinize/mod.rs:638:39: 638:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:638:17: 641:19 (#0),
                    scope: scope[3],
                },
                kind: _66 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:638:39: 638:45}>(move _67, move _68) -> [return: bb69, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_67),
            StorageDead(_66),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:637:13: 642:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:637:13: 642:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:642:13: 642:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb110,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            _71 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:645:16: 645:46 (#0),
                    scope: scope[3],
                },
                kind: _70 = util::look::LookSet::contains_anchor_crlf(move _71) -> [return: bb73, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:645:16: 645:46 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _70) -> [0: bb80, otherwise: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageLive(_72),
            _72 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:646:20: 646:23 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _72) -> [0: bb77, otherwise: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_73),
            StorageLive(_74),
            _74 = &mut (*_3),
            StorageLive(_75),
            _75 = {closure@regex-automata/src/util/determinize/mod.rs:647:43: 647:49},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:647:21: 647:79 (#0),
                    scope: scope[3],
                },
                kind: _73 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:647:43: 647:49}>(move _74, move _75) -> [return: bb76, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_74),
            StorageDead(_73),
            _69 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:646:17: 650:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_76),
            StorageLive(_77),
            _77 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:649:21: 649:47 (#0),
                    scope: scope[3],
                },
                kind: _76 = util::determinize::state::StateBuilderMatches::set_is_half_crlf(move _77) -> [return: bb78, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_76),
            _69 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:646:17: 650:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:645:13: 651:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            _69 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:645:13: 651:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            _80 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:652:16: 652:46 (#0),
                    scope: scope[3],
                },
                kind: _79 = util::look::LookSet::contains_anchor_line(move _80) -> [return: bb82, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:652:16: 652:46 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _79) -> [0: bb87, otherwise: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageLive(_81),
            StorageLive(_82),
            _82 = _6,
            _81 = Eq(move _82, const 13_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:652:50: 652:67 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _81) -> [0: bb86, otherwise: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            StorageLive(_83),
            StorageLive(_84),
            _84 = &mut (*_3),
            StorageLive(_85),
            _85 = {closure@regex-automata/src/util/determinize/mod.rs:653:39: 653:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:653:17: 653:73 (#0),
                    scope: scope[3],
                },
                kind: _83 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:653:39: 653:45}>(move _84, move _85) -> [return: bb85, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_83),
            _78 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:652:13: 654:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb89,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb88,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb88,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _78 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:652:13: 654:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb89,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageDead(_79),
            StorageDead(_78),
            StorageLive(_86),
            StorageLive(_87),
            _87 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:655:16: 655:39 (#0),
                    scope: scope[3],
                },
                kind: _86 = util::look::LookSet::contains_word(move _87) -> [return: bb90, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:655:16: 655:39 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _86) -> [0: bb93, otherwise: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageLive(_88),
            StorageLive(_89),
            _89 = &mut (*_3),
            StorageLive(_90),
            _90 = {closure@regex-automata/src/util/determinize/mod.rs:656:39: 656:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:656:17: 659:19 (#0),
                    scope: scope[3],
                },
                kind: _88 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:656:39: 656:45}>(move _89, move _90) -> [return: bb92, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_89),
            StorageDead(_88),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:655:13: 660:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:655:13: 660:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:660:13: 660:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb110,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:663:16: 663:46 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _92) -> [0: bb98, otherwise: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            StorageLive(_94),
            StorageLive(_95),
            _95 = &mut (*_3),
            StorageLive(_96),
            _96 = {closure@regex-automata/src/util/determinize/mod.rs:664:39: 664:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:664:17: 664:73 (#0),
                    scope: scope[3],
                },
                kind: _94 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:664:39: 664:45}>(move _95, move _96) -> [return: bb97, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            StorageDead(_95),
            StorageDead(_94),
            _91 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:663:13: 665:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            _91 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:663:13: 665:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_91),
            StorageLive(_97),
            StorageLive(_98),
            _98 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:670:16: 670:39 (#0),
                    scope: scope[3],
                },
                kind: _97 = util::look::LookSet::contains_word(move _98) -> [return: bb100, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:670:16: 670:39 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _97) -> [0: bb108, otherwise: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageLive(_99),
            StorageLive(_100),
            _100 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:671:20: 671:48 (#0),
                    scope: scope[3],
                },
                kind: _99 = util::utf8::is_word_byte(move _100) -> [return: bb102, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:671:20: 671:48 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _99) -> [0: bb105, otherwise: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
            StorageLive(_101),
            StorageLive(_102),
            _102 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:672:21: 672:47 (#0),
                    scope: scope[3],
                },
                kind: _101 = util::determinize::state::StateBuilderMatches::set_is_from_word(move _102) -> [return: bb104, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_101),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:671:17: 678:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb107,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
            StorageLive(_103),
            StorageLive(_104),
            _104 = &mut (*_3),
            StorageLive(_105),
            _105 = {closure@regex-automata/src/util/determinize/mod.rs:674:43: 674:49},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:674:21: 677:23 (#0),
                    scope: scope[3],
                },
                kind: _103 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:674:43: 674:49}>(move _104, move _105) -> [return: bb106, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            StorageDead(_104),
            StorageDead(_103),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:671:17: 678:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb107,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:670:13: 679:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb109,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:670:13: 679:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb109,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:679:13: 679:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb110,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:682:2: 682:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:583:1: 682:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:587:2: 587:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:584:10: 584:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:584:5: 584:8 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:584:5: 584:8 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:584:5: 584:8 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:585:12: 585:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:585:5: 585:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:585:5: 585:10 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::start::Start,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:585:5: 585:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:586:14: 586:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:586:5: 586:12 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:586:5: 586:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:586:5: 586:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:588:15: 588:31 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:588:9: 588:12 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:588:9: 588:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:588:15: 588:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:589:20: 589:60 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:589:9: 589:17 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:589:9: 589:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:589:20: 589:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:589:20: 589:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:589:20: 589:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:590:19: 590:37 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:590:9: 590:16 (#0),
                    },
                ),
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:590:9: 590:16 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:590:19: 590:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:592:9: 592:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:593:13: 598:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:593:16: 593:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:593:13: 598:14 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:593:16: 593:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:594:17: 597:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:594:17: 594:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4255 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:594:39: 597:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:601:13: 603:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:601:16: 601:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:601:13: 603:14 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:601:16: 601:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:602:17: 602:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:602:17: 602:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:606:13: 608:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:606:16: 606:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:606:16: 606:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:607:17: 607:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:607:17: 607:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4256 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#1}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:607:39: 607:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:609:13: 613:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:609:16: 609:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:609:16: 609:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:610:17: 612:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:610:17: 610:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4257 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#2}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:610:39: 612:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:614:13: 619:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:614:16: 614:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:614:13: 619:14 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:614:16: 614:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:615:17: 618:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:615:17: 615:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4258 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#3}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:615:39: 618:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:622:13: 633:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:622:16: 622:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:623:17: 625:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:623:20: 623:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:623:20: 623:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:624:21: 624:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:624:21: 624:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:626:17: 628:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:626:20: 626:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:626:17: 628:18 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:626:20: 626:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:627:21: 627:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:627:21: 627:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4259 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#4}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:627:43: 627:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:630:17: 632:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:630:20: 630:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:630:17: 632:18 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:630:20: 630:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:631:21: 631:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:631:21: 631:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4260 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#5}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:631:43: 631:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:634:13: 636:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:634:16: 634:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:634:16: 634:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:634:50: 634:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:634:50: 634:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:635:17: 635:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:635:17: 635:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4261 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#6}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:635:39: 635:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:637:13: 642:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:637:16: 637:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:637:13: 642:14 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:637:16: 637:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:638:17: 641:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:638:17: 638:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4262 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#7}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:638:39: 641:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:645:13: 651:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:645:16: 645:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:645:16: 645:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:646:17: 650:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:646:20: 646:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:647:21: 647:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:647:21: 647:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4263 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#8}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:647:43: 647:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:649:21: 649:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:649:21: 649:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:652:13: 654:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:652:16: 652:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:652:16: 652:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:652:50: 652:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:652:50: 652:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:653:17: 653:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:653:17: 653:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4264 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#9}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:653:39: 653:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:655:13: 660:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:655:16: 655:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:655:13: 660:14 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:655:16: 655:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:656:17: 659:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:656:17: 656:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4265 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#10}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:656:39: 659:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:663:13: 665:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:663:16: 663:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:663:16: 663:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:664:17: 664:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:664:17: 664:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4266 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#11}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:664:39: 664:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:670:13: 679:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:670:16: 670:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:670:13: 679:14 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:670:16: 670:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:671:17: 678:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:671:20: 671:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:671:17: 678:18 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:671:39: 671:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:672:21: 672:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:672:21: 672:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:674:21: 677:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:674:21: 674:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4267 ~ regex_automata[00dd]::util::determinize::set_lookbehind_from_start::{closure#12}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:674:43: 677:22 (#0),
            scope: scope[0],
        },
    },
]