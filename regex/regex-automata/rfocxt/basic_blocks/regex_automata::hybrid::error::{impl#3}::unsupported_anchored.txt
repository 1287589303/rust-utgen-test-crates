[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = _1,
            _0 = hybrid::error::StartError::UnsupportedAnchored { mode: move _2 },
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/error.rs:150:6: 150:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::error::StartError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/error.rs:148:59: 148:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/error.rs:148:46: 148:54 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/error.rs:148:40: 148:44 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/error.rs:148:40: 148:44 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::Anchored,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/error.rs:148:40: 148:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::search::Anchored,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/error.rs:149:43: 149:47 (#0),
            scope: scope[0],
        },
    },
]