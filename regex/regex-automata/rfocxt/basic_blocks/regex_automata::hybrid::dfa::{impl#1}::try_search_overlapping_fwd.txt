[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:902:25: 902:39 (#0),
                    scope: scope[0],
                },
                kind: _8 = hybrid::dfa::DFA::get_nfa(move _9) -> [return: bb1, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &(*_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:902:25: 902:51 (#0),
                    scope: scope[0],
                },
                kind: _6 = nfa::thompson::nfa::NFA::has_empty(move _7) -> [return: bb2, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:902:25: 902:51 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:902:55: 902:69 (#0),
                    scope: scope[0],
                },
                kind: _11 = hybrid::dfa::DFA::get_nfa(move _12) -> [return: bb5, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            _5 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:902:25: 902:79 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &(*_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:902:55: 902:79 (#0),
                    scope: scope[0],
                },
                kind: _5 = nfa::thompson::nfa::NFA::is_utf8(move _10) -> [return: bb6, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:902:25: 902:79 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_1),
            StorageLive(_17),
            _17 = &mut (*_2),
            StorageLive(_18),
            _18 = &(*_3),
            StorageLive(_19),
            _19 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:9: 903:64 (#0),
                    scope: scope[1],
                },
                kind: _15 = hybrid::search::find_overlapping_fwd(move _16, move _17, move _18, move _19) -> [return: bb8, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:9: 903:65 (#3412),
                    scope: scope[1],
                },
                kind: _14 = <core::result::Result<(), util::search::MatchError> as core::ops::Try>::branch(move _15) -> [return: bb9, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _20 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:9: 903:65 (#3412),
                    scope: scope[1],
                },
                kind: switchInt(move _20) -> [0: bb12, 1: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:9: 903:65 (#3412),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:64: 903:65 (#3413),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = ((_14 as Continue).0: ()),
            _13 = _24,
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:65: 903:66 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb15, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = move ((_14 as Break).0: core::result::Result<core::convert::Infallible, util::search::MatchError>),
            StorageLive(_23),
            _23 = move _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:9: 903:65 (#3412),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<(), util::search::MatchError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::search::MatchError>>>::from_residual(move _23) -> [return: bb14, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:64: 903:65 (#3413),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb27, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:904:15: 904:32 (#0),
                    scope: scope[1],
                },
                kind: _25 = hybrid::dfa::OverlappingState::get_match(move _26) -> [return: bb16, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
            _28 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:904:9: 904:32 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _28) -> [0: bb18, 1: bb19, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:904:15: 904:32 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:905:13: 905:17 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:906:13: 906:20 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            _32 = &(*_3),
            StorageLive(_33),
            _33 = &mut (*_4),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &(*_1),
            StorageLive(_36),
            _36 = &mut (*_2),
            _34 = {closure@regex-automata/src/hybrid/dfa.rs:910:17: 910:31} { self: move _35, cache: move _36 },
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:907:24: 913:14 (#0),
                    scope: scope[1],
                },
                kind: _0 = hybrid::dfa::skip_empty_utf8_splits_overlapping::<{closure@regex-automata/src/hybrid/dfa.rs:910:17: 910:31}>(move _32, move _33, move _34) -> [return: bb25, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = (),
            _0 = core::result::Result::<(), util::search::MatchError>::Ok(move _29),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:905:26: 905:27 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = &fake shallow _25,
            StorageLive(_30),
            _30 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:906:25: 906:34 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _30) -> [0: bb24, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:906:13: 906:44 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            FakeRead(ForMatchGuard, _27),
            StorageLive(_31),
            _31 = (),
            _0 = core::result::Result::<(), util::search::MatchError>::Ok(move _31),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:906:43: 906:44 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:913:13: 913:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:915:6: 915:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:65: 903:66 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb28, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:915:6: 915:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:915:6: 915:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:64: 903:65 (#3412),
                    scope: scope[3],
                },
                kind: drop(_23) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:64: 903:65 (#3413),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:65: 903:66 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:903:64: 903:65 (#3412),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:896:5: 915:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:901:10: 901:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:897:9: 897:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/dfa.rs:898:16: 898:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/dfa.rs:898:9: 898:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:898:9: 898:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:898:9: 898:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/dfa.rs:899:16: 899:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/dfa.rs:899:9: 899:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:899:9: 899:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:899:9: 899:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/dfa.rs:900:16: 900:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/dfa.rs:900:9: 900:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:900:9: 900:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut hybrid::dfa::OverlappingState,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:900:9: 900:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/dfa.rs:902:25: 902:79 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:902:13: 902:22 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:902:13: 902:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:902:25: 902:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:902:25: 902:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:902:25: 902:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:902:25: 902:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:902:55: 902:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:902:55: 902:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:902:55: 902:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:903:9: 903:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::search::MatchError>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:903:9: 903:65 (#3412),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:903:9: 903:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:903:38: 903:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:903:44: 903:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:903:51: 903:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::OverlappingState,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:903:58: 903:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:903:64: 903:65 (#3413),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/hybrid/dfa.rs:903:9: 903:65 (#3412),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:903:64: 903:65 (#3413),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:903:64: 903:65 (#3413),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:903:64: 903:65 (#3413),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:903:64: 903:65 (#3413),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/hybrid/dfa.rs:903:9: 903:65 (#3412),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:903:9: 903:65 (#3412),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:903:9: 903:65 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:904:9: 914:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<util::search::HalfMatch>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:904:15: 904:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:904:9: 914:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hybrid::dfa::OverlappingState,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:904:15: 904:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} core::option::Option<util::search::HalfMatch>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:904:15: 904:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:905:13: 905:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:905:24: 905:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:904:9: 914:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:906:25: 906:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:906:41: 906:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:904:9: 914:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:908:17: 908:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:904:9: 914:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut hybrid::dfa::OverlappingState,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:909:17: 909:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:904:9: 914:10 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1347 ~ regex_automata[00dd]::hybrid::dfa::{impl#1}::try_search_overlapping_fwd::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 util::search::Input<'^1>, &'^2 mut hybrid::dfa::OverlappingState)) -> core::result::Result<(), util::search::MatchError>, bound_vars: [Region(BrAnon), Region(BrAnon), Region(BrAnon)] },
                (&'{erased} hybrid::dfa::DFA, &'{erased} mut hybrid::dfa::Cache),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:910:17: 912:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:904:9: 914:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:910:17: 912:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:910:17: 912:18 (#0),
            scope: scope[0],
        },
    },
]