[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4511:25 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::mem::size_of::<u32>() -> [return: bb1, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4512:12: 4512:25 (#0),
                    scope: scope[0],
                },
                kind: _9 = dfa::dense::MatchStates::<T>::slices(move _10) -> [return: bb2, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &(*_9),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4512:12: 4512:31 (#0),
                    scope: scope[0],
                },
                kind: _7 = core::slice::<impl [util::primitives::PatternID]>::len(move _8) -> [return: bb3, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _11 = MulWithOverflow(_7, const util::primitives::PatternID::SIZE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4512:11: 4512:50 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_11.1: bool), "attempt to compute `{} * {}`, which would overflow", move _7, const util::primitives::PatternID::SIZE) -> [success: bb4, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = move (_11.0: usize),
            StorageDead(_7),
            _12 = AddWithOverflow(_5, _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4512:50 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _6) -> [success: bb5, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = move (_12.0: usize),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4513:11: 4513:27 (#0),
                    scope: scope[0],
                },
                kind: _13 = core::mem::size_of::<u32>() -> [return: bb6, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = AddWithOverflow(_4, _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4513:27 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _13) -> [success: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_14.0: usize),
            StorageDead(_13),
            StorageDead(_4),
            StorageLive(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4514:11: 4514:27 (#0),
                    scope: scope[0],
                },
                kind: _15 = core::mem::size_of::<u32>() -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = AddWithOverflow(_3, _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4514:27 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _15) -> [success: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move (_16.0: usize),
            StorageDead(_15),
            StorageDead(_3),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4515:12: 4515:30 (#0),
                    scope: scope[0],
                },
                kind: _20 = dfa::dense::MatchStates::<T>::pattern_ids(move _21) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = &(*_20),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4515:12: 4515:36 (#0),
                    scope: scope[0],
                },
                kind: _18 = core::slice::<impl [util::primitives::PatternID]>::len(move _19) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            _22 = MulWithOverflow(_18, const util::primitives::PatternID::SIZE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4515:11: 4515:55 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_22.1: bool), "attempt to compute `{} * {}`, which would overflow", move _18, const util::primitives::PatternID::SIZE) -> [success: bb12, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = move (_22.0: usize),
            StorageDead(_18),
            _23 = AddWithOverflow(_2, _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _17) -> [success: bb13, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_23.0: usize),
            StorageDead(_17),
            StorageDead(_2),
            StorageDead(_20),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4516:6: 4516:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/dense.rs:4510:5: 4516:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4510:31: 4510:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} dfa::dense::MatchStates<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4510:21: 4510:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4511:9: 4514:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4511:9: 4513:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4511:9: 4512:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4511:9: 4511:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4512:11: 4512:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4512:12: 4512:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: &'{erased} [util::primitives::PatternID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4512:12: 4512:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: &'{erased} [util::primitives::PatternID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4512:12: 4512:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: &'{erased} dfa::dense::MatchStates<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4512:12: 4512:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4512:11: 4512:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4511:9: 4512:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4513:11: 4513:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4511:9: 4513:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4514:11: 4514:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4511:9: 4514:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4515:11: 4515:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4515:12: 4515:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: &'{erased} [util::primitives::PatternID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4515:12: 4515:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: &'{erased} [util::primitives::PatternID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4515:12: 4515:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
                },
            ),
        ),
        ty: &'{erased} dfa::dense::MatchStates<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4515:12: 4515:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4515:11: 4515:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/dense.rs:4511:9: 4515:55 (#0),
            scope: scope[0],
        },
    },
]