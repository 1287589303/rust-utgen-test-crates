[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_1).0: std::sync::Arc<util::captures::GroupInfoInner>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1770:17: 1772:31 (#0),
                    scope: scope[0],
                },
                kind: _9 = <std::sync::Arc<util::captures::GroupInfoInner> as core::ops::Deref>::deref(move _10) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = &((*_9).2: std::vec::Vec<std::vec::Vec<core::option::Option<std::sync::Arc<str>>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1770:17: 1773:37 (#0),
                    scope: scope[0],
                },
                kind: _7 = <std::vec::Vec<std::vec::Vec<core::option::Option<std::sync::Arc<str>>>> as core::ops::Deref>::deref(move _8) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &(*_7),
            StorageDead(_8),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1773:22: 1773:36 (#0),
                    scope: scope[0],
                },
                kind: _11 = util::primitives::PatternID::as_usize(move _12) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1770:17: 1773:37 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [std::vec::Vec<core::option::Option<std::sync::Arc<str>>>]>::get::<usize>(move _6, move _11) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_6),
            StorageLive(_13),
            _13 = {closure@regex-automata/src/util/captures.rs:1774:22: 1774:31},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1770:17: 1774:47 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::option::Option::<&std::vec::Vec<core::option::Option<std::sync::Arc<str>>>>::map::<core::slice::Iter<'_, core::option::Option<std::sync::Arc<str>>>, {closure@regex-automata/src/util/captures.rs:1774:22: 1774:31}>(move _5, move _13) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_5),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = [],
            _16 = &_17,
            _15 = move _16 as &[core::option::Option<std::sync::Arc<str>>] (PointerCoercion(Unsize)),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1775:28: 1775:37 (#0),
                    scope: scope[0],
                },
                kind: _14 = core::slice::<impl [core::option::Option<std::sync::Arc<str>>]>::iter(move _15) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1770:17: 1775:38 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::option::Option::<core::slice::Iter<'_, core::option::Option<std::sync::Arc<str>>>>::unwrap_or(move _4, move _14) -> [return: bb7, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_4),
            _0 = util::captures::GroupInfoPatternNames::<'_> { it: move _3 },
            StorageDead(_3),
            StorageDead(_17),
            StorageDead(_9),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1777:6: 1777:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1768:5: 1777:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::captures::GroupInfoPatternNames<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1768:52: 1768:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1768:26: 1768:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/captures.rs:1768:38: 1768:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:1768:33: 1768:36 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:1768:33: 1768:36 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1768:33: 1768:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::slice::Iter<'{erased}, core::option::Option<std::sync::Arc<str, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1770:17: 1775:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<core::slice::Iter<'{erased}, core::option::Option<std::sync::Arc<str, std::alloc::Global>>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1770:17: 1774:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} std::vec::Vec<core::option::Option<std::sync::Arc<str, std::alloc::Global>>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1770:17: 1773:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [std::vec::Vec<core::option::Option<std::sync::Arc<str, std::alloc::Global>>, std::alloc::Global>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1770:17: 1772:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [std::vec::Vec<core::option::Option<std::sync::Arc<str, std::alloc::Global>>, std::alloc::Global>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1770:17: 1773:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<std::vec::Vec<core::option::Option<std::sync::Arc<str, std::alloc::Global>>, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1770:17: 1772:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::captures::GroupInfoInner,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1770:17: 1772:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::sync::Arc<util::captures::GroupInfoInner, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1770:17: 1771:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1773:22: 1773:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1773:22: 1773:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:3223 ~ regex_automata[00dd]::util::captures::{impl#7}::pattern_names::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} std::vec::Vec<core::option::Option<std::sync::Arc<str, std::alloc::Global>>, std::alloc::Global>,)) -> core::slice::Iter<'{erased}, core::option::Option<std::sync::Arc<str, std::alloc::Global>>>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1774:22: 1774:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, core::option::Option<std::sync::Arc<str, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1775:28: 1775:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::option::Option<std::sync::Arc<str, std::alloc::Global>>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1775:28: 1775:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::option::Option<std::sync::Arc<str, std::alloc::Global>>; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1775:28: 1775:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1769:9: 1776:10 (#0),
                },
            ),
        ),
        ty: [core::option::Option<std::sync::Arc<str, std::alloc::Global>>; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1775:28: 1775:30 (#0),
            scope: scope[0],
        },
    },
]