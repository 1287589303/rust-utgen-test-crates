[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut (*_2),
            StorageLive(_9),
            _9 = ((*_1).6: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:455:9: 456:55 (#0),
                    scope: scope[0],
                },
                kind: _7 = regex_syntax::ast::parse::ParserBuilder::ignore_whitespace(move _8, move _9) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &mut (*_7),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_10),
            _10 = ((*_1).9: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:455:9: 457:41 (#0),
                    scope: scope[0],
                },
                kind: _5 = regex_syntax::ast::parse::ParserBuilder::nest_limit(move _6, move _10) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut (*_5),
            StorageDead(_10),
            StorageDead(_6),
            StorageLive(_11),
            _11 = ((*_1).10: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:455:9: 458:31 (#0),
                    scope: scope[0],
                },
                kind: _3 = regex_syntax::ast::parse::ParserBuilder::octal(move _4, move _11) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_4),
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_3),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:459:6: 459:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:454:5: 459:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:454:76: 454:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:454:29: 454:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/syntax.rs:454:45: 454:75 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/syntax.rs:454:36: 454:43 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:454:36: 454:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut regex_syntax::ast::parse::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:454:36: 454:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ast::parse::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:455:9: 458:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ast::parse::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:455:9: 457:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ast::parse::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:455:9: 457:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ast::parse::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:455:9: 456:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ast::parse::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:455:9: 456:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ast::parse::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:455:9: 455:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:456:32: 456:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:457:25: 457:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:458:20: 458:30 (#0),
            scope: scope[0],
        },
    },
]