[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &(*(*_1)),
            StorageLive(_4),
            _4 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/automaton.rs:1854:9: 1854:37 (#0),
                    scope: scope[0],
                },
                kind: _0 = <A as dfa::automaton::Automaton>::start_state(move _3, move _4) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/automaton.rs:1855:6: 1855:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/automaton.rs:1850:5: 1855:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::StateID, dfa::automaton::StartError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/automaton.rs:1853:10: 1853:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} &'{erased} A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/automaton.rs:1851:9: 1851:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/automaton.rs:1852:17: 1852:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/automaton.rs:1852:9: 1852:15 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/automaton.rs:1852:9: 1852:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::start::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/automaton.rs:1852:9: 1852:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/automaton.rs:1854:9: 1854:37 (#0),
                },
            ),
        ),
        ty: &'{erased} A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/automaton.rs:1854:9: 1854:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/automaton.rs:1854:9: 1854:37 (#0),
                },
            ),
        ),
        ty: &'{erased} util::start::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/automaton.rs:1854:30: 1854:36 (#0),
            scope: scope[0],
        },
    },
]