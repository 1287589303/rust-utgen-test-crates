[
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:376:13: 376:29 (#0),
                    scope: scope[0],
                },
                kind: _7 = std::vec::Vec::<util::primitives::StateID>::is_empty(move _8) -> [return: bb1, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:376:13: 376:29 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _6 = const (),
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_1),
            StorageLive(_15),
            _15 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:379:9: 379:32 (#0),
                    scope: scope[0],
                },
                kind: _13 = nfa::thompson::nfa::NFA::state(move _14, move _15) -> [return: bb4, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageLive(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:376:5: 376:30 (#1935),
                    scope: scope[0],
                },
                kind: _9 = core::panicking::panic(const "assertion failed: stack.is_empty()") -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = &(*_13),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:379:9: 379:45 (#0),
                    scope: scope[0],
                },
                kind: _11 = nfa::thompson::nfa::State::is_epsilon(move _12) -> [return: bb5, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:379:9: 379:45 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_13),
            _10 = const (),
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &mut (*_4),
            StorageLive(_22),
            _22 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:384:5: 384:29 (#0),
                    scope: scope[0],
                },
                kind: _20 = std::vec::Vec::<util::primitives::StateID>::push(move _21, move _22) -> [return: bb9, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_13),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut (*_5),
            StorageLive(_19),
            _19 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:380:9: 380:33 (#0),
                    scope: scope[0],
                },
                kind: _17 = util::sparse_set::SparseSet::insert(move _18, move _19) -> [return: bb8, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            _0 = const (),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:428:2: 428:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:385:5: 427:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:385:5: 427:6 (#0),
                    scope: scope[0],
                },
                kind: falseUnwind -> [real: bb11, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:385:30: 385:41 (#0),
                    scope: scope[1],
                },
                kind: _24 = std::vec::Vec::<util::primitives::StateID>::pop(move _25) -> [return: bb12, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(_24),
            _26 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:385:15: 385:27 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _26) -> [1: bb13, otherwise: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:385:15: 385:27 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = ((_24 as Some).0: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:390:9: 426:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:390:9: 426:10 (#0),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb16, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &mut (*_5),
            StorageLive(_31),
            _31 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:393:17: 393:31 (#0),
                    scope: scope[1],
                },
                kind: _29 = util::sparse_set::SparseSet::insert(move _30, move _31) -> [return: bb17, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:393:17: 393:31 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _29) -> [0: bb19, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            _28 = const (),
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &(*_1),
            StorageLive(_35),
            _35 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:396:20: 396:33 (#0),
                    scope: scope[1],
                },
                kind: _33 = nfa::thompson::nfa::NFA::state(move _34, move _35) -> [return: bb20, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            _23 = const (),
            StorageDead(_29),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            PlaceMention((*_33)),
            _36 = discriminant((*_33)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:396:13: 396:33 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _36) -> [0: bb26, 1: bb26, 2: bb26, 3: bb22, 4: bb23, 5: bb24, 6: bb25, 7: bb26, 8: bb26, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_33)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:396:19: 396:33 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:402:17: 402:53 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb28, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:408:17: 408:58 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:418:17: 418:60 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb42, imaginary: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_67),
            _67 = (((*_33) as Capture).0: util::primitives::StateID),
            StorageLive(_68),
            _68 = _67,
            _27 = move _68,
            StorageDead(_68),
            _23 = const (),
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:424:17: 424:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:397:17: 401:48 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb27, imaginary: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:401:52: 401:57 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = (((*_33) as Look).0: util::look::Look),
            StorageLive(_39),
            _39 = (((*_33) as Look).1: util::primitives::StateID),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = _3,
            StorageLive(_43),
            _43 = _38,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:403:25: 403:49 (#0),
                    scope: scope[2],
                },
                kind: _41 = util::look::LookSet::contains(move _42, move _43) -> [return: bb29, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:403:25: 403:49 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _41) -> [0: bb31, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            _40 = const (),
            StorageDead(_41),
            StorageDead(_40),
            StorageLive(_45),
            _45 = _39,
            _27 = move _45,
            StorageDead(_45),
            _23 = const (),
            StorageDead(_39),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:407:17: 407:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            _23 = const (),
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            _46 = &(((*_33) as Union).0: std::boxed::Box<[util::primitives::StateID]>),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &(*(*_46)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:409:32: 409:49 (#0),
                    scope: scope[3],
                },
                kind: _48 = core::slice::<impl [util::primitives::StateID]>::get::<usize>(move _49, const 0_usize) -> [return: bb33, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            PlaceMention(_48),
            _50 = discriminant(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:409:26: 409:49 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _50) -> [0: bb35, 1: bb36, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:409:32: 409:49 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:410:25: 410:29 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb37, imaginary: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            _52 = (*((_48 as Some).0: &util::primitives::StateID)),
            _47 = _52,
            StorageDead(_52),
            _27 = move _47,
            StorageDead(_47),
            StorageDead(_48),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &mut (*_4),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &(*(*_46)),
            StorageLive(_60),
            _60 = core::ops::RangeFrom::<usize> { start: const 1_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:416:44: 416:49 (#0),
                    scope: scope[3],
                },
                kind: _58 = <[util::primitives::StateID] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _59, move _60) -> [return: bb38, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = const (),
            StorageDead(_47),
            StorageDead(_48),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _57 = &(*_58),
            StorageDead(_60),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:416:34: 416:56 (#0),
                    scope: scope[3],
                },
                kind: _56 = core::slice::<impl [util::primitives::StateID]>::iter(move _57) -> [return: bb39, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:416:34: 416:62 (#0),
                    scope: scope[3],
                },
                kind: _55 = <core::slice::Iter<'_, util::primitives::StateID> as core::iter::Iterator>::rev(move _56) -> [return: bb40, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:416:21: 416:63 (#0),
                    scope: scope[3],
                },
                kind: _53 = <std::vec::Vec<util::primitives::StateID> as core::iter::Extend<&util::primitives::StateID>>::extend::<core::iter::Rev<core::slice::Iter<'_, util::primitives::StateID>>>(move _54, move _55) -> [return: bb41, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_58),
            StorageDead(_53),
            _23 = const (),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:417:17: 417:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_61),
            _61 = (((*_33) as BinaryUnion).0: util::primitives::StateID),
            StorageLive(_62),
            _62 = (((*_33) as BinaryUnion).1: util::primitives::StateID),
            StorageLive(_63),
            _63 = _61,
            _27 = move _63,
            StorageDead(_63),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &mut (*_4),
            StorageLive(_66),
            _66 = _62,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:420:21: 420:37 (#0),
                    scope: scope[5],
                },
                kind: _64 = std::vec::Vec::<util::primitives::StateID>::push(move _65, move _66) -> [return: bb43, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            StorageDead(_65),
            StorageDead(_64),
            _23 = const (),
            StorageDead(_62),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:421:17: 421:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:390:9: 426:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:385:5: 427:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_70),
            _0 = const (),
            StorageDead(_70),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:428:2: 428:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:428:2: 428:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:369:1: 428:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:375:2: 375:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:370:10: 370:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:370:5: 370:8 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:370:5: 370:8 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:370:5: 370:8 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:371:19: 371:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:371:5: 371:17 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:371:5: 371:17 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:371:5: 371:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:372:16: 372:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:372:5: 372:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:372:5: 372:14 (#0),
                    },
                ),
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:372:5: 372:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:373:12: 373:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:373:5: 373:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:373:5: 373:10 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:373:5: 373:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:374:10: 374:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:374:5: 374:8 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:374:5: 374:8 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:374:5: 374:8 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:376:5: 376:30 (#1935),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:376:13: 376:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:376:13: 376:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:376:5: 376:30 (#1935),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:376:5: 376:30 (#1935),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:379:5: 382:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:379:9: 379:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:379:9: 379:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:379:9: 379:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:379:9: 379:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:379:19: 379:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:379:46: 382:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:380:9: 380:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:380:9: 380:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:380:20: 380:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:384:5: 384:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:384:5: 384:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:384:16: 384:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:369:1: 428:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:385:5: 427:6 (#5076),
                },
            ),
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:385:30: 385:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:385:5: 427:6 (#5076),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:385:30: 385:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:385:15: 385:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                regex-automata/src/util/determinize/mod.rs:385:30: 385:41 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:385:15: 385:27 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:385:20: 385:26 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:393:13: 395:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:393:17: 393:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:393:17: 393:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:393:28: 393:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:393:32: 395:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:396:13: 425:14 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:396:20: 396:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:396:13: 425:14 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:396:20: 396:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:396:13: 425:14 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:396:30: 396:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:397:17: 397:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:396:13: 425:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:401:52: 401:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_33),
                                ),
                                regex-automata/src/util/determinize/mod.rs:396:19: 396:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:402:17: 402:53 (#0),
                    },
                ),
            ),
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:402:41: 402:45 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_33),
                                ),
                                regex-automata/src/util/determinize/mod.rs:396:19: 396:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:402:17: 402:53 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:402:47: 402:51 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:403:21: 405:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:403:25: 403:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:403:25: 403:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:403:44: 403:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:403:50: 405:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:406:26: 406:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_33),
                                ),
                                regex-automata/src/util/determinize/mod.rs:396:19: 396:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:408:17: 408:58 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<[util::primitives::StateID], std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:408:42: 408:56 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:409:26: 412:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:409:32: 409:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:409:32: 409:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:410:25: 410:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:410:33: 410:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _48,
                                ),
                                regex-automata/src/util/determinize/mod.rs:409:32: 409:49 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:411:25: 411:34 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:411:31: 411:33 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:416:21: 416:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:416:21: 416:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Rev<core::slice::Iter<'{erased}, util::primitives::StateID>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:416:34: 416:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:416:34: 416:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:416:34: 416:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:416:44: 416:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:416:34: 416:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:416:45: 416:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_33),
                                ),
                                regex-automata/src/util/determinize/mod.rs:396:19: 396:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:418:17: 418:60 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:418:48: 418:52 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_33),
                                ),
                                regex-automata/src/util/determinize/mod.rs:396:19: 396:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:418:17: 418:60 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:418:54: 418:58 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:419:26: 419:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:420:21: 420:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:420:21: 420:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:420:32: 420:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_33),
                                ),
                                regex-automata/src/util/determinize/mod.rs:396:19: 396:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:422:17: 422:54 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:422:44: 422:48 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:423:26: 423:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:385:5: 427:6 (#5076),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:385:5: 427:6 (#5076),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:385:5: 427:6 (#5076),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:385:5: 427:6 (#5076),
            scope: scope[0],
        },
    },
]