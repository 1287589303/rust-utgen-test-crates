[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = _2,
            ((*_1).1: util::primitives::StateID) = move _5,
            StorageDead(_5),
            StorageLive(_6),
            _6 = _3,
            ((*_1).2: util::primitives::StateID) = move _6,
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1400:30: 1400:52 (#0),
                    scope: scope[0],
                },
                kind: _7 = std::slice::<impl [util::primitives::StateID]>::to_vec(move _8) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1400:9: 1400:27 (#0),
                    scope: scope[0],
                },
                kind: drop(((*_1).3: std::vec::Vec<util::primitives::StateID>)) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).3: std::vec::Vec<util::primitives::StateID>) = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1400:51: 1400:52 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).3: std::vec::Vec<util::primitives::StateID>) = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1400:51: 1400:52 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1401:6: 1401:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1392:5: 1401:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1397:6: 1397:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::nfa::Inner,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1393:9: 1393:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/nfa.rs:1394:25: 1394:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/nfa.rs:1394:9: 1394:23 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/nfa.rs:1394:9: 1394:23 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1394:9: 1394:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/nfa.rs:1395:27: 1395:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/nfa.rs:1395:9: 1395:25 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/nfa.rs:1395:9: 1395:25 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1395:9: 1395:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/nfa.rs:1396:24: 1396:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/nfa.rs:1396:9: 1396:22 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/nfa.rs:1396:9: 1396:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1396:9: 1396:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1398:31: 1398:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1399:33: 1399:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1400:30: 1400:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1400:30: 1400:43 (#0),
            scope: scope[0],
        },
    },
]