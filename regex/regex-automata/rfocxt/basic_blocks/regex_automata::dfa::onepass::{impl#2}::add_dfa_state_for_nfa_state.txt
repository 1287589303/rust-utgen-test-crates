[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).2: std::vec::Vec<util::primitives::StateID>),
            StorageLive(_6),
            _6 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:845:49: 845:57 (#0),
                    scope: scope[0],
                },
                kind: _4 = <std::vec::Vec<util::primitives::StateID> as core::ops::Index<util::primitives::StateID>>::index(move _5, move _6) -> [return: bb1, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = (*_4),
            StorageDead(_6),
            StorageDead(_5),
            FakeRead(ForLet(None), _3),
            StorageDead(_4),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_3,
            StorageLive(_10),
            StorageLive(_11),
            _11 = const dfa::DEAD,
            _10 = &_11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:846:12: 846:35 (#0),
                    scope: scope[1],
                },
                kind: _8 = <util::primitives::StateID as core::cmp::PartialEq>::ne(move _9, move _10) -> [return: bb2, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:846:12: 846:35 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _8) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_13),
            _13 = _3,
            _0 = core::result::Result::<util::primitives::StateID, dfa::onepass::BuildError>::Ok(move _13),
            StorageDead(_13),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            _7 = const (),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:22: 851:44 (#0),
                    scope: scope[1],
                },
                kind: _16 = dfa::onepass::InternalBuilder::<'_>::add_empty_state(move _17) -> [return: bb5, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:22: 851:45 (#2511),
                    scope: scope[1],
                },
                kind: _15 = <core::result::Result<util::primitives::StateID, dfa::onepass::BuildError> as core::ops::Try>::branch(move _16) -> [return: bb6, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_15),
            _18 = discriminant(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:22: 851:45 (#2511),
                    scope: scope[1],
                },
                kind: switchInt(move _18) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:22: 851:45 (#2511),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:44: 851:45 (#2512),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = ((_15 as Continue).0: util::primitives::StateID),
            _14 = _22,
            StorageDead(_22),
            FakeRead(ForLet(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:45: 851:46 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb12, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = move ((_15 as Break).0: core::result::Result<core::convert::Infallible, dfa::onepass::BuildError>),
            StorageLive(_21),
            _21 = move _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:22: 851:45 (#2511),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<util::primitives::StateID, dfa::onepass::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, dfa::onepass::BuildError>>>::from_residual(move _21) -> [return: bb11, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:44: 851:45 (#2512),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb15, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_23),
            _23 = _14,
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut ((*_1).2: std::vec::Vec<util::primitives::StateID>),
            StorageLive(_26),
            _26 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:852:27: 852:35 (#0),
                    scope: scope[2],
                },
                kind: _24 = <std::vec::Vec<util::primitives::StateID> as core::ops::IndexMut<util::primitives::StateID>>::index_mut(move _25, move _26) -> [return: bb13, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            (*_24) = move _23,
            StorageDead(_23),
            StorageDead(_24),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &mut ((*_1).1: std::vec::Vec<util::primitives::StateID>),
            StorageLive(_29),
            _29 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:853:9: 853:45 (#0),
                    scope: scope[2],
                },
                kind: _27 = std::vec::Vec::<util::primitives::StateID>::push(move _28, move _29) -> [return: bb14, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_30),
            _30 = _14,
            _0 = core::result::Result::<util::primitives::StateID, dfa::onepass::BuildError>::Ok(move _30),
            StorageDead(_30),
            StorageDead(_14),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:855:6: 855:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:45: 851:46 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb16, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:855:6: 855:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:855:6: 855:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:44: 851:45 (#2511),
                    scope: scope[4],
                },
                kind: drop(_21) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:44: 851:45 (#2512),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:45: 851:46 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:851:44: 851:45 (#2511),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:836:5: 855:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::StateID, dfa::onepass::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:839:10: 839:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut dfa::onepass::InternalBuilder<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:837:9: 837:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/onepass.rs:838:17: 838:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/onepass.rs:838:9: 838:15 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:838:9: 838:15 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:838:9: 838:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/onepass.rs:845:31: 845:57 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:845:13: 845:28 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:845:13: 845:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:845:49: 845:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:845:31: 845:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:845:50: 845:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:846:9: 848:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:846:12: 846:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:846:12: 846:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:846:31: 846:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:846:31: 846:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:846:36: 848:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:847:23: 847:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/onepass.rs:851:22: 851:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:851:13: 851:19 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:851:13: 851:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, dfa::onepass::BuildError>, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:851:22: 851:45 (#2511),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::StateID, dfa::onepass::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:851:22: 851:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::onepass::InternalBuilder<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:851:22: 851:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:851:44: 851:45 (#2512),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                regex-automata/src/dfa/onepass.rs:851:22: 851:45 (#2511),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:851:44: 851:45 (#2512),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, dfa::onepass::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:851:44: 851:45 (#2512),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:851:44: 851:45 (#2512),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, dfa::onepass::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:851:44: 851:45 (#2512),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                regex-automata/src/dfa/onepass.rs:851:22: 851:45 (#2511),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:851:22: 851:45 (#2511),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:851:22: 851:45 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:852:38: 852:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:852:27: 852:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:852:9: 852:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:852:28: 852:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:853:9: 853:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:853:9: 853:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:853:38: 853:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:854:12: 854:18 (#0),
            scope: scope[0],
        },
    },
]