[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2345:21: 2345:37 (#0),
                    scope: scope[0],
                },
                kind: _6 = dfa::onepass::DFA::state_len(move _7) -> [return: bb1, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _5 = core::ops::Range::<usize> { start: const 0_usize, end: move _6 },
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
                    scope: scope[0],
                },
                kind: _4 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _5) -> [return: bb2, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            StorageLive(_8),
            _8 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2345:9: 2351:10 (#2576),
                    scope: scope[1],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2345:9: 2351:10 (#2576),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb4, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _8,
            _12 = &mut (*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
                    scope: scope[1],
                },
                kind: _11 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _12) -> [return: bb5, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _14 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
                    scope: scope[1],
                },
                kind: switchInt(move _14) -> [0: bb7, 1: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2345:9: 2351:10 (#2576),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = ((_11 as Some).0: usize),
            StorageLive(_17),
            StorageLive(_18),
            _18 = _16,
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2346:31: 2346:45 (#0),
                    scope: scope[2],
                },
                kind: _19 = dfa::onepass::DFA::stride2(move _20) -> [return: bb10, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            _57 = &((*_1).3: std::vec::Vec<util::primitives::StateID>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2352:21: 2352:38 (#0),
                    scope: scope[0],
                },
                kind: _56 = std::vec::Vec::<util::primitives::StateID>::len(move _57) -> [return: bb28, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            _21 = Lt(_19, const 64_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2346:26: 2346:45 (#0),
                    scope: scope[2],
                },
                kind: assert(move _21, "attempt to shift left by `{}`, which would overflow", _19) -> [success: bb11, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = Shl(move _18, move _19),
            StorageDead(_19),
            StorageDead(_18),
            FakeRead(ForLet(None), _17),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2347:25: 2347:44 (#0),
                    scope: scope[3],
                },
                kind: _24 = dfa::onepass::DFA::alphabet_len(move _25) -> [return: bb12, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            _23 = core::ops::Range::<usize> { start: const 0_usize, end: move _24 },
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
                    scope: scope[3],
                },
                kind: _22 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _23) -> [return: bb13, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            PlaceMention(_22),
            StorageLive(_26),
            _26 = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2347:13: 2350:14 (#2579),
                    scope: scope[4],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2347:13: 2350:14 (#2579),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb15, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &mut _26,
            _29 = &mut (*_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
                    scope: scope[4],
                },
                kind: _28 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _29) -> [return: bb16, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            PlaceMention(_28),
            _31 = discriminant(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
                    scope: scope[4],
                },
                kind: switchInt(move _31) -> [0: bb18, 1: bb19, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2347:13: 2350:14 (#2579),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            _33 = ((_28 as Some).0: usize),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &((*_1).2: std::vec::Vec<dfa::onepass::Transition>),
            StorageLive(_38),
            StorageLive(_39),
            _39 = _17,
            StorageLive(_40),
            _40 = _33,
            _41 = AddWithOverflow(_39, _40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2348:39: 2348:49 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_41.1: bool), "attempt to compute `{} + {}`, which would overflow", move _39, move _40) -> [success: bb21, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = const (),
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_22),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2345:9: 2351:10 (#2576),
                    scope: scope[1],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _38 = move (_41.0: usize),
            StorageDead(_40),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2348:38: 2348:50 (#0),
                    scope: scope[5],
                },
                kind: _36 = <std::vec::Vec<dfa::onepass::Transition> as core::ops::Index<usize>>::index(move _37, move _38) -> [return: bb22, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = &(*_36),
            StorageDead(_38),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2348:28: 2348:61 (#0),
                    scope: scope[5],
                },
                kind: _34 = dfa::onepass::Transition::state_id(move _35) -> [return: bb23, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            FakeRead(ForLet(None), _34),
            StorageDead(_36),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &mut ((*_1).2: std::vec::Vec<dfa::onepass::Transition>),
            StorageLive(_46),
            StorageLive(_47),
            _47 = _17,
            StorageLive(_48),
            _48 = _33,
            _49 = AddWithOverflow(_47, _48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2349:28: 2349:38 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_49.1: bool), "attempt to compute `{} + {}`, which would overflow", move _47, move _48) -> [success: bb24, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _46 = move (_49.0: usize),
            StorageDead(_48),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2349:27: 2349:39 (#0),
                    scope: scope[6],
                },
                kind: _44 = <std::vec::Vec<dfa::onepass::Transition> as core::ops::IndexMut<usize>>::index_mut(move _45, move _46) -> [return: bb25, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = &mut (*_44),
            StorageDead(_46),
            StorageDead(_45),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &_2,
            StorageLive(_52),
            StorageLive(_53),
            _53 = _34,
            _52 = (move _53,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2349:53: 2349:62 (#0),
                    scope: scope[6],
                },
                kind: _50 = <impl Fn(StateID) -> StateID as core::ops::Fn<(util::primitives::StateID,)>>::call(move _51, move _52) -> [return: bb26, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_52),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2349:17: 2349:63 (#0),
                    scope: scope[6],
                },
                kind: _42 = dfa::onepass::Transition::set_state_id(move _43, move _50) -> [return: bb27, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_43),
            StorageDead(_44),
            StorageDead(_42),
            _27 = const (),
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_27),
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2347:13: 2350:14 (#2579),
                    scope: scope[4],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            _55 = core::ops::Range::<usize> { start: const 0_usize, end: move _56 },
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
                    scope: scope[0],
                },
                kind: _54 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _55) -> [return: bb29, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            PlaceMention(_54),
            StorageLive(_58),
            _58 = move _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2352:9: 2354:10 (#2582),
                    scope: scope[7],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2352:9: 2354:10 (#2582),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb31, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = &mut _58,
            _61 = &mut (*_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
                    scope: scope[7],
                },
                kind: _60 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _61) -> [return: bb32, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            PlaceMention(_60),
            _63 = discriminant(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
                    scope: scope[7],
                },
                kind: switchInt(move _63) -> [0: bb34, 1: bb35, otherwise: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2352:9: 2354:10 (#2582),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb36, imaginary: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            _65 = ((_60 as Some).0: usize),
            StorageLive(_66),
            StorageLive(_67),
            _67 = &_2,
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            _71 = &((*_1).3: std::vec::Vec<util::primitives::StateID>),
            StorageLive(_72),
            _72 = _65,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2353:45: 2353:48 (#0),
                    scope: scope[8],
                },
                kind: _70 = <std::vec::Vec<util::primitives::StateID> as core::ops::Index<usize>>::index(move _71, move _72) -> [return: bb37, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_62),
            StorageDead(_60),
            StorageDead(_59),
            StorageDead(_58),
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2355:5: 2355:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb40, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _69 = (*_70),
            StorageDead(_72),
            StorageDead(_71),
            _68 = (move _69,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2353:30: 2353:49 (#0),
                    scope: scope[8],
                },
                kind: _66 = <impl Fn(StateID) -> StateID as core::ops::Fn<(util::primitives::StateID,)>>::call(move _67, move _68) -> [return: bb38, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageDead(_68),
            StorageDead(_67),
            StorageLive(_73),
            StorageLive(_74),
            _74 = &mut ((*_1).3: std::vec::Vec<util::primitives::StateID>),
            StorageLive(_75),
            _75 = _65,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2353:24: 2353:27 (#0),
                    scope: scope[8],
                },
                kind: _73 = <std::vec::Vec<util::primitives::StateID> as core::ops::IndexMut<usize>>::index_mut(move _74, move _75) -> [return: bb39, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_74),
            (*_73) = move _66,
            StorageDead(_66),
            StorageDead(_73),
            StorageDead(_70),
            _59 = const (),
            StorageDead(_65),
            StorageDead(_62),
            StorageDead(_60),
            StorageDead(_59),
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2352:9: 2354:10 (#2582),
                    scope: scope[7],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2355:6: 2355:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2355:5: 2355:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2344:5: 2355:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2344:69: 2344:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut dfa::onepass::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2344:25: 2344:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/onepass.rs:2344:41: 2344:68 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/onepass.rs:2344:36: 2344:39 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:2344:36: 2344:39 (#0),
                    },
                ),
            ),
        ),
        ty: impl Fn(StateID) -> StateID/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2344:36: 2344:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:9: 2351:10 (#2576),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:21: 2345:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::onepass::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:21: 2345:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2344:5: 2355:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:9: 2351:10 (#2576),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:9: 2351:10 (#2576),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                regex-automata/src/dfa/onepass.rs:2345:18: 2345:37 (#2577),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:2345:13: 2345:14 (#2578),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2345:13: 2345:14 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/onepass.rs:2346:26: 2346:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:2346:17: 2346:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2346:17: 2346:23 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2346:26: 2346:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2346:31: 2346:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::onepass::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2346:31: 2346:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2346:26: 2346:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/onepass.rs:2347:13: 2350:14 (#2579),
                },
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/onepass.rs:2347:13: 2350:14 (#2579),
                },
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2347:25: 2347:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/onepass.rs:2347:13: 2350:14 (#2579),
                },
            ),
        ),
        ty: &'{erased} dfa::onepass::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2347:25: 2347:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _22,
                                ),
                                regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2347:13: 2350:14 (#2579),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2347:13: 2350:14 (#2579),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _28,
                                ),
                                regex-automata/src/dfa/onepass.rs:2347:22: 2347:44 (#2580),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:2347:17: 2347:18 (#2581),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2347:17: 2347:18 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/onepass.rs:2348:28: 2348:61 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:2348:21: 2348:25 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2348:21: 2348:25 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::onepass::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2348:28: 2348:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::onepass::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2348:38: 2348:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<dfa::onepass::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2348:28: 2348:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2348:39: 2348:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2348:39: 2348:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2348:48: 2348:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2348:39: 2348:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2349:17: 2349:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::onepass::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2349:17: 2349:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::onepass::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2349:27: 2349:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::onepass::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2349:17: 2349:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2349:28: 2349:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2349:28: 2349:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2349:37: 2349:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2349:28: 2349:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2349:53: 2349:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} impl Fn(StateID) -> StateID/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2349:53: 2349:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2349:53: 2349:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2349:57: 2349:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/onepass.rs:2352:9: 2354:10 (#2582),
                },
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/onepass.rs:2352:9: 2354:10 (#2582),
                },
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2352:21: 2352:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/onepass.rs:2352:9: 2354:10 (#2582),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2352:21: 2352:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _54,
                                ),
                                regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2352:9: 2354:10 (#2582),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2352:9: 2354:10 (#2582),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _60,
                                ),
                                regex-automata/src/dfa/onepass.rs:2352:18: 2352:38 (#2583),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:2352:13: 2352:14 (#2584),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2352:13: 2352:14 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2353:30: 2353:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} impl Fn(StateID) -> StateID/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2353:30: 2353:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2353:30: 2353:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2353:34: 2353:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2353:45: 2353:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2353:34: 2353:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2353:46: 2353:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2353:24: 2353:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2353:13: 2353:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2353:25: 2353:26 (#0),
            scope: scope[0],
        },
    },
]