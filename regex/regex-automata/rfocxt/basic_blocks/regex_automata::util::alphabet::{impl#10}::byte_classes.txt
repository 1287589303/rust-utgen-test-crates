[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:723:27: 723:47 (#0),
                    scope: scope[0],
                },
                kind: _2 = util::alphabet::ByteClasses::empty() -> [return: bb1, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            _3 = const 0_u8,
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            _4 = const 0_u8,
            FakeRead(ForLet(None), _4),
            StorageLive(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:726:9: 735:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:726:9: 735:10 (#0),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _2,
            StorageLive(_9),
            _9 = _4,
            StorageLive(_10),
            _10 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:727:13: 727:34 (#0),
                    scope: scope[3],
                },
                kind: _7 = util::alphabet::ByteClasses::set(move _8, move _9, move _10) -> [return: bb4, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _4,
            _12 = Eq(move _13, const u8::MAX),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:728:16: 728:24 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _12) -> [0: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _5 = const (),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_5),
            _0 = _2,
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:737:6: 737:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _11 = const (),
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &((*_1).0: util::alphabet::ByteSet),
            StorageLive(_18),
            _18 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:731:16: 731:34 (#0),
                    scope: scope[3],
                },
                kind: _16 = util::alphabet::ByteSet::contains(move _17, move _18) -> [return: bb7, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:731:16: 731:34 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _16) -> [0: bb11, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:732:25: 732:45 (#0),
                    scope: scope[3],
                },
                kind: _20 = core::num::<impl u8>::checked_add(move _21, const 1_u8) -> [return: bb9, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:732:25: 732:54 (#0),
                    scope: scope[3],
                },
                kind: _19 = core::option::Option::<u8>::unwrap(move _20) -> [return: bb10, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            _3 = move _19,
            StorageDead(_19),
            _15 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:731:13: 733:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            _15 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:731:13: 733:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:734:17: 734:33 (#0),
                    scope: scope[3],
                },
                kind: _23 = core::num::<impl u8>::checked_add(move _24, const 1_u8) -> [return: bb13, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:734:17: 734:42 (#0),
                    scope: scope[3],
                },
                kind: _22 = core::option::Option::<u8>::unwrap(move _23) -> [return: bb14, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            _4 = move _22,
            StorageDead(_22),
            _6 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:726:9: 735:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:722:5: 737:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::ByteClasses,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:722:42: 722:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::alphabet::ByteClassSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:722:32: 722:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/alphabet.rs:723:27: 723:47 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:723:13: 723:24 (#0),
                    },
                ),
            ),
        ),
        ty: util::alphabet::ByteClasses,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:723:13: 723:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/alphabet.rs:724:25: 724:28 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:724:13: 724:22 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:724:13: 724:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/alphabet.rs:725:21: 725:24 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:725:13: 725:18 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:725:13: 725:18 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:726:9: 735:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:722:5: 737:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:727:13: 727:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::alphabet::ByteClasses,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:727:13: 727:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:727:25: 727:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:727:28: 727:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:728:13: 730:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:728:16: 728:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:728:16: 728:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:728:25: 730:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:731:13: 733:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:731:16: 731:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::alphabet::ByteSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:731:16: 731:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:731:32: 731:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:732:25: 732:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:732:25: 732:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:732:25: 732:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:734:17: 734:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:734:17: 734:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:734:17: 734:18 (#0),
            scope: scope[0],
        },
    },
]