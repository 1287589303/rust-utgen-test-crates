[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_2),
            StorageLive(_5),
            StorageLive(_6),
            _6 = const "Captures",
            _5 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1206:27: 1206:53 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::fmt::Formatter::<'_>::debug_struct(move _4, move _5) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _3,
            StorageLive(_9),
            StorageLive(_10),
            _10 = const "pid",
            _9 = &(*_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_1).1: core::option::Option<util::primitives::PatternID>),
            _12 = &(*_13),
            _11 = move _12 as &dyn core::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1207:9: 1207:40 (#0),
                    scope: scope[1],
                },
                kind: _7 = core::fmt::DebugStruct::<'_, '_>::field(move _8, move _9, move _11) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_7),
            StorageLive(_14),
            PlaceMention(((*_1).1: core::option::Option<util::primitives::PatternID>)),
            _15 = discriminant(((*_1).1: core::option::Option<util::primitives::PatternID>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1208:16: 1208:25 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _15) -> [1: bb3, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1208:16: 1208:25 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = ((((*_1).1: core::option::Option<util::primitives::PatternID>) as Some).0: util::primitives::PatternID),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut _3,
            StorageLive(_19),
            StorageLive(_20),
            _20 = const "spans",
            _19 = &(*_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = _16,
            StorageLive(_26),
            _26 = &(*_1),
            _24 = util::captures::CapturesDebugMap::<'_> { pid: move _25, caps: move _26 },
            StorageDead(_26),
            StorageDead(_25),
            _23 = &_24,
            _22 = &(*_23),
            _21 = move _22 as &dyn core::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1209:13: 1209:74 (#0),
                    scope: scope[2],
                },
                kind: _17 = core::fmt::DebugStruct::<'_, '_>::field(move _18, move _19, move _21) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_17),
            _14 = const (),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1208:9: 1210:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1208:9: 1210:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_27),
            _27 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1211:9: 1211:25 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::fmt::DebugStruct::<'_, '_>::finish(move _27) -> [return: bb8, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1212:6: 1212:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1205:5: 1212:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1205:52: 1205:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1205:12: 1205:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/captures.rs:1205:22: 1205:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:1205:19: 1205:20 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:1205:19: 1205:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1205:19: 1205:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:1206:27: 1206:53 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:1206:13: 1206:24 (#0),
                    },
                ),
            ),
        ),
        ty: core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1206:13: 1206:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1206:27: 1206:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1206:42: 1206:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1206:42: 1206:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1207:9: 1207:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1207:9: 1207:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1207:23: 1207:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1207:23: 1207:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1207:30: 1207:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1207:30: 1207:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1207:30: 1207:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1208:9: 1210:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1208:16: 1208:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).1: core::option::Option<util::primitives::PatternID>),
                                ),
                                regex-automata/src/util/captures.rs:1208:28: 1208:36 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:1208:16: 1208:25 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1208:21: 1208:24 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1209:13: 1209:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1209:13: 1209:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1209:27: 1209:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1209:27: 1209:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1209:36: 1209:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::CapturesDebugMap<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1209:36: 1209:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::CapturesDebugMap<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1209:36: 1209:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: util::captures::CapturesDebugMap<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1209:37: 1209:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1209:56: 1209:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1209:67: 1209:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1211:9: 1211:25 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1211:9: 1211:16 (#0),
            scope: scope[0],
        },
    },
]