[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*((*_1).1: std::boxed::Box<[bool]>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1322:30: 1322:47 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::slice::<impl [bool]>::iter(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1322:30: 1322:59 (#0),
                    scope: scope[0],
                },
                kind: _2 = <core::slice::Iter<'_, bool> as core::iter::Iterator>::enumerate(move _3) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = util::search::PatternSetIter::<'_> { it: move _2 },
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1323:6: 1323:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1321:5: 1323:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::search::PatternSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1321:27: 1321:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::search::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1321:17: 1321:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::iter::Enumerate<core::slice::Iter<'{erased}, bool>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1322:30: 1322:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/search.rs:1322:9: 1322:61 (#0),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1322:30: 1322:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/search.rs:1322:9: 1322:61 (#0),
                },
            ),
        ),
        ty: &'{erased} [bool],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1322:30: 1322:40 (#0),
            scope: scope[0],
        },
    },
]