[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: std::sync::Arc<meta::regex::RegexInfoI>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:1944:10: 1944:28 (#0),
                    scope: scope[0],
                },
                kind: _3 = <std::sync::Arc<meta::regex::RegexInfoI> as core::ops::Deref>::deref(move _4) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = &((*_3).2: regex_syntax::hir::Properties),
            _0 = &(*_2),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:1945:6: 1945:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:1943:5: 1945:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_syntax::hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1943:41: 1943:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1943:31: 1943:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:1944:9: 1944:28 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1944:9: 1944:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:1944:9: 1944:28 (#0),
                },
            ),
        ),
        ty: &'{erased} meta::regex::RegexInfoI,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1944:10: 1944:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:1944:9: 1944:28 (#0),
                },
            ),
        ),
        ty: &'{erased} std::sync::Arc<meta::regex::RegexInfoI, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1944:10: 1944:16 (#0),
            scope: scope[0],
        },
    },
]