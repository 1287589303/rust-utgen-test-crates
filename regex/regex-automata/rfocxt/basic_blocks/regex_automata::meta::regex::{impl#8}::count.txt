[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            StorageLive(_2),
            _2 = (_1.0: &meta::regex::Regex),
            StorageLive(_3),
            _3 = move (_1.1: util::pool::PoolGuard<'_, meta::regex::Cache, std::boxed::Box<dyn core::ops::Fn() -> meta::regex::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>),
            StorageLive(_4),
            _4 = move (_1.2: util::iter::Searcher<'_>),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2090:26: 2090:32 (#0),
                    scope: scope[1],
                },
                kind: _6 = <util::pool::PoolGuard<'_, meta::regex::Cache, std::boxed::Box<dyn core::ops::Fn() -> meta::regex::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>> as core::ops::DerefMut>::deref_mut(move _7) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _5 = &mut (*_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_8),
            StorageLive(_9),
            _9 = move _4,
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_2),
            StorageLive(_12),
            _12 = &mut (*_5),
            _10 = {closure@regex-automata/src/meta/regex.rs:2092:13: 2092:20} { re: move _11, cache: move _12 },
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2091:9: 2093:10 (#0),
                    scope: scope[2],
                },
                kind: _8 = util::iter::Searcher::<'_>::into_half_matches_iter::<{closure@regex-automata/src/meta/regex.rs:2092:13: 2092:20}>(move _9, move _10) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2091:9: 2094:17 (#0),
                    scope: scope[2],
                },
                kind: _0 = <util::iter::TryHalfMatchesIter<'_, {closure@regex-automata/src/meta/regex.rs:2092:13: 2092:20}> as core::iter::Iterator>::count(move _8) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2095:5: 2095:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2095:5: 2095:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2095:6: 2095:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2095:5: 2095:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2095:5: 2095:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:2083:5: 2095:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2083:23: 2083:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: meta::regex::FindMatches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2083:14: 2083:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                regex-automata/src/meta/regex.rs:2088:49: 2088:53 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:2088:13: 2088:46 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} meta::regex::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2088:27: 2088:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                regex-automata/src/meta/regex.rs:2088:49: 2088:53 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:2088:13: 2088:46 (#0),
                    },
                ),
            ),
        ),
        ty: util::pool::PoolGuard<'{erased}, meta::regex::Cache, std::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = meta::regex::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2088:31: 2088:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                regex-automata/src/meta/regex.rs:2088:49: 2088:53 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:2088:13: 2088:46 (#0),
                    },
                ),
            ),
        ),
        ty: util::iter::Searcher<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2088:42: 2088:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:2090:21: 2090:32 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:2090:13: 2090:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2090:13: 2090:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2090:26: 2090:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::pool::PoolGuard<'{erased}, meta::regex::Cache, std::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = meta::regex::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2090:27: 2090:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:2091:9: 2094:17 (#0),
                },
            ),
        ),
        ty: util::iter::TryHalfMatchesIter<'{erased}, Closure(DefId(0:1858 ~ regex_automata[00dd]::meta::regex::{impl#8}::count::{closure#0}), ['{erased}, '{erased}, i16, Binder { value: extern "RustCall" fn((&'^0 util::search::Input<'^1>,)) -> core::result::Result<core::option::Option<util::search::HalfMatch>, util::search::MatchError>, bound_vars: [Region(BrAnon), Region(BrAnon)] }, (&'{erased} meta::regex::Regex, &'{erased} mut meta::regex::Cache)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2091:9: 2093:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:2091:9: 2094:17 (#0),
                },
            ),
        ),
        ty: util::iter::Searcher<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2091:9: 2091:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:2091:9: 2094:17 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1858 ~ regex_automata[00dd]::meta::regex::{impl#8}::count::{closure#0}),
            [
                '{erased},
                '{erased},
                i16,
                Binder { value: extern "RustCall" fn((&'^0 util::search::Input<'^1>,)) -> core::result::Result<core::option::Option<util::search::HalfMatch>, util::search::MatchError>, bound_vars: [Region(BrAnon), Region(BrAnon)] },
                (&'{erased} meta::regex::Regex, &'{erased} mut meta::regex::Cache),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2092:13: 2092:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:2091:9: 2094:17 (#0),
                },
            ),
        ),
        ty: &'{erased} meta::regex::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2092:13: 2092:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:2092:13: 2092:58 (#0),
            scope: scope[0],
        },
    },
]