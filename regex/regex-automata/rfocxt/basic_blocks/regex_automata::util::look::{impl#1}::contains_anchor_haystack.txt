[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = (*_1),
            StorageLive(_4),
            _4 = util::look::Look::Start,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:313:9: 313:35 (#0),
                    scope: scope[0],
                },
                kind: _2 = util::look::LookSet::contains(move _3, move _4) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:313:9: 313:35 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            _0 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:313:9: 313:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_5),
            _5 = (*_1),
            StorageLive(_6),
            _6 = util::look::Look::End,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:313:39: 313:63 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookSet::contains(move _5, move _6) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:313:9: 313:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:314:6: 314:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:312:5: 314:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:312:47: 312:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:312:37: 312:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:313:9: 313:63 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:313:9: 313:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:313:9: 313:63 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:313:9: 313:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:313:9: 313:63 (#0),
                },
            ),
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:313:23: 313:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:313:9: 313:63 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:313:39: 313:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:313:9: 313:63 (#0),
                },
            ),
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:313:53: 313:62 (#0),
            scope: scope[0],
        },
    },
]