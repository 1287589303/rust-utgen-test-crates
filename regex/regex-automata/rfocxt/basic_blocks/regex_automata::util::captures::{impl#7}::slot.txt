[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = _3,
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_1),
            StorageLive(_9),
            _9 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1905:27: 1905:46 (#0),
                    scope: scope[0],
                },
                kind: _7 = util::captures::GroupInfo::group_len(move _8, move _9) -> [return: bb1, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            _5 = Ge(move _6, move _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1905:12: 1905:46 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            _0 = core::option::Option::<usize>::None,
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1921:6: 1921:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            _4 = const (),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_11),
            StorageLive(_12),
            _12 = _3,
            _11 = Eq(move _12, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1912:12: 1912:28 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1913:18: 1913:32 (#0),
                    scope: scope[0],
                },
                kind: _14 = util::primitives::PatternID::as_usize(move _15) -> [return: bb6, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &((*_1).0: std::sync::Arc<util::captures::GroupInfoInner>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1918:30: 1918:48 (#0),
                    scope: scope[0],
                },
                kind: _20 = <std::sync::Arc<util::captures::GroupInfoInner> as core::ops::Deref>::deref(move _21) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _16 = MulWithOverflow(_14, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1913:18: 1913:36 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_16.1: bool), "attempt to compute `{} * {}`, which would overflow", move _14, const 2_usize) -> [success: bb7, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = move (_16.0: usize),
            StorageDead(_14),
            _0 = core::option::Option::<usize>::Some(move _13),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1912:9: 1920:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _19 = &((*_20).0: std::vec::Vec<(util::primitives::SmallIndex, util::primitives::SmallIndex)>),
            StorageLive(_22),
            _22 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1918:48: 1918:53 (#0),
                    scope: scope[0],
                },
                kind: _18 = <std::vec::Vec<(util::primitives::SmallIndex, util::primitives::SmallIndex)> as core::ops::Index<util::primitives::PatternID>>::index(move _19, move _22) -> [return: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_19),
            PlaceMention((*_18)),
            StorageLive(_17),
            _17 = ((*_18).0: util::primitives::SmallIndex),
            StorageDead(_20),
            StorageDead(_18),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &_17,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1919:18: 1919:34 (#0),
                    scope: scope[1],
                },
                kind: _24 = util::primitives::SmallIndex::as_usize(move _25) -> [return: bb10, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = _3,
            _29 = SubWithOverflow(_28, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1919:38: 1919:55 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_29.1: bool), "attempt to compute `{} - {}`, which would overflow", move _28, const 1_usize) -> [success: bb11, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = move (_29.0: usize),
            StorageDead(_28),
            _30 = MulWithOverflow(_27, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1919:37: 1919:60 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_30.1: bool), "attempt to compute `{} * {}`, which would overflow", move _27, const 2_usize) -> [success: bb12, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = move (_30.0: usize),
            StorageDead(_27),
            _31 = AddWithOverflow(_24, _26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1919:18: 1919:60 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", move _24, move _26) -> [success: bb13, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = move (_31.0: usize),
            StorageDead(_26),
            StorageDead(_24),
            _0 = core::option::Option::<usize>::Some(move _23),
            StorageDead(_23),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1912:9: 1920:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1921:6: 1921:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1921:6: 1921:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:1904:5: 1921:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1904:63: 1904:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1904:17: 1904:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/captures.rs:1904:29: 1904:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:1904:24: 1904:27 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:1904:24: 1904:27 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1904:24: 1904:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/captures.rs:1904:53: 1904:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:1904:40: 1904:51 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:1904:40: 1904:51 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1904:40: 1904:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1905:9: 1907:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1905:12: 1905:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1905:12: 1905:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1905:27: 1905:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1905:27: 1905:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1905:42: 1905:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1905:47: 1907:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1912:9: 1920:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1912:12: 1912:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1912:9: 1920:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1912:12: 1912:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1913:18: 1913:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1913:13: 1913:37 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1913:18: 1913:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1913:13: 1913:37 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1913:18: 1913:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1913:18: 1913:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_18),
                                ),
                                regex-automata/src/util/captures.rs:1918:30: 1918:53 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:1918:17: 1918:27 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1918:18: 1918:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} (util::primitives::SmallIndex, util::primitives::SmallIndex),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1918:48: 1918:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<(util::primitives::SmallIndex, util::primitives::SmallIndex), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1918:30: 1918:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::GroupInfoInner,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1918:30: 1918:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::Arc<util::captures::GroupInfoInner, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1918:30: 1918:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1918:49: 1918:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1919:18: 1919:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1919:13: 1919:61 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1919:18: 1919:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1919:13: 1919:61 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1919:18: 1919:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1919:13: 1919:61 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1919:37: 1919:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1919:13: 1919:61 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1919:38: 1919:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:1919:13: 1919:61 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1919:39: 1919:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1919:38: 1919:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1919:37: 1919:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:1919:18: 1919:60 (#0),
            scope: scope[0],
        },
    },
]