[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: core::option::Option<meta::wrappers::ReverseHybridEngine>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:1193:32: 1193:50 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::option::Option::<meta::wrappers::ReverseHybridEngine>::as_ref(move _4) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_5),
            _5 = {closure@regex-automata/src/meta/wrappers.rs:1193:55: 1193:58},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:1193:32: 1193:78 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::option::Option::<&meta::wrappers::ReverseHybridEngine>::map::<hybrid::dfa::Cache, {closure@regex-automata/src/meta/wrappers.rs:1193:55: 1193:58}>(move _3, move _5) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
            _0 = meta::wrappers::ReverseHybridCache(move _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:1193:78: 1193:79 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:1199:6: 1199:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:1190:5: 1199:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::wrappers::ReverseHybridCache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:1190:51: 1190:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/wrappers.rs:1190:32: 1190:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:1190:23: 1190:30 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:1190:23: 1190:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} meta::wrappers::ReverseHybrid,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:1190:23: 1190:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<hybrid::dfa::Cache>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:1193:32: 1193:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/wrappers.rs:1193:13: 1193:79 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} meta::wrappers::ReverseHybridEngine>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:1193:32: 1193:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/wrappers.rs:1193:13: 1193:79 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<meta::wrappers::ReverseHybridEngine>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:1193:32: 1193:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/wrappers.rs:1193:13: 1193:79 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2281 ~ regex_automata[00dd]::meta::wrappers::{impl#16}::new::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} meta::wrappers::ReverseHybridEngine,)) -> hybrid::dfa::Cache, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:1193:55: 1193:77 (#0),
            scope: scope[0],
        },
    },
]