[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &_2,
            StorageLive(_5),
            StorageLive(_6),
            _6 = ((*_1).0: util::primitives::StateID),
            _5 = (move _6,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:204:18: 204:31 (#0),
                    scope: scope[0],
                },
                kind: _3 = <impl Fn(StateID) -> StateID as core::ops::Fn<(util::primitives::StateID,)>>::call(move _4, move _5) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &_2,
            StorageLive(_9),
            StorageLive(_10),
            _10 = ((*_1).1: util::primitives::StateID),
            _9 = (move _10,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:205:22: 205:39 (#0),
                    scope: scope[0],
                },
                kind: _7 = <impl Fn(StateID) -> StateID as core::ops::Fn<(util::primitives::StateID,)>>::call(move _8, move _9) -> [return: bb2, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &_2,
            StorageLive(_13),
            StorageLive(_14),
            _14 = ((*_1).2: util::primitives::StateID),
            _13 = (move _14,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:206:24: 206:43 (#0),
                    scope: scope[0],
                },
                kind: _11 = <impl Fn(StateID) -> StateID as core::ops::Fn<(util::primitives::StateID,)>>::call(move _12, move _13) -> [return: bb3, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &_2,
            StorageLive(_17),
            StorageLive(_18),
            _18 = ((*_1).3: util::primitives::StateID),
            _17 = (move _18,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:207:24: 207:43 (#0),
                    scope: scope[0],
                },
                kind: _15 = <impl Fn(StateID) -> StateID as core::ops::Fn<(util::primitives::StateID,)>>::call(move _16, move _17) -> [return: bb4, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &_2,
            StorageLive(_21),
            StorageLive(_22),
            _22 = ((*_1).4: util::primitives::StateID),
            _21 = (move _22,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:208:24: 208:43 (#0),
                    scope: scope[0],
                },
                kind: _19 = <impl Fn(StateID) -> StateID as core::ops::Fn<(util::primitives::StateID,)>>::call(move _20, move _21) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_2,
            StorageLive(_25),
            StorageLive(_26),
            _26 = ((*_1).5: util::primitives::StateID),
            _25 = (move _26,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:209:24: 209:43 (#0),
                    scope: scope[0],
                },
                kind: _23 = <impl Fn(StateID) -> StateID as core::ops::Fn<(util::primitives::StateID,)>>::call(move _24, move _25) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &_2,
            StorageLive(_29),
            StorageLive(_30),
            _30 = ((*_1).6: util::primitives::StateID),
            _29 = (move _30,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:210:24: 210:43 (#0),
                    scope: scope[0],
                },
                kind: _27 = <impl Fn(StateID) -> StateID as core::ops::Fn<(util::primitives::StateID,)>>::call(move _28, move _29) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &_2,
            StorageLive(_33),
            StorageLive(_34),
            _34 = ((*_1).7: util::primitives::StateID),
            _33 = (move _34,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:211:24: 211:43 (#0),
                    scope: scope[0],
                },
                kind: _31 = <impl Fn(StateID) -> StateID as core::ops::Fn<(util::primitives::StateID,)>>::call(move _32, move _33) -> [return: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_32),
            _0 = dfa::special::Special { max: move _3, quit_id: move _7, min_match: move _11, max_match: move _15, min_accel: move _19, max_accel: move _23, min_start: move _27, max_start: move _31 },
            StorageDead(_31),
            StorageDead(_27),
            StorageDead(_23),
            StorageDead(_19),
            StorageDead(_15),
            StorageDead(_11),
            StorageDead(_7),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:213:5: 213:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:213:6: 213:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:213:5: 213:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/special.rs:202:5: 213:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:202:69: 202:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:202:25: 202:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/special.rs:202:37: 202:64 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/special.rs:202:32: 202:35 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/special.rs:202:32: 202:35 (#0),
                    },
                ),
            ),
        ),
        ty: impl Fn(StateID) -> StateID/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:202:32: 202:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:204:18: 204:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: &'{erased} impl Fn(StateID) -> StateID/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:204:18: 204:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:204:18: 204:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:204:22: 204:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:205:22: 205:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: &'{erased} impl Fn(StateID) -> StateID/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:205:22: 205:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:205:22: 205:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:205:26: 205:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:206:24: 206:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: &'{erased} impl Fn(StateID) -> StateID/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:206:24: 206:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:206:24: 206:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:206:28: 206:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:207:24: 207:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: &'{erased} impl Fn(StateID) -> StateID/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:207:24: 207:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:207:24: 207:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:207:28: 207:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:208:24: 208:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: &'{erased} impl Fn(StateID) -> StateID/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:208:24: 208:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:208:24: 208:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:208:28: 208:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:209:24: 209:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: &'{erased} impl Fn(StateID) -> StateID/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:209:24: 209:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:209:24: 209:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:209:28: 209:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:210:24: 210:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: &'{erased} impl Fn(StateID) -> StateID/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:210:24: 210:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:210:24: 210:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:210:28: 210:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:211:24: 211:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: &'{erased} impl Fn(StateID) -> StateID/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:211:24: 211:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:211:24: 211:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/special.rs:203:9: 212:10 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/special.rs:211:28: 211:42 (#0),
            scope: scope[0],
        },
    },
]