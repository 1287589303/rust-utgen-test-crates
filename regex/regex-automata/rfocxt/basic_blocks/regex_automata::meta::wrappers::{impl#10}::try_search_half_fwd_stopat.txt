[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: hybrid::regex::Regex),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:687:23: 687:39 (#0),
                    scope: scope[0],
                },
                kind: _4 = hybrid::regex::Regex::forward(move _5) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut ((*_2).0: core::option::Option<hybrid::regex::Cache>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:688:29: 688:45 (#0),
                    scope: scope[1],
                },
                kind: _10 = core::option::Option::<hybrid::regex::Cache>::as_mut(move _11) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:688:29: 688:54 (#0),
                    scope: scope[1],
                },
                kind: _9 = core::option::Option::<&mut hybrid::regex::Cache>::unwrap(move _10) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut (*_9),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:688:29: 688:69 (#0),
                    scope: scope[1],
                },
                kind: _7 = hybrid::regex::Cache::as_parts_mut(move _8) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _6 = move (_7.0: &mut hybrid::dfa::Cache),
            FakeRead(ForLet(None), _6),
            StorageDead(_9),
            StorageDead(_7),
            StorageLive(_12),
            _12 = &(*_4),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut _6,
            _13 = &mut (*(*_14)),
            StorageLive(_15),
            _15 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:689:13: 691:14 (#0),
                    scope: scope[2],
                },
                kind: _0 = meta::stopat::hybrid_try_search_half_fwd(move _12, move _13, move _15) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:699:6: 699:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:680:5: 699:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::result::Result<util::search::HalfMatch, usize>, meta::error::RetryFailError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:684:10: 684:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} meta::wrappers::HybridEngine,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:681:9: 681:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/wrappers.rs:682:16: 682:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:682:9: 682:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:682:9: 682:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut meta::wrappers::HybridCache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:682:9: 682:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/wrappers.rs:683:16: 683:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:683:9: 683:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:683:9: 683:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:683:9: 683:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:687:23: 687:39 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:687:17: 687:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:687:17: 687:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::regex::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:687:23: 687:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:688:29: 688:71 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:688:17: 688:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:688:17: 688:26 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut hybrid::dfa::Cache, &'{erased} mut hybrid::dfa::Cache),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:688:29: 688:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:688:29: 688:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:688:29: 688:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut hybrid::regex::Cache>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:688:29: 688:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::option::Option<hybrid::regex::Cache>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:688:29: 688:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/wrappers.rs:689:13: 691:14 (#0),
                },
            ),
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:690:17: 690:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/wrappers.rs:689:13: 691:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:690:22: 690:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/wrappers.rs:689:13: 691:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:690:22: 690:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/wrappers.rs:689:13: 691:14 (#0),
                },
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:690:34: 690:39 (#0),
            scope: scope[0],
        },
    },
]