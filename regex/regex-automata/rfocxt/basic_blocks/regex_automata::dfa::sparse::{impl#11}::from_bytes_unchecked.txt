[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1857:27: 1857:41 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::slice::<impl [u8]>::as_ptr(move _4) -> [return: bb1, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1857:27: 1857:52 (#0),
                    scope: scope[0],
                },
                kind: _2 = <*const u8 as util::int::Pointer>::as_usize(move _3) -> [return: bb2, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1859:26: 1859:54 (#0),
                    scope: scope[1],
                },
                kind: _9 = dfa::start::StartKind::from_bytes(move _10) -> [return: bb3, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1859:26: 1859:55 (#2909),
                    scope: scope[1],
                },
                kind: _8 = <core::result::Result<(dfa::start::StartKind, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _9) -> [return: bb4, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            _11 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1859:26: 1859:55 (#2909),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb7, 1: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1859:26: 1859:55 (#2909),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1859:54: 1859:55 (#2910),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = ((_8 as Continue).0: (dfa::start::StartKind, usize)),
            _7 = _15,
            StorageDead(_15),
            PlaceMention(_7),
            StorageLive(_5),
            _5 = (_7.0: dfa::start::StartKind),
            StorageLive(_6),
            _6 = (_7.1: usize),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_1),
            StorageLive(_20),
            StorageLive(_21),
            _21 = _6,
            _20 = core::ops::RangeFrom::<usize> { start: move _21 },
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1860:23: 1860:29 (#0),
                    scope: scope[2],
                },
                kind: _18 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _19, move _20) -> [return: bb10, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_8 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_14),
            _14 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1859:26: 1859:55 (#2909),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _14) -> [return: bb9, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb136,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            _17 = &(*_18),
            _16 = &(*_17),
            _1 = move _16,
            StorageDead(_16),
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1862:31: 1862:62 (#0),
                    scope: scope[2],
                },
                kind: _26 = util::start::StartByteMap::from_bytes(move _27) -> [return: bb11, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1862:31: 1862:63 (#2911),
                    scope: scope[2],
                },
                kind: _25 = <core::result::Result<(util::start::StartByteMap, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _26) -> [return: bb12, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
            _28 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1862:31: 1862:63 (#2911),
                    scope: scope[2],
                },
                kind: switchInt(move _28) -> [0: bb15, 1: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1862:31: 1862:63 (#2911),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1862:62: 1862:63 (#2912),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            _32 = move ((_25 as Continue).0: (util::start::StartByteMap, usize)),
            _24 = move _32,
            StorageDead(_32),
            PlaceMention(_24),
            StorageLive(_22),
            _22 = move (_24.0: util::start::StartByteMap),
            StorageLive(_23),
            _23 = (_24.1: usize),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &(*_1),
            StorageLive(_37),
            StorageLive(_38),
            _38 = _23,
            _37 = core::ops::RangeFrom::<usize> { start: move _38 },
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1863:23: 1863:29 (#0),
                    scope: scope[7],
                },
                kind: _35 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _36, move _37) -> [return: bb18, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = move ((_25 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_31),
            _31 = move _29,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1862:31: 1862:63 (#2911),
                    scope: scope[9],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _31) -> [return: bb17, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb135,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            _34 = &(*_35),
            _33 = &(*_34),
            _1 = move _33,
            StorageDead(_33),
            StorageDead(_35),
            StorageDead(_34),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1866:13: 1866:76 (#0),
                    scope: scope[7],
                },
                kind: _43 = util::wire::try_read_u32_as_usize(move _44, const "sparse start table stride") -> [return: bb19, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1866:13: 1866:77 (#2913),
                    scope: scope[7],
                },
                kind: _42 = <core::result::Result<(usize, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _43) -> [return: bb20, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            PlaceMention(_42),
            _45 = discriminant(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1866:13: 1866:77 (#2913),
                    scope: scope[7],
                },
                kind: switchInt(move _45) -> [0: bb23, 1: bb22, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1866:13: 1866:77 (#2913),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1866:76: 1866:77 (#2914),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_49),
            _49 = ((_42 as Continue).0: (usize, usize)),
            _41 = _49,
            StorageDead(_49),
            PlaceMention(_41),
            StorageLive(_39),
            _39 = (_41.0: usize),
            StorageLive(_40),
            _40 = (_41.1: usize),
            StorageDead(_42),
            StorageDead(_41),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &(*_1),
            StorageLive(_54),
            StorageLive(_55),
            _55 = _40,
            _54 = core::ops::RangeFrom::<usize> { start: move _55 },
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1867:23: 1867:29 (#0),
                    scope: scope[12],
                },
                kind: _52 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _53, move _54) -> [return: bb26, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            _46 = move ((_42 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_48),
            _48 = move _46,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1866:13: 1866:77 (#2913),
                    scope: scope[14],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _48) -> [return: bb25, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_46),
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
            _51 = &(*_52),
            _50 = &(*_51),
            _1 = move _50,
            StorageDead(_50),
            StorageDead(_52),
            StorageDead(_51),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = _39,
            StorageLive(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1868:22: 1868:34 (#0),
                    scope: scope[12],
                },
                kind: _59 = util::start::Start::len() -> [return: bb27, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _57 = Ne(move _58, move _59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1868:12: 1868:34 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _57) -> [0: bb30, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageDead(_58),
            StorageLive(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1869:24: 1871:14 (#0),
                    scope: scope[12],
                },
                kind: _61 = util::wire::DeserializeError::generic(const "invalid sparse starting table stride") -> [return: bb29, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError>::Err(move _61),
            StorageDead(_61),
            StorageDead(_57),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb133,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageDead(_58),
            _56 = const (),
            StorageDead(_57),
            StorageDead(_56),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            _67 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1875:13: 1875:78 (#0),
                    scope: scope[12],
                },
                kind: _66 = util::wire::try_read_u32_as_usize(move _67, const "sparse start table patterns") -> [return: bb31, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1875:13: 1875:79 (#2916),
                    scope: scope[12],
                },
                kind: _65 = <core::result::Result<(usize, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _66) -> [return: bb32, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            PlaceMention(_65),
            _68 = discriminant(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1875:13: 1875:79 (#2916),
                    scope: scope[12],
                },
                kind: switchInt(move _68) -> [0: bb35, 1: bb34, otherwise: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1875:13: 1875:79 (#2916),
                    scope: scope[12],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1875:78: 1875:79 (#2917),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb36, imaginary: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_72),
            _72 = ((_65 as Continue).0: (usize, usize)),
            _64 = _72,
            StorageDead(_72),
            PlaceMention(_64),
            StorageLive(_62),
            _62 = (_64.0: usize),
            StorageLive(_63),
            _63 = (_64.1: usize),
            StorageDead(_65),
            StorageDead(_64),
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            _76 = &(*_1),
            StorageLive(_77),
            StorageLive(_78),
            _78 = _63,
            _77 = core::ops::RangeFrom::<usize> { start: move _78 },
            StorageDead(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1876:23: 1876:29 (#0),
                    scope: scope[17],
                },
                kind: _75 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _76, move _77) -> [return: bb38, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_69),
            _69 = move ((_65 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_71),
            _71 = move _69,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1875:13: 1875:79 (#2916),
                    scope: scope[19],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _71) -> [return: bb37, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_69),
            StorageDead(_65),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb133,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_76),
            _74 = &(*_75),
            _73 = &(*_74),
            _1 = move _73,
            StorageDead(_73),
            StorageDead(_75),
            StorageDead(_74),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            StorageLive(_82),
            _82 = _62,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1877:30: 1877:56 (#0),
                    scope: scope[17],
                },
                kind: _81 = <usize as util::int::Usize>::as_u32(move _82) -> [return: bb39, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            _80 = Eq(move _81, const core::num::<impl u32>::MAX),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1877:30: 1877:68 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _80) -> [0: bb41, otherwise: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            _79 = core::option::Option::<usize>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1877:27: 1881:10 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageLive(_83),
            _83 = _62,
            _79 = core::option::Option::<usize>::Some(move _83),
            StorageDead(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1877:27: 1881:10 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            FakeRead(ForLet(None), _79),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            _86 = _79,
            StorageLive(_87),
            _87 = {closure@regex-automata/src/dfa/sparse.rs:1882:38: 1882:43},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1882:12: 1882:67 (#0),
                    scope: scope[22],
                },
                kind: _85 = core::option::Option::<usize>::map_or::<bool, {closure@regex-automata/src/dfa/sparse.rs:1882:38: 1882:43}>(move _86, const false, move _87) -> [return: bb43, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1882:12: 1882:67 (#0),
                    scope: scope[22],
                },
                kind: switchInt(move _85) -> [0: bb46, otherwise: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageDead(_86),
            StorageLive(_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1883:24: 1885:14 (#0),
                    scope: scope[22],
                },
                kind: _89 = util::wire::DeserializeError::generic(const "sparse invalid number of patterns") -> [return: bb45, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError>::Err(move _89),
            StorageDead(_89),
            StorageDead(_85),
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[22],
                },
                kind: goto -> bb132,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageDead(_86),
            _84 = const (),
            StorageDead(_85),
            StorageDead(_84),
            StorageLive(_92),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            _95 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1889:13: 1889:68 (#0),
                    scope: scope[22],
                },
                kind: _94 = util::wire::try_read_u32(move _95, const "universal unanchored start") -> [return: bb47, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1889:13: 1889:69 (#2920),
                    scope: scope[22],
                },
                kind: _93 = <core::result::Result<(u32, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _94) -> [return: bb48, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            PlaceMention(_93),
            _96 = discriminant(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1889:13: 1889:69 (#2920),
                    scope: scope[22],
                },
                kind: switchInt(move _96) -> [0: bb51, 1: bb50, otherwise: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1889:13: 1889:69 (#2920),
                    scope: scope[22],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1889:68: 1889:69 (#2921),
                    scope: scope[22],
                },
                kind: falseEdge -> [real: bb52, imaginary: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_100),
            _100 = ((_93 as Continue).0: (u32, usize)),
            _92 = _100,
            StorageDead(_100),
            PlaceMention(_92),
            StorageLive(_90),
            _90 = (_92.0: u32),
            StorageLive(_91),
            _91 = (_92.1: usize),
            StorageDead(_93),
            StorageDead(_92),
            StorageLive(_101),
            StorageLive(_102),
            StorageLive(_103),
            StorageLive(_104),
            _104 = &(*_1),
            StorageLive(_105),
            StorageLive(_106),
            _106 = _91,
            _105 = core::ops::RangeFrom::<usize> { start: move _106 },
            StorageDead(_106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1890:23: 1890:29 (#0),
                    scope: scope[23],
                },
                kind: _103 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _104, move _105) -> [return: bb54, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_97),
            _97 = move ((_93 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_99),
            _99 = move _97,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1889:13: 1889:69 (#2920),
                    scope: scope[25],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _99) -> [return: bb53, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            StorageDead(_97),
            StorageDead(_93),
            StorageDead(_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[22],
                },
                kind: goto -> bb132,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            StorageDead(_104),
            _102 = &(*_103),
            _101 = &(*_102),
            _1 = move _101,
            StorageDead(_101),
            StorageDead(_103),
            StorageDead(_102),
            StorageLive(_107),
            StorageLive(_108),
            StorageLive(_109),
            _109 = _90,
            _108 = Eq(move _109, const core::num::<impl u32>::MAX),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1891:45: 1891:77 (#0),
                    scope: scope[23],
                },
                kind: switchInt(move _108) -> [0: bb56, otherwise: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            _107 = core::option::Option::<util::primitives::StateID>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1891:42: 1900:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageLive(_110),
            StorageLive(_111),
            StorageLive(_112),
            StorageLive(_113),
            StorageLive(_114),
            _114 = _90,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1894:18: 1894:57 (#0),
                    scope: scope[23],
                },
                kind: _113 = <util::primitives::StateID as core::convert::TryFrom<u32>>::try_from(move _114) -> [return: bb57, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
            StorageLive(_115),
            _115 = {closure@regex-automata/src/dfa/sparse.rs:1894:66: 1894:69},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1894:18: 1899:15 (#0),
                    scope: scope[23],
                },
                kind: _112 = core::result::Result::<util::primitives::StateID, util::primitives::StateIDError>::map_err::<util::wire::DeserializeError, {closure@regex-automata/src/dfa/sparse.rs:1894:66: 1894:69}>(move _113, move _115) -> [return: bb58, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            StorageDead(_113),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1894:18: 1899:16 (#2923),
                    scope: scope[23],
                },
                kind: _111 = <core::result::Result<util::primitives::StateID, util::wire::DeserializeError> as core::ops::Try>::branch(move _112) -> [return: bb59, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            PlaceMention(_111),
            _116 = discriminant(_111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1894:18: 1899:16 (#2923),
                    scope: scope[23],
                },
                kind: switchInt(move _116) -> [0: bb62, 1: bb61, otherwise: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1894:18: 1899:16 (#2923),
                    scope: scope[23],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1899:15: 1899:16 (#2924),
                    scope: scope[23],
                },
                kind: falseEdge -> [real: bb63, imaginary: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_120),
            _120 = ((_111 as Continue).0: util::primitives::StateID),
            _110 = _120,
            StorageDead(_120),
            _107 = core::option::Option::<util::primitives::StateID>::Some(move _110),
            StorageDead(_110),
            StorageDead(_111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1891:42: 1900:10 (#0),
                    scope: scope[23],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_117),
            _117 = move ((_111 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_119),
            _119 = move _117,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1894:18: 1899:16 (#2923),
                    scope: scope[30],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _119) -> [return: bb64, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            StorageDead(_117),
            StorageDead(_110),
            StorageDead(_111),
            StorageDead(_108),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[23],
                },
                kind: goto -> bb131,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            FakeRead(ForLet(None), _107),
            StorageLive(_123),
            StorageLive(_124),
            StorageLive(_125),
            StorageLive(_126),
            _126 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1903:13: 1903:66 (#0),
                    scope: scope[28],
                },
                kind: _125 = util::wire::try_read_u32(move _126, const "universal anchored start") -> [return: bb66, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1903:13: 1903:67 (#2925),
                    scope: scope[28],
                },
                kind: _124 = <core::result::Result<(u32, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _125) -> [return: bb67, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
            PlaceMention(_124),
            _127 = discriminant(_124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1903:13: 1903:67 (#2925),
                    scope: scope[28],
                },
                kind: switchInt(move _127) -> [0: bb70, 1: bb69, otherwise: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1903:13: 1903:67 (#2925),
                    scope: scope[28],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1903:66: 1903:67 (#2926),
                    scope: scope[28],
                },
                kind: falseEdge -> [real: bb71, imaginary: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_131),
            _131 = ((_124 as Continue).0: (u32, usize)),
            _123 = _131,
            StorageDead(_131),
            PlaceMention(_123),
            StorageLive(_121),
            _121 = (_123.0: u32),
            StorageLive(_122),
            _122 = (_123.1: usize),
            StorageDead(_124),
            StorageDead(_123),
            StorageLive(_132),
            StorageLive(_133),
            StorageLive(_134),
            StorageLive(_135),
            _135 = &(*_1),
            StorageLive(_136),
            StorageLive(_137),
            _137 = _122,
            _136 = core::ops::RangeFrom::<usize> { start: move _137 },
            StorageDead(_137),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1904:23: 1904:29 (#0),
                    scope: scope[33],
                },
                kind: _134 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _135, move _136) -> [return: bb73, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_128),
            _128 = move ((_124 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_130),
            _130 = move _128,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1903:13: 1903:67 (#2925),
                    scope: scope[35],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _130) -> [return: bb72, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_130),
            StorageDead(_128),
            StorageDead(_124),
            StorageDead(_123),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[28],
                },
                kind: goto -> bb131,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_135),
            _133 = &(*_134),
            _132 = &(*_133),
            _1 = move _132,
            StorageDead(_132),
            StorageDead(_134),
            StorageDead(_133),
            StorageLive(_138),
            StorageLive(_139),
            StorageLive(_140),
            _140 = _121,
            _139 = Eq(move _140, const core::num::<impl u32>::MAX),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1905:43: 1905:73 (#0),
                    scope: scope[33],
                },
                kind: switchInt(move _139) -> [0: bb75, otherwise: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_140),
            _138 = core::option::Option::<util::primitives::StateID>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1905:40: 1911:10 (#0),
                    scope: scope[33],
                },
                kind: goto -> bb84,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_140),
            StorageLive(_141),
            StorageLive(_142),
            StorageLive(_143),
            StorageLive(_144),
            StorageLive(_145),
            _145 = _121,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1908:18: 1908:55 (#0),
                    scope: scope[33],
                },
                kind: _144 = <util::primitives::StateID as core::convert::TryFrom<u32>>::try_from(move _145) -> [return: bb76, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_145),
            StorageLive(_146),
            _146 = {closure@regex-automata/src/dfa/sparse.rs:1908:64: 1908:67},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1908:18: 1910:15 (#0),
                    scope: scope[33],
                },
                kind: _143 = core::result::Result::<util::primitives::StateID, util::primitives::StateIDError>::map_err::<util::wire::DeserializeError, {closure@regex-automata/src/dfa/sparse.rs:1908:64: 1908:67}>(move _144, move _146) -> [return: bb77, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_146),
            StorageDead(_144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1908:18: 1910:16 (#2928),
                    scope: scope[33],
                },
                kind: _142 = <core::result::Result<util::primitives::StateID, util::wire::DeserializeError> as core::ops::Try>::branch(move _143) -> [return: bb78, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
            PlaceMention(_142),
            _147 = discriminant(_142),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1908:18: 1910:16 (#2928),
                    scope: scope[33],
                },
                kind: switchInt(move _147) -> [0: bb81, 1: bb80, otherwise: bb79],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _142),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1908:18: 1910:16 (#2928),
                    scope: scope[33],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1910:15: 1910:16 (#2929),
                    scope: scope[33],
                },
                kind: falseEdge -> [real: bb82, imaginary: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_151),
            _151 = ((_142 as Continue).0: util::primitives::StateID),
            _141 = _151,
            StorageDead(_151),
            _138 = core::option::Option::<util::primitives::StateID>::Some(move _141),
            StorageDead(_141),
            StorageDead(_142),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1905:40: 1911:10 (#0),
                    scope: scope[33],
                },
                kind: goto -> bb84,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_148),
            _148 = move ((_142 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_150),
            _150 = move _148,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1908:18: 1910:16 (#2928),
                    scope: scope[40],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _150) -> [return: bb83, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_150),
            StorageDead(_148),
            StorageDead(_141),
            StorageDead(_142),
            StorageDead(_139),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[33],
                },
                kind: goto -> bb130,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_139),
            FakeRead(ForLet(None), _138),
            StorageLive(_152),
            StorageLive(_153),
            StorageLive(_154),
            StorageLive(_155),
            _155 = _39,
            StorageLive(_156),
            StorageLive(_157),
            _157 = _79,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1915:13: 1915:37 (#0),
                    scope: scope[38],
                },
                kind: _156 = core::option::Option::<usize>::unwrap_or(move _157, const 0_usize) -> [return: bb85, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1913:34: 1917:10 (#0),
                    scope: scope[38],
                },
                kind: _154 = util::wire::mul(move _155, move _156, const "sparse invalid pattern length") -> [return: bb86, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_156),
            StorageDead(_155),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1913:34: 1917:11 (#2930),
                    scope: scope[38],
                },
                kind: _153 = <core::result::Result<usize, util::wire::DeserializeError> as core::ops::Try>::branch(move _154) -> [return: bb87, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_154),
            PlaceMention(_153),
            _158 = discriminant(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1913:34: 1917:11 (#2930),
                    scope: scope[38],
                },
                kind: switchInt(move _158) -> [0: bb90, 1: bb89, otherwise: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1913:34: 1917:11 (#2930),
                    scope: scope[38],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1917:10: 1917:11 (#2931),
                    scope: scope[38],
                },
                kind: falseEdge -> [real: bb91, imaginary: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_162),
            _162 = ((_153 as Continue).0: usize),
            _152 = _162,
            StorageDead(_162),
            FakeRead(ForLet(None), _152),
            StorageDead(_153),
            StorageLive(_163),
            StorageLive(_164),
            StorageLive(_165),
            StorageLive(_166),
            StorageLive(_167),
            StorageLive(_168),
            StorageLive(_169),
            _169 = _39,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1922:13: 1922:63 (#0),
                    scope: scope[43],
                },
                kind: _168 = util::wire::mul(const 2_usize, move _169, const "start state stride too big") -> [return: bb93, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_159),
            _159 = move ((_153 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_161),
            _161 = move _159,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1913:34: 1917:11 (#2930),
                    scope: scope[45],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _161) -> [return: bb92, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_161),
            StorageDead(_159),
            StorageDead(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[38],
                },
                kind: goto -> bb129,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_169),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1922:13: 1922:64 (#2934),
                    scope: scope[43],
                },
                kind: _167 = <core::result::Result<usize, util::wire::DeserializeError> as core::ops::Try>::branch(move _168) -> [return: bb94, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_168),
            PlaceMention(_167),
            _170 = discriminant(_167),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1922:13: 1922:64 (#2934),
                    scope: scope[43],
                },
                kind: switchInt(move _170) -> [0: bb97, 1: bb96, otherwise: bb95],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _167),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1922:13: 1922:64 (#2934),
                    scope: scope[43],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1922:63: 1922:64 (#2935),
                    scope: scope[43],
                },
                kind: falseEdge -> [real: bb98, imaginary: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_174),
            _174 = ((_167 as Continue).0: usize),
            _166 = _174,
            StorageDead(_174),
            StorageLive(_175),
            _175 = _152,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1921:31: 1925:10 (#0),
                    scope: scope[43],
                },
                kind: _165 = util::wire::add(move _166, move _175, const "sparse invalid 'any' pattern starts size") -> [return: bb100, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_171),
            _171 = move ((_167 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_173),
            _173 = move _171,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1922:13: 1922:64 (#2934),
                    scope: scope[50],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _173) -> [return: bb99, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_173),
            StorageDead(_171),
            StorageDead(_166),
            StorageDead(_165),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[43],
                },
                kind: goto -> bb127,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_175),
            StorageDead(_166),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1921:31: 1925:11 (#2932),
                    scope: scope[43],
                },
                kind: _164 = <core::result::Result<usize, util::wire::DeserializeError> as core::ops::Try>::branch(move _165) -> [return: bb101, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_165),
            PlaceMention(_164),
            _176 = discriminant(_164),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1921:31: 1925:11 (#2932),
                    scope: scope[43],
                },
                kind: switchInt(move _176) -> [0: bb104, 1: bb103, otherwise: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _164),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1921:31: 1925:11 (#2932),
                    scope: scope[43],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1925:10: 1925:11 (#2933),
                    scope: scope[43],
                },
                kind: falseEdge -> [real: bb105, imaginary: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_180),
            _180 = ((_164 as Continue).0: usize),
            _163 = _180,
            StorageDead(_180),
            FakeRead(ForLet(None), _163),
            StorageDead(_167),
            StorageDead(_164),
            StorageLive(_181),
            StorageLive(_182),
            StorageLive(_183),
            StorageLive(_184),
            _184 = _163,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1926:31: 1930:10 (#0),
                    scope: scope[48],
                },
                kind: _183 = util::wire::mul(move _184, const util::primitives::StateID::SIZE, const "sparse pattern table bytes length") -> [return: bb107, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_177),
            _177 = move ((_164 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_179),
            _179 = move _177,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1921:31: 1925:11 (#2932),
                    scope: scope[54],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _179) -> [return: bb106, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_179),
            StorageDead(_177),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[43],
                },
                kind: goto -> bb127,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_184),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1926:31: 1930:11 (#2936),
                    scope: scope[48],
                },
                kind: _182 = <core::result::Result<usize, util::wire::DeserializeError> as core::ops::Try>::branch(move _183) -> [return: bb108, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_183),
            PlaceMention(_182),
            _185 = discriminant(_182),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1926:31: 1930:11 (#2936),
                    scope: scope[48],
                },
                kind: switchInt(move _185) -> [0: bb111, 1: bb110, otherwise: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _182),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1926:31: 1930:11 (#2936),
                    scope: scope[48],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1930:10: 1930:11 (#2937),
                    scope: scope[48],
                },
                kind: falseEdge -> [real: bb112, imaginary: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_189),
            _189 = ((_182 as Continue).0: usize),
            _181 = _189,
            StorageDead(_189),
            FakeRead(ForLet(None), _181),
            StorageDead(_182),
            StorageLive(_190),
            StorageLive(_191),
            StorageLive(_192),
            StorageLive(_193),
            _193 = &(*_1),
            StorageLive(_194),
            _194 = _181,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1931:9: 1935:10 (#0),
                    scope: scope[57],
                },
                kind: _192 = util::wire::check_slice_len::<u8>(move _193, move _194, const "sparse start ID table") -> [return: bb114, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_186),
            _186 = move ((_182 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_188),
            _188 = move _186,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1926:31: 1930:11 (#2936),
                    scope: scope[59],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _188) -> [return: bb113, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_188),
            StorageDead(_186),
            StorageDead(_182),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[48],
                },
                kind: goto -> bb126,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_194),
            StorageDead(_193),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1931:9: 1935:11 (#2938),
                    scope: scope[57],
                },
                kind: _191 = <core::result::Result<(), util::wire::DeserializeError> as core::ops::Try>::branch(move _192) -> [return: bb115, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_192),
            PlaceMention(_191),
            _195 = discriminant(_191),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1931:9: 1935:11 (#2938),
                    scope: scope[57],
                },
                kind: switchInt(move _195) -> [0: bb118, 1: bb117, otherwise: bb116],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _191),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1931:9: 1935:11 (#2938),
                    scope: scope[57],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1935:10: 1935:11 (#2939),
                    scope: scope[57],
                },
                kind: falseEdge -> [real: bb119, imaginary: bb118],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_199),
            _199 = ((_191 as Continue).0: ()),
            _190 = _199,
            StorageDead(_199),
            StorageDead(_191),
            StorageDead(_190),
            StorageLive(_200),
            StorageLive(_201),
            StorageLive(_202),
            _202 = &(*_1),
            StorageLive(_203),
            StorageLive(_204),
            _204 = _181,
            _203 = core::ops::RangeTo::<usize> { end: move _204 },
            StorageDead(_204),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1936:27: 1936:46 (#0),
                    scope: scope[57],
                },
                kind: _201 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _202, move _203) -> [return: bb121, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_196),
            _196 = move ((_191 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>),
            StorageLive(_198),
            _198 = move _196,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1931:9: 1935:11 (#2938),
                    scope: scope[63],
                },
                kind: _0 = <core::result::Result<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _198) -> [return: bb120, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_198),
            StorageDead(_196),
            StorageDead(_191),
            StorageDead(_190),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[57],
                },
                kind: goto -> bb126,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_203),
            StorageDead(_202),
            _200 = &(*_201),
            FakeRead(ForLet(None), _200),
            StorageLive(_205),
            StorageLive(_206),
            StorageLive(_207),
            StorageLive(_208),
            _208 = &(*_1),
            StorageLive(_209),
            StorageLive(_210),
            _210 = _181,
            _209 = core::ops::RangeFrom::<usize> { start: move _210 },
            StorageDead(_210),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1937:23: 1937:42 (#0),
                    scope: scope[66],
                },
                kind: _207 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _208, move _209) -> [return: bb122, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_209),
            StorageDead(_208),
            _206 = &(*_207),
            _205 = &(*_206),
            _1 = move _205,
            StorageDead(_205),
            StorageDead(_207),
            StorageDead(_206),
            StorageLive(_211),
            StorageLive(_212),
            _212 = _200,
            StorageLive(_213),
            _213 = _5,
            StorageLive(_214),
            _214 = move _22,
            StorageLive(_215),
            _215 = _39,
            StorageLive(_216),
            _216 = _79,
            StorageLive(_217),
            _217 = _107,
            StorageLive(_218),
            _218 = _138,
            _211 = dfa::sparse::StartTable::<&[u8]> { table: move _212, kind: move _213, start_map: move _214, stride: move _215, pattern_len: move _216, universal_start_unanchored: move _217, universal_start_anchored: move _218 },
            StorageDead(_218),
            StorageDead(_217),
            StorageDead(_216),
            StorageDead(_215),
            StorageDead(_214),
            StorageDead(_213),
            StorageDead(_212),
            FakeRead(ForLet(None), _211),
            StorageLive(_219),
            StorageLive(_220),
            _220 = move _211,
            StorageLive(_221),
            StorageLive(_222),
            StorageLive(_223),
            StorageLive(_224),
            _224 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1948:17: 1948:31 (#0),
                    scope: scope[67],
                },
                kind: _223 = core::slice::<impl [u8]>::as_ptr(move _224) -> [return: bb123, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_224),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1948:17: 1948:42 (#0),
                    scope: scope[67],
                },
                kind: _222 = <*const u8 as util::int::Pointer>::as_usize(move _223) -> [return: bb124, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_223),
            StorageLive(_225),
            _225 = _2,
            _226 = SubWithOverflow(_222, _225),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1948:17: 1948:56 (#0),
                    scope: scope[67],
                },
                kind: assert(!move (_226.1: bool), "attempt to compute `{} - {}`, which would overflow", move _222, move _225) -> [success: bb125, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _221 = move (_226.0: usize),
            StorageDead(_225),
            StorageDead(_222),
            _219 = (move _220, move _221),
            StorageDead(_221),
            StorageDead(_220),
            _0 = core::result::Result::<(dfa::sparse::StartTable<&[u8]>, usize), util::wire::DeserializeError>::Ok(move _219),
            StorageDead(_219),
            StorageDead(_211),
            StorageDead(_201),
            StorageDead(_200),
            StorageDead(_181),
            StorageDead(_163),
            StorageDead(_152),
            StorageDead(_138),
            StorageDead(_122),
            StorageDead(_121),
            StorageDead(_107),
            StorageDead(_91),
            StorageDead(_90),
            StorageDead(_79),
            StorageDead(_63),
            StorageDead(_62),
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1949:6: 1949:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb137,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_181),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[48],
                },
                kind: goto -> bb128,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_167),
            StorageDead(_164),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[43],
                },
                kind: goto -> bb128,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_163),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[43],
                },
                kind: goto -> bb129,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_152),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[38],
                },
                kind: goto -> bb130,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_138),
            StorageDead(_122),
            StorageDead(_121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[28],
                },
                kind: goto -> bb131,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
            StorageDead(_91),
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[22],
                },
                kind: goto -> bb132,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            StorageDead(_63),
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb133,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb135,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb136,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1949:6: 1949:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb137,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1949:6: 1949:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:1854:5: 1949:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(dfa::sparse::StartTable<&'{erased} [u8]>, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1856:10: 1856:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/sparse.rs:1855:20: 1855:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1855:9: 1855:18 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1855:9: 1855:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1855:9: 1855:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1857:27: 1857:52 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1857:13: 1857:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1857:13: 1857:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1857:27: 1857:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1857:27: 1857:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                regex-automata/src/dfa/sparse.rs:1859:26: 1859:55 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1859:13: 1859:23 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::start::StartKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1859:14: 1859:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                regex-automata/src/dfa/sparse.rs:1859:26: 1859:55 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1859:13: 1859:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1859:20: 1859:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (dfa::start::StartKind, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1859:26: 1859:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, (dfa::start::StartKind, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1859:26: 1859:55 (#2909),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(dfa::start::StartKind, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1859:26: 1859:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1859:48: 1859:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1859:54: 1859:55 (#2910),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                regex-automata/src/dfa/sparse.rs:1859:26: 1859:55 (#2909),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1859:54: 1859:55 (#2910),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1859:54: 1859:55 (#2910),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1859:54: 1859:55 (#2910),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1859:54: 1859:55 (#2910),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                regex-automata/src/dfa/sparse.rs:1859:26: 1859:55 (#2909),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1859:26: 1859:55 (#2909),
                    },
                ),
            ),
        ),
        ty: (dfa::start::StartKind, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1859:26: 1859:55 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1860:17: 1860:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1860:17: 1860:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1860:23: 1860:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1860:18: 1860:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1860:24: 1860:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1860:24: 1860:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                regex-automata/src/dfa/sparse.rs:1862:31: 1862:63 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1862:13: 1862:28 (#0),
                    },
                ),
            ),
        ),
        ty: util::start::StartByteMap,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1862:14: 1862:23 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                regex-automata/src/dfa/sparse.rs:1862:31: 1862:63 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1862:13: 1862:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1862:25: 1862:27 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::start::StartByteMap, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1862:31: 1862:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, (util::start::StartByteMap, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1862:31: 1862:63 (#2911),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(util::start::StartByteMap, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1862:31: 1862:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1862:56: 1862:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1862:62: 1862:63 (#2912),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-automata/src/dfa/sparse.rs:1862:31: 1862:63 (#2911),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1862:62: 1862:63 (#2912),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1862:62: 1862:63 (#2912),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1862:62: 1862:63 (#2912),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1862:62: 1862:63 (#2912),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-automata/src/dfa/sparse.rs:1862:31: 1862:63 (#2911),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1862:31: 1862:63 (#2911),
                    },
                ),
            ),
        ),
        ty: (util::start::StartByteMap, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1862:31: 1862:63 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1863:17: 1863:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1863:17: 1863:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1863:23: 1863:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1863:18: 1863:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1863:24: 1863:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1863:24: 1863:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _41,
                                ),
                                regex-automata/src/dfa/sparse.rs:1866:13: 1866:77 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1865:13: 1865:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1865:14: 1865:20 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _41,
                                ),
                                regex-automata/src/dfa/sparse.rs:1866:13: 1866:77 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1865:13: 1865:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1865:22: 1865:24 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1866:13: 1866:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, (usize, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1866:13: 1866:77 (#2913),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(usize, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1866:13: 1866:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1866:41: 1866:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1866:76: 1866:77 (#2914),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _42,
                                ),
                                regex-automata/src/dfa/sparse.rs:1866:13: 1866:77 (#2913),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1866:76: 1866:77 (#2914),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1866:76: 1866:77 (#2914),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1866:76: 1866:77 (#2914),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1866:76: 1866:77 (#2914),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _42,
                                ),
                                regex-automata/src/dfa/sparse.rs:1866:13: 1866:77 (#2913),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1866:13: 1866:77 (#2913),
                    },
                ),
            ),
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1866:13: 1866:77 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1867:17: 1867:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1867:17: 1867:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1867:23: 1867:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1867:18: 1867:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1867:24: 1867:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1867:24: 1867:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1868:9: 1872:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1868:12: 1868:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1868:12: 1868:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1868:22: 1868:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1868:35: 1872:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1869:24: 1871:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _64,
                                ),
                                regex-automata/src/dfa/sparse.rs:1875:13: 1875:79 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1874:13: 1874:36 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1874:14: 1874:31 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _64,
                                ),
                                regex-automata/src/dfa/sparse.rs:1875:13: 1875:79 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1874:13: 1874:36 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1874:33: 1874:35 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1875:13: 1875:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, (usize, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1875:13: 1875:79 (#2916),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(usize, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1875:13: 1875:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1875:41: 1875:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1875:78: 1875:79 (#2917),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _65,
                                ),
                                regex-automata/src/dfa/sparse.rs:1875:13: 1875:79 (#2916),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1875:78: 1875:79 (#2917),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1875:78: 1875:79 (#2917),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1875:78: 1875:79 (#2917),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1875:78: 1875:79 (#2917),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _65,
                                ),
                                regex-automata/src/dfa/sparse.rs:1875:13: 1875:79 (#2916),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1875:13: 1875:79 (#2916),
                    },
                ),
            ),
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1875:13: 1875:79 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1876:17: 1876:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1876:17: 1876:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1876:23: 1876:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1876:18: 1876:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1876:24: 1876:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1876:24: 1876:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1877:27: 1881:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1877:13: 1877:24 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1877:13: 1877:24 (#0),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1877:30: 1877:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1877:30: 1877:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1877:30: 1877:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1880:18: 1880:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1882:9: 1886:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1882:12: 1882:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1882:12: 1882:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:784 ~ regex_automata[00dd]::dfa::sparse::{impl#11}::from_bytes_unchecked::{closure#0}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn((usize,)) -> bool, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1882:38: 1882:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1882:68: 1886:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::wire::DeserializeError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1883:24: 1885:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _92,
                                ),
                                regex-automata/src/dfa/sparse.rs:1889:13: 1889:69 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1888:13: 1888:39 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1888:14: 1888:34 (#0),
            scope: scope[22],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _92,
                                ),
                                regex-automata/src/dfa/sparse.rs:1889:13: 1889:69 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1888:13: 1888:39 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1888:36: 1888:38 (#0),
            scope: scope[22],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1889:13: 1889:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, (u32, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1889:13: 1889:69 (#2920),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(u32, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1889:13: 1889:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1889:32: 1889:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1889:68: 1889:69 (#2921),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _93,
                                ),
                                regex-automata/src/dfa/sparse.rs:1889:13: 1889:69 (#2920),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1889:68: 1889:69 (#2921),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1889:68: 1889:69 (#2921),
            scope: scope[22],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1889:68: 1889:69 (#2921),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1889:68: 1889:69 (#2921),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _93,
                                ),
                                regex-automata/src/dfa/sparse.rs:1889:13: 1889:69 (#2920),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1889:13: 1889:69 (#2920),
                    },
                ),
            ),
        ),
        ty: (u32, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1889:13: 1889:69 (#0),
            scope: scope[22],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1890:17: 1890:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1890:17: 1890:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1890:23: 1890:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1890:18: 1890:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1890:24: 1890:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1890:24: 1890:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1891:42: 1900:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1891:13: 1891:39 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1891:13: 1891:39 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1891:45: 1891:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1891:45: 1891:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1894:18: 1899:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1894:13: 1899:17 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1894:18: 1899:16 (#2923),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1894:13: 1899:17 (#0),
                },
            ),
        ),
        ty: core::result::Result<util::primitives::StateID, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1894:18: 1899:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1894:13: 1899:17 (#0),
                },
            ),
        ),
        ty: core::result::Result<util::primitives::StateID, util::primitives::StateIDError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1894:18: 1894:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1894:13: 1899:17 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1894:36: 1894:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1894:13: 1899:17 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:785 ~ regex_automata[00dd]::dfa::sparse::{impl#11}::from_bytes_unchecked::{closure#1}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn((util::primitives::StateIDError,)) -> util::wire::DeserializeError, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1894:66: 1899:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1899:15: 1899:16 (#2924),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _111,
                                ),
                                regex-automata/src/dfa/sparse.rs:1894:18: 1899:16 (#2923),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1899:15: 1899:16 (#2924),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1899:15: 1899:16 (#2924),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1894:13: 1899:17 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1899:15: 1899:16 (#2924),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1894:13: 1899:17 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1899:15: 1899:16 (#2924),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _111,
                                ),
                                regex-automata/src/dfa/sparse.rs:1894:18: 1899:16 (#2923),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1894:18: 1899:16 (#2923),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1894:18: 1899:16 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _123,
                                ),
                                regex-automata/src/dfa/sparse.rs:1903:13: 1903:67 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1902:13: 1902:37 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1902:14: 1902:32 (#0),
            scope: scope[28],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _123,
                                ),
                                regex-automata/src/dfa/sparse.rs:1903:13: 1903:67 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1902:13: 1902:37 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1902:34: 1902:36 (#0),
            scope: scope[28],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1903:13: 1903:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, (u32, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1903:13: 1903:67 (#2925),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(u32, usize), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1903:13: 1903:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1903:32: 1903:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1903:66: 1903:67 (#2926),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _124,
                                ),
                                regex-automata/src/dfa/sparse.rs:1903:13: 1903:67 (#2925),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1903:66: 1903:67 (#2926),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1903:66: 1903:67 (#2926),
            scope: scope[28],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1903:66: 1903:67 (#2926),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1903:66: 1903:67 (#2926),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _124,
                                ),
                                regex-automata/src/dfa/sparse.rs:1903:13: 1903:67 (#2925),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1903:13: 1903:67 (#2925),
                    },
                ),
            ),
        ),
        ty: (u32, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1903:13: 1903:67 (#0),
            scope: scope[28],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1904:17: 1904:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1904:17: 1904:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1904:23: 1904:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1904:18: 1904:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1904:24: 1904:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1904:24: 1904:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1905:40: 1911:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1905:13: 1905:37 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1905:13: 1905:37 (#0),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1905:43: 1905:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1905:43: 1905:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1908:18: 1910:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1908:13: 1910:17 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1908:18: 1910:16 (#2928),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1908:13: 1910:17 (#0),
                },
            ),
        ),
        ty: core::result::Result<util::primitives::StateID, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1908:18: 1910:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1908:13: 1910:17 (#0),
                },
            ),
        ),
        ty: core::result::Result<util::primitives::StateID, util::primitives::StateIDError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1908:18: 1908:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1908:13: 1910:17 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1908:36: 1908:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1908:13: 1910:17 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:786 ~ regex_automata[00dd]::dfa::sparse::{impl#11}::from_bytes_unchecked::{closure#2}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn((util::primitives::StateIDError,)) -> util::wire::DeserializeError, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1908:64: 1910:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1910:15: 1910:16 (#2929),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _142,
                                ),
                                regex-automata/src/dfa/sparse.rs:1908:18: 1910:16 (#2928),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1910:15: 1910:16 (#2929),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1910:15: 1910:16 (#2929),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1908:13: 1910:17 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1910:15: 1910:16 (#2929),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1908:13: 1910:17 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1910:15: 1910:16 (#2929),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _142,
                                ),
                                regex-automata/src/dfa/sparse.rs:1908:18: 1910:16 (#2928),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1908:18: 1910:16 (#2928),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1908:18: 1910:16 (#0),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1913:34: 1917:11 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1913:13: 1913:31 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1913:13: 1913:31 (#0),
            scope: scope[38],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1913:34: 1917:11 (#2930),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<usize, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1913:34: 1917:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1914:13: 1914:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1915:13: 1915:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1915:13: 1915:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1917:10: 1917:11 (#2931),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _153,
                                ),
                                regex-automata/src/dfa/sparse.rs:1913:34: 1917:11 (#2930),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1917:10: 1917:11 (#2931),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1917:10: 1917:11 (#2931),
            scope: scope[38],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1917:10: 1917:11 (#2931),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1917:10: 1917:11 (#2931),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _153,
                                ),
                                regex-automata/src/dfa/sparse.rs:1913:34: 1917:11 (#2930),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1913:34: 1917:11 (#2930),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1913:34: 1917:11 (#0),
            scope: scope[38],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1921:31: 1925:11 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1921:13: 1921:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1921:13: 1921:28 (#0),
            scope: scope[43],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1921:31: 1925:11 (#2932),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<usize, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1921:31: 1925:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1922:13: 1922:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1922:13: 1922:64 (#2934),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<usize, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1922:13: 1922:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1922:26: 1922:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1922:63: 1922:64 (#2935),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _167,
                                ),
                                regex-automata/src/dfa/sparse.rs:1922:13: 1922:64 (#2934),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1922:63: 1922:64 (#2935),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1922:63: 1922:64 (#2935),
            scope: scope[43],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1922:63: 1922:64 (#2935),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1922:63: 1922:64 (#2935),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _167,
                                ),
                                regex-automata/src/dfa/sparse.rs:1922:13: 1922:64 (#2934),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1922:13: 1922:64 (#2934),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1922:13: 1922:64 (#0),
            scope: scope[43],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1923:13: 1923:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1925:10: 1925:11 (#2933),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _164,
                                ),
                                regex-automata/src/dfa/sparse.rs:1921:31: 1925:11 (#2932),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1925:10: 1925:11 (#2933),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1925:10: 1925:11 (#2933),
            scope: scope[43],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1925:10: 1925:11 (#2933),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1925:10: 1925:11 (#2933),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _164,
                                ),
                                regex-automata/src/dfa/sparse.rs:1921:31: 1925:11 (#2932),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1921:31: 1925:11 (#2932),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1921:31: 1925:11 (#0),
            scope: scope[43],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1926:31: 1930:11 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1926:13: 1926:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1926:13: 1926:28 (#0),
            scope: scope[48],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1926:31: 1930:11 (#2936),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<usize, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1926:31: 1930:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1927:13: 1927:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1930:10: 1930:11 (#2937),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _182,
                                ),
                                regex-automata/src/dfa/sparse.rs:1926:31: 1930:11 (#2936),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1930:10: 1930:11 (#2937),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1930:10: 1930:11 (#2937),
            scope: scope[48],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1930:10: 1930:11 (#2937),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1930:10: 1930:11 (#2937),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _182,
                                ),
                                regex-automata/src/dfa/sparse.rs:1926:31: 1930:11 (#2936),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1926:31: 1930:11 (#2936),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1926:31: 1930:11 (#0),
            scope: scope[48],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1931:9: 1935:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1931:9: 1935:11 (#2938),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1931:9: 1935:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1932:13: 1932:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1933:13: 1933:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1935:10: 1935:11 (#2939),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _191,
                                ),
                                regex-automata/src/dfa/sparse.rs:1931:9: 1935:11 (#2938),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1935:10: 1935:11 (#2939),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1935:10: 1935:11 (#2939),
            scope: scope[57],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1935:10: 1935:11 (#2939),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1935:10: 1935:11 (#2939),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _191,
                                ),
                                regex-automata/src/dfa/sparse.rs:1931:9: 1935:11 (#2938),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1931:9: 1935:11 (#2938),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1931:9: 1935:11 (#0),
            scope: scope[57],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1936:21: 1936:46 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1936:13: 1936:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1936:13: 1936:18 (#0),
            scope: scope[57],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1936:27: 1936:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1936:22: 1936:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1936:28: 1936:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1936:30: 1936:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1937:17: 1937:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1937:17: 1937:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1937:23: 1937:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1937:18: 1937:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1937:24: 1937:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1937:24: 1937:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/sparse.rs:1939:18: 1947:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/sparse.rs:1939:13: 1939:15 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::sparse::StartTable<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1939:13: 1939:15 (#0),
            scope: scope[66],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1940:13: 1940:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: dfa::start::StartKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1941:13: 1941:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::start::StartByteMap,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1942:13: 1942:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1943:13: 1943:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1944:13: 1944:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1945:13: 1945:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1946:13: 1946:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (dfa::sparse::StartTable<&'{erased} [u8]>, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1948:12: 1948:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1948:9: 1948:58 (#0),
                },
            ),
        ),
        ty: dfa::sparse::StartTable<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1948:13: 1948:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1948:9: 1948:58 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1948:17: 1948:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1948:9: 1948:58 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1948:17: 1948:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1948:9: 1948:58 (#0),
                },
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1948:17: 1948:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1948:9: 1948:58 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1948:17: 1948:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/sparse.rs:1948:9: 1948:58 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1948:45: 1948:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:1948:17: 1948:56 (#0),
            scope: scope[0],
        },
    },
]