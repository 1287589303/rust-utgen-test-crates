[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2271:22: 2271:40 (#0),
                    scope: scope[0],
                },
                kind: _4 = util::captures::GroupInfoInner::pattern_len(move _5) -> [return: bb1, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2271:22: 2271:55 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::num::<impl usize>::checked_mul(move _4, const 2_usize) -> [return: bb2, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2271:22: 2271:64 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::option::Option::<usize>::unwrap(move _3) -> [return: bb3, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut ((*_1).0: std::vec::Vec<(util::primitives::SmallIndex, util::primitives::SmallIndex)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2273:13: 2273:40 (#0),
                    scope: scope[1],
                },
                kind: _11 = <std::vec::Vec<(util::primitives::SmallIndex, util::primitives::SmallIndex)> as core::ops::DerefMut>::deref_mut(move _12) -> [return: bb4, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &mut (*_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2273:13: 2273:40 (#0),
                    scope: scope[1],
                },
                kind: _9 = core::slice::<impl [(util::primitives::SmallIndex, util::primitives::SmallIndex)]>::iter_mut(move _10) -> [return: bb5, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#0),
                    scope: scope[1],
                },
                kind: _8 = <core::slice::IterMut<'_, (util::primitives::SmallIndex, util::primitives::SmallIndex)> as util::primitives::IteratorIndexExt>::with_pattern_ids(move _9) -> [return: bb6, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
                    scope: scope[1],
                },
                kind: _7 = <util::primitives::WithPatternIDIter<core::slice::IterMut<'_, (util::primitives::SmallIndex, util::primitives::SmallIndex)>> as core::iter::IntoIterator>::into_iter(move _8) -> [return: bb7, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            PlaceMention(_7),
            StorageLive(_13),
            _13 = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2272:9: 2289:10 (#4728),
                    scope: scope[2],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2272:9: 2289:10 (#4728),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb9, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut _13,
            _17 = &mut (*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
                    scope: scope[2],
                },
                kind: _16 = <util::primitives::WithPatternIDIter<core::slice::IterMut<'_, (util::primitives::SmallIndex, util::primitives::SmallIndex)>> as core::iter::Iterator>::next(move _17) -> [return: bb10, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            PlaceMention(_16),
            _19 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
                    scope: scope[2],
                },
                kind: switchInt(move _19) -> [0: bb12, 1: bb13, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2272:9: 2289:10 (#4728),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = (((_16 as Some).0: (util::primitives::PatternID, &mut (util::primitives::SmallIndex, util::primitives::SmallIndex))).0: util::primitives::PatternID),
            StorageLive(_22),
            _22 = &mut ((*(((_16 as Some).0: (util::primitives::PatternID, &mut (util::primitives::SmallIndex, util::primitives::SmallIndex))).1: &mut (util::primitives::SmallIndex, util::primitives::SmallIndex))).0: util::primitives::SmallIndex),
            StorageLive(_23),
            _23 = &mut ((*(((_16 as Some).0: (util::primitives::PatternID, &mut (util::primitives::SmallIndex, util::primitives::SmallIndex))).1: &mut (util::primitives::SmallIndex, util::primitives::SmallIndex))).1: util::primitives::SmallIndex),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &(*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2275:35: 2275:49 (#0),
                    scope: scope[3],
                },
                kind: _27 = util::primitives::SmallIndex::as_usize(move _28) -> [return: bb15, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = const (),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_65),
            _65 = (),
            _0 = core::result::Result::<(), util::captures::GroupInfoError>::Ok(move _65),
            StorageDead(_65),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2291:6: 2291:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &(*_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2275:52: 2275:68 (#0),
                    scope: scope[3],
                },
                kind: _29 = util::primitives::SmallIndex::as_usize(move _30) -> [return: bb16, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            _31 = SubWithOverflow(_27, _29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2275:34: 2275:69 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_31.1: bool), "attempt to compute `{} - {}`, which would overflow", move _27, move _29) -> [success: bb17, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = move (_31.0: usize),
            StorageDead(_29),
            StorageDead(_27),
            _32 = Eq(const 2_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2275:33: 2275:74 (#0),
                    scope: scope[3],
                },
                kind: assert(!move _32, "attempt to divide `{}` by zero", _26) -> [success: bb18, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = Div(move _26, const 2_usize),
            StorageDead(_26),
            _33 = AddWithOverflow(const 1_usize, _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2275:29: 2275:74 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_33.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, move _25) -> [success: bb19, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = move (_33.0: usize),
            StorageDead(_25),
            FakeRead(ForLet(None), _24),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &(*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2276:33: 2276:47 (#0),
                    scope: scope[4],
                },
                kind: _36 = util::primitives::SmallIndex::as_usize(move _37) -> [return: bb20, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageLive(_38),
            _38 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2276:33: 2276:67 (#0),
                    scope: scope[4],
                },
                kind: _35 = core::num::<impl usize>::checked_add(move _36, move _38) -> [return: bb21, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_36),
            PlaceMention(_35),
            _39 = discriminant(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2276:27: 2276:67 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _39) -> [0: bb24, 1: bb23, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2276:33: 2276:67 (#0),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2277:17: 2277:30 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            StorageLive(_43),
            _43 = _21,
            StorageLive(_44),
            _44 = _24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2279:32: 2281:22 (#0),
                    scope: scope[4],
                },
                kind: _42 = util::captures::GroupInfoError::too_many_groups(move _43, move _44) -> [return: bb26, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _40 = ((_35 as Some).0: usize),
            _34 = _40,
            StorageDead(_40),
            FakeRead(ForLet(None), _34),
            StorageDead(_35),
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = _34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2284:20: 2284:44 (#0),
                    scope: scope[5],
                },
                kind: _48 = util::primitives::SmallIndex::new(move _49) -> [return: bb28, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
            _0 = core::result::Result::<(), util::captures::GroupInfoError>::Err(move _42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2281:22: 2281:23 (#0),
                    scope: scope[4],
                },
                kind: drop(_42) -> [return: bb27, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &_21,
            StorageLive(_52),
            _52 = &_24,
            _50 = {closure@regex-automata/src/util/captures.rs:2284:53: 2284:56} { pid: move _51, group_len: move _52 },
            StorageDead(_52),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2284:20: 2286:15 (#0),
                    scope: scope[5],
                },
                kind: _47 = core::result::Result::<util::primitives::SmallIndex, util::primitives::SmallIndexError>::map_err::<util::captures::GroupInfoError, {closure@regex-automata/src/util/captures.rs:2284:53: 2284:56}>(move _48, move _50) -> [return: bb29, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2284:20: 2286:16 (#4731),
                    scope: scope[5],
                },
                kind: _46 = <core::result::Result<util::primitives::SmallIndex, util::captures::GroupInfoError> as core::ops::Try>::branch(move _47) -> [return: bb30, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            PlaceMention(_46),
            _53 = discriminant(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2284:20: 2286:16 (#4731),
                    scope: scope[5],
                },
                kind: switchInt(move _53) -> [0: bb33, 1: bb32, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2284:20: 2286:16 (#4731),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2286:15: 2286:16 (#4732),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_57),
            _57 = ((_46 as Continue).0: util::primitives::SmallIndex),
            _45 = _57,
            StorageDead(_57),
            (*_23) = move _45,
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2286:16: 2286:17 (#0),
                    scope: scope[5],
                },
                kind: drop(_46) -> [return: bb36, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_54),
            _54 = move ((_46 as Break).0: core::result::Result<core::convert::Infallible, util::captures::GroupInfoError>),
            StorageLive(_56),
            _56 = move _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2284:20: 2286:16 (#4731),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<(), util::captures::GroupInfoError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::captures::GroupInfoError>>>::from_residual(move _56) -> [return: bb35, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2286:15: 2286:16 (#4732),
                    scope: scope[5],
                },
                kind: drop(_54) -> [return: bb41, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = &(*_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2288:38: 2288:54 (#0),
                    scope: scope[5],
                },
                kind: _61 = util::primitives::SmallIndex::as_usize(move _62) -> [return: bb37, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageLive(_63),
            _63 = _2,
            _64 = AddWithOverflow(_61, _63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2288:38: 2288:63 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_64.1: bool), "attempt to compute `{} + {}`, which would overflow", move _61, move _63) -> [success: bb38, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _60 = move (_64.0: usize),
            StorageDead(_63),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2288:22: 2288:64 (#0),
                    scope: scope[5],
                },
                kind: _59 = util::primitives::SmallIndex::new(move _60) -> [return: bb39, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2288:22: 2288:73 (#0),
                    scope: scope[5],
                },
                kind: _58 = core::result::Result::<util::primitives::SmallIndex, util::primitives::SmallIndexError>::unwrap(move _59) -> [return: bb40, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            (*_22) = move _58,
            StorageDead(_58),
            _15 = const (),
            StorageDead(_34),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            _14 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2272:9: 2289:10 (#4728),
                    scope: scope[2],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2286:16: 2286:17 (#0),
                    scope: scope[5],
                },
                kind: drop(_46) -> [return: bb42, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2291:6: 2291:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2291:6: 2291:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2286:15: 2286:16 (#4731),
                    scope: scope[8],
                },
                kind: drop(_56) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2286:15: 2286:16 (#4732),
                    scope: scope[5],
                },
                kind: drop(_54) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2286:16: 2286:17 (#0),
                    scope: scope[5],
                },
                kind: drop(_46) -> [return: bb49, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2286:15: 2286:16 (#4731),
                    scope: scope[5],
                },
                kind: drop(_47) -> [return: bb49, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2266:5: 2291:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), util::captures::GroupInfoError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2266:40: 2266:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut util::captures::GroupInfoInner,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2266:26: 2266:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:2271:22: 2271:64 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2271:13: 2271:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2271:13: 2271:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2271:22: 2271:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2271:22: 2271:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::GroupInfoInner,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2271:22: 2271:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2272:9: 2289:10 (#4728),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::WithPatternIDIter<core::slice::IterMut<'{erased}, (util::primitives::SmallIndex, util::primitives::SmallIndex)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::WithPatternIDIter<core::slice::IterMut<'{erased}, (util::primitives::SmallIndex, util::primitives::SmallIndex)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::IterMut<'{erased}, (util::primitives::SmallIndex, util::primitives::SmallIndex)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2273:13: 2273:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [(util::primitives::SmallIndex, util::primitives::SmallIndex)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2273:13: 2273:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [(util::primitives::SmallIndex, util::primitives::SmallIndex)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2273:13: 2273:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(util::primitives::SmallIndex, util::primitives::SmallIndex), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2273:13: 2273:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
                    },
                ),
            ),
        ),
        ty: util::primitives::WithPatternIDIter<core::slice::IterMut<'{erased}, (util::primitives::SmallIndex, util::primitives::SmallIndex)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2266:5: 2291:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(util::primitives::PatternID, &'{erased} mut (util::primitives::SmallIndex, util::primitives::SmallIndex))>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::primitives::WithPatternIDIter<core::slice::IterMut<'{erased}, (util::primitives::SmallIndex, util::primitives::SmallIndex)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::primitives::WithPatternIDIter<core::slice::IterMut<'{erased}, (util::primitives::SmallIndex, util::primitives::SmallIndex)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2272:9: 2289:10 (#4728),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2272:9: 2289:10 (#4728),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2272:13: 2272:53 (#4730),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2272:14: 2272:17 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2272:13: 2272:53 (#4730),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2272:25: 2272:38 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                regex-automata/src/util/captures.rs:2273:13: 2273:59 (#4729),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2272:13: 2272:53 (#4730),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2272:40: 2272:51 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:2275:29: 2275:74 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2275:17: 2275:26 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2275:17: 2275:26 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2275:33: 2275:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2275:34: 2275:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2275:35: 2275:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2275:35: 2275:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2275:52: 2275:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2275:52: 2275:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2275:34: 2275:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2275:33: 2275:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2275:29: 2275:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/captures.rs:2276:27: 2283:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2276:17: 2276:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2276:17: 2276:24 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2276:33: 2276:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2276:33: 2276:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2276:33: 2276:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2276:60: 2276:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2277:17: 2277:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _35,
                                ),
                                regex-automata/src/util/captures.rs:2276:33: 2276:67 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2277:17: 2277:30 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2277:22: 2277:29 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:2279:21: 2281:23 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2279:21: 2281:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::captures::GroupInfoError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2279:32: 2281:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:2279:21: 2281:23 (#0),
                },
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2280:25: 2280:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:2279:21: 2281:23 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2280:30: 2280:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2284:20: 2286:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, util::captures::GroupInfoError>, util::primitives::SmallIndex>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2284:20: 2286:16 (#4731),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::SmallIndex, util::captures::GroupInfoError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2284:20: 2286:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::SmallIndex, util::primitives::SmallIndexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2284:20: 2284:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2284:36: 2284:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:3244 ~ regex_automata[00dd]::util::captures::{impl#8}::fixup_slot_ranges::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((util::primitives::SmallIndexError,)) -> util::captures::GroupInfoError, bound_vars: [] },
                (&'{erased} util::primitives::PatternID, &'{erased} usize),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2284:53: 2286:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2284:53: 2286:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2284:53: 2286:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2286:15: 2286:16 (#4732),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-automata/src/util/captures.rs:2284:20: 2286:16 (#4731),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2286:15: 2286:16 (#4732),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, util::captures::GroupInfoError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2286:15: 2286:16 (#4732),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2286:15: 2286:16 (#4732),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, util::captures::GroupInfoError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2286:15: 2286:16 (#4732),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-automata/src/util/captures.rs:2284:20: 2286:16 (#4731),
                            ),
                        ),
                        pat_span: regex-automata/src/util/captures.rs:2284:20: 2286:16 (#4731),
                    },
                ),
            ),
        ),
        ty: util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2284:20: 2286:16 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2288:22: 2288:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::SmallIndex, util::primitives::SmallIndexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2288:22: 2288:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2288:38: 2288:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2288:38: 2288:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2288:38: 2288:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2288:57: 2288:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2288:38: 2288:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2290:12: 2290:14 (#0),
            scope: scope[0],
        },
    },
]